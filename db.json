{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/avatar/avatar_1.jpg","path":"images/avatar/avatar_1.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"8958b09c91ad4249c507089a85259cb7b323c4c8","modified":1488812667888},{"_id":"source/baidu_verify_LjhEXUygCP.html","hash":"a2b8b5ff61caebec7239e9f29d2a14f07c299bc3","modified":1492910355898},{"_id":"source/googlecc4a5534aecf666a.html","hash":"b50d73a3da29bffa5f120bc1ec9ff60fe071c7e1","modified":1488812667896},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1488812667896},{"_id":"source/robots.txt","hash":"0385fc657415aaea98074023ec9a86cd51b5ea79","modified":1488812667896},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1488812667896},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1488812667896},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1488812667896},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1488812667904},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1488812667904},{"_id":"themes/next/_config.yml","hash":"d0d427a5cc029d449d0b244fff38080044172713","modified":1496417265981},{"_id":"source/favicon.ico","hash":"f52ddbc2d8d943cfcbb532d5f4bec8d8a4c4b95f","modified":1492849221910},{"_id":"source/service-worker.js","hash":"c368ce331bd93406555f812851be67cadfcc3f77","modified":1492849221920},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1488812667904},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1488812667904},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1488812667904},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1488812667904},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1488812667955},{"_id":"source/css/style.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812667896},{"_id":"source/_posts/git.md","hash":"e2abe9fbe4352dbe9d3dbea6f8fd20f004d99eec","modified":1488812667888},{"_id":"source/_posts/effective-java-一.md","hash":"ae30b004caf2777d981b23ec93adb4f0d2574647","modified":1488812667888},{"_id":"source/_posts/hello-world.md","hash":"977e579429ea4b5f4ab0a58ea55a18935cfd1c24","modified":1488812667888},{"_id":"source/_posts/loopback-one.md","hash":"d0a2f46b2925ecb6605c992c73ba1153886f4322","modified":1493043901284},{"_id":"source/_posts/DIY-hexo-theme-next.md","hash":"1fedb62b044c352f1982ddd7adc04454ca65f046","modified":1488812667888},{"_id":"source/_posts/mysql-record.md","hash":"8d9b13d24032ef66875b6665bc9ff944756ef627","modified":1492849221909},{"_id":"source/_posts/springboot-fileupdat- in-Filter-can't-get.md","hash":"8b692ee880e286dcd5994d9e973f9901b3e29f1a","modified":1492849221909},{"_id":"source/_posts/loopback-two.md","hash":"2c1937898e8d3443bf7d5f758966a2e02b7e73a3","modified":1488812667896},{"_id":"source/_posts/windows-use-oh-my-zsh.md","hash":"99d309d0352f3d1b343917b7798d2daba59acde8","modified":1492914602874},{"_id":"source/_posts/spring-boot-slf4j.md","hash":"c085776b2f2a22cc00143b20d43273462c9522fb","modified":1488812667896},{"_id":"source/about/index.md","hash":"3c0f59a085c95a8f587680985f94f61853cd7804","modified":1488812667896},{"_id":"source/categories/index.md","hash":"52e94fa498eab4193d653a3266707518882ca258","modified":1488812667896},{"_id":"source/photos/index.md","hash":"1dc4a8bd4e4ccb95dca1d2939084804ab0471f4f","modified":1492849221920},{"_id":"source/tags/index.md","hash":"53c9abbdc7f7fc6beace0de457804487d0473572","modified":1488812667896},{"_id":"source/_posts/karma-jasmine-build-an-automated-test-environment.md","hash":"6fe032674a02e0c5c30af43cb1e2d51ef8baa792","modified":1488812667896},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1488812667904},{"_id":"themes/next/languages/default.yml","hash":"fe00529a94bb2550194a31d178f5810b45014ab6","modified":1488812667904},{"_id":"themes/next/languages/en.yml","hash":"d02acdce503c86fbb01920ad22d31ec56fc285f1","modified":1488812667904},{"_id":"source/_posts/基于spring的类扫描器.md","hash":"9b3eead3a32837b2818c01b3ef4c454a1098a550","modified":1495460750940},{"_id":"source/_posts/自定义lopback的Appender时设置枚举属性.md","hash":"c5c9c6222b700fe07da7f062acfc408610c094e0","modified":1495465122804},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1488812667912},{"_id":"themes/next/languages/fr-FR.yml","hash":"91cf55b9d75879e72c8008d2659fe2ea993a4cca","modified":1488812667904},{"_id":"themes/next/languages/ru.yml","hash":"402e676252ab1fc4522257a578738cb9536eb077","modified":1488812667912},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1488812667912},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1488812667904},{"_id":"themes/next/languages/zh-CN.yml","hash":"dbc9e7671ca5f9f82de4a5ee446f245b8ebaf551","modified":1492849221922},{"_id":"themes/next/languages/zh-Hans.yml","hash":"7c7b92ec0da56955029bc27fd30529ab3dadf92e","modified":1492849221923},{"_id":"themes/next/languages/zh-tw.yml","hash":"18da1324d2212faca9a6e5e6ce98b419c86d4b0c","modified":1488812667912},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1488812667912},{"_id":"themes/next/layout/_layout.swig","hash":"b4ef30f7da073bf2a9052186f76e0e080de1c794","modified":1488812667912},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1488812667912},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1488812667954},{"_id":"themes/next/languages/zh-hk.yml","hash":"a59f3f3114f5eb4d170a76da4359307e8f5159a7","modified":1488812667912},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1488812667954},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1488812667956},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1488812667955},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1488812667953},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1488812667953},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1488812667954},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1488812667955},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1488812668056},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812668005},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1488812667912},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1488812667912},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1488812668056},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1488812667912},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1488812667912},{"_id":"themes/next/layout/_macro/post.swig","hash":"abfc88f34f2c0ae52229c4ffa577b00ad7cecdc6","modified":1488812667912},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1488812668056},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1488812667920},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1488812667920},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"262ff6586650cde3cfc4cb4533233cfe8dd6662f","modified":1488812667920},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5c8b1c65829e3cde63be79feeeaa87b0899d7085","modified":1496417393185},{"_id":"themes/next/layout/_partials/footer.swig","hash":"67e9eff424f7c17b38b803540dc2df7bada57b28","modified":1488812667920},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1488812667920},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1488812667920},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1488812667920},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1488812667928},{"_id":"themes/next/layout/_partials/head.swig","hash":"6e8a90ecd9661efe3515dd4f8f983660580420f9","modified":1488812667920},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"de152d8718a7a742becc776087563ecca7675959","modified":1488812667928},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1488812667928},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1488812667953},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1488812667957},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1488812667957},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1488812667957},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1488812667967},{"_id":"themes/next/layout/_partials/header.swig","hash":"d9b10a92fdccd57a0c0d6773831f9c1b0f1bb449","modified":1488812667920},{"_id":"source/images/avatar/avatar_1.jpg","hash":"0709fea9b505f14a24610765014507ef8c690741","modified":1488812667896},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1488812668005},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1488812668005},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1488812668005},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1488812668013},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1488812668013},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1488812668013},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1488812668013},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488812668013},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488812668013},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1488812668013},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1488812668013},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1488812668013},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1488812668013},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1488812668013},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812667944},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812667945},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812667989},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812667989},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812667997},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812668005},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812668005},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1488812667912},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"cd73b2503871f0b9c3df784c5faef6ef7314791d","modified":1488812667920},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1488812668013},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1488812667912},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1488812667920},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1488812667920},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1488812667920},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1488812667920},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1488812667920},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1488812667920},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1488812667920},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1488812667944},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1488812667945},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"188423f7df0eb8c99a03cb6741384415651c4665","modified":1488812667946},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"13703f5c9dac30c71b34413ccf9156a6ee05a785","modified":1496415224579},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1488812667920},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1488812667952},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1488812667952},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1488812667989},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1488812667951},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1488812667952},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"d446354a556fa43248cecdae22e4d54ced6b8cd4","modified":1488812667951},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1488812667997},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1488812667997},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1488812668005},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"d7826b48a20162835450495db534d353ac52e476","modified":1488812668005},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1488812668029},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1488812668021},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1488812668029},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1488812668029},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1488812668029},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1488812668037},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1488812668037},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1488812668029},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1488812668037},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1488812668048},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1488812668050},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1488812668051},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1488812668050},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1488812668051},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1488812668052},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1488812668054},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1488812668052},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1488812668055},{"_id":"themes/next/source/css/_variables/base.styl","hash":"4c4298a7011841d9ee2aec5bd192df5730b08517","modified":1488812668005},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1488812668056},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1488812668056},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1488812668013},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1488812668013},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1488812668013},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1488812668013},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1488812668056},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1488812668013},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1488812668013},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1488812668021},{"_id":"themes/next/source/js/src/utils.js","hash":"2cffd45d678567d694af32998eccf1b1275b4965","modified":1488812668021},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1488812668049},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1488812667947},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1488812667948},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1488812667948},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1488812667948},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1488812667949},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"be859b88638b286e66e6842efeb9970b28a9d5f6","modified":1488812667950},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1488812668029},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1488812667946},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1488812667947},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1488812667950},{"_id":"themes/next/layout/_scripts/third-party/comments/uyan.swig","hash":"a9835b9ad539fd1ca611843d0845ccf77e139bcb","modified":1496415107214},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1488812667950},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1488812667969},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1488812667970},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1488812667970},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1488812667969},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1488812667981},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1488812667989},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1488812667997},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1488812667989},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1488812667997},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1488812667989},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1488812667997},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1488812667989},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1488812668005},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1488812667989},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1488812667989},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1488812668005},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1488812668005},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1488812668005},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1488812668005},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1488812668005},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1488812668005},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"338e9475519ce72af29a1bc05610f9f486e0f1c2","modified":1488812668005},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488812668021},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488812668021},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488812668021},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488812668021},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488812668021},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1488812668005},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1488812668029},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488812668021},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1488812668029},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1488812668029},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1488812668029},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1488812668029},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1488812668037},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1488812668054},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"550d2997a5e615bdcd1a3321b8f0d1f016ef215d","modified":1488812668013},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1488812668037},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1488812668053},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1488812668037},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1488812668037},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1488812668037},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1488812668048},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1488812668047},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1488812667971},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1488812667971},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1488812667971},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1488812667972},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1488812667972},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"e2066dd20747e3125c969ef8459d0015fa5233a2","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"74e9989a10fc682388cbd25ff7df0d7d4025fb8c","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"cd2def16d31feb234be27dcdce2a919f70cc6919","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1488812667989},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1488812667989},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1488812667989},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1488812667989},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4f1e9d96940aa3e42d58fb63a26d4fa260323b0d","modified":1488812667989},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1488812668005},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1488812667981},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488812668021},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1488812667981},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1488812668029},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1488812668029},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1488812668029},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1488812667981},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1488812668046},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1488812668056},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1488812668029},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1488812668029},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1488812668021},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1488812668037},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"dc2030e97bea81d5579cc0211267a9293fdced16","modified":1496417425572}],"Category":[{"name":"git","_id":"cj3fyy5if0006xwb1upqu0l3q"},{"name":"java","_id":"cj3fyy5ny000exwb1ulqzvmw0"},{"name":"loopback","_id":"cj3fyy5o7000lxwb1g6rf3u1c"},{"name":"hexo","_id":"cj3fyy5oc000rxwb1fxgzy970"},{"name":"mysql","_id":"cj3fyy5oi000yxwb1zokiy6tu"},{"name":"springboot","_id":"cj3fyy5ok0014xwb1jbwfrtux"},{"name":"other","_id":"cj3fyy5ok0018xwb10ss9oiqt"},{"name":"test","_id":"cj3fyy5os001dxwb1yd0ywy2g"},{"name":"spring","_id":"cj3fyy5os001ixwb16pxmqqaw"},{"name":"logback","_id":"cj3fyy5os001mxwb1222k7yqs"}],"Data":[],"Page":[{"title":"404","date":"2016-11-29T10:36:34.000Z","comments":0,"_content":"404\n","source":"404.md","raw":"---\ntitle: 404\ndate: 2016-11-29 18:36:34\ncomments: false\n---\n404\n","updated":"2017-03-06T15:04:27.888Z","path":"404.html","layout":"page","_id":"cj3fyy5ej0000xwb1bvnyt5ls","content":"<p>404</p>\n","excerpt":"","more":"<p>404</p>\n"},{"layout":"false","_content":"google-site-verification: googlecc4a5534aecf666a.html\n","source":"googlecc4a5534aecf666a.html","raw":"---\nlayout: false\n---\ngoogle-site-verification: googlecc4a5534aecf666a.html\n","date":"2017-03-06T15:04:27.896Z","updated":"2017-03-06T15:04:27.896Z","path":"googlecc4a5534aecf666a.html","title":"","comments":1,"_id":"cj3fyy5ez0001xwb14ycodscl","content":"google-site-verification: googlecc4a5534aecf666a.html\n","excerpt":"","more":"google-site-verification: googlecc4a5534aecf666a.html\n"},{"_content":"LjhEXUygCP","source":"baidu_verify_LjhEXUygCP.html","raw":"LjhEXUygCP","date":"2017-04-23T01:19:15.898Z","updated":"2017-04-23T01:19:15.898Z","path":"baidu_verify_LjhEXUygCP.html","title":"","comments":1,"layout":"page","_id":"cj3fyy5ez0002xwb1flot78w9","content":"LjhEXUygCP","excerpt":"","more":"LjhEXUygCP"},{"_content":"\nvar cacheName = 'xyz32-service-worker-v0.1';\nvar filesToCache = [\n    'https://blog.xyz327.cn/',\n    'https://blog.xyz327.cn/js/src/utils.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/motion.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/affix.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/schemes/pisces.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/bootstrap.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/hook-duoshuo.js?v=5.1.0',\n    'https://blog.xyz327.cn/images/avatar/avatar_1.jpg',\n    'https://blog.xyz327.cn/css/style.css?v=5.1.0',\n    'https://blog.xyz327.cn/css/main.css?v=5.1.0',\n\n    'https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css',\n    'https://fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext',\n    'https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css',\n    'https://cdn.bootcss.com/jquery/2.1.3/jquery.min.js',\n    'https://cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js',\n    'https://cdn.bootcss.com/jquery_lazyload/1.9.7/jquery.lazyload.min.js',\n    'https://cdn.bootcss.com/velocity/1.2.1/velocity.min.js',\n    'https://cdn.bootcss.com/velocity/1.2.1/velocity.ui.min.js',\n    'https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.pack.js',\n    'https://cdn.bootcss.com/UAParser.js/0.7.9/ua-parser.min.js',\n    'https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js',\n    'https://fonts.gstatic.com/s/lato/v13/1YwB1sO8YE1Lyjf12WNiUA.woff2',\n    'https://cdn.bootcss.com/font-awesome/4.7.0/fonts/fontawesome-webfont.woff2?v=4.7.0',\n    'https://fonts.gstatic.com/s/lato/v13/H2DMvhDLycM56KNuAtbJYA.woff2',\n    'https://fonts.gstatic.com/s/lato/v13/PLygLKRVCQnA5fhu3qk5fQ.woff2'\n];\n\nself.addEventListener('install', function(e) {\n  console.log('[ServiceWorker] Install');\n  e.waitUntil(\n    caches.open(cacheName).then(function(cache) {\n      console.log('[ServiceWorker] Caching app shell');\n      return cache.addAll(filesToCache);\n    })\n  );\n});\n\nself.addEventListener('activate', function(e) {\n  console.log('[ServiceWorker] Activate');\n  e.waitUntil(\n    caches.keys().then(function(keyList) {\n      return Promise.all(keyList.map(function(key) {\n        console.log('[ServiceWorker] Removing old cache', key);\n        if (key !== cacheName) {\n          return caches.delete(key);\n        }\n      }));\n    })\n  );\n});\n\nself.addEventListener('fetch', function(e) {\n  console.log('[Service Worker] Fetch', e.request.url);\n\n//  var allDataUrl = extendDataUrl.concat(filesToCache);\n  var url = e.request.url//.split('?')[0];\n  var excludeUrls = ['https://hm.baidu.com','https://sp0.baidu.com', 'chrome-extension']\n  for (var index in excludeUrls) {\n    if (excludeUrls.hasOwnProperty(index)) {\n      var element = excludeUrls[index];\n      if(url.indexOf(url) === 0){\n        //不做处理\n        //e.respondWith(fetch(e.request));\n        return;\n      }\n    }\n  }\n  if(e.request.method === 'GET'){\n    e.respondWith(\n      caches.match(e.request).then(function(response) {\n        return response || fetch(e.request).then(function (response) {\n          return caches.open(cacheName).then(function(cache){\n            cache.put(e.request.url, response.clone());\n            console.log('[ServiceWorker] Fetched&Cached Data');\n            return response;\n          })\n        });\n      })\n    );\n    /*e.respondWith(fetch(e.request).then(function (response) {\n      return caches.open(cacheName).then(function(cache){\n        cache.put(e.request.url, response.clone());\n        console.log('[ServiceWorker] Fetched&Cached Data');\n        return response;\n      })\n    }));*/\n  } else {\n    e.respondWith(fetch(e.request));\n  }\n\n});\n","source":"service-worker.js","raw":"\nvar cacheName = 'xyz32-service-worker-v0.1';\nvar filesToCache = [\n    'https://blog.xyz327.cn/',\n    'https://blog.xyz327.cn/js/src/utils.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/motion.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/affix.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/schemes/pisces.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/bootstrap.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/hook-duoshuo.js?v=5.1.0',\n    'https://blog.xyz327.cn/images/avatar/avatar_1.jpg',\n    'https://blog.xyz327.cn/css/style.css?v=5.1.0',\n    'https://blog.xyz327.cn/css/main.css?v=5.1.0',\n\n    'https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css',\n    'https://fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext',\n    'https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css',\n    'https://cdn.bootcss.com/jquery/2.1.3/jquery.min.js',\n    'https://cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js',\n    'https://cdn.bootcss.com/jquery_lazyload/1.9.7/jquery.lazyload.min.js',\n    'https://cdn.bootcss.com/velocity/1.2.1/velocity.min.js',\n    'https://cdn.bootcss.com/velocity/1.2.1/velocity.ui.min.js',\n    'https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.pack.js',\n    'https://cdn.bootcss.com/UAParser.js/0.7.9/ua-parser.min.js',\n    'https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js',\n    'https://fonts.gstatic.com/s/lato/v13/1YwB1sO8YE1Lyjf12WNiUA.woff2',\n    'https://cdn.bootcss.com/font-awesome/4.7.0/fonts/fontawesome-webfont.woff2?v=4.7.0',\n    'https://fonts.gstatic.com/s/lato/v13/H2DMvhDLycM56KNuAtbJYA.woff2',\n    'https://fonts.gstatic.com/s/lato/v13/PLygLKRVCQnA5fhu3qk5fQ.woff2'\n];\n\nself.addEventListener('install', function(e) {\n  console.log('[ServiceWorker] Install');\n  e.waitUntil(\n    caches.open(cacheName).then(function(cache) {\n      console.log('[ServiceWorker] Caching app shell');\n      return cache.addAll(filesToCache);\n    })\n  );\n});\n\nself.addEventListener('activate', function(e) {\n  console.log('[ServiceWorker] Activate');\n  e.waitUntil(\n    caches.keys().then(function(keyList) {\n      return Promise.all(keyList.map(function(key) {\n        console.log('[ServiceWorker] Removing old cache', key);\n        if (key !== cacheName) {\n          return caches.delete(key);\n        }\n      }));\n    })\n  );\n});\n\nself.addEventListener('fetch', function(e) {\n  console.log('[Service Worker] Fetch', e.request.url);\n\n//  var allDataUrl = extendDataUrl.concat(filesToCache);\n  var url = e.request.url//.split('?')[0];\n  var excludeUrls = ['https://hm.baidu.com','https://sp0.baidu.com', 'chrome-extension']\n  for (var index in excludeUrls) {\n    if (excludeUrls.hasOwnProperty(index)) {\n      var element = excludeUrls[index];\n      if(url.indexOf(url) === 0){\n        //不做处理\n        //e.respondWith(fetch(e.request));\n        return;\n      }\n    }\n  }\n  if(e.request.method === 'GET'){\n    e.respondWith(\n      caches.match(e.request).then(function(response) {\n        return response || fetch(e.request).then(function (response) {\n          return caches.open(cacheName).then(function(cache){\n            cache.put(e.request.url, response.clone());\n            console.log('[ServiceWorker] Fetched&Cached Data');\n            return response;\n          })\n        });\n      })\n    );\n    /*e.respondWith(fetch(e.request).then(function (response) {\n      return caches.open(cacheName).then(function(cache){\n        cache.put(e.request.url, response.clone());\n        console.log('[ServiceWorker] Fetched&Cached Data');\n        return response;\n      })\n    }));*/\n  } else {\n    e.respondWith(fetch(e.request));\n  }\n\n});\n","date":"2017-04-22T08:20:21.920Z","updated":"2017-04-22T08:20:21.920Z","path":"service-worker.js","layout":"false","title":"","comments":1,"_id":"cj3fyy5f70003xwb1s5rl2you","content":"\nvar cacheName = 'xyz32-service-worker-v0.1';\nvar filesToCache = [\n    'https://blog.xyz327.cn/',\n    'https://blog.xyz327.cn/js/src/utils.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/motion.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/affix.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/schemes/pisces.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/bootstrap.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/hook-duoshuo.js?v=5.1.0',\n    'https://blog.xyz327.cn/images/avatar/avatar_1.jpg',\n    'https://blog.xyz327.cn/css/style.css?v=5.1.0',\n    'https://blog.xyz327.cn/css/main.css?v=5.1.0',\n\n    'https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css',\n    'https://fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext',\n    'https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css',\n    'https://cdn.bootcss.com/jquery/2.1.3/jquery.min.js',\n    'https://cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js',\n    'https://cdn.bootcss.com/jquery_lazyload/1.9.7/jquery.lazyload.min.js',\n    'https://cdn.bootcss.com/velocity/1.2.1/velocity.min.js',\n    'https://cdn.bootcss.com/velocity/1.2.1/velocity.ui.min.js',\n    'https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.pack.js',\n    'https://cdn.bootcss.com/UAParser.js/0.7.9/ua-parser.min.js',\n    'https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js',\n    'https://fonts.gstatic.com/s/lato/v13/1YwB1sO8YE1Lyjf12WNiUA.woff2',\n    'https://cdn.bootcss.com/font-awesome/4.7.0/fonts/fontawesome-webfont.woff2?v=4.7.0',\n    'https://fonts.gstatic.com/s/lato/v13/H2DMvhDLycM56KNuAtbJYA.woff2',\n    'https://fonts.gstatic.com/s/lato/v13/PLygLKRVCQnA5fhu3qk5fQ.woff2'\n];\n\nself.addEventListener('install', function(e) {\n  console.log('[ServiceWorker] Install');\n  e.waitUntil(\n    caches.open(cacheName).then(function(cache) {\n      console.log('[ServiceWorker] Caching app shell');\n      return cache.addAll(filesToCache);\n    })\n  );\n});\n\nself.addEventListener('activate', function(e) {\n  console.log('[ServiceWorker] Activate');\n  e.waitUntil(\n    caches.keys().then(function(keyList) {\n      return Promise.all(keyList.map(function(key) {\n        console.log('[ServiceWorker] Removing old cache', key);\n        if (key !== cacheName) {\n          return caches.delete(key);\n        }\n      }));\n    })\n  );\n});\n\nself.addEventListener('fetch', function(e) {\n  console.log('[Service Worker] Fetch', e.request.url);\n\n//  var allDataUrl = extendDataUrl.concat(filesToCache);\n  var url = e.request.url//.split('?')[0];\n  var excludeUrls = ['https://hm.baidu.com','https://sp0.baidu.com', 'chrome-extension']\n  for (var index in excludeUrls) {\n    if (excludeUrls.hasOwnProperty(index)) {\n      var element = excludeUrls[index];\n      if(url.indexOf(url) === 0){\n        //不做处理\n        //e.respondWith(fetch(e.request));\n        return;\n      }\n    }\n  }\n  if(e.request.method === 'GET'){\n    e.respondWith(\n      caches.match(e.request).then(function(response) {\n        return response || fetch(e.request).then(function (response) {\n          return caches.open(cacheName).then(function(cache){\n            cache.put(e.request.url, response.clone());\n            console.log('[ServiceWorker] Fetched&Cached Data');\n            return response;\n          })\n        });\n      })\n    );\n    /*e.respondWith(fetch(e.request).then(function (response) {\n      return caches.open(cacheName).then(function(cache){\n        cache.put(e.request.url, response.clone());\n        console.log('[ServiceWorker] Fetched&Cached Data');\n        return response;\n      })\n    }));*/\n  } else {\n    e.respondWith(fetch(e.request));\n  }\n\n});\n","excerpt":"","more":"\nvar cacheName = 'xyz32-service-worker-v0.1';\nvar filesToCache = [\n    'https://blog.xyz327.cn/',\n    'https://blog.xyz327.cn/js/src/utils.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/motion.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/affix.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/schemes/pisces.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/bootstrap.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/hook-duoshuo.js?v=5.1.0',\n    'https://blog.xyz327.cn/images/avatar/avatar_1.jpg',\n    'https://blog.xyz327.cn/css/style.css?v=5.1.0',\n    'https://blog.xyz327.cn/css/main.css?v=5.1.0',\n\n    'https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css',\n    'https://fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext',\n    'https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css',\n    'https://cdn.bootcss.com/jquery/2.1.3/jquery.min.js',\n    'https://cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js',\n    'https://cdn.bootcss.com/jquery_lazyload/1.9.7/jquery.lazyload.min.js',\n    'https://cdn.bootcss.com/velocity/1.2.1/velocity.min.js',\n    'https://cdn.bootcss.com/velocity/1.2.1/velocity.ui.min.js',\n    'https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.pack.js',\n    'https://cdn.bootcss.com/UAParser.js/0.7.9/ua-parser.min.js',\n    'https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js',\n    'https://fonts.gstatic.com/s/lato/v13/1YwB1sO8YE1Lyjf12WNiUA.woff2',\n    'https://cdn.bootcss.com/font-awesome/4.7.0/fonts/fontawesome-webfont.woff2?v=4.7.0',\n    'https://fonts.gstatic.com/s/lato/v13/H2DMvhDLycM56KNuAtbJYA.woff2',\n    'https://fonts.gstatic.com/s/lato/v13/PLygLKRVCQnA5fhu3qk5fQ.woff2'\n];\n\nself.addEventListener('install', function(e) {\n  console.log('[ServiceWorker] Install');\n  e.waitUntil(\n    caches.open(cacheName).then(function(cache) {\n      console.log('[ServiceWorker] Caching app shell');\n      return cache.addAll(filesToCache);\n    })\n  );\n});\n\nself.addEventListener('activate', function(e) {\n  console.log('[ServiceWorker] Activate');\n  e.waitUntil(\n    caches.keys().then(function(keyList) {\n      return Promise.all(keyList.map(function(key) {\n        console.log('[ServiceWorker] Removing old cache', key);\n        if (key !== cacheName) {\n          return caches.delete(key);\n        }\n      }));\n    })\n  );\n});\n\nself.addEventListener('fetch', function(e) {\n  console.log('[Service Worker] Fetch', e.request.url);\n\n//  var allDataUrl = extendDataUrl.concat(filesToCache);\n  var url = e.request.url//.split('?')[0];\n  var excludeUrls = ['https://hm.baidu.com','https://sp0.baidu.com', 'chrome-extension']\n  for (var index in excludeUrls) {\n    if (excludeUrls.hasOwnProperty(index)) {\n      var element = excludeUrls[index];\n      if(url.indexOf(url) === 0){\n        //不做处理\n        //e.respondWith(fetch(e.request));\n        return;\n      }\n    }\n  }\n  if(e.request.method === 'GET'){\n    e.respondWith(\n      caches.match(e.request).then(function(response) {\n        return response || fetch(e.request).then(function (response) {\n          return caches.open(cacheName).then(function(cache){\n            cache.put(e.request.url, response.clone());\n            console.log('[ServiceWorker] Fetched&Cached Data');\n            return response;\n          })\n        });\n      })\n    );\n    /*e.respondWith(fetch(e.request).then(function (response) {\n      return caches.open(cacheName).then(function(cache){\n        cache.put(e.request.url, response.clone());\n        console.log('[ServiceWorker] Fetched&Cached Data');\n        return response;\n      })\n    }));*/\n  } else {\n    e.respondWith(fetch(e.request));\n  }\n\n});\n"},{"_content":"","source":"css/style.css","raw":"","date":"2017-03-06T15:04:27.896Z","updated":"2017-03-06T15:04:27.896Z","path":"css/style.css","layout":"false","title":"","comments":1,"_id":"cj3fyy5fn0004xwb1gmhfdy2a","content":"","excerpt":"","more":""},{"title":"about","date":"2016-11-29T10:36:34.000Z","comments":0,"_content":"about\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-11-29 18:36:34\ncomments: false\n---\nabout\n","updated":"2017-03-06T15:04:27.896Z","path":"about/index.html","layout":"page","_id":"cj3fyy5nq000bxwb1jqkg6ge7","content":"<p>about</p>\n","excerpt":"","more":"<p>about</p>\n"},{"title":"categories","date":"2016-11-29T08:22:40.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-29 16:22:40\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-03-06T15:04:27.896Z","path":"categories/index.html","layout":"page","_id":"cj3fyy5ny000dxwb1353134ka","content":"","excerpt":"","more":""},{"title":"photos","date":"2016-11-29T08:21:34.000Z","type":"photos","comments":0,"_content":"aadas","source":"photos/index.md","raw":"---\ntitle: photos\ndate: 2016-11-29 16:21:34\ntype: photos\ncomments: false\n---\naadas","updated":"2017-04-22T08:20:21.920Z","path":"photos/index.html","layout":"page","_id":"cj3fyy5ny000hxwb14o2iv89k","content":"<p>aadas</p>\n","excerpt":"","more":"<p>aadas</p>\n"},{"title":"tags","date":"2016-11-29T08:21:34.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-29 16:21:34\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-03-06T15:04:27.896Z","path":"tags/index.html","layout":"page","_id":"cj3fyy5ny000jxwb1gbw1rtfb","content":"","excerpt":"","more":""}],"Post":[{"title":"git操作记录","date":"2016-11-30T01:20:44.000Z","_content":"\n## 开始\n设置git\n```shell\n$ git config --global user.name \"xyz327\"   //给自己起个用户名\n$ git config --globla user.email  \"xyz327@outlook.com\"   //填写自己的邮箱\n```\n## 解决冲突\n1. 放弃本地修改，直接更新远端内容  \n```shell\ngit fetch --all\ngit reset --hard origin/master\n# git fetch 只是下载远程的库的内容，\n# 不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本\n```\n2.\n","source":"_posts/git.md","raw":"---\ntitle: git操作记录\ndate: 2016-11-30 09:20:44\ntags: git\ncategories: git\n---\n\n## 开始\n设置git\n```shell\n$ git config --global user.name \"xyz327\"   //给自己起个用户名\n$ git config --globla user.email  \"xyz327@outlook.com\"   //填写自己的邮箱\n```\n## 解决冲突\n1. 放弃本地修改，直接更新远端内容  \n```shell\ngit fetch --all\ngit reset --hard origin/master\n# git fetch 只是下载远程的库的内容，\n# 不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本\n```\n2.\n","slug":"git","published":1,"updated":"2017-03-06T15:04:27.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fyy5if0005xwb1twtyr4sf","content":"<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>设置git<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;xyz327&quot;   //给自己起个用户名</div><div class=\"line\">$ git config --globla user.email  &quot;xyz327@outlook.com&quot;   //填写自己的邮箱</div></pre></td></tr></table></figure></p>\n<h2 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h2><ol>\n<li>放弃本地修改，直接更新远端内容  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch --all</div><div class=\"line\">git reset --hard origin/master</div><div class=\"line\"># git fetch 只是下载远程的库的内容，</div><div class=\"line\"># 不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.</p>\n","excerpt":"","more":"<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>设置git<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;xyz327&quot;   //给自己起个用户名</div><div class=\"line\">$ git config --globla user.email  &quot;xyz327@outlook.com&quot;   //填写自己的邮箱</div></pre></td></tr></table></figure></p>\n<h2 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h2><ol>\n<li>放弃本地修改，直接更新远端内容  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch --all</div><div class=\"line\">git reset --hard origin/master</div><div class=\"line\"># git fetch 只是下载远程的库的内容，</div><div class=\"line\"># 不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.</p>\n"},{"title":"effective java(一)","date":"2016-03-14T13:52:18.000Z","_content":"## 考虑使用静态工厂方法代替构造器\n\n\n### 静态工厂方法相比构造器的<font color=\"red\">优势</font>：\n1. 它们有名称_。根据方法名字可以清楚的知道可以获得什么样子的对象\n2. 不必再每次调用的时候都创建一个新对象。\n3. 它们可以返回原返回类型的任何子类型的对象。    \n4. 在创建参数化类型实例的时候，它们是代码变得更加简洁    \n<!-- more -->\n```java\n         //Service provider framework sketch(描述)\n\n         //Service interface\n         public interface Service{\n            ...//service specific methods\n         }\n\n         //Service provider interface\n         public interface Provider{\n            public Service newService();\n         }\n\n         //noninstantiable(不可实例化的) class for service registration and success\n         public class Services{\n            //prevents instantiation (阻止实例化)\n            private Services{\n\n            }\n            //maps service name for services\n            private static final Map<String, Provider> providers =\n                new ConcurrentHashMap<String, Provider>();\n            //\n            public static final String DEFAULT_PROVIDER_NAME = \"<def>\";\n            //provider registration API\n            public static void registerDefaultProvider(Provider p){\n                registerProvider(DEFAULT_PROVIDER_NAME, p);\n            }\n            public static void registerProvider(String name, Provider p){\n                providers.put(name, p);\n            }\n\n            //Services access API\n            public static Service newInstance(){\n                return newInstance(DEFAULT_PROVIDER_NAME);\n            }\n            public static Service newInstance(String name){\n                Provider p = providers.get(name);\n                if(p == null){\n                    throw new IllegalArgumentException(\n                        \"No provider register with name :\" + name);\n                }\n                return p;\n            }\n         }\n\n```\n\n### 静态工厂方法的主要<font color=\"red\">缺点</font>:\n1. _类如果不含公有的或者受保护的构造器，就不能被子类化_\n2. _它们其他的静态方法实际上没有任何区别_\n    下面是静态工厂方法的一些惯用名称\n```java\n        valueOf  —————— 不太严格的讲，改方法返回的实例与它的参数具有相同的值。这样的静态工厂方法实际上是类型转换方法\n\n        of —————— valueOf 的一种更为简洁的替代，在EnummSet中使用并流行起来\n\n        getInstance —————— 返回的实例通过方法的参数描述的，但是不能够说与参数具有同样的值，对于singleton来说，该方法没有参数并返回唯一实例\n\n        newInstance —————— 与getInstance一样，但是newInstance能确保返回的每个实例都与其他实例不同\n\n        getType —————— 与getInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型\n\n        newType —————— 像newInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型\n\n```\n\n## 遇到多个构造器参数时考虑使用构建器\n\n```java\n\n    //Builder pattern\n    public class NutritionFacts{\n        private final int servingSize;\n        private final int servings;\n        private final int calories;\n        private final int fat;\n        private final int sodium;\n        private final int carbohydrate;\n\n        public static calss Builder{\n            //Required parameter\n            private final int servingSize;\n            private final int servings;\n\n            //optional parameter -- initialized to default value\n            private int calories = 0;\n            private int fat = 0;\n            private int carbohydrate = 0;\n            private int sodium = 0;\n\n            public Builder(int servingSize, int servings){\n                this.servingSize = servingSize;\n                this.servings = servings;\n            }\n            public Builder calories(int calories){\n                this.calories = calories;\n                return this;\n            }\n            public Builder fat(int fat){\n                this.fat = fat;\n                return this;\n            }\n            public Builder carbohydrate(int carbohydrate){\n                this.carbohydrate = carbohydrate;\n                return this;\n            }\n            public Builder sodium(int sodium){\n                this.sodium = sodium;\n                return this;\n            }\n\n            public NutritionFacts build(){\n                return this;\n            }\n        }\n        private NutritionFacts(Builder builder){\n            servingSize = builder.servingSize;\n            servings = builder.servings;\n            calories = builder.calories;\n            fat = build.fat;\n            sodium = build.sodium;\n            carbohydrate = build.carbohydrate;\n        }\n    }\n\n    //Test\n    NutritionFacts cocaCola = new NutritionFacts.Builder(240, 2).calories(2)\n                                .fat(2).carbohydrate(2).sodium(0).build();\n```\n","source":"_posts/effective-java-一.md","raw":"---\ntitle: effective java(一)\ndate: 2016-03-14 21:52:18\ntags: effective java\ncategories: java\n---\n## 考虑使用静态工厂方法代替构造器\n\n\n### 静态工厂方法相比构造器的<font color=\"red\">优势</font>：\n1. 它们有名称_。根据方法名字可以清楚的知道可以获得什么样子的对象\n2. 不必再每次调用的时候都创建一个新对象。\n3. 它们可以返回原返回类型的任何子类型的对象。    \n4. 在创建参数化类型实例的时候，它们是代码变得更加简洁    \n<!-- more -->\n```java\n         //Service provider framework sketch(描述)\n\n         //Service interface\n         public interface Service{\n            ...//service specific methods\n         }\n\n         //Service provider interface\n         public interface Provider{\n            public Service newService();\n         }\n\n         //noninstantiable(不可实例化的) class for service registration and success\n         public class Services{\n            //prevents instantiation (阻止实例化)\n            private Services{\n\n            }\n            //maps service name for services\n            private static final Map<String, Provider> providers =\n                new ConcurrentHashMap<String, Provider>();\n            //\n            public static final String DEFAULT_PROVIDER_NAME = \"<def>\";\n            //provider registration API\n            public static void registerDefaultProvider(Provider p){\n                registerProvider(DEFAULT_PROVIDER_NAME, p);\n            }\n            public static void registerProvider(String name, Provider p){\n                providers.put(name, p);\n            }\n\n            //Services access API\n            public static Service newInstance(){\n                return newInstance(DEFAULT_PROVIDER_NAME);\n            }\n            public static Service newInstance(String name){\n                Provider p = providers.get(name);\n                if(p == null){\n                    throw new IllegalArgumentException(\n                        \"No provider register with name :\" + name);\n                }\n                return p;\n            }\n         }\n\n```\n\n### 静态工厂方法的主要<font color=\"red\">缺点</font>:\n1. _类如果不含公有的或者受保护的构造器，就不能被子类化_\n2. _它们其他的静态方法实际上没有任何区别_\n    下面是静态工厂方法的一些惯用名称\n```java\n        valueOf  —————— 不太严格的讲，改方法返回的实例与它的参数具有相同的值。这样的静态工厂方法实际上是类型转换方法\n\n        of —————— valueOf 的一种更为简洁的替代，在EnummSet中使用并流行起来\n\n        getInstance —————— 返回的实例通过方法的参数描述的，但是不能够说与参数具有同样的值，对于singleton来说，该方法没有参数并返回唯一实例\n\n        newInstance —————— 与getInstance一样，但是newInstance能确保返回的每个实例都与其他实例不同\n\n        getType —————— 与getInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型\n\n        newType —————— 像newInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型\n\n```\n\n## 遇到多个构造器参数时考虑使用构建器\n\n```java\n\n    //Builder pattern\n    public class NutritionFacts{\n        private final int servingSize;\n        private final int servings;\n        private final int calories;\n        private final int fat;\n        private final int sodium;\n        private final int carbohydrate;\n\n        public static calss Builder{\n            //Required parameter\n            private final int servingSize;\n            private final int servings;\n\n            //optional parameter -- initialized to default value\n            private int calories = 0;\n            private int fat = 0;\n            private int carbohydrate = 0;\n            private int sodium = 0;\n\n            public Builder(int servingSize, int servings){\n                this.servingSize = servingSize;\n                this.servings = servings;\n            }\n            public Builder calories(int calories){\n                this.calories = calories;\n                return this;\n            }\n            public Builder fat(int fat){\n                this.fat = fat;\n                return this;\n            }\n            public Builder carbohydrate(int carbohydrate){\n                this.carbohydrate = carbohydrate;\n                return this;\n            }\n            public Builder sodium(int sodium){\n                this.sodium = sodium;\n                return this;\n            }\n\n            public NutritionFacts build(){\n                return this;\n            }\n        }\n        private NutritionFacts(Builder builder){\n            servingSize = builder.servingSize;\n            servings = builder.servings;\n            calories = builder.calories;\n            fat = build.fat;\n            sodium = build.sodium;\n            carbohydrate = build.carbohydrate;\n        }\n    }\n\n    //Test\n    NutritionFacts cocaCola = new NutritionFacts.Builder(240, 2).calories(2)\n                                .fat(2).carbohydrate(2).sodium(0).build();\n```\n","slug":"effective-java-一","published":1,"updated":"2017-03-06T15:04:27.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fyy5nq000axwb1d1cgwdrh","content":"<h2 id=\"考虑使用静态工厂方法代替构造器\"><a href=\"#考虑使用静态工厂方法代替构造器\" class=\"headerlink\" title=\"考虑使用静态工厂方法代替构造器\"></a>考虑使用静态工厂方法代替构造器</h2><h3 id=\"静态工厂方法相比构造器的优势：\"><a href=\"#静态工厂方法相比构造器的优势：\" class=\"headerlink\" title=\"静态工厂方法相比构造器的优势：\"></a>静态工厂方法相比构造器的<font color=\"red\">优势</font>：</h3><ol>\n<li>它们有名称_。根据方法名字可以清楚的知道可以获得什么样子的对象</li>\n<li>不必再每次调用的时候都创建一个新对象。</li>\n<li>它们可以返回原返回类型的任何子类型的对象。    </li>\n<li>在创建参数化类型实例的时候，它们是代码变得更加简洁    <a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Service provider framework sketch(描述)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Service interface</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Service</span></span>&#123;</div><div class=\"line\">   ...<span class=\"comment\">//service specific methods</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Service provider interface</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Provider</span></span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Service <span class=\"title\">newService</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//noninstantiable(不可实例化的) class for service registration and success</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Services</span></span>&#123;</div><div class=\"line\">   <span class=\"comment\">//prevents instantiation (阻止实例化)</span></div><div class=\"line\">   <span class=\"keyword\">private</span> Services&#123;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"comment\">//maps service name for services</span></div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, Provider&gt; providers =</div><div class=\"line\">       <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, Provider&gt;();</div><div class=\"line\">   <span class=\"comment\">//</span></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_PROVIDER_NAME = <span class=\"string\">\"&lt;def&gt;\"</span>;</div><div class=\"line\">   <span class=\"comment\">//provider registration API</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">registerDefaultProvider</span><span class=\"params\">(Provider p)</span></span>&#123;</div><div class=\"line\">       registerProvider(DEFAULT_PROVIDER_NAME, p);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">registerProvider</span><span class=\"params\">(String name, Provider p)</span></span>&#123;</div><div class=\"line\">       providers.put(name, p);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//Services access API</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Service <span class=\"title\">newInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> newInstance(DEFAULT_PROVIDER_NAME);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Service <span class=\"title\">newInstance</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">       Provider p = providers.get(name);</div><div class=\"line\">       <span class=\"keyword\">if</span>(p == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</div><div class=\"line\">               <span class=\"string\">\"No provider register with name :\"</span> + name);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> p;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"静态工厂方法的主要缺点\"><a href=\"#静态工厂方法的主要缺点\" class=\"headerlink\" title=\"静态工厂方法的主要缺点:\"></a>静态工厂方法的主要<font color=\"red\">缺点</font>:</h3><ol>\n<li><em>类如果不含公有的或者受保护的构造器，就不能被子类化</em></li>\n<li><em>它们其他的静态方法实际上没有任何区别</em><br> 下面是静态工厂方法的一些惯用名称<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">valueOf  —————— 不太严格的讲，改方法返回的实例与它的参数具有相同的值。这样的静态工厂方法实际上是类型转换方法</div><div class=\"line\"></div><div class=\"line\">of —————— valueOf 的一种更为简洁的替代，在EnummSet中使用并流行起来</div><div class=\"line\"></div><div class=\"line\">getInstance —————— 返回的实例通过方法的参数描述的，但是不能够说与参数具有同样的值，对于singleton来说，该方法没有参数并返回唯一实例</div><div class=\"line\"></div><div class=\"line\">newInstance —————— 与getInstance一样，但是newInstance能确保返回的每个实例都与其他实例不同</div><div class=\"line\"></div><div class=\"line\">getType —————— 与getInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型</div><div class=\"line\"></div><div class=\"line\">newType —————— 像newInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"遇到多个构造器参数时考虑使用构建器\"><a href=\"#遇到多个构造器参数时考虑使用构建器\" class=\"headerlink\" title=\"遇到多个构造器参数时考虑使用构建器\"></a>遇到多个构造器参数时考虑使用构建器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Builder pattern</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NutritionFacts</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servingSize;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servings;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> calories;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> fat;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> sodium;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> carbohydrate;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> calss Builder&#123;</div><div class=\"line\">        <span class=\"comment\">//Required parameter</span></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servingSize;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servings;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//optional parameter -- initialized to default value</span></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> calories = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> fat = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> carbohydrate = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sodium = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">(<span class=\"keyword\">int</span> servingSize, <span class=\"keyword\">int</span> servings)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.servingSize = servingSize;</div><div class=\"line\">            <span class=\"keyword\">this</span>.servings = servings;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">calories</span><span class=\"params\">(<span class=\"keyword\">int</span> calories)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.calories = calories;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">fat</span><span class=\"params\">(<span class=\"keyword\">int</span> fat)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.fat = fat;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">carbohydrate</span><span class=\"params\">(<span class=\"keyword\">int</span> carbohydrate)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.carbohydrate = carbohydrate;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">sodium</span><span class=\"params\">(<span class=\"keyword\">int</span> sodium)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.sodium = sodium;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> NutritionFacts <span class=\"title\">build</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">NutritionFacts</span><span class=\"params\">(Builder builder)</span></span>&#123;</div><div class=\"line\">        servingSize = builder.servingSize;</div><div class=\"line\">        servings = builder.servings;</div><div class=\"line\">        calories = builder.calories;</div><div class=\"line\">        fat = build.fat;</div><div class=\"line\">        sodium = build.sodium;</div><div class=\"line\">        carbohydrate = build.carbohydrate;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Test</span></div><div class=\"line\">NutritionFacts cocaCola = <span class=\"keyword\">new</span> NutritionFacts.Builder(<span class=\"number\">240</span>, <span class=\"number\">2</span>).calories(<span class=\"number\">2</span>)</div><div class=\"line\">                            .fat(<span class=\"number\">2</span>).carbohydrate(<span class=\"number\">2</span>).sodium(<span class=\"number\">0</span>).build();</div></pre></td></tr></table></figure>\n","excerpt":"<h2 id=\"考虑使用静态工厂方法代替构造器\"><a href=\"#考虑使用静态工厂方法代替构造器\" class=\"headerlink\" title=\"考虑使用静态工厂方法代替构造器\"></a>考虑使用静态工厂方法代替构造器</h2><h3 id=\"静态工厂方法相比构造器的优势：\"><a href=\"#静态工厂方法相比构造器的优势：\" class=\"headerlink\" title=\"静态工厂方法相比构造器的优势：\"></a>静态工厂方法相比构造器的<font color=\"red\">优势</font>：</h3><ol>\n<li>它们有名称_。根据方法名字可以清楚的知道可以获得什么样子的对象</li>\n<li>不必再每次调用的时候都创建一个新对象。</li>\n<li>它们可以返回原返回类型的任何子类型的对象。    </li>\n<li>在创建参数化类型实例的时候，它们是代码变得更加简洁","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Service provider framework sketch(描述)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Service interface</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Service</span></span>&#123;</div><div class=\"line\">   ...<span class=\"comment\">//service specific methods</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Service provider interface</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Provider</span></span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Service <span class=\"title\">newService</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//noninstantiable(不可实例化的) class for service registration and success</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Services</span></span>&#123;</div><div class=\"line\">   <span class=\"comment\">//prevents instantiation (阻止实例化)</span></div><div class=\"line\">   <span class=\"keyword\">private</span> Services&#123;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"comment\">//maps service name for services</span></div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, Provider&gt; providers =</div><div class=\"line\">       <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, Provider&gt;();</div><div class=\"line\">   <span class=\"comment\">//</span></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_PROVIDER_NAME = <span class=\"string\">\"&lt;def&gt;\"</span>;</div><div class=\"line\">   <span class=\"comment\">//provider registration API</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">registerDefaultProvider</span><span class=\"params\">(Provider p)</span></span>&#123;</div><div class=\"line\">       registerProvider(DEFAULT_PROVIDER_NAME, p);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">registerProvider</span><span class=\"params\">(String name, Provider p)</span></span>&#123;</div><div class=\"line\">       providers.put(name, p);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//Services access API</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Service <span class=\"title\">newInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> newInstance(DEFAULT_PROVIDER_NAME);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Service <span class=\"title\">newInstance</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">       Provider p = providers.get(name);</div><div class=\"line\">       <span class=\"keyword\">if</span>(p == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</div><div class=\"line\">               <span class=\"string\">\"No provider register with name :\"</span> + name);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> p;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"静态工厂方法的主要缺点\"><a href=\"#静态工厂方法的主要缺点\" class=\"headerlink\" title=\"静态工厂方法的主要缺点:\"></a>静态工厂方法的主要<font color=\"red\">缺点</font>:</h3><ol>\n<li><em>类如果不含公有的或者受保护的构造器，就不能被子类化</em></li>\n<li><em>它们其他的静态方法实际上没有任何区别</em><br> 下面是静态工厂方法的一些惯用名称<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">valueOf  —————— 不太严格的讲，改方法返回的实例与它的参数具有相同的值。这样的静态工厂方法实际上是类型转换方法</div><div class=\"line\"></div><div class=\"line\">of —————— valueOf 的一种更为简洁的替代，在EnummSet中使用并流行起来</div><div class=\"line\"></div><div class=\"line\">getInstance —————— 返回的实例通过方法的参数描述的，但是不能够说与参数具有同样的值，对于singleton来说，该方法没有参数并返回唯一实例</div><div class=\"line\"></div><div class=\"line\">newInstance —————— 与getInstance一样，但是newInstance能确保返回的每个实例都与其他实例不同</div><div class=\"line\"></div><div class=\"line\">getType —————— 与getInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型</div><div class=\"line\"></div><div class=\"line\">newType —————— 像newInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"遇到多个构造器参数时考虑使用构建器\"><a href=\"#遇到多个构造器参数时考虑使用构建器\" class=\"headerlink\" title=\"遇到多个构造器参数时考虑使用构建器\"></a>遇到多个构造器参数时考虑使用构建器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Builder pattern</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NutritionFacts</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servingSize;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servings;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> calories;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> fat;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> sodium;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> carbohydrate;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> calss Builder&#123;</div><div class=\"line\">        <span class=\"comment\">//Required parameter</span></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servingSize;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servings;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//optional parameter -- initialized to default value</span></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> calories = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> fat = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> carbohydrate = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sodium = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">(<span class=\"keyword\">int</span> servingSize, <span class=\"keyword\">int</span> servings)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.servingSize = servingSize;</div><div class=\"line\">            <span class=\"keyword\">this</span>.servings = servings;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">calories</span><span class=\"params\">(<span class=\"keyword\">int</span> calories)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.calories = calories;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">fat</span><span class=\"params\">(<span class=\"keyword\">int</span> fat)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.fat = fat;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">carbohydrate</span><span class=\"params\">(<span class=\"keyword\">int</span> carbohydrate)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.carbohydrate = carbohydrate;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">sodium</span><span class=\"params\">(<span class=\"keyword\">int</span> sodium)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.sodium = sodium;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> NutritionFacts <span class=\"title\">build</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">NutritionFacts</span><span class=\"params\">(Builder builder)</span></span>&#123;</div><div class=\"line\">        servingSize = builder.servingSize;</div><div class=\"line\">        servings = builder.servings;</div><div class=\"line\">        calories = builder.calories;</div><div class=\"line\">        fat = build.fat;</div><div class=\"line\">        sodium = build.sodium;</div><div class=\"line\">        carbohydrate = build.carbohydrate;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Test</span></div><div class=\"line\">NutritionFacts cocaCola = <span class=\"keyword\">new</span> NutritionFacts.Builder(<span class=\"number\">240</span>, <span class=\"number\">2</span>).calories(<span class=\"number\">2</span>)</div><div class=\"line\">                            .fat(<span class=\"number\">2</span>).carbohydrate(<span class=\"number\">2</span>).sodium(<span class=\"number\">0</span>).build();</div></pre></td></tr></table></figure>"},{"title":"Hello World","date":"2016-03-13T13:52:18.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-03-13 21:52:18\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2017-03-06T15:04:27.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fyy5nq000cxwb1fm39ovxl","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"loopback one","date":"2016-12-01T06:35:20.000Z","keywords":"loopback","_content":"\nloopback是一个用来构建restfulAPI的轻量级的nodejs框架 基于express\n[官网](http://loopback.io/) [github](https://github.com/strongloop/loopback/)\n<!-- more -->\n## 开始\n~~~安装slc工具~~~ 官网现在使用loopback-cli代替了原来的slc\n\n关于基础的安装官网上都有介绍，直接开始\n### 新建项目\n  ```shell\n  lb\n  #输入项目名,选择版本，选择对应的模板，一个loopback项目就已经创建好了。\n  ```\n我选择的是`3.x`版和 `api-server`的模板\n\n  然后等待下载依赖包就ok了\n  **这里npm可能会比较慢，推荐安装[nrm](https://github.com/Pana/nrm)，可以切换npm的源**\n### 启动\n  ```shell\n  node .\n  ```\n  然后浏览器进入 [http://localhost:3000/explorer](http://localhost:3000/explorer) 查看相应的restfulAPI\n  会有一个默认的User\n\n一个loopback项目的目录结构如下\n```\n\nloopback-demo\n|\n|--client //存放静态文件\n|\n|--common\n|   |\n|   |--mixins //mixins的相关Model\n|   |--models //公共的model\n|\n|--server\n|   |\n|   |--boot //项目启动时会加载这个目录下的文件\n|   |--models //服务器的model\n|   |--component-config.js // \n|   |--config.js //loopback配置文件\n|   |--datasources.js //数据源设置\n|   |--middleware.js //中间件设置\n|   |--model-config.js //model定义\n|   |--server.js //启动文件\n|\n```\n创建一个用户管理的restfulApi程序\n\n### 新建BaseUser模型\n```shell\nlb model \n#根据提示创建一个名为BaseUser的模型 继承自User\n```\n`User`模型为loopback内置的用户模型，包含了login/logout/accesstoken等方法属性，我们自己的用户模型自己继承与它就行\n\n### 新建File模型\n\n`PersistedModel`模型为内置的包含CRUD的存储模型","source":"_posts/loopback-one.md","raw":"---\ntitle: loopback one\ndate: 2016-12-01 14:35:20\ntags: [loopback]\ncategories: [loopback]\nkeywords: loopback\n---\n\nloopback是一个用来构建restfulAPI的轻量级的nodejs框架 基于express\n[官网](http://loopback.io/) [github](https://github.com/strongloop/loopback/)\n<!-- more -->\n## 开始\n~~~安装slc工具~~~ 官网现在使用loopback-cli代替了原来的slc\n\n关于基础的安装官网上都有介绍，直接开始\n### 新建项目\n  ```shell\n  lb\n  #输入项目名,选择版本，选择对应的模板，一个loopback项目就已经创建好了。\n  ```\n我选择的是`3.x`版和 `api-server`的模板\n\n  然后等待下载依赖包就ok了\n  **这里npm可能会比较慢，推荐安装[nrm](https://github.com/Pana/nrm)，可以切换npm的源**\n### 启动\n  ```shell\n  node .\n  ```\n  然后浏览器进入 [http://localhost:3000/explorer](http://localhost:3000/explorer) 查看相应的restfulAPI\n  会有一个默认的User\n\n一个loopback项目的目录结构如下\n```\n\nloopback-demo\n|\n|--client //存放静态文件\n|\n|--common\n|   |\n|   |--mixins //mixins的相关Model\n|   |--models //公共的model\n|\n|--server\n|   |\n|   |--boot //项目启动时会加载这个目录下的文件\n|   |--models //服务器的model\n|   |--component-config.js // \n|   |--config.js //loopback配置文件\n|   |--datasources.js //数据源设置\n|   |--middleware.js //中间件设置\n|   |--model-config.js //model定义\n|   |--server.js //启动文件\n|\n```\n创建一个用户管理的restfulApi程序\n\n### 新建BaseUser模型\n```shell\nlb model \n#根据提示创建一个名为BaseUser的模型 继承自User\n```\n`User`模型为loopback内置的用户模型，包含了login/logout/accesstoken等方法属性，我们自己的用户模型自己继承与它就行\n\n### 新建File模型\n\n`PersistedModel`模型为内置的包含CRUD的存储模型","slug":"loopback-one","published":1,"updated":"2017-04-24T14:25:01.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fyy5ny000gxwb17alfljre","content":"<p>loopback是一个用来构建restfulAPI的轻量级的nodejs框架 基于express<br><a href=\"http://loopback.io/\" target=\"_blank\" rel=\"external\">官网</a> <a href=\"https://github.com/strongloop/loopback/\" target=\"_blank\" rel=\"external\">github</a><br><a id=\"more\"></a></p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p><del>~安装slc工具</del>~ 官网现在使用loopback-cli代替了原来的slc</p>\n<p>关于基础的安装官网上都有介绍，直接开始</p>\n<h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">lb</div><div class=\"line\">#输入项目名,选择版本，选择对应的模板，一个loopback项目就已经创建好了。</div></pre></td></tr></table></figure>\n<p>我选择的是<code>3.x</code>版和 <code>api-server</code>的模板</p>\n<p>  然后等待下载依赖包就ok了<br>  <strong>这里npm可能会比较慢，推荐安装<a href=\"https://github.com/Pana/nrm\" target=\"_blank\" rel=\"external\">nrm</a>，可以切换npm的源</strong></p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node .</div></pre></td></tr></table></figure>\n<p>  然后浏览器进入 <a href=\"http://localhost:3000/explorer\" target=\"_blank\" rel=\"external\">http://localhost:3000/explorer</a> 查看相应的restfulAPI<br>  会有一个默认的User</p>\n<p>一个loopback项目的目录结构如下<br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">loopback-demo</div><div class=\"line\">|<span class=\"string\"></span></div><div class=\"line\">|<span class=\"string\">--client //存放静态文件</span></div><div class=\"line\">|</div><div class=\"line\">|<span class=\"string\">--common</span></div><div class=\"line\">|<span class=\"string\">   </span>|</div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--mixins //mixins的相关Model</span></div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--models //公共的model</span></div><div class=\"line\">|</div><div class=\"line\">|<span class=\"string\">--server</span></div><div class=\"line\">|<span class=\"string\">   </span>|</div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--boot //项目启动时会加载这个目录下的文件</span></div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--models //服务器的model</span></div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--component-config.js // </span></div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--config.js //loopback配置文件</span></div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--datasources.js //数据源设置</span></div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--middleware.js //中间件设置</span></div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--model-config.js //model定义</span></div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--server.js //启动文件</span></div><div class=\"line\">|</div></pre></td></tr></table></figure></p>\n<p>创建一个用户管理的restfulApi程序</p>\n<h3 id=\"新建BaseUser模型\"><a href=\"#新建BaseUser模型\" class=\"headerlink\" title=\"新建BaseUser模型\"></a>新建BaseUser模型</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">lb model </div><div class=\"line\">#根据提示创建一个名为BaseUser的模型 继承自User</div></pre></td></tr></table></figure>\n<p><code>User</code>模型为loopback内置的用户模型，包含了login/logout/accesstoken等方法属性，我们自己的用户模型自己继承与它就行</p>\n<h3 id=\"新建File模型\"><a href=\"#新建File模型\" class=\"headerlink\" title=\"新建File模型\"></a>新建File模型</h3><p><code>PersistedModel</code>模型为内置的包含CRUD的存储模型</p>\n","excerpt":"<p>loopback是一个用来构建restfulAPI的轻量级的nodejs框架 基于express<br><a href=\"http://loopback.io/\">官网</a> <a href=\"https://github.com/strongloop/loopback/\">github</a><br>","more":"</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p><del>~安装slc工具</del>~ 官网现在使用loopback-cli代替了原来的slc</p>\n<p>关于基础的安装官网上都有介绍，直接开始</p>\n<h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">lb</div><div class=\"line\">#输入项目名,选择版本，选择对应的模板，一个loopback项目就已经创建好了。</div></pre></td></tr></table></figure>\n<p>我选择的是<code>3.x</code>版和 <code>api-server</code>的模板</p>\n<p>  然后等待下载依赖包就ok了<br>  <strong>这里npm可能会比较慢，推荐安装<a href=\"https://github.com/Pana/nrm\">nrm</a>，可以切换npm的源</strong></p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node .</div></pre></td></tr></table></figure>\n<p>  然后浏览器进入 <a href=\"http://localhost:3000/explorer\">http://localhost:3000/explorer</a> 查看相应的restfulAPI<br>  会有一个默认的User</p>\n<p>一个loopback项目的目录结构如下<br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">loopback-demo</div><div class=\"line\">|<span class=\"string\"></div><div class=\"line\"></span>|<span class=\"string\">--client //存放静态文件</div><div class=\"line\"></span>|</div><div class=\"line\">|<span class=\"string\">--common</div><div class=\"line\"></span>|<span class=\"string\">   </span>|</div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--mixins //mixins的相关Model</div><div class=\"line\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--models //公共的model</div><div class=\"line\"></span>|</div><div class=\"line\">|<span class=\"string\">--server</div><div class=\"line\"></span>|<span class=\"string\">   </span>|</div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--boot //项目启动时会加载这个目录下的文件</div><div class=\"line\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--models //服务器的model</div><div class=\"line\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--component-config.js // </div><div class=\"line\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--config.js //loopback配置文件</div><div class=\"line\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--datasources.js //数据源设置</div><div class=\"line\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--middleware.js //中间件设置</div><div class=\"line\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--model-config.js //model定义</div><div class=\"line\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--server.js //启动文件</div><div class=\"line\"></span>|</div></pre></td></tr></table></figure></p>\n<p>创建一个用户管理的restfulApi程序</p>\n<h3 id=\"新建BaseUser模型\"><a href=\"#新建BaseUser模型\" class=\"headerlink\" title=\"新建BaseUser模型\"></a>新建BaseUser模型</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">lb model </div><div class=\"line\">#根据提示创建一个名为BaseUser的模型 继承自User</div></pre></td></tr></table></figure>\n<p><code>User</code>模型为loopback内置的用户模型，包含了login/logout/accesstoken等方法属性，我们自己的用户模型自己继承与它就行</p>\n<h3 id=\"新建File模型\"><a href=\"#新建File模型\" class=\"headerlink\" title=\"新建File模型\"></a>新建File模型</h3><p><code>PersistedModel</code>模型为内置的包含CRUD的存储模型</p>"},{"title":"折腾hexo的主题--NexT","date":"2016-11-29T15:11:04.000Z","_content":"**针对NexT.Pisces**\n ## 固定边侧栏\n 修改\n >theme/next/source/js/src/schemes/pisces.js\n\n ```javascript\n $(document).ready(function () {\n   var $headerInner = $('.header-inner');\n   var $sidebar = $('#sidebar');\n   $sidebar.show();\n   // 固定顶部黑条\n   $('.headband').css({'position':'fixed', top:0,width:'100%',zIndex:1});\n   $headerInner.css({top:0})\n   var affix = function() {\n     var sidebarTop = $headerInner.height() + 10;\n     $('#sidebar').css({ 'margin-top': sidebarTop }).affix();\n     if (document.body.clientWidth < 991) {\n       $headerInner.css({position: 'static'})\n     } else {\n       $headerInner.css({position: 'fixed'})\n     }\n   };\n   affix()\n   $(window).on('resize', function(){\n        affix()\n   });\n });\n ```\n## 修改文章页面滚动站点信息栏会覆盖菜单栏\n>theme/next/source/js/src/util.js\n\n把 needAffix方法修改为始终返回false\n```javascript\n    needAffix = function () {\n      return false;//this.isPisces();\n    }\n```\n\n~~修改后会影响搜索弹出框,下次解决...~~\n## 修改搜索弹出框会被遮住\n>theme/next/layout/_script/third-party/localsearch.swig\n\n```javascript\n//在首行添加\n$('.popup').appendTo($('body'));\n//并注释\n// $('.popup').detach().appendTo('.header-inner');\n```\n~~## 修改静态js等文件使用七牛~~\n~~> stheme/next/lauout/_script/commons.swig~~\n~~> theme/next/lauout/_partials/head.swig~~\n~~> theme/next/lauout/_script/bootstrap.swig~~\n~~> theme/next/lauout/_script/schemes/pisces.swig~~\n\n```ejsfont\n//在循环添加script之前添加\nurl_for()改为\n(config.qiniu.siteUrlPrefix || url_for())+'/'+theme.js\n```\n ~~在项目_config.yaml 中的七牛下添加siteUrlPrefix（这样会影响https）~~\ndone！\n","source":"_posts/DIY-hexo-theme-next.md","raw":"---\ntitle: 折腾hexo的主题--NexT\ndate: 2016-11-29 23:11:04\ntags: [hexo, theme, NexT]\ncategories: hexo\n---\n**针对NexT.Pisces**\n ## 固定边侧栏\n 修改\n >theme/next/source/js/src/schemes/pisces.js\n\n ```javascript\n $(document).ready(function () {\n   var $headerInner = $('.header-inner');\n   var $sidebar = $('#sidebar');\n   $sidebar.show();\n   // 固定顶部黑条\n   $('.headband').css({'position':'fixed', top:0,width:'100%',zIndex:1});\n   $headerInner.css({top:0})\n   var affix = function() {\n     var sidebarTop = $headerInner.height() + 10;\n     $('#sidebar').css({ 'margin-top': sidebarTop }).affix();\n     if (document.body.clientWidth < 991) {\n       $headerInner.css({position: 'static'})\n     } else {\n       $headerInner.css({position: 'fixed'})\n     }\n   };\n   affix()\n   $(window).on('resize', function(){\n        affix()\n   });\n });\n ```\n## 修改文章页面滚动站点信息栏会覆盖菜单栏\n>theme/next/source/js/src/util.js\n\n把 needAffix方法修改为始终返回false\n```javascript\n    needAffix = function () {\n      return false;//this.isPisces();\n    }\n```\n\n~~修改后会影响搜索弹出框,下次解决...~~\n## 修改搜索弹出框会被遮住\n>theme/next/layout/_script/third-party/localsearch.swig\n\n```javascript\n//在首行添加\n$('.popup').appendTo($('body'));\n//并注释\n// $('.popup').detach().appendTo('.header-inner');\n```\n~~## 修改静态js等文件使用七牛~~\n~~> stheme/next/lauout/_script/commons.swig~~\n~~> theme/next/lauout/_partials/head.swig~~\n~~> theme/next/lauout/_script/bootstrap.swig~~\n~~> theme/next/lauout/_script/schemes/pisces.swig~~\n\n```ejsfont\n//在循环添加script之前添加\nurl_for()改为\n(config.qiniu.siteUrlPrefix || url_for())+'/'+theme.js\n```\n ~~在项目_config.yaml 中的七牛下添加siteUrlPrefix（这样会影响https）~~\ndone！\n","slug":"DIY-hexo-theme-next","published":1,"updated":"2017-03-06T15:04:27.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fyy5ny000ixwb1qd6jmav3","content":"<p><strong>针对NexT.Pisces</strong></p>\n<h2 id=\"固定边侧栏\"><a href=\"#固定边侧栏\" class=\"headerlink\" title=\"固定边侧栏\"></a>固定边侧栏</h2><p> 修改</p>\n<blockquote>\n<p>theme/next/source/js/src/schemes/pisces.js</p>\n</blockquote>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> $headerInner = $(<span class=\"string\">'.header-inner'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $sidebar = $(<span class=\"string\">'#sidebar'</span>);</div><div class=\"line\">  $sidebar.show();</div><div class=\"line\">  <span class=\"comment\">// 固定顶部黑条</span></div><div class=\"line\">  $(<span class=\"string\">'.headband'</span>).css(&#123;<span class=\"string\">'position'</span>:<span class=\"string\">'fixed'</span>, <span class=\"attr\">top</span>:<span class=\"number\">0</span>,<span class=\"attr\">width</span>:<span class=\"string\">'100%'</span>,<span class=\"attr\">zIndex</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\">  $headerInner.css(&#123;<span class=\"attr\">top</span>:<span class=\"number\">0</span>&#125;)</div><div class=\"line\">  <span class=\"keyword\">var</span> affix = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sidebarTop = $headerInner.height() + <span class=\"number\">10</span>;</div><div class=\"line\">    $(<span class=\"string\">'#sidebar'</span>).css(&#123; <span class=\"string\">'margin-top'</span>: sidebarTop &#125;).affix();</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.body.clientWidth &lt; <span class=\"number\">991</span>) &#123;</div><div class=\"line\">      $headerInner.css(&#123;<span class=\"attr\">position</span>: <span class=\"string\">'static'</span>&#125;)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      $headerInner.css(&#123;<span class=\"attr\">position</span>: <span class=\"string\">'fixed'</span>&#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  affix()</div><div class=\"line\">  $(<span class=\"built_in\">window</span>).on(<span class=\"string\">'resize'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       affix()</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"修改文章页面滚动站点信息栏会覆盖菜单栏\"><a href=\"#修改文章页面滚动站点信息栏会覆盖菜单栏\" class=\"headerlink\" title=\"修改文章页面滚动站点信息栏会覆盖菜单栏\"></a>修改文章页面滚动站点信息栏会覆盖菜单栏</h2><blockquote>\n<p>theme/next/source/js/src/util.js</p>\n</blockquote>\n<p>把 needAffix方法修改为始终返回false<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">needAffix = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//this.isPisces();</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><del>修改后会影响搜索弹出框,下次解决…</del></p>\n<h2 id=\"修改搜索弹出框会被遮住\"><a href=\"#修改搜索弹出框会被遮住\" class=\"headerlink\" title=\"修改搜索弹出框会被遮住\"></a>修改搜索弹出框会被遮住</h2><blockquote>\n<p>theme/next/layout/_script/third-party/localsearch.swig</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//在首行添加</span></div><div class=\"line\">$(<span class=\"string\">'.popup'</span>).appendTo($(<span class=\"string\">'body'</span>));</div><div class=\"line\"><span class=\"comment\">//并注释</span></div><div class=\"line\"><span class=\"comment\">// $('.popup').detach().appendTo('.header-inner');</span></div></pre></td></tr></table></figure>\n<p><del>## 修改静态js等文件使用七牛</del><br><del>&gt; stheme/next/lauout/_script/commons.swig</del><br><del>&gt; theme/next/lauout/_partials/head.swig</del><br><del>&gt; theme/next/lauout/_script/bootstrap.swig</del><br><del>&gt; theme/next/lauout/_script/schemes/pisces.swig</del></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//在循环添加script之前添加</div><div class=\"line\">url_for()改为</div><div class=\"line\">(config.qiniu.siteUrlPrefix || url_for())+&apos;/&apos;+theme.js</div></pre></td></tr></table></figure>\n<p> <del>在项目_config.yaml 中的七牛下添加siteUrlPrefix（这样会影响https）</del><br>done！</p>\n","excerpt":"","more":"<p><strong>针对NexT.Pisces</strong></p>\n<h2 id=\"固定边侧栏\"><a href=\"#固定边侧栏\" class=\"headerlink\" title=\"固定边侧栏\"></a>固定边侧栏</h2><p> 修改</p>\n<blockquote>\n<p>theme/next/source/js/src/schemes/pisces.js</p>\n</blockquote>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> $headerInner = $(<span class=\"string\">'.header-inner'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $sidebar = $(<span class=\"string\">'#sidebar'</span>);</div><div class=\"line\">  $sidebar.show();</div><div class=\"line\">  <span class=\"comment\">// 固定顶部黑条</span></div><div class=\"line\">  $(<span class=\"string\">'.headband'</span>).css(&#123;<span class=\"string\">'position'</span>:<span class=\"string\">'fixed'</span>, <span class=\"attr\">top</span>:<span class=\"number\">0</span>,<span class=\"attr\">width</span>:<span class=\"string\">'100%'</span>,<span class=\"attr\">zIndex</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\">  $headerInner.css(&#123;<span class=\"attr\">top</span>:<span class=\"number\">0</span>&#125;)</div><div class=\"line\">  <span class=\"keyword\">var</span> affix = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sidebarTop = $headerInner.height() + <span class=\"number\">10</span>;</div><div class=\"line\">    $(<span class=\"string\">'#sidebar'</span>).css(&#123; <span class=\"string\">'margin-top'</span>: sidebarTop &#125;).affix();</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.body.clientWidth &lt; <span class=\"number\">991</span>) &#123;</div><div class=\"line\">      $headerInner.css(&#123;<span class=\"attr\">position</span>: <span class=\"string\">'static'</span>&#125;)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      $headerInner.css(&#123;<span class=\"attr\">position</span>: <span class=\"string\">'fixed'</span>&#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  affix()</div><div class=\"line\">  $(<span class=\"built_in\">window</span>).on(<span class=\"string\">'resize'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       affix()</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"修改文章页面滚动站点信息栏会覆盖菜单栏\"><a href=\"#修改文章页面滚动站点信息栏会覆盖菜单栏\" class=\"headerlink\" title=\"修改文章页面滚动站点信息栏会覆盖菜单栏\"></a>修改文章页面滚动站点信息栏会覆盖菜单栏</h2><blockquote>\n<p>theme/next/source/js/src/util.js</p>\n</blockquote>\n<p>把 needAffix方法修改为始终返回false<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">needAffix = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//this.isPisces();</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><del>修改后会影响搜索弹出框,下次解决…</del></p>\n<h2 id=\"修改搜索弹出框会被遮住\"><a href=\"#修改搜索弹出框会被遮住\" class=\"headerlink\" title=\"修改搜索弹出框会被遮住\"></a>修改搜索弹出框会被遮住</h2><blockquote>\n<p>theme/next/layout/_script/third-party/localsearch.swig</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//在首行添加</span></div><div class=\"line\">$(<span class=\"string\">'.popup'</span>).appendTo($(<span class=\"string\">'body'</span>));</div><div class=\"line\"><span class=\"comment\">//并注释</span></div><div class=\"line\"><span class=\"comment\">// $('.popup').detach().appendTo('.header-inner');</span></div></pre></td></tr></table></figure>\n<p><del>## 修改静态js等文件使用七牛</del><br><del>&gt; stheme/next/lauout/_script/commons.swig</del><br><del>&gt; theme/next/lauout/_partials/head.swig</del><br><del>&gt; theme/next/lauout/_script/bootstrap.swig</del><br><del>&gt; theme/next/lauout/_script/schemes/pisces.swig</del></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//在循环添加script之前添加</div><div class=\"line\">url_for()改为</div><div class=\"line\">(config.qiniu.siteUrlPrefix || url_for())+&apos;/&apos;+theme.js</div></pre></td></tr></table></figure>\n<p> <del>在项目_config.yaml 中的七牛下添加siteUrlPrefix（这样会影响https）</del><br>done！</p>\n"},{"title":"mysql 记录","date":"2016-12-06T08:36:39.000Z","keywords":"mysql xyz327","_content":"## 全角字符\n存入全角的字母，然后用模糊查询 查询不出来..暂时先把全角改为半角...\n\n## 事物隔离级别\n今天把程序发布到线上环境时，插入数据时mysql直接报错\n>Cannot execute statement: binlogging impossible since BINLOG_FORMAT = STATEMENT and at least one table uses a storage engine limited to row-logging. InnoDB is limited to row-logging when transaction isolation level is READ COMMITTED or READ UNCOMMITTED.\n\n百度一番，说问题是因为我程序插入数据时开启了事物\n mysql默认的binlog_format是STATEMENT，而在READ COMMITTED或READ UNCOMMITTED隔离级别下，innodb只能使用的binlog_format是ROW。\n 我程序事物使用的隔离级别默认为READ_COMMINTED \n\n 解决办法有两个\n  1. 修改程序的事物隔离级别,不使用READ COMMITTED或READ UNCOMMITTED 这两种隔离级别。mysql默认的事物隔离级别是REPEATABLE_READ\n  2. 修改mysql的配置 my.ini 设置 binlog_format=ROW","source":"_posts/mysql-record.md","raw":"---\ntitle: mysql 记录\ndate: 2016-12-06 16:36:39\ntags: mysql\ncategories: mysql\nkeywords: mysql xyz327\n---\n## 全角字符\n存入全角的字母，然后用模糊查询 查询不出来..暂时先把全角改为半角...\n\n## 事物隔离级别\n今天把程序发布到线上环境时，插入数据时mysql直接报错\n>Cannot execute statement: binlogging impossible since BINLOG_FORMAT = STATEMENT and at least one table uses a storage engine limited to row-logging. InnoDB is limited to row-logging when transaction isolation level is READ COMMITTED or READ UNCOMMITTED.\n\n百度一番，说问题是因为我程序插入数据时开启了事物\n mysql默认的binlog_format是STATEMENT，而在READ COMMITTED或READ UNCOMMITTED隔离级别下，innodb只能使用的binlog_format是ROW。\n 我程序事物使用的隔离级别默认为READ_COMMINTED \n\n 解决办法有两个\n  1. 修改程序的事物隔离级别,不使用READ COMMITTED或READ UNCOMMITTED 这两种隔离级别。mysql默认的事物隔离级别是REPEATABLE_READ\n  2. 修改mysql的配置 my.ini 设置 binlog_format=ROW","slug":"mysql-record","published":1,"updated":"2017-04-22T08:20:21.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fyy5o7000kxwb18mh4une1","content":"<h2 id=\"全角字符\"><a href=\"#全角字符\" class=\"headerlink\" title=\"全角字符\"></a>全角字符</h2><p>存入全角的字母，然后用模糊查询 查询不出来..暂时先把全角改为半角…</p>\n<h2 id=\"事物隔离级别\"><a href=\"#事物隔离级别\" class=\"headerlink\" title=\"事物隔离级别\"></a>事物隔离级别</h2><p>今天把程序发布到线上环境时，插入数据时mysql直接报错</p>\n<blockquote>\n<p>Cannot execute statement: binlogging impossible since BINLOG_FORMAT = STATEMENT and at least one table uses a storage engine limited to row-logging. InnoDB is limited to row-logging when transaction isolation level is READ COMMITTED or READ UNCOMMITTED.</p>\n</blockquote>\n<p>百度一番，说问题是因为我程序插入数据时开启了事物<br> mysql默认的binlog_format是STATEMENT，而在READ COMMITTED或READ UNCOMMITTED隔离级别下，innodb只能使用的binlog_format是ROW。<br> 我程序事物使用的隔离级别默认为READ_COMMINTED </p>\n<p> 解决办法有两个</p>\n<ol>\n<li>修改程序的事物隔离级别,不使用READ COMMITTED或READ UNCOMMITTED 这两种隔离级别。mysql默认的事物隔离级别是REPEATABLE_READ</li>\n<li>修改mysql的配置 my.ini 设置 binlog_format=ROW</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"全角字符\"><a href=\"#全角字符\" class=\"headerlink\" title=\"全角字符\"></a>全角字符</h2><p>存入全角的字母，然后用模糊查询 查询不出来..暂时先把全角改为半角…</p>\n<h2 id=\"事物隔离级别\"><a href=\"#事物隔离级别\" class=\"headerlink\" title=\"事物隔离级别\"></a>事物隔离级别</h2><p>今天把程序发布到线上环境时，插入数据时mysql直接报错</p>\n<blockquote>\n<p>Cannot execute statement: binlogging impossible since BINLOG_FORMAT = STATEMENT and at least one table uses a storage engine limited to row-logging. InnoDB is limited to row-logging when transaction isolation level is READ COMMITTED or READ UNCOMMITTED.</p>\n</blockquote>\n<p>百度一番，说问题是因为我程序插入数据时开启了事物<br> mysql默认的binlog_format是STATEMENT，而在READ COMMITTED或READ UNCOMMITTED隔离级别下，innodb只能使用的binlog_format是ROW。<br> 我程序事物使用的隔离级别默认为READ_COMMINTED </p>\n<p> 解决办法有两个</p>\n<ol>\n<li>修改程序的事物隔离级别,不使用READ COMMITTED或READ UNCOMMITTED 这两种隔离级别。mysql默认的事物隔离级别是REPEATABLE_READ</li>\n<li>修改mysql的配置 my.ini 设置 binlog_format=ROW</li>\n</ol>\n"},{"title":"springboot文件上传Filter获取不到文件","date":"2017-04-19T02:51:49.000Z","keywords":["springboot filter multipart/form-data"],"_content":"\n项目需要实现类似nginx反向代理的功能，于是就采用Filter+HttpClient去实现请求转发。\n\n为了开发方便就采用的springboot做测试项目。\n```java\n@SpringBootApplication\n//@ServletComponentScan\n@Controller\npublic class AppTestApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AppTestApplication.class, args);\n    }\n\n    @Bean\n    public FilterRegistrationBean indexFilterRegistration() {\n        FilterRegistrationBean registration = new FilterRegistrationBean(new TestFilter());\n        registration.addUrlPatterns(\"/*\");\n        return registration;\n    }\n}\n```\nFilter里面做匹配Uri后获取`request.getInputStream()`用httpClient转发请求\n\n但是在转发`Content-Type=multipart/form-data`文件上传时，转发后目标服务器总是获取不到正常的payload的请求体\n\n在Filter里面debug发现压根就获取不到文件...\n\n**经过各种google/baidu以及debug后，发现需要在`application.properties`里面添加文件上传的临时路径..**\n**或者不使用springboot而使用tomcat部署项目...**\n```\nspring.http.multipart.location= /tmp # 上传文件的临时目录\n```\n","source":"_posts/springboot-fileupdat- in-Filter-can't-get.md","raw":"---\ntitle: springboot文件上传Filter获取不到文件\ndate: 2017-04-19 10:51:49\ntags: [springboot]\ncategories: [springboot]\nkeywords: [springboot filter multipart/form-data]\n---\n\n项目需要实现类似nginx反向代理的功能，于是就采用Filter+HttpClient去实现请求转发。\n\n为了开发方便就采用的springboot做测试项目。\n```java\n@SpringBootApplication\n//@ServletComponentScan\n@Controller\npublic class AppTestApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AppTestApplication.class, args);\n    }\n\n    @Bean\n    public FilterRegistrationBean indexFilterRegistration() {\n        FilterRegistrationBean registration = new FilterRegistrationBean(new TestFilter());\n        registration.addUrlPatterns(\"/*\");\n        return registration;\n    }\n}\n```\nFilter里面做匹配Uri后获取`request.getInputStream()`用httpClient转发请求\n\n但是在转发`Content-Type=multipart/form-data`文件上传时，转发后目标服务器总是获取不到正常的payload的请求体\n\n在Filter里面debug发现压根就获取不到文件...\n\n**经过各种google/baidu以及debug后，发现需要在`application.properties`里面添加文件上传的临时路径..**\n**或者不使用springboot而使用tomcat部署项目...**\n```\nspring.http.multipart.location= /tmp # 上传文件的临时目录\n```\n","slug":"springboot-fileupdat- in-Filter-can't-get","published":1,"updated":"2017-04-22T08:20:21.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fyy5o9000oxwb1ocfx8ort","content":"<p>项目需要实现类似nginx反向代理的功能，于是就采用Filter+HttpClient去实现请求转发。</p>\n<p>为了开发方便就采用的springboot做测试项目。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"comment\">//@ServletComponentScan</span></div><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppTestApplication</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        SpringApplication.run(AppTestApplication.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">indexFilterRegistration</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        FilterRegistrationBean registration = <span class=\"keyword\">new</span> FilterRegistrationBean(<span class=\"keyword\">new</span> TestFilter());</div><div class=\"line\">        registration.addUrlPatterns(<span class=\"string\">\"/*\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> registration;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Filter里面做匹配Uri后获取<code>request.getInputStream()</code>用httpClient转发请求</p>\n<p>但是在转发<code>Content-Type=multipart/form-data</code>文件上传时，转发后目标服务器总是获取不到正常的payload的请求体</p>\n<p>在Filter里面debug发现压根就获取不到文件…</p>\n<p><strong>经过各种google/baidu以及debug后，发现需要在<code>application.properties</code>里面添加文件上传的临时路径..</strong><br><strong>或者不使用springboot而使用tomcat部署项目…</strong><br><figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">spring.http.multipart.<span class=\"keyword\">location</span>= /tmp <span class=\"meta\"># 上传文件的临时目录</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>项目需要实现类似nginx反向代理的功能，于是就采用Filter+HttpClient去实现请求转发。</p>\n<p>为了开发方便就采用的springboot做测试项目。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"comment\">//@ServletComponentScan</span></div><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppTestApplication</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        SpringApplication.run(AppTestApplication.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">indexFilterRegistration</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        FilterRegistrationBean registration = <span class=\"keyword\">new</span> FilterRegistrationBean(<span class=\"keyword\">new</span> TestFilter());</div><div class=\"line\">        registration.addUrlPatterns(<span class=\"string\">\"/*\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> registration;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Filter里面做匹配Uri后获取<code>request.getInputStream()</code>用httpClient转发请求</p>\n<p>但是在转发<code>Content-Type=multipart/form-data</code>文件上传时，转发后目标服务器总是获取不到正常的payload的请求体</p>\n<p>在Filter里面debug发现压根就获取不到文件…</p>\n<p><strong>经过各种google/baidu以及debug后，发现需要在<code>application.properties</code>里面添加文件上传的临时路径..</strong><br><strong>或者不使用springboot而使用tomcat部署项目…</strong><br><figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">spring.http.multipart.<span class=\"keyword\">location</span>= /tmp <span class=\"meta\"># 上传文件的临时目录</span></div></pre></td></tr></table></figure></p>\n"},{"title":"loopback two","date":"2016-12-06T03:44:37.000Z","keywords":"loopback","_content":"\nloopback PersistedModel 的方法与rest api对应表\n\nmodel的方法名|HTTP Method|restApi url|说明\n-----------|-----------|-----------|---\n`create`|POST|/Model\n`upsert`|PATCH|/Model\n`upsert`|PUT|/Model\n`exists`  |GET|/Model/:id/exists\n`findById`|GET|/Model/:id|查找对应id的Model\n`prototype.updateAttributes`|PATCH|/Model/:id\n`prototype.updateAttributes`|PUT|/Model/:id\n`destroyById`/`deleteById`|DELETE|/Model/:id\n`exists`|HEAD|/Model/:id\n`find`    |GET|/Model\n`findOne` |GET|/Model/findOne\n`count`    |GET|/Model/count\n`createChangeStream`| GET|/Model/chage-stream\n`createChangeStream`| POST|/Model/chage-stream\n`replaceById`|POST|/Model/:id/replace\n`replaceOrCreate`|POST|/Model/replaceOrCreate\n`updateAll`|POST|/Model/update\n`upsertWithWhere`|POST|/Model/upsertWithWhere\n\n关系模型的部分方法与rest api 对应表 更多说明参考 [官方文档](http://loopback.io/doc/en/lb2/Accessing-related-models.html)\n\nmodel的关联对象的方法名|HTTP Method|restApi url|说明\n-------------------|-----------|-----------|--------\n`__get__attr`|GET|/Model/:id/attr|查找对应id的Model下的attr数据\n`__create__attr`|POST|/Model/:id/attr|创建一条对应id的Model下的attr数据\n`__delete__attr`|DELETE|/Model/:id/attr|删除对应id的Model下的所有attr数据\n`__count__attr`|GET|/Model/:id/attr/count|查找对应id的Model下的attr数据数量\n`__findById__attr`|GET|/Model/:id/attr/:attrId|查找对应id的Model下的id为attrId的数据\n`__destroyById__attr`|DELETE|/Model/:id/attr/:attrId|删除对应id的Model下的id为attrId的数据\n`__updateById__attr`|PUT|/Model/:id/attr/:attrId|更新对应id的Model下的id为attrId的数据\n`__exists__attr`|HEAD|/Model/:id/attr/rel/:attrId|检查对应id的Model下的id为attrId的数据(貌似没什么用)\n`__link__attr`|PUT|/Model/:id/attr/rel/:attrId|新增Model与attr的中间数据 (多对多关系)\n`__unlink__attr`|DELETE|/Model/:id/attr/rel/:attrId|删除Model与attr的中间数据 (多对多关系)\n","source":"_posts/loopback-two.md","raw":"---\ntitle: loopback two\ndate: 2016-12-06 11:44:37\ntags: loopback\ncategories: loopback\nkeywords: loopback\n---\n\nloopback PersistedModel 的方法与rest api对应表\n\nmodel的方法名|HTTP Method|restApi url|说明\n-----------|-----------|-----------|---\n`create`|POST|/Model\n`upsert`|PATCH|/Model\n`upsert`|PUT|/Model\n`exists`  |GET|/Model/:id/exists\n`findById`|GET|/Model/:id|查找对应id的Model\n`prototype.updateAttributes`|PATCH|/Model/:id\n`prototype.updateAttributes`|PUT|/Model/:id\n`destroyById`/`deleteById`|DELETE|/Model/:id\n`exists`|HEAD|/Model/:id\n`find`    |GET|/Model\n`findOne` |GET|/Model/findOne\n`count`    |GET|/Model/count\n`createChangeStream`| GET|/Model/chage-stream\n`createChangeStream`| POST|/Model/chage-stream\n`replaceById`|POST|/Model/:id/replace\n`replaceOrCreate`|POST|/Model/replaceOrCreate\n`updateAll`|POST|/Model/update\n`upsertWithWhere`|POST|/Model/upsertWithWhere\n\n关系模型的部分方法与rest api 对应表 更多说明参考 [官方文档](http://loopback.io/doc/en/lb2/Accessing-related-models.html)\n\nmodel的关联对象的方法名|HTTP Method|restApi url|说明\n-------------------|-----------|-----------|--------\n`__get__attr`|GET|/Model/:id/attr|查找对应id的Model下的attr数据\n`__create__attr`|POST|/Model/:id/attr|创建一条对应id的Model下的attr数据\n`__delete__attr`|DELETE|/Model/:id/attr|删除对应id的Model下的所有attr数据\n`__count__attr`|GET|/Model/:id/attr/count|查找对应id的Model下的attr数据数量\n`__findById__attr`|GET|/Model/:id/attr/:attrId|查找对应id的Model下的id为attrId的数据\n`__destroyById__attr`|DELETE|/Model/:id/attr/:attrId|删除对应id的Model下的id为attrId的数据\n`__updateById__attr`|PUT|/Model/:id/attr/:attrId|更新对应id的Model下的id为attrId的数据\n`__exists__attr`|HEAD|/Model/:id/attr/rel/:attrId|检查对应id的Model下的id为attrId的数据(貌似没什么用)\n`__link__attr`|PUT|/Model/:id/attr/rel/:attrId|新增Model与attr的中间数据 (多对多关系)\n`__unlink__attr`|DELETE|/Model/:id/attr/rel/:attrId|删除Model与attr的中间数据 (多对多关系)\n","slug":"loopback-two","published":1,"updated":"2017-03-06T15:04:27.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fyy5oa000qxwb1we60m9ty","content":"<p>loopback PersistedModel 的方法与rest api对应表</p>\n<table>\n<thead>\n<tr>\n<th>model的方法名</th>\n<th>HTTP Method</th>\n<th>restApi url</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>create</code></td>\n<td>POST</td>\n<td>/Model</td>\n</tr>\n<tr>\n<td><code>upsert</code></td>\n<td>PATCH</td>\n<td>/Model</td>\n</tr>\n<tr>\n<td><code>upsert</code></td>\n<td>PUT</td>\n<td>/Model</td>\n</tr>\n<tr>\n<td><code>exists</code></td>\n<td>GET</td>\n<td>/Model/:id/exists</td>\n</tr>\n<tr>\n<td><code>findById</code></td>\n<td>GET</td>\n<td>/Model/:id</td>\n<td>查找对应id的Model</td>\n</tr>\n<tr>\n<td><code>prototype.updateAttributes</code></td>\n<td>PATCH</td>\n<td>/Model/:id</td>\n</tr>\n<tr>\n<td><code>prototype.updateAttributes</code></td>\n<td>PUT</td>\n<td>/Model/:id</td>\n</tr>\n<tr>\n<td><code>destroyById</code>/<code>deleteById</code></td>\n<td>DELETE</td>\n<td>/Model/:id</td>\n</tr>\n<tr>\n<td><code>exists</code></td>\n<td>HEAD</td>\n<td>/Model/:id</td>\n</tr>\n<tr>\n<td><code>find</code></td>\n<td>GET</td>\n<td>/Model</td>\n</tr>\n<tr>\n<td><code>findOne</code></td>\n<td>GET</td>\n<td>/Model/findOne</td>\n</tr>\n<tr>\n<td><code>count</code></td>\n<td>GET</td>\n<td>/Model/count</td>\n</tr>\n<tr>\n<td><code>createChangeStream</code></td>\n<td>GET</td>\n<td>/Model/chage-stream</td>\n</tr>\n<tr>\n<td><code>createChangeStream</code></td>\n<td>POST</td>\n<td>/Model/chage-stream</td>\n</tr>\n<tr>\n<td><code>replaceById</code></td>\n<td>POST</td>\n<td>/Model/:id/replace</td>\n</tr>\n<tr>\n<td><code>replaceOrCreate</code></td>\n<td>POST</td>\n<td>/Model/replaceOrCreate</td>\n</tr>\n<tr>\n<td><code>updateAll</code></td>\n<td>POST</td>\n<td>/Model/update</td>\n</tr>\n<tr>\n<td><code>upsertWithWhere</code></td>\n<td>POST</td>\n<td>/Model/upsertWithWhere</td>\n</tr>\n</tbody>\n</table>\n<p>关系模型的部分方法与rest api 对应表 更多说明参考 <a href=\"http://loopback.io/doc/en/lb2/Accessing-related-models.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<table>\n<thead>\n<tr>\n<th>model的关联对象的方法名</th>\n<th>HTTP Method</th>\n<th>restApi url</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>__get__attr</code></td>\n<td>GET</td>\n<td>/Model/:id/attr</td>\n<td>查找对应id的Model下的attr数据</td>\n</tr>\n<tr>\n<td><code>__create__attr</code></td>\n<td>POST</td>\n<td>/Model/:id/attr</td>\n<td>创建一条对应id的Model下的attr数据</td>\n</tr>\n<tr>\n<td><code>__delete__attr</code></td>\n<td>DELETE</td>\n<td>/Model/:id/attr</td>\n<td>删除对应id的Model下的所有attr数据</td>\n</tr>\n<tr>\n<td><code>__count__attr</code></td>\n<td>GET</td>\n<td>/Model/:id/attr/count</td>\n<td>查找对应id的Model下的attr数据数量</td>\n</tr>\n<tr>\n<td><code>__findById__attr</code></td>\n<td>GET</td>\n<td>/Model/:id/attr/:attrId</td>\n<td>查找对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__destroyById__attr</code></td>\n<td>DELETE</td>\n<td>/Model/:id/attr/:attrId</td>\n<td>删除对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__updateById__attr</code></td>\n<td>PUT</td>\n<td>/Model/:id/attr/:attrId</td>\n<td>更新对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__exists__attr</code></td>\n<td>HEAD</td>\n<td>/Model/:id/attr/rel/:attrId</td>\n<td>检查对应id的Model下的id为attrId的数据(貌似没什么用)</td>\n</tr>\n<tr>\n<td><code>__link__attr</code></td>\n<td>PUT</td>\n<td>/Model/:id/attr/rel/:attrId</td>\n<td>新增Model与attr的中间数据 (多对多关系)</td>\n</tr>\n<tr>\n<td><code>__unlink__attr</code></td>\n<td>DELETE</td>\n<td>/Model/:id/attr/rel/:attrId</td>\n<td>删除Model与attr的中间数据 (多对多关系)</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<p>loopback PersistedModel 的方法与rest api对应表</p>\n<table>\n<thead>\n<tr>\n<th>model的方法名</th>\n<th>HTTP Method</th>\n<th>restApi url</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>create</code></td>\n<td>POST</td>\n<td>/Model</td>\n</tr>\n<tr>\n<td><code>upsert</code></td>\n<td>PATCH</td>\n<td>/Model</td>\n</tr>\n<tr>\n<td><code>upsert</code></td>\n<td>PUT</td>\n<td>/Model</td>\n</tr>\n<tr>\n<td><code>exists</code></td>\n<td>GET</td>\n<td>/Model/:id/exists</td>\n</tr>\n<tr>\n<td><code>findById</code></td>\n<td>GET</td>\n<td>/Model/:id</td>\n<td>查找对应id的Model</td>\n</tr>\n<tr>\n<td><code>prototype.updateAttributes</code></td>\n<td>PATCH</td>\n<td>/Model/:id</td>\n</tr>\n<tr>\n<td><code>prototype.updateAttributes</code></td>\n<td>PUT</td>\n<td>/Model/:id</td>\n</tr>\n<tr>\n<td><code>destroyById</code>/<code>deleteById</code></td>\n<td>DELETE</td>\n<td>/Model/:id</td>\n</tr>\n<tr>\n<td><code>exists</code></td>\n<td>HEAD</td>\n<td>/Model/:id</td>\n</tr>\n<tr>\n<td><code>find</code></td>\n<td>GET</td>\n<td>/Model</td>\n</tr>\n<tr>\n<td><code>findOne</code></td>\n<td>GET</td>\n<td>/Model/findOne</td>\n</tr>\n<tr>\n<td><code>count</code></td>\n<td>GET</td>\n<td>/Model/count</td>\n</tr>\n<tr>\n<td><code>createChangeStream</code></td>\n<td>GET</td>\n<td>/Model/chage-stream</td>\n</tr>\n<tr>\n<td><code>createChangeStream</code></td>\n<td>POST</td>\n<td>/Model/chage-stream</td>\n</tr>\n<tr>\n<td><code>replaceById</code></td>\n<td>POST</td>\n<td>/Model/:id/replace</td>\n</tr>\n<tr>\n<td><code>replaceOrCreate</code></td>\n<td>POST</td>\n<td>/Model/replaceOrCreate</td>\n</tr>\n<tr>\n<td><code>updateAll</code></td>\n<td>POST</td>\n<td>/Model/update</td>\n</tr>\n<tr>\n<td><code>upsertWithWhere</code></td>\n<td>POST</td>\n<td>/Model/upsertWithWhere</td>\n</tr>\n</tbody>\n</table>\n<p>关系模型的部分方法与rest api 对应表 更多说明参考 <a href=\"http://loopback.io/doc/en/lb2/Accessing-related-models.html\">官方文档</a></p>\n<table>\n<thead>\n<tr>\n<th>model的关联对象的方法名</th>\n<th>HTTP Method</th>\n<th>restApi url</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>__get__attr</code></td>\n<td>GET</td>\n<td>/Model/:id/attr</td>\n<td>查找对应id的Model下的attr数据</td>\n</tr>\n<tr>\n<td><code>__create__attr</code></td>\n<td>POST</td>\n<td>/Model/:id/attr</td>\n<td>创建一条对应id的Model下的attr数据</td>\n</tr>\n<tr>\n<td><code>__delete__attr</code></td>\n<td>DELETE</td>\n<td>/Model/:id/attr</td>\n<td>删除对应id的Model下的所有attr数据</td>\n</tr>\n<tr>\n<td><code>__count__attr</code></td>\n<td>GET</td>\n<td>/Model/:id/attr/count</td>\n<td>查找对应id的Model下的attr数据数量</td>\n</tr>\n<tr>\n<td><code>__findById__attr</code></td>\n<td>GET</td>\n<td>/Model/:id/attr/:attrId</td>\n<td>查找对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__destroyById__attr</code></td>\n<td>DELETE</td>\n<td>/Model/:id/attr/:attrId</td>\n<td>删除对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__updateById__attr</code></td>\n<td>PUT</td>\n<td>/Model/:id/attr/:attrId</td>\n<td>更新对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__exists__attr</code></td>\n<td>HEAD</td>\n<td>/Model/:id/attr/rel/:attrId</td>\n<td>检查对应id的Model下的id为attrId的数据(貌似没什么用)</td>\n</tr>\n<tr>\n<td><code>__link__attr</code></td>\n<td>PUT</td>\n<td>/Model/:id/attr/rel/:attrId</td>\n<td>新增Model与attr的中间数据 (多对多关系)</td>\n</tr>\n<tr>\n<td><code>__unlink__attr</code></td>\n<td>DELETE</td>\n<td>/Model/:id/attr/rel/:attrId</td>\n<td>删除Model与attr的中间数据 (多对多关系)</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"windows使用oh-my-zsh","date":"2017-04-22T12:49:51.000Z","keywords":["windows terminal zsh oh-my-zsh"],"_content":"\n开发有时候需要使用terminal,无奈家里电脑还是只能用Windows,但是感觉CMD真的很难用,就是是powershell也不太习惯\n\n公司电脑用deepin oh-my-zsh不能更舒服，就想到能不能在windows上也能装上oh-my-zsh\n\n于是开始一番baidu+google \n\n## 安装cywin\n\n先装上[cywin](http://cywin.com) 网络太慢的话可以从迅雷下 [32位](http://www.cygwin.com/setup-x86.exe) [64位](http://www.cygwin.com/setup-x86_64.exe)\n\n开始安装，选择从网络安装，太慢的话可以使用国内的源 `http://mirrors.ustc.edu.cn/cygwin/`\n\n***记得安装zsh***\n\n## 安装`oh-my-zsh` \n\n不知道为什么直接使用`oh-my-zsh`提供的从网络安装总是git clone失败. 于是先手动把`oh-my-zsh`clone到 `$HOME` 目录下 `$HOME`在 `cywin的安装目录/home/用户名`\n\n`git clone https://github.com/robbyrussell/oh-my-zsh.git .oh-my-zsh` \n\n直接用`oh-my-zsh`提供的安装的文件是不能装上的,自己手动复制里面的命令一个个的在`cywin`的终端里执行\n\n```bash\n # 先设置oh-my-zsh 的目录\n export ZSH=~/.oh-my-zsh\n # 生成zsh的配置文件\n cp $ZSH/templates/zshrc.zsh-template ~/.zshrc\n\n```\n此时zsh会报找不到env grep 之类的命令\n修改`zsh`的配置文件 `.zshrc` 把第一行修改为下面的\n```bash\n# If you come from bash you might have to change your $PATH.\n export PATH=/bin:$HOME/bin:/usr/local/bin:$PATH\n``` \nok 打开cmd或者 cywin的终端 输入 `zsh` \n\n会有挺多bug的，比如有些字符不能显示，\n\n我使用的`gnzh`主题 这是光标会有点bug 比正常的光标后大概3个字符\n\n修改CMD字体  [http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html](http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html)\n\n我使用的是 [dejavu](https://dejavu-fonts.github.io/)\n\n在CMD输入 chcp 437 然后就多出几个可选择的字体了\n\n## 修改HOME目录\n此时zsh的用户根目录是在 `cywin安装目录/home/用户名`下的，修改到Windows的用户目录下去\n\n在windows的环境变量设置里面新建一条记录\n```\nHOME=windows的用户目录\n```\n并把原来用户目录下的文件都copy到新的用户目录下\n\n现在在cmd或者cywin的终端里面输入zsh. \n\n以后就win+R 输入zsh吧~\n\n## 安装 `apt-cyg` \n\ncywin里面类似于`apt-get`的软件包安装工具。立马装上\n\n```bash\nwget https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg -O apt-cyg\ninstall apt-cyg /bin\n```\n\n现在可以用`apt-cyg install vim`来在cywin上安装`vim`了~\n","source":"_posts/windows-use-oh-my-zsh.md","raw":"---\ntitle: windows使用oh-my-zsh\ndate: 2017-04-22 20:49:51\ntags: \ncategories: [other]\nkeywords: [windows terminal zsh oh-my-zsh ]\n---\n\n开发有时候需要使用terminal,无奈家里电脑还是只能用Windows,但是感觉CMD真的很难用,就是是powershell也不太习惯\n\n公司电脑用deepin oh-my-zsh不能更舒服，就想到能不能在windows上也能装上oh-my-zsh\n\n于是开始一番baidu+google \n\n## 安装cywin\n\n先装上[cywin](http://cywin.com) 网络太慢的话可以从迅雷下 [32位](http://www.cygwin.com/setup-x86.exe) [64位](http://www.cygwin.com/setup-x86_64.exe)\n\n开始安装，选择从网络安装，太慢的话可以使用国内的源 `http://mirrors.ustc.edu.cn/cygwin/`\n\n***记得安装zsh***\n\n## 安装`oh-my-zsh` \n\n不知道为什么直接使用`oh-my-zsh`提供的从网络安装总是git clone失败. 于是先手动把`oh-my-zsh`clone到 `$HOME` 目录下 `$HOME`在 `cywin的安装目录/home/用户名`\n\n`git clone https://github.com/robbyrussell/oh-my-zsh.git .oh-my-zsh` \n\n直接用`oh-my-zsh`提供的安装的文件是不能装上的,自己手动复制里面的命令一个个的在`cywin`的终端里执行\n\n```bash\n # 先设置oh-my-zsh 的目录\n export ZSH=~/.oh-my-zsh\n # 生成zsh的配置文件\n cp $ZSH/templates/zshrc.zsh-template ~/.zshrc\n\n```\n此时zsh会报找不到env grep 之类的命令\n修改`zsh`的配置文件 `.zshrc` 把第一行修改为下面的\n```bash\n# If you come from bash you might have to change your $PATH.\n export PATH=/bin:$HOME/bin:/usr/local/bin:$PATH\n``` \nok 打开cmd或者 cywin的终端 输入 `zsh` \n\n会有挺多bug的，比如有些字符不能显示，\n\n我使用的`gnzh`主题 这是光标会有点bug 比正常的光标后大概3个字符\n\n修改CMD字体  [http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html](http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html)\n\n我使用的是 [dejavu](https://dejavu-fonts.github.io/)\n\n在CMD输入 chcp 437 然后就多出几个可选择的字体了\n\n## 修改HOME目录\n此时zsh的用户根目录是在 `cywin安装目录/home/用户名`下的，修改到Windows的用户目录下去\n\n在windows的环境变量设置里面新建一条记录\n```\nHOME=windows的用户目录\n```\n并把原来用户目录下的文件都copy到新的用户目录下\n\n现在在cmd或者cywin的终端里面输入zsh. \n\n以后就win+R 输入zsh吧~\n\n## 安装 `apt-cyg` \n\ncywin里面类似于`apt-get`的软件包安装工具。立马装上\n\n```bash\nwget https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg -O apt-cyg\ninstall apt-cyg /bin\n```\n\n现在可以用`apt-cyg install vim`来在cywin上安装`vim`了~\n","slug":"windows-use-oh-my-zsh","published":1,"updated":"2017-04-23T02:30:02.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fyy5oe000txwb17lpyj0kf","content":"<p>开发有时候需要使用terminal,无奈家里电脑还是只能用Windows,但是感觉CMD真的很难用,就是是powershell也不太习惯</p>\n<p>公司电脑用deepin oh-my-zsh不能更舒服，就想到能不能在windows上也能装上oh-my-zsh</p>\n<p>于是开始一番baidu+google </p>\n<h2 id=\"安装cywin\"><a href=\"#安装cywin\" class=\"headerlink\" title=\"安装cywin\"></a>安装cywin</h2><p>先装上<a href=\"http://cywin.com\" target=\"_blank\" rel=\"external\">cywin</a> 网络太慢的话可以从迅雷下 <a href=\"http://www.cygwin.com/setup-x86.exe\" target=\"_blank\" rel=\"external\">32位</a> <a href=\"http://www.cygwin.com/setup-x86_64.exe\" target=\"_blank\" rel=\"external\">64位</a></p>\n<p>开始安装，选择从网络安装，太慢的话可以使用国内的源 <code>http://mirrors.ustc.edu.cn/cygwin/</code></p>\n<p><strong><em>记得安装zsh</em></strong></p>\n<h2 id=\"安装oh-my-zsh\"><a href=\"#安装oh-my-zsh\" class=\"headerlink\" title=\"安装oh-my-zsh\"></a>安装<code>oh-my-zsh</code></h2><p>不知道为什么直接使用<code>oh-my-zsh</code>提供的从网络安装总是git clone失败. 于是先手动把<code>oh-my-zsh</code>clone到 <code>$HOME</code> 目录下 <code>$HOME</code>在 <code>cywin的安装目录/home/用户名</code></p>\n<p><code>git clone https://github.com/robbyrussell/oh-my-zsh.git .oh-my-zsh</code> </p>\n<p>直接用<code>oh-my-zsh</code>提供的安装的文件是不能装上的,自己手动复制里面的命令一个个的在<code>cywin</code>的终端里执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 先设置oh-my-zsh 的目录</span></div><div class=\"line\"><span class=\"built_in\">export</span> ZSH=~/.oh-my-zsh</div><div class=\"line\"><span class=\"comment\"># 生成zsh的配置文件</span></div><div class=\"line\">cp <span class=\"variable\">$ZSH</span>/templates/zshrc.zsh-template ~/.zshrc</div></pre></td></tr></table></figure>\n<p>此时zsh会报找不到env grep 之类的命令<br>修改<code>zsh</code>的配置文件 <code>.zshrc</code> 把第一行修改为下面的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># If you come from bash you might have to change your $PATH.</span></div><div class=\"line\"> <span class=\"built_in\">export</span> PATH=/bin:<span class=\"variable\">$HOME</span>/bin:/usr/<span class=\"built_in\">local</span>/bin:<span class=\"variable\">$PATH</span></div><div class=\"line\">``` </div><div class=\"line\">ok 打开cmd或者 cywin的终端 输入 `zsh` </div><div class=\"line\"></div><div class=\"line\">会有挺多bug的，比如有些字符不能显示，</div><div class=\"line\"></div><div class=\"line\">我使用的`gnzh`主题 这是光标会有点bug 比正常的光标后大概3个字符</div><div class=\"line\"></div><div class=\"line\">修改CMD字体  [http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html](http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html)</div><div class=\"line\"></div><div class=\"line\">我使用的是 [dejavu](https://dejavu-fonts.github.io/)</div><div class=\"line\"></div><div class=\"line\">在CMD输入 chcp 437 然后就多出几个可选择的字体了</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 修改HOME目录</span></div><div class=\"line\">此时zsh的用户根目录是在 `cywin安装目录/home/用户名`下的，修改到Windows的用户目录下去</div><div class=\"line\"></div><div class=\"line\">在windows的环境变量设置里面新建一条记录</div></pre></td></tr></table></figure></p>\n<p>HOME=windows的用户目录<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">并把原来用户目录下的文件都copy到新的用户目录下</div><div class=\"line\"></div><div class=\"line\">现在在cmd或者cywin的终端里面输入zsh. </div><div class=\"line\"></div><div class=\"line\">以后就win+R 输入zsh吧~</div><div class=\"line\"></div><div class=\"line\">## 安装 `apt-cyg` </div><div class=\"line\"></div><div class=\"line\">cywin里面类似于`apt-get`的软件包安装工具。立马装上</div><div class=\"line\"></div><div class=\"line\">```bash</div><div class=\"line\">wget https:<span class=\"comment\">//raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg -O apt-cyg</span></div><div class=\"line\">install apt-cyg /bin</div></pre></td></tr></table></figure></p>\n<p>现在可以用<code>apt-cyg install vim</code>来在cywin上安装<code>vim</code>了~</p>\n","excerpt":"","more":"<p>开发有时候需要使用terminal,无奈家里电脑还是只能用Windows,但是感觉CMD真的很难用,就是是powershell也不太习惯</p>\n<p>公司电脑用deepin oh-my-zsh不能更舒服，就想到能不能在windows上也能装上oh-my-zsh</p>\n<p>于是开始一番baidu+google </p>\n<h2 id=\"安装cywin\"><a href=\"#安装cywin\" class=\"headerlink\" title=\"安装cywin\"></a>安装cywin</h2><p>先装上<a href=\"http://cywin.com\">cywin</a> 网络太慢的话可以从迅雷下 <a href=\"http://www.cygwin.com/setup-x86.exe\">32位</a> <a href=\"http://www.cygwin.com/setup-x86_64.exe\">64位</a></p>\n<p>开始安装，选择从网络安装，太慢的话可以使用国内的源 <code>http://mirrors.ustc.edu.cn/cygwin/</code></p>\n<p><strong><em>记得安装zsh</em></strong></p>\n<h2 id=\"安装oh-my-zsh\"><a href=\"#安装oh-my-zsh\" class=\"headerlink\" title=\"安装oh-my-zsh\"></a>安装<code>oh-my-zsh</code></h2><p>不知道为什么直接使用<code>oh-my-zsh</code>提供的从网络安装总是git clone失败. 于是先手动把<code>oh-my-zsh</code>clone到 <code>$HOME</code> 目录下 <code>$HOME</code>在 <code>cywin的安装目录/home/用户名</code></p>\n<p><code>git clone https://github.com/robbyrussell/oh-my-zsh.git .oh-my-zsh</code> </p>\n<p>直接用<code>oh-my-zsh</code>提供的安装的文件是不能装上的,自己手动复制里面的命令一个个的在<code>cywin</code>的终端里执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 先设置oh-my-zsh 的目录</span></div><div class=\"line\"><span class=\"built_in\">export</span> ZSH=~/.oh-my-zsh</div><div class=\"line\"><span class=\"comment\"># 生成zsh的配置文件</span></div><div class=\"line\">cp <span class=\"variable\">$ZSH</span>/templates/zshrc.zsh-template ~/.zshrc</div></pre></td></tr></table></figure>\n<p>此时zsh会报找不到env grep 之类的命令<br>修改<code>zsh</code>的配置文件 <code>.zshrc</code> 把第一行修改为下面的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># If you come from bash you might have to change your $PATH.</span></div><div class=\"line\"> <span class=\"built_in\">export</span> PATH=/bin:<span class=\"variable\">$HOME</span>/bin:/usr/<span class=\"built_in\">local</span>/bin:<span class=\"variable\">$PATH</span></div><div class=\"line\">``` </div><div class=\"line\">ok 打开cmd或者 cywin的终端 输入 `zsh` </div><div class=\"line\"></div><div class=\"line\">会有挺多bug的，比如有些字符不能显示，</div><div class=\"line\"></div><div class=\"line\">我使用的`gnzh`主题 这是光标会有点bug 比正常的光标后大概3个字符</div><div class=\"line\"></div><div class=\"line\">修改CMD字体  [http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html](http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html)</div><div class=\"line\"></div><div class=\"line\">我使用的是 [dejavu](https://dejavu-fonts.github.io/)</div><div class=\"line\"></div><div class=\"line\">在CMD输入 chcp 437 然后就多出几个可选择的字体了</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 修改HOME目录</span></div><div class=\"line\">此时zsh的用户根目录是在 `cywin安装目录/home/用户名`下的，修改到Windows的用户目录下去</div><div class=\"line\"></div><div class=\"line\">在windows的环境变量设置里面新建一条记录</div></pre></td></tr></table></figure></p>\n<p>HOME=windows的用户目录<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">并把原来用户目录下的文件都copy到新的用户目录下</div><div class=\"line\"></div><div class=\"line\">现在在cmd或者cywin的终端里面输入zsh. </div><div class=\"line\"></div><div class=\"line\">以后就win+R 输入zsh吧~</div><div class=\"line\"></div><div class=\"line\">## 安装 `apt-cyg` </div><div class=\"line\"></div><div class=\"line\">cywin里面类似于`apt-get`的软件包安装工具。立马装上</div><div class=\"line\"></div><div class=\"line\">```bash</div><div class=\"line\">wget https:<span class=\"comment\">//raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg -O apt-cyg</span></div><div class=\"line\">install apt-cyg /bin</div></pre></td></tr></table></figure></p>\n<p>现在可以用<code>apt-cyg install vim</code>来在cywin上安装<code>vim</code>了~</p>\n"},{"title":"扩展spring-boot自带的logback输出设置","date":"2016-12-29T11:42:04.000Z","keywords":["spring spring-boot slf4j"],"_content":"`spring-boot-starter-web`依赖了`spring-boot-starter-logging`默认是使用logback的实现。\n在`spring-boot`默认的日志输出设置\n在`resources`目录下添加`logback.xml`内容如下\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <include resource=\"org/springframework/boot/logging/logback/base.xml\" />\n    <logger name=\"cn.xyz327\" level=\"debug\"/>\n</configuration>\n```\n设置后就可以在代码中使用`org.slf4j.Logger`了,日志的输出格式采用`spring-boot`默认的格式\n","source":"_posts/spring-boot-slf4j.md","raw":"---\ntitle: 扩展spring-boot自带的logback输出设置\ndate: 2016-12-29 19:42:04\ntags: [spring-boot]\ncategories:\nkeywords: [spring spring-boot slf4j]\n---\n`spring-boot-starter-web`依赖了`spring-boot-starter-logging`默认是使用logback的实现。\n在`spring-boot`默认的日志输出设置\n在`resources`目录下添加`logback.xml`内容如下\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <include resource=\"org/springframework/boot/logging/logback/base.xml\" />\n    <logger name=\"cn.xyz327\" level=\"debug\"/>\n</configuration>\n```\n设置后就可以在代码中使用`org.slf4j.Logger`了,日志的输出格式采用`spring-boot`默认的格式\n","slug":"spring-boot-slf4j","published":1,"updated":"2017-03-06T15:04:27.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fyy5og000vxwb12uhgpo3h","content":"<p><code>spring-boot-starter-web</code>依赖了<code>spring-boot-starter-logging</code>默认是使用logback的实现。<br>在<code>spring-boot</code>默认的日志输出设置<br>在<code>resources</code>目录下添加<code>logback.xml</code>内容如下<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"org/springframework/boot/logging/logback/base.xml\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cn.xyz327\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"debug\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>设置后就可以在代码中使用<code>org.slf4j.Logger</code>了,日志的输出格式采用<code>spring-boot</code>默认的格式</p>\n","excerpt":"","more":"<p><code>spring-boot-starter-web</code>依赖了<code>spring-boot-starter-logging</code>默认是使用logback的实现。<br>在<code>spring-boot</code>默认的日志输出设置<br>在<code>resources</code>目录下添加<code>logback.xml</code>内容如下<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"org/springframework/boot/logging/logback/base.xml\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cn.xyz327\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"debug\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>设置后就可以在代码中使用<code>org.slf4j.Logger</code>了,日志的输出格式采用<code>spring-boot</code>默认的格式</p>\n"},{"title":"用karma+jasmine构建自动化测试环境","date":"2017-02-17T03:28:26.000Z","keywords":["测试 karma jasmine"],"_content":"使用karma+jasmine 构建前端自动化测试环境\n\n在项目下先安装karma 和 jasmine\n```shell\nnpm install karma karma-jasmine karma-chrome-launcher --save-dev\n```\n安装karma的命令行\n```shell\nnpm install karma-cli -g\n```\n\n在项目跟路径下初始化karma\n```shell\nkarma init\n```\n需要选择初始化的选项，根据自己的需要设置初始化的设置(会生成一个karma.conf.js)\n\n安装karma-coverage 生成代码覆盖率报告\n```shell\nnpm install karma-coverage --save-dev\n```\n安装karma-coverage后需要在karma.conf.js 添加相应的配置信息\n\n安装完成后，编写源文件以及相对应的测试文件\n\n开始执行测试(会打开chrome 修改了源文件或测试文件后会自动重新执行测试)\n```shell\nkarma start karma.conf.js\n```\n\nkarma.conf.js 具体内容\n<!--more-->\n```javascript\nmodule.exports = function(config) {\n  config.set({\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['jasmine'],\n\n    // list of files / patterns to load in the browser\n    // 要测试的源文件与测试文件的路径\n    files: [\n      'client/sdk/dist/*.js',\n      'spec/**/*[sS]pec.js'\n    ],\n    // list of files to exclude\n    exclude: [\n    ],\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    // 使用karma-coverage 生成对对应的源文件的 覆盖率报告\n    preprocessors: {\n      'client/sdk/dist/admin.js':'coverage'\n    },\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: ['progress','coverage'],\n    // karma-coverage 生成报告的设置\n    coverageReporter: {\n      type : 'html',\n      dir : 'spec/reporter/coverage/'\n    },\n    // web server port\n    port: 9876,\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: ['Chrome'],\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: false,\n    // Concurrency level\n    // how many browser should be started simultaneous\n    concurrency: Infinity\n  })\n}\n```\n","source":"_posts/karma-jasmine-build-an-automated-test-environment.md","raw":"---\ntitle: 用karma+jasmine构建自动化测试环境\ndate: 2017-02-17 11:28:26\ntags: [test karma jamine]\ncategories: [test]\nkeywords: [测试 karma jasmine]\n---\n使用karma+jasmine 构建前端自动化测试环境\n\n在项目下先安装karma 和 jasmine\n```shell\nnpm install karma karma-jasmine karma-chrome-launcher --save-dev\n```\n安装karma的命令行\n```shell\nnpm install karma-cli -g\n```\n\n在项目跟路径下初始化karma\n```shell\nkarma init\n```\n需要选择初始化的选项，根据自己的需要设置初始化的设置(会生成一个karma.conf.js)\n\n安装karma-coverage 生成代码覆盖率报告\n```shell\nnpm install karma-coverage --save-dev\n```\n安装karma-coverage后需要在karma.conf.js 添加相应的配置信息\n\n安装完成后，编写源文件以及相对应的测试文件\n\n开始执行测试(会打开chrome 修改了源文件或测试文件后会自动重新执行测试)\n```shell\nkarma start karma.conf.js\n```\n\nkarma.conf.js 具体内容\n<!--more-->\n```javascript\nmodule.exports = function(config) {\n  config.set({\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['jasmine'],\n\n    // list of files / patterns to load in the browser\n    // 要测试的源文件与测试文件的路径\n    files: [\n      'client/sdk/dist/*.js',\n      'spec/**/*[sS]pec.js'\n    ],\n    // list of files to exclude\n    exclude: [\n    ],\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    // 使用karma-coverage 生成对对应的源文件的 覆盖率报告\n    preprocessors: {\n      'client/sdk/dist/admin.js':'coverage'\n    },\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: ['progress','coverage'],\n    // karma-coverage 生成报告的设置\n    coverageReporter: {\n      type : 'html',\n      dir : 'spec/reporter/coverage/'\n    },\n    // web server port\n    port: 9876,\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: ['Chrome'],\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: false,\n    // Concurrency level\n    // how many browser should be started simultaneous\n    concurrency: Infinity\n  })\n}\n```\n","slug":"karma-jasmine-build-an-automated-test-environment","published":1,"updated":"2017-03-06T15:04:27.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fyy5oj0010xwb1kgbf7k00","content":"<p>使用karma+jasmine 构建前端自动化测试环境</p>\n<p>在项目下先安装karma 和 jasmine<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma karma-jasmine karma-chrome-launcher --save-dev</div></pre></td></tr></table></figure></p>\n<p>安装karma的命令行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma-cli -g</div></pre></td></tr></table></figure></p>\n<p>在项目跟路径下初始化karma<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">karma init</div></pre></td></tr></table></figure></p>\n<p>需要选择初始化的选项，根据自己的需要设置初始化的设置(会生成一个karma.conf.js)</p>\n<p>安装karma-coverage 生成代码覆盖率报告<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma-coverage --save-dev</div></pre></td></tr></table></figure></p>\n<p>安装karma-coverage后需要在karma.conf.js 添加相应的配置信息</p>\n<p>安装完成后，编写源文件以及相对应的测试文件</p>\n<p>开始执行测试(会打开chrome 修改了源文件或测试文件后会自动重新执行测试)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">karma start karma.conf.js</div></pre></td></tr></table></figure></p>\n<p>karma.conf.js 具体内容<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">  config.set(&#123;</div><div class=\"line\">    <span class=\"comment\">// base path that will be used to resolve all patterns (eg. files, exclude)</span></div><div class=\"line\">    basePath: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"comment\">// frameworks to use</span></div><div class=\"line\">    <span class=\"comment\">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span></div><div class=\"line\">    frameworks: [<span class=\"string\">'jasmine'</span>],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// list of files / patterns to load in the browser</span></div><div class=\"line\">    <span class=\"comment\">// 要测试的源文件与测试文件的路径</span></div><div class=\"line\">    files: [</div><div class=\"line\">      <span class=\"string\">'client/sdk/dist/*.js'</span>,</div><div class=\"line\">      <span class=\"string\">'spec/**/*[sS]pec.js'</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"comment\">// list of files to exclude</span></div><div class=\"line\">    exclude: [</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"comment\">// preprocess matching files before serving them to the browser</span></div><div class=\"line\">    <span class=\"comment\">// available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span></div><div class=\"line\">    <span class=\"comment\">// 使用karma-coverage 生成对对应的源文件的 覆盖率报告</span></div><div class=\"line\">    preprocessors: &#123;</div><div class=\"line\">      <span class=\"string\">'client/sdk/dist/admin.js'</span>:<span class=\"string\">'coverage'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// test results reporter to use</span></div><div class=\"line\">    <span class=\"comment\">// possible values: 'dots', 'progress'</span></div><div class=\"line\">    <span class=\"comment\">// available reporters: https://npmjs.org/browse/keyword/karma-reporter</span></div><div class=\"line\">    reporters: [<span class=\"string\">'progress'</span>,<span class=\"string\">'coverage'</span>],</div><div class=\"line\">    <span class=\"comment\">// karma-coverage 生成报告的设置</span></div><div class=\"line\">    coverageReporter: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span> : <span class=\"string\">'html'</span>,</div><div class=\"line\">      <span class=\"attr\">dir</span> : <span class=\"string\">'spec/reporter/coverage/'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// web server port</span></div><div class=\"line\">    port: <span class=\"number\">9876</span>,</div><div class=\"line\">    <span class=\"comment\">// enable / disable colors in the output (reporters and logs)</span></div><div class=\"line\">    colors: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"comment\">// level of logging</span></div><div class=\"line\">    <span class=\"comment\">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span></div><div class=\"line\">    logLevel: config.LOG_INFO,</div><div class=\"line\">    <span class=\"comment\">// enable / disable watching file and executing tests whenever any file changes</span></div><div class=\"line\">    autoWatch: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"comment\">// start these browsers</span></div><div class=\"line\">    <span class=\"comment\">// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span></div><div class=\"line\">    browsers: [<span class=\"string\">'Chrome'</span>],</div><div class=\"line\">    <span class=\"comment\">// Continuous Integration mode</span></div><div class=\"line\">    <span class=\"comment\">// if true, Karma captures browsers, runs the tests and exits</span></div><div class=\"line\">    singleRun: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"comment\">// Concurrency level</span></div><div class=\"line\">    <span class=\"comment\">// how many browser should be started simultaneous</span></div><div class=\"line\">    concurrency: <span class=\"literal\">Infinity</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>使用karma+jasmine 构建前端自动化测试环境</p>\n<p>在项目下先安装karma 和 jasmine<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma karma-jasmine karma-chrome-launcher --save-dev</div></pre></td></tr></table></figure></p>\n<p>安装karma的命令行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma-cli -g</div></pre></td></tr></table></figure></p>\n<p>在项目跟路径下初始化karma<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">karma init</div></pre></td></tr></table></figure></p>\n<p>需要选择初始化的选项，根据自己的需要设置初始化的设置(会生成一个karma.conf.js)</p>\n<p>安装karma-coverage 生成代码覆盖率报告<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma-coverage --save-dev</div></pre></td></tr></table></figure></p>\n<p>安装karma-coverage后需要在karma.conf.js 添加相应的配置信息</p>\n<p>安装完成后，编写源文件以及相对应的测试文件</p>\n<p>开始执行测试(会打开chrome 修改了源文件或测试文件后会自动重新执行测试)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">karma start karma.conf.js</div></pre></td></tr></table></figure></p>\n<p>karma.conf.js 具体内容<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">  config.set(&#123;</div><div class=\"line\">    <span class=\"comment\">// base path that will be used to resolve all patterns (eg. files, exclude)</span></div><div class=\"line\">    basePath: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"comment\">// frameworks to use</span></div><div class=\"line\">    <span class=\"comment\">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span></div><div class=\"line\">    frameworks: [<span class=\"string\">'jasmine'</span>],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// list of files / patterns to load in the browser</span></div><div class=\"line\">    <span class=\"comment\">// 要测试的源文件与测试文件的路径</span></div><div class=\"line\">    files: [</div><div class=\"line\">      <span class=\"string\">'client/sdk/dist/*.js'</span>,</div><div class=\"line\">      <span class=\"string\">'spec/**/*[sS]pec.js'</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"comment\">// list of files to exclude</span></div><div class=\"line\">    exclude: [</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"comment\">// preprocess matching files before serving them to the browser</span></div><div class=\"line\">    <span class=\"comment\">// available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span></div><div class=\"line\">    <span class=\"comment\">// 使用karma-coverage 生成对对应的源文件的 覆盖率报告</span></div><div class=\"line\">    preprocessors: &#123;</div><div class=\"line\">      <span class=\"string\">'client/sdk/dist/admin.js'</span>:<span class=\"string\">'coverage'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// test results reporter to use</span></div><div class=\"line\">    <span class=\"comment\">// possible values: 'dots', 'progress'</span></div><div class=\"line\">    <span class=\"comment\">// available reporters: https://npmjs.org/browse/keyword/karma-reporter</span></div><div class=\"line\">    reporters: [<span class=\"string\">'progress'</span>,<span class=\"string\">'coverage'</span>],</div><div class=\"line\">    <span class=\"comment\">// karma-coverage 生成报告的设置</span></div><div class=\"line\">    coverageReporter: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span> : <span class=\"string\">'html'</span>,</div><div class=\"line\">      <span class=\"attr\">dir</span> : <span class=\"string\">'spec/reporter/coverage/'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// web server port</span></div><div class=\"line\">    port: <span class=\"number\">9876</span>,</div><div class=\"line\">    <span class=\"comment\">// enable / disable colors in the output (reporters and logs)</span></div><div class=\"line\">    colors: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"comment\">// level of logging</span></div><div class=\"line\">    <span class=\"comment\">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span></div><div class=\"line\">    logLevel: config.LOG_INFO,</div><div class=\"line\">    <span class=\"comment\">// enable / disable watching file and executing tests whenever any file changes</span></div><div class=\"line\">    autoWatch: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"comment\">// start these browsers</span></div><div class=\"line\">    <span class=\"comment\">// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span></div><div class=\"line\">    browsers: [<span class=\"string\">'Chrome'</span>],</div><div class=\"line\">    <span class=\"comment\">// Continuous Integration mode</span></div><div class=\"line\">    <span class=\"comment\">// if true, Karma captures browsers, runs the tests and exits</span></div><div class=\"line\">    singleRun: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"comment\">// Concurrency level</span></div><div class=\"line\">    <span class=\"comment\">// how many browser should be started simultaneous</span></div><div class=\"line\">    concurrency: <span class=\"literal\">Infinity</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"基于spring的类扫描器","date":"2017-05-18T11:28:29.000Z","keywords":"spring","_content":"有时候想要扫描某一个包下的类，spring提供一个一扫描的类，\n`org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider`\n\n这个类的`findCandidateComponents`就是扫描的方法。通过自己继承这个类，再提供类的过滤条件。就可以了\n\n还可以继承它的子类`org.springframework.context.annotation.ClassPathBeanDefinitionScanner`\n\n需要两个过滤设置。因为扫描的时候会过滤两次\n第一次是`addIncludeFilter` 添加的条件\n第二次是调用`isCandidateComponent(AnnotatedBeanDefinition)`方法\n\n \n```java\n/**\n * Entity的扫描类，提供entity的包\n * 扫描包下 {@link Entity}或{@link Table} 标注的类\n * Created by xyz327 on 17-5-15.\n */\npublic class ClassPathCacheEntityScanner extends ClassPathScanningCandidateComponentProvider {\n    private Logger logger = LoggerFactory.getLogger(getClass());\n\n    ClassPathCacheEntityScanner(BeanDefinitionRegistry registry) {\n        super(false);//不适用默认的过滤器\n        //添加自己的过滤器\n         addIncludeFilter(new AnnotationTypeFilter(Entity.class));\n         addIncludeFilter(new AnnotationTypeFilter(Table.class));\n    }\n\n    public Set<Class> doScan(String... basePackages) throws ClassNotFoundException {\n        Assert.notEmpty(basePackages, \"At least one base package must be specified\");\n        Set<Class> entitySet = new HashSet<>();\n\n        for (String basePackage : basePackages) {\n            Set<BeanDefinition> candidates = findCandidateComponents(basePackage);\n\n            for (BeanDefinition candidate : candidates) {\n                Class entityClass = ClassUtils.forName(candidate.getBeanClassName(), null);\n                entitySet.add(entityClass);\n            }\n        }\n        return entitySet;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected boolean isCandidateComponent(AnnotatedBeanDefinition beanDefinition) {\n        return beanDefinition.getMetadata().isConcrete() //是否为具体的类 (非抽象和接口)\n            && (beanDefinition.getMetadata().hasAnnotation(Entity.class.getName()) //需要标记 @Entity\n            || beanDefinition.getMetadata().hasAnnotation(Table.class.getName())); // 或者标记 @Table\n    }\n\n}\n```\n","source":"_posts/基于spring的类扫描器.md","raw":"---\ntitle: 基于spring的类扫描器\ndate: 2017-05-18 19:28:29\ntags:\ncategories: [spring ]\nkeywords: spring\n---\n有时候想要扫描某一个包下的类，spring提供一个一扫描的类，\n`org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider`\n\n这个类的`findCandidateComponents`就是扫描的方法。通过自己继承这个类，再提供类的过滤条件。就可以了\n\n还可以继承它的子类`org.springframework.context.annotation.ClassPathBeanDefinitionScanner`\n\n需要两个过滤设置。因为扫描的时候会过滤两次\n第一次是`addIncludeFilter` 添加的条件\n第二次是调用`isCandidateComponent(AnnotatedBeanDefinition)`方法\n\n \n```java\n/**\n * Entity的扫描类，提供entity的包\n * 扫描包下 {@link Entity}或{@link Table} 标注的类\n * Created by xyz327 on 17-5-15.\n */\npublic class ClassPathCacheEntityScanner extends ClassPathScanningCandidateComponentProvider {\n    private Logger logger = LoggerFactory.getLogger(getClass());\n\n    ClassPathCacheEntityScanner(BeanDefinitionRegistry registry) {\n        super(false);//不适用默认的过滤器\n        //添加自己的过滤器\n         addIncludeFilter(new AnnotationTypeFilter(Entity.class));\n         addIncludeFilter(new AnnotationTypeFilter(Table.class));\n    }\n\n    public Set<Class> doScan(String... basePackages) throws ClassNotFoundException {\n        Assert.notEmpty(basePackages, \"At least one base package must be specified\");\n        Set<Class> entitySet = new HashSet<>();\n\n        for (String basePackage : basePackages) {\n            Set<BeanDefinition> candidates = findCandidateComponents(basePackage);\n\n            for (BeanDefinition candidate : candidates) {\n                Class entityClass = ClassUtils.forName(candidate.getBeanClassName(), null);\n                entitySet.add(entityClass);\n            }\n        }\n        return entitySet;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected boolean isCandidateComponent(AnnotatedBeanDefinition beanDefinition) {\n        return beanDefinition.getMetadata().isConcrete() //是否为具体的类 (非抽象和接口)\n            && (beanDefinition.getMetadata().hasAnnotation(Entity.class.getName()) //需要标记 @Entity\n            || beanDefinition.getMetadata().hasAnnotation(Table.class.getName())); // 或者标记 @Table\n    }\n\n}\n```\n","slug":"基于spring的类扫描器","published":1,"updated":"2017-05-22T13:45:50.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fyy5ok0012xwb1d7yma9co","content":"<p>有时候想要扫描某一个包下的类，spring提供一个一扫描的类，<br><code>org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider</code></p>\n<p>这个类的<code>findCandidateComponents</code>就是扫描的方法。通过自己继承这个类，再提供类的过滤条件。就可以了</p>\n<p>还可以继承它的子类<code>org.springframework.context.annotation.ClassPathBeanDefinitionScanner</code></p>\n<p>需要两个过滤设置。因为扫描的时候会过滤两次<br>第一次是<code>addIncludeFilter</code> 添加的条件<br>第二次是调用<code>isCandidateComponent(AnnotatedBeanDefinition)</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Entity的扫描类，提供entity的包</div><div class=\"line\"> * 扫描包下 &#123;<span class=\"doctag\">@link</span> Entity&#125;或&#123;<span class=\"doctag\">@link</span> Table&#125; 标注的类</div><div class=\"line\"> * Created by xyz327 on 17-5-15.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassPathCacheEntityScanner</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassPathScanningCandidateComponentProvider</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(getClass());</div><div class=\"line\"></div><div class=\"line\">    ClassPathCacheEntityScanner(BeanDefinitionRegistry registry) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"keyword\">false</span>);<span class=\"comment\">//不适用默认的过滤器</span></div><div class=\"line\">        <span class=\"comment\">//添加自己的过滤器</span></div><div class=\"line\">         addIncludeFilter(<span class=\"keyword\">new</span> AnnotationTypeFilter(Entity.class));</div><div class=\"line\">         addIncludeFilter(<span class=\"keyword\">new</span> AnnotationTypeFilter(Table.class));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;Class&gt; <span class=\"title\">doScan</span><span class=\"params\">(String... basePackages)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</div><div class=\"line\">        Assert.notEmpty(basePackages, <span class=\"string\">\"At least one base package must be specified\"</span>);</div><div class=\"line\">        Set&lt;Class&gt; entitySet = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (String basePackage : basePackages) &#123;</div><div class=\"line\">            Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (BeanDefinition candidate : candidates) &#123;</div><div class=\"line\">                Class entityClass = ClassUtils.forName(candidate.getBeanClassName(), <span class=\"keyword\">null</span>);</div><div class=\"line\">                entitySet.add(entityClass);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> entitySet;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isCandidateComponent</span><span class=\"params\">(AnnotatedBeanDefinition beanDefinition)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> beanDefinition.getMetadata().isConcrete() <span class=\"comment\">//是否为具体的类 (非抽象和接口)</span></div><div class=\"line\">            &amp;&amp; (beanDefinition.getMetadata().hasAnnotation(Entity.class.getName()) <span class=\"comment\">//需要标记 @Entity</span></div><div class=\"line\">            || beanDefinition.getMetadata().hasAnnotation(Table.class.getName())); <span class=\"comment\">// 或者标记 @Table</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>有时候想要扫描某一个包下的类，spring提供一个一扫描的类，<br><code>org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider</code></p>\n<p>这个类的<code>findCandidateComponents</code>就是扫描的方法。通过自己继承这个类，再提供类的过滤条件。就可以了</p>\n<p>还可以继承它的子类<code>org.springframework.context.annotation.ClassPathBeanDefinitionScanner</code></p>\n<p>需要两个过滤设置。因为扫描的时候会过滤两次<br>第一次是<code>addIncludeFilter</code> 添加的条件<br>第二次是调用<code>isCandidateComponent(AnnotatedBeanDefinition)</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Entity的扫描类，提供entity的包</div><div class=\"line\"> * 扫描包下 &#123;<span class=\"doctag\">@link</span> Entity&#125;或&#123;<span class=\"doctag\">@link</span> Table&#125; 标注的类</div><div class=\"line\"> * Created by xyz327 on 17-5-15.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassPathCacheEntityScanner</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassPathScanningCandidateComponentProvider</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(getClass());</div><div class=\"line\"></div><div class=\"line\">    ClassPathCacheEntityScanner(BeanDefinitionRegistry registry) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"keyword\">false</span>);<span class=\"comment\">//不适用默认的过滤器</span></div><div class=\"line\">        <span class=\"comment\">//添加自己的过滤器</span></div><div class=\"line\">         addIncludeFilter(<span class=\"keyword\">new</span> AnnotationTypeFilter(Entity.class));</div><div class=\"line\">         addIncludeFilter(<span class=\"keyword\">new</span> AnnotationTypeFilter(Table.class));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;Class&gt; <span class=\"title\">doScan</span><span class=\"params\">(String... basePackages)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</div><div class=\"line\">        Assert.notEmpty(basePackages, <span class=\"string\">\"At least one base package must be specified\"</span>);</div><div class=\"line\">        Set&lt;Class&gt; entitySet = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (String basePackage : basePackages) &#123;</div><div class=\"line\">            Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (BeanDefinition candidate : candidates) &#123;</div><div class=\"line\">                Class entityClass = ClassUtils.forName(candidate.getBeanClassName(), <span class=\"keyword\">null</span>);</div><div class=\"line\">                entitySet.add(entityClass);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> entitySet;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isCandidateComponent</span><span class=\"params\">(AnnotatedBeanDefinition beanDefinition)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> beanDefinition.getMetadata().isConcrete() <span class=\"comment\">//是否为具体的类 (非抽象和接口)</span></div><div class=\"line\">            &amp;&amp; (beanDefinition.getMetadata().hasAnnotation(Entity.class.getName()) <span class=\"comment\">//需要标记 @Entity</span></div><div class=\"line\">            || beanDefinition.getMetadata().hasAnnotation(Table.class.getName())); <span class=\"comment\">// 或者标记 @Table</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"自定义lopback的Appender时设置枚举属性","date":"2017-05-22T13:46:34.000Z","keywords":["logback"],"_content":"\n在自定义`Appender`时，设置属性可以直接通过`logback.xml`进行设置,但是枚举对象，默认的处理方法不能处理,\n这事可以自己定义一个新的解析规则\n\n\n```java\npublic class DIYAppender extends OutputStreamAppender {\n    /**\n    * 使用 {@link ch.qos.logback.core.joran.action.NestedBasicPropertyIA} 解析\n    */\n    private String attr;\n    /**\n    * 使用 {@link ch.qos.logback.core.joran.action.NestedComplexPropertyIA} 解析\n    */\n    private User objAttr;\n    /**\n    * 使用 {@link enumObjAction} 解析\n    */\n    private enumObj enumAttr;\n    //省略 getter/setter方法\n}\npublic class User {\n\n}\npublic enum enumObj {\n    Instance;\n    private String name;\n    //省略 getter/setter\n}\npublic class enumObjAction extends ch.qos.logback.core.joran.action.Action {\n    @Override\n    public void begin(InterpretationContext ic, String name, Attributes attributes) throws ActionException {\n        ic.pushObject(enumObj.Instance);\n    }\n\n    @Override\n    public void end(InterpretationContext ic, String name) throws ActionException {\n\n    }\n}\n```\n可以在`logback.xml`的appender节点中直接进行设置,如果属性是对象可以提供`class`属性进行设置\n```xml\n    <newRule pattern=\"configuration/appender/enumAttr\" class=\"enumObjAction\"/>\n    <appender class=\"DIYAppender\">\n        <attr>value</attr><!--设置attr的值为value  --> \n        <objAttr class=\"package.User\">\n            <!--还可以给User进行设置属性值-->\n        </objAttr>\n        <enumAttr>\n            <name>nameValue</name>\n        </enumAttr>\n    </appender>\n```\n\n\n","source":"_posts/自定义lopback的Appender时设置枚举属性.md","raw":"---\ntitle: 自定义lopback的Appender时设置枚举属性\ndate: 2017-05-22 21:46:34\ntags: \ncategories: logback\nkeywords: [logback]\n---\n\n在自定义`Appender`时，设置属性可以直接通过`logback.xml`进行设置,但是枚举对象，默认的处理方法不能处理,\n这事可以自己定义一个新的解析规则\n\n\n```java\npublic class DIYAppender extends OutputStreamAppender {\n    /**\n    * 使用 {@link ch.qos.logback.core.joran.action.NestedBasicPropertyIA} 解析\n    */\n    private String attr;\n    /**\n    * 使用 {@link ch.qos.logback.core.joran.action.NestedComplexPropertyIA} 解析\n    */\n    private User objAttr;\n    /**\n    * 使用 {@link enumObjAction} 解析\n    */\n    private enumObj enumAttr;\n    //省略 getter/setter方法\n}\npublic class User {\n\n}\npublic enum enumObj {\n    Instance;\n    private String name;\n    //省略 getter/setter\n}\npublic class enumObjAction extends ch.qos.logback.core.joran.action.Action {\n    @Override\n    public void begin(InterpretationContext ic, String name, Attributes attributes) throws ActionException {\n        ic.pushObject(enumObj.Instance);\n    }\n\n    @Override\n    public void end(InterpretationContext ic, String name) throws ActionException {\n\n    }\n}\n```\n可以在`logback.xml`的appender节点中直接进行设置,如果属性是对象可以提供`class`属性进行设置\n```xml\n    <newRule pattern=\"configuration/appender/enumAttr\" class=\"enumObjAction\"/>\n    <appender class=\"DIYAppender\">\n        <attr>value</attr><!--设置attr的值为value  --> \n        <objAttr class=\"package.User\">\n            <!--还可以给User进行设置属性值-->\n        </objAttr>\n        <enumAttr>\n            <name>nameValue</name>\n        </enumAttr>\n    </appender>\n```\n\n\n","slug":"自定义lopback的Appender时设置枚举属性","published":1,"updated":"2017-05-22T14:58:42.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fyy5ok0016xwb1nypv5one","content":"<p>在自定义<code>Appender</code>时，设置属性可以直接通过<code>logback.xml</code>进行设置,但是枚举对象，默认的处理方法不能处理,<br>这事可以自己定义一个新的解析规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DIYAppender</span> <span class=\"keyword\">extends</span> <span class=\"title\">OutputStreamAppender</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">    * 使用 &#123;<span class=\"doctag\">@link</span> ch.qos.logback.core.joran.action.NestedBasicPropertyIA&#125; 解析</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"keyword\">private</span> String attr;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">    * 使用 &#123;<span class=\"doctag\">@link</span> ch.qos.logback.core.joran.action.NestedComplexPropertyIA&#125; 解析</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"keyword\">private</span> User objAttr;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">    * 使用 &#123;<span class=\"doctag\">@link</span> enumObjAction&#125; 解析</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"keyword\">private</span> enumObj enumAttr;</div><div class=\"line\">    <span class=\"comment\">//省略 getter/setter方法</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> enumObj &#123;</div><div class=\"line\">    Instance;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"comment\">//省略 getter/setter</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">enumObjAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ch</span>.<span class=\"title\">qos</span>.<span class=\"title\">logback</span>.<span class=\"title\">core</span>.<span class=\"title\">joran</span>.<span class=\"title\">action</span>.<span class=\"title\">Action</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">(InterpretationContext ic, String name, Attributes attributes)</span> <span class=\"keyword\">throws</span> ActionException </span>&#123;</div><div class=\"line\">        ic.pushObject(enumObj.Instance);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">end</span><span class=\"params\">(InterpretationContext ic, String name)</span> <span class=\"keyword\">throws</span> ActionException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以在<code>logback.xml</code>的appender节点中直接进行设置,如果属性是对象可以提供<code>class</code>属性进行设置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">newRule</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"configuration/appender/enumAttr\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"enumObjAction\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">\"DIYAppender\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span>&gt;</span>value<span class=\"tag\">&lt;/<span class=\"name\">attr</span>&gt;</span><span class=\"comment\">&lt;!--设置attr的值为value  --&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objAttr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"package.User\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--还可以给User进行设置属性值--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">objAttr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">enumAttr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>nameValue<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">enumAttr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>在自定义<code>Appender</code>时，设置属性可以直接通过<code>logback.xml</code>进行设置,但是枚举对象，默认的处理方法不能处理,<br>这事可以自己定义一个新的解析规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DIYAppender</span> <span class=\"keyword\">extends</span> <span class=\"title\">OutputStreamAppender</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">    * 使用 &#123;<span class=\"doctag\">@link</span> ch.qos.logback.core.joran.action.NestedBasicPropertyIA&#125; 解析</div><div class=\"line\">    */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String attr;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">    * 使用 &#123;<span class=\"doctag\">@link</span> ch.qos.logback.core.joran.action.NestedComplexPropertyIA&#125; 解析</div><div class=\"line\">    */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> User objAttr;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">    * 使用 &#123;<span class=\"doctag\">@link</span> enumObjAction&#125; 解析</div><div class=\"line\">    */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> enumObj enumAttr;</div><div class=\"line\">    <span class=\"comment\">//省略 getter/setter方法</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> enumObj &#123;</div><div class=\"line\">    Instance;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"comment\">//省略 getter/setter</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">enumObjAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ch</span>.<span class=\"title\">qos</span>.<span class=\"title\">logback</span>.<span class=\"title\">core</span>.<span class=\"title\">joran</span>.<span class=\"title\">action</span>.<span class=\"title\">Action</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">(InterpretationContext ic, String name, Attributes attributes)</span> <span class=\"keyword\">throws</span> ActionException </span>&#123;</div><div class=\"line\">        ic.pushObject(enumObj.Instance);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">end</span><span class=\"params\">(InterpretationContext ic, String name)</span> <span class=\"keyword\">throws</span> ActionException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以在<code>logback.xml</code>的appender节点中直接进行设置,如果属性是对象可以提供<code>class</code>属性进行设置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">newRule</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"configuration/appender/enumAttr\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"enumObjAction\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">\"DIYAppender\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span>&gt;</span>value<span class=\"tag\">&lt;/<span class=\"name\">attr</span>&gt;</span><span class=\"comment\">&lt;!--设置attr的值为value  --&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objAttr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"package.User\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--还可以给User进行设置属性值--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">objAttr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">enumAttr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>nameValue<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">enumAttr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj3fyy5if0005xwb1twtyr4sf","category_id":"cj3fyy5if0006xwb1upqu0l3q","_id":"cj3fyy5ip0009xwb1hhutcqus"},{"post_id":"cj3fyy5nq000axwb1d1cgwdrh","category_id":"cj3fyy5ny000exwb1ulqzvmw0","_id":"cj3fyy5oa000pxwb1y5f1wuqj"},{"post_id":"cj3fyy5ny000gxwb17alfljre","category_id":"cj3fyy5o7000lxwb1g6rf3u1c","_id":"cj3fyy5oh000wxwb15xiiv3bc"},{"post_id":"cj3fyy5oa000qxwb1we60m9ty","category_id":"cj3fyy5o7000lxwb1g6rf3u1c","_id":"cj3fyy5ok0011xwb1xbjv4hfa"},{"post_id":"cj3fyy5ny000ixwb1qd6jmav3","category_id":"cj3fyy5oc000rxwb1fxgzy970","_id":"cj3fyy5ok0013xwb1s56xc03a"},{"post_id":"cj3fyy5o7000kxwb18mh4une1","category_id":"cj3fyy5oi000yxwb1zokiy6tu","_id":"cj3fyy5ok0017xwb1ztf9h0c7"},{"post_id":"cj3fyy5o9000oxwb1ocfx8ort","category_id":"cj3fyy5ok0014xwb1jbwfrtux","_id":"cj3fyy5os001bxwb131grlzyv"},{"post_id":"cj3fyy5oe000txwb17lpyj0kf","category_id":"cj3fyy5ok0018xwb10ss9oiqt","_id":"cj3fyy5os001hxwb152sa4wo6"},{"post_id":"cj3fyy5oj0010xwb1kgbf7k00","category_id":"cj3fyy5os001dxwb1yd0ywy2g","_id":"cj3fyy5os001lxwb19w13iio9"},{"post_id":"cj3fyy5ok0012xwb1d7yma9co","category_id":"cj3fyy5os001ixwb16pxmqqaw","_id":"cj3fyy5os001pxwb1461usu7i"},{"post_id":"cj3fyy5ok0016xwb1nypv5one","category_id":"cj3fyy5os001mxwb1222k7yqs","_id":"cj3fyy5p0001rxwb1kiwmtukp"}],"PostTag":[{"post_id":"cj3fyy5if0005xwb1twtyr4sf","tag_id":"cj3fyy5in0007xwb11rn3np28","_id":"cj3fyy5ip0008xwb1u5vqe7i4"},{"post_id":"cj3fyy5nq000axwb1d1cgwdrh","tag_id":"cj3fyy5ny000fxwb137818dja","_id":"cj3fyy5o8000nxwb1e47kn9zz"},{"post_id":"cj3fyy5ny000gxwb17alfljre","tag_id":"cj3fyy5o7000mxwb1bqn1svcy","_id":"cj3fyy5og000uxwb1lrry80h3"},{"post_id":"cj3fyy5oa000qxwb1we60m9ty","tag_id":"cj3fyy5o7000mxwb1bqn1svcy","_id":"cj3fyy5oh000xxwb1ase9caaf"},{"post_id":"cj3fyy5ny000ixwb1qd6jmav3","tag_id":"cj3fyy5oc000sxwb1mc3x7mea","_id":"cj3fyy5os001axwb1ee7q4j3m"},{"post_id":"cj3fyy5ny000ixwb1qd6jmav3","tag_id":"cj3fyy5oi000zxwb1rf3l70il","_id":"cj3fyy5os001cxwb1x223odg7"},{"post_id":"cj3fyy5ny000ixwb1qd6jmav3","tag_id":"cj3fyy5ok0015xwb16uzpc8wy","_id":"cj3fyy5os001fxwb1sp02s9ky"},{"post_id":"cj3fyy5o7000kxwb18mh4une1","tag_id":"cj3fyy5ok0019xwb1fj1o7u2f","_id":"cj3fyy5os001gxwb1g0myhafc"},{"post_id":"cj3fyy5o9000oxwb1ocfx8ort","tag_id":"cj3fyy5os001exwb1jj0ayuc7","_id":"cj3fyy5os001kxwb1o8y46wle"},{"post_id":"cj3fyy5og000vxwb12uhgpo3h","tag_id":"cj3fyy5os001jxwb19nfi3uu3","_id":"cj3fyy5os001oxwb16it1uktz"},{"post_id":"cj3fyy5oj0010xwb1kgbf7k00","tag_id":"cj3fyy5os001nxwb1r0q9ajus","_id":"cj3fyy5p0001qxwb1l5wp819g"}],"Tag":[{"name":"git","_id":"cj3fyy5in0007xwb11rn3np28"},{"name":"effective java","_id":"cj3fyy5ny000fxwb137818dja"},{"name":"loopback","_id":"cj3fyy5o7000mxwb1bqn1svcy"},{"name":"hexo","_id":"cj3fyy5oc000sxwb1mc3x7mea"},{"name":"theme","_id":"cj3fyy5oi000zxwb1rf3l70il"},{"name":"NexT","_id":"cj3fyy5ok0015xwb16uzpc8wy"},{"name":"mysql","_id":"cj3fyy5ok0019xwb1fj1o7u2f"},{"name":"springboot","_id":"cj3fyy5os001exwb1jj0ayuc7"},{"name":"spring-boot","_id":"cj3fyy5os001jxwb19nfi3uu3"},{"name":"test karma jamine","_id":"cj3fyy5os001nxwb1r0q9ajus"}]}}