{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[{"_id":"source/BingSiteAuth.xml","path":"BingSiteAuth.xml","modified":1,"renderable":0},{"_id":"source/ads.txt","path":"ads.txt","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/images/beian.png","path":"images/beian.png","modified":1,"renderable":0},{"_id":"source/images/avatar/avatar.jpg","path":"images/avatar/avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/avatar/avatar_1.jpg","path":"images/avatar/avatar_1.jpg","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/index.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1702977563191},{"_id":"source/css/style.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1702952724591},{"_id":"source/404.md","hash":"8958b09c91ad4249c507089a85259cb7b323c4c8","modified":1702952724503},{"_id":"source/BingSiteAuth.xml","hash":"1a5087a50de930d8763b86850574cfd783b1fa3a","modified":1702952724503},{"_id":"source/baidu_verify_LjhEXUygCP.html","hash":"a2b8b5ff61caebec7239e9f29d2a14f07c299bc3","modified":1702952724589},{"_id":"source/googlecc4a5534aecf666a.html","hash":"b50d73a3da29bffa5f120bc1ec9ff60fe071c7e1","modified":1702952724593},{"_id":"source/ads.txt","hash":"abc648af73f5bdafad595243a8622890efa70de1","modified":1702980976077},{"_id":"source/favicon.ico","hash":"f52ddbc2d8d943cfcbb532d5f4bec8d8a4c4b95f","modified":1702952724592},{"_id":"source/_data/favicons.json","hash":"f37fe73dd364a6cfcc527467a3755a0500327804","modified":1702952724504},{"_id":"source/_data/next-bak.yml","hash":"e0bc318a9e2a56c97c215c6b14e45d525d581245","modified":1702977563383},{"_id":"source/service-worker.js","hash":"3d0ed4a9e1adc7f404472b267a768c03bb6a7b63","modified":1702952724599},{"_id":"source/robots.txt","hash":"0385fc657415aaea98074023ec9a86cd51b5ea79","modified":1702952724597},{"_id":"source/_data/next-v7.3.0.yml","hash":"247e718345df197d465adda51ea1e91f8c976e31","modified":1702973317203},{"_id":"source/about/index.md","hash":"3c0f59a085c95a8f587680985f94f61853cd7804","modified":1702952724589},{"_id":"source/categories/index.md","hash":"52e94fa498eab4193d653a3266707518882ca258","modified":1702952724591},{"_id":"source/_data/next-v7.1.0.yml","hash":"0e1c469bf5b3642bf2badf8641af6a152a9ec64e","modified":1702973317203},{"_id":"source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1702952724595},{"_id":"source/photos/index.md","hash":"1dc4a8bd4e4ccb95dca1d2939084804ab0471f4f","modified":1702952724596},{"_id":"source/schedule/index.md","hash":"979f983b39d2f8e5a59c5a1a49ec662a07876989","modified":1702952724598},{"_id":"source/tags/index.md","hash":"53c9abbdc7f7fc6beace0de457804487d0473572","modified":1702952724600},{"_id":"source/_data/layout/footer.swig","hash":"1aa6b7e0868b231230f464e6ed24835b0ae160f3","modified":1702977563168},{"_id":"source/_data/layout/head.swig","hash":"0a8ecdaab2c74cd384c6fe441137d06e7bce7431","modified":1702977563169},{"_id":"source/images/avatar/avatar.jpg","hash":"71c15236f78d86b8866b7428196a46b70e23d3df","modified":1702952724594},{"_id":"source/images/avatar/avatar_1.jpg","hash":"0709fea9b505f14a24610765014507ef8c690741","modified":1702952724595},{"_id":"source/_posts/2016/11/DIY-hexo-theme-next.md","hash":"2559fb610ec7d330a3d751578ada8be0dea9c4e3","modified":1702952724510},{"_id":"source/_posts/2016/11/git.md","hash":"e2abe9fbe4352dbe9d3dbea6f8fd20f004d99eec","modified":1702952724510},{"_id":"source/_posts/2016/12/loopback-two.md","hash":"2c1937898e8d3443bf7d5f758966a2e02b7e73a3","modified":1702952724512},{"_id":"source/_posts/2016/12/loopback-one.md","hash":"d0a2f46b2925ecb6605c992c73ba1153886f4322","modified":1702952724511},{"_id":"source/_posts/2016/12/mysql-record.md","hash":"8d9b13d24032ef66875b6665bc9ff944756ef627","modified":1702952724512},{"_id":"source/_posts/2016/3/effective-java-一.md","hash":"ae30b004caf2777d981b23ec93adb4f0d2574647","modified":1702952724514},{"_id":"source/_posts/2016/3/hello-world.md","hash":"977e579429ea4b5f4ab0a58ea55a18935cfd1c24","modified":1702952724515},{"_id":"source/_posts/2016/12/spring-boot-slf4j.md","hash":"c085776b2f2a22cc00143b20d43273462c9522fb","modified":1702952724513},{"_id":"source/_posts/2017/10/deepin添加开机启动脚本.md","hash":"2bf731fd352b6d4860de3f39ee6adf9c10fb37c6","modified":1702952724516},{"_id":"source/_posts/2017/11/effective-java-七.md","hash":"fc4b66fb430be46d4e02ccbbbe3e2377860d3fa1","modified":1702952724517},{"_id":"source/_posts/2017/11/effective-java-九.md","hash":"6c397e992b1ca49f29a6ca376c2bf3938b8c0886","modified":1702952724518},{"_id":"source/_posts/2017/11/effective-java-五.md","hash":"a3223f8fe4b28935eb33457d46a4ba5fd16a86f7","modified":1702952724519},{"_id":"source/_posts/2017/11/effective-java-二.md","hash":"f58f75cb7af0942c12661080edc2412d2d32bc0c","modified":1702952724519},{"_id":"source/_posts/2017/11/effective-java-三.md","hash":"ec91922575708c2bcd51addc63eec9970a816db3","modified":1702952724518},{"_id":"source/_posts/2017/11/effective-java-六.md","hash":"a51ced75bf1665b354485d158b1b078dd9c93021","modified":1702952724520},{"_id":"source/_posts/2017/11/effective-java-八.md","hash":"71bd2a861e9ba65f6e2a60a9c99432a3ea2a3c41","modified":1702952724520},{"_id":"source/_posts/2017/11/maven-release版本管理插件.md","hash":"e6bfae3c07683f938d09069a45c3a7e57ffd8ae3","modified":1702952724523},{"_id":"source/_posts/2017/12/ArrayList与LinkedList的区别.md","hash":"fdc069b90793dc867eedc72aedb26c7d02ad8667","modified":1702952724524},{"_id":"source/_posts/2017/11/effective-java-四.md","hash":"2e00184d3970de61f3bcb5248208cdf0e472272a","modified":1702952724521},{"_id":"source/_posts/2017/11/zuul入门.md","hash":"baccd232ac40cc1f675c9ba62d4627ebf05c6284","modified":1702952724523},{"_id":"source/_posts/2017/2/karma-jasmine-build-an-automated-test-environment.md","hash":"6fe032674a02e0c5c30af43cb1e2d51ef8baa792","modified":1702952724525},{"_id":"source/_posts/2017/5/基于spring的类扫描器.md","hash":"855b570c0cbcae7f4ad5c5cbfc5b369c3e6eabc9","modified":1702952724529},{"_id":"source/_posts/2017/4/windows-use-oh-my-zsh.md","hash":"75086f2de12ca64cbe34067cb4399d314a89f7ef","modified":1702952724527},{"_id":"source/_posts/2017/5/自定义lopback的Appender时设置枚举属性.md","hash":"0028c57465293e199e00d4a6e91a04f16089bb68","modified":1702952724530},{"_id":"source/_posts/2019/01/Sentine默认slot说明.md","hash":"1ffac9bd4331b2021324e4c09052846427559878","modified":1702977563173},{"_id":"source/_posts/2017/9/spring一些用法小结.md","hash":"cdff14d8bc1f3db94db0a205b77b1b291e54be39","modified":1702952724531},{"_id":"source/_posts/2019/01/sentinel相关概念.md","hash":"4a86a679ca5d982a23e2f2fda188ce3a246196f3","modified":1702977563174},{"_id":"source/_posts/2019/09/spring-message.md","hash":"15c68ab2e22a657764f86dce293458939c1a5fd9","modified":1702977563175},{"_id":"source/_posts/2017/4/springboot-fileupdat- in-Filter-can't-get.md","hash":"8b692ee880e286dcd5994d9e973f9901b3e29f1a","modified":1702952724526},{"_id":"source/_posts/2018/3/Spring动态新增删除Bean.md","hash":"c0dfbff0ff5cf7747c296665ee60c3be64dcf7d9","modified":1702952724535},{"_id":"source/_posts/2018/12/sentinel学习笔记-1.md","hash":"3e358909645d6b64b9b46398dacc634f5019d2a4","modified":1702977563172},{"_id":"source/_posts/2018/3/springmvc学习.md","hash":"a6b9f29feb1faf303d91086c6979ec0ac0ffa3e3","modified":1702952724535},{"_id":"source/_posts/2018/4/springmvc初始化MultipartResolver.md","hash":"18645b9d2ff874a9c3892f61feddeb66377a0cac","modified":1702952724536},{"_id":"source/_posts/2021/06/spring-Bean-注解的用法.md","hash":"06d88f9a48a1874154190daa54f11b791c9b16c4","modified":1702977563186},{"_id":"source/_posts/2021/05/leetcode-07-整数反转.md","hash":"a1b7c3e279f1427d16e8520256f6f07a2859e3c5","modified":1702977563185},{"_id":"source/_posts/2021/05/leetcode-01-两数之和.md","hash":"847ae6ea83e29d5376611a3c92bfb1b3098ddbfe","modified":1702977563184},{"_id":"source/_posts/2021/06/spring-boot中-Configuration是怎么实现-Bean方法注入的.md","hash":"1f9e94df0d1a39a393665b7928fa70b2113f9bfb","modified":1702977563187},{"_id":"source/_posts/2021/06/springIOC的refresh方法.md","hash":"b9e7fb619e28f405112dadb0b011a00b20133ad1","modified":1702977563188},{"_id":"source/_posts/2020/02/Git-Commit规范.md","hash":"277932f92579cd34b0ce65391d47c0e6cc4db341","modified":1702977563176},{"_id":"source/_posts/2021/06/两个线程交替输出1-100的奇偶数.md","hash":"c720907acf27766bc64ba1b3e36a1e7307a7c960","modified":1702977563191},{"_id":"source/_posts/2020/03/Electron常见问题.md","hash":"ada1fc6a5dc7d95babcce36b5fcb5e9641b158e8","modified":1702977563179},{"_id":"source/_posts/2020/03/排序算法.md","hash":"a5a3afd07c8e09191623a6452c54682b5af6a65c","modified":1702977563180},{"_id":"source/_posts/2020/03/给Junit4增加Benchmark-基准测试.md","hash":"3e526f354d55a4f0edc7bc1a072d7a92a3109c5e","modified":1702977563181},{"_id":"source/_posts/2020/04/Jira-Bitbucket-Confluence使用CAS完成SSO.md","hash":"ac83a730eff8e8069506354ecda34db121d56934","modified":1702977563182},{"_id":"source/_posts/2020/02/git-workflow之gitflow说明.md","hash":"383ad072d0c603f96b422a9475b7f6514df95b35","modified":1702977563178},{"_id":"source/_posts/2020/02/git-workflow之gitflow的工具.md","hash":"524b005b10dfb07e7a2da1f598066b3b1a09ae59","modified":1702977563177},{"_id":"source/_posts/2020/08/Fastjson反序列化使用new-ParameterizedTypeImpl导致内存泄漏.md","hash":"491aa32a313d422ccba1c1452ba3c83b17f76464","modified":1702977563183},{"_id":"source/_posts/2019/01/sentinel相关概念/漏桶.png","hash":"cec3b27254a8f05f2575faf7864326c7791e257f","modified":1702952724541},{"_id":"source/_posts/2019/09/spring-message/spring-message-1.png","hash":"75b7e0ef83b28a6bfb674255a9f35ef19a377666","modified":1702952724563},{"_id":"source/_posts/2019/01/sentinel相关概念/集群限流-嵌入模式.png","hash":"9924e5312a5d1b8b9e427df558dc5e7410ac16f2","modified":1702952724556},{"_id":"source/_posts/2020/02/Git-Commit规范/idea-commit-1.png","hash":"a4ee566bf1f984b033b7e44a9022f8bf6f2e945a","modified":1702952724571},{"_id":"source/_posts/2020/02/git-workflow之gitflow的工具/idea-gitflow-1.png","hash":"2bfffee2a105e7b64789ceb50527adcb59664bb8","modified":1702952724573},{"_id":"source/_posts/2020/02/Git-Commit规范/idea-commit-2.png","hash":"49b6be2e60737170fb63afd218c13a1407d7bc97","modified":1702952724572},{"_id":"source/_posts/2019/09/spring-message/spring-message-2.png","hash":"9dfee827e6fd6c26180acb854f5c099428455c1f","modified":1702952724565},{"_id":"source/_posts/2019/09/spring-message/spring-messaging-2.png","hash":"40c82ef353ad6f5e82e2e92251a610d8ae6a3f36","modified":1702952724566},{"_id":"source/_posts/2020/02/git-workflow之gitflow说明/o_git-workflow-release-cycle-1historical.png","hash":"d7c988e3adeaff95bf34489961d5e1e7ef641205","modified":1702952724575},{"_id":"source/_posts/2020/02/git-workflow之gitflow说明/o_git-workflow-release-cycle-2feature.png","hash":"26047ac270d97ec25b16c2a7c423b8fe68933eba","modified":1702952724576},{"_id":"source/_posts/2020/02/git-workflow之gitflow说明/o_git-workflow-release-cycle-3release.png","hash":"92392cb94617ac66a1c2b55ebcfc5f0d76321c36","modified":1702952724577},{"_id":"source/_posts/2020/02/git-workflow之gitflow说明/o_git-workflow-release-cycle-4maintenance.png","hash":"1ebb6aebd40652619b079e7330e1e8fd591070c0","modified":1702952724578},{"_id":"source/_posts/2019/01/sentinel相关概念/令牌桶.png","hash":"29a3ec5fe66172b8fc592502a988a515a976aaf9","modified":1702952724540},{"_id":"source/_posts/2019/01/sentinel相关概念/集群限流-独立模式.png","hash":"54f970057f602c45fa7839e8115c609a8529c656","modified":1702952724558},{"_id":"source/_posts/2018/12/sentinel学习笔记-1/主要特性.png","hash":"aad5288b08143f34f1369b3a87396555a4ec0571","modified":1702952724534},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1702955658066},{"_id":"node_modules/hexo-theme-next/README.md","hash":"d6820f46d03a93bd6dc8b10f49f58aec82ad2b06","modified":1702955658083},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"4f6046ceb1470be9ff334ede20b73871c951d845","modified":1702955658291},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"dc190e9f1cdaf83d8c46ccaf2fae914944b8de1d","modified":1702955658298},{"_id":"node_modules/hexo-theme-next/package.json","hash":"4b48877b223ec717e708540a2df03d64983c02ab","modified":1702955658056},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1702955658063},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1702955658068},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1702955658078},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1702955658277},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1702955658288},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1702955658288},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1702955658290},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1702955658291},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1702955658288},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1702955658291},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1702955658291},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1702955658294},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1702955658291},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1702955658303},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1702955658294},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1702955658297},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1702955658303},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1702955658301},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1702955658309},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1702955658301},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1702955658301},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1702955658310},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1702955658311},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1702955658311},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1702955658306},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1702955658310},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1702955658311},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1702955658321},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1702955658103},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1702955658310},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1702955658122},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1702955658104},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1702955658110},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1702955658126},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1702955658157},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1702955658136},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"29c89a41b371f893e56c87ea61adabc444ec58cc","modified":1702955658075},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1702955658066},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1702955658069},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"12a3e96581964a22b474cc739675d52ef93ff932","modified":1702955658076},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1702955658110},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1702955658123},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1702955658114},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1702955658126},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1702955658142},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"abda600685ee972e1f6b7a2dcc56f13e2daa6263","modified":1702955658126},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"65e9112fb7eb26d2880db624554a99aca028140b","modified":1702955658136},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1702955658078},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1702955658128},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1702955658082},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1702955658125},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1702955658114},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1702955658128},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1702955658118},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1702955658136},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1702955658011},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1702955658035},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1702955658026},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"447db39d17775b2bd18d8af9c9d65b7b8449f751","modified":1702955658035},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1702955658047},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1702955658023},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1702955658020},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1702955658035},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"957241c28796ff352de7f4cffba7bb289b043586","modified":1702955658045},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"ead37e9167b682f1fa34b5401c3050e18c7ee4a3","modified":1702955658042},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1702955658058},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1702955658045},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1702955658008},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1702955658008},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1702955658008},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1702955658026},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1702955658026},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1702955658029},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1702955658029},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1702955658035},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1702955658045},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1702955658147},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1702955658045},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1702955658050},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1702955658056},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1702955658157},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1702955658248},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1702955658056},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1702955658136},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1702955658237},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1702955658004},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1702955658272},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1702955658136},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1702955658011},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1702955658011},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1702955658011},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1702955658139},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1702955658008},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1702955658042},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1702955658039},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1702955658277},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1702955658045},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1702955658050},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1702955658053},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1702955658114},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1702955658109},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1702955658110},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1702955658110},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1702955658082},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1702955658126},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1702955658109},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1702955658128},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1702955658139},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1702955658125},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1702955658125},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1702955658139},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1702955658129},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1702955658133},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1702955658133},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1702955658133},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1702955658125},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1702955658078},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1702955658125},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1702955658104},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1702955658136},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1702955658114},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1702955658110},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1702955658118},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1702955658114},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1702955658124},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1702955658114},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1702955658110},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1702955658124},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1702955658136},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1702955658110},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1702955658082},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1702955658117},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1702955658117},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1702955658136},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1702955658111},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1702955658102},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1702955658122},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1702955658127},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1702955658123},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1702955658141},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1702955658120},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1702955658114},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1702955658104},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1702955658123},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1702955658110},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1702955658125},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1702955658114},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1702955658114},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1702955658122},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1702955658136},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1702955658117},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1702955658011},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1702955658026},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1702955658029},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1702955658042},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"6853e5433e3eaa19ea43fa20b08d956ba4cec4ac","modified":1702955658050},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"464db1e7182e5b9cdbd32e8b5368d5e683b1d9c7","modified":1702955658056},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1702955658011},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1702955658011},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1702955658017},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1702955658011},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1702955658019},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1702955658016},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1702955658029},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1702955658029},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1702955658055},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1702955658213},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1702955658242},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1702955658237},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1702955658259},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1702955658237},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1702955658004},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1702955658042},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1702955658020},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1702955658039},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1702955658047},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1702955658150},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1702955658235},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1702955658237},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1702955658150},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1702955658259},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1702955658213},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1702955658234},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1702955658248},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1702955658233},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1702955658259},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1702955658274},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1702955658271},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1702955658228},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1702955658141},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1702955658242},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1702955658151},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1702955658157},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1702955658141},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1702955658150},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1702955658251},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1702955658151},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1702955658234},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"82cda756f5b7092df2eee6641b9786df71623bdb","modified":1702955658151},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1702955658162},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1702955658151},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1702955658248},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"26a0cba1eee5de45a45a5e14e17707f905390512","modified":1702955658151},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1702955658162},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1702955658151},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1702955658237},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1702955658004},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1702955658162},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1702955658023},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1702955658029},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1702955658019},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1702955658035},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1702955658045},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1702955658011},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1702955658029},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1702955658019},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1702955658011},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1702955658054},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1702955658023},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1702955658029},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1702955658035},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1702955658029},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1702955658029},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1702955658020},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1702955658029},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1702955658004},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1702955658035},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1702955658045},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1702955658054},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1702955658234},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1702955658232},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1702955658237},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1702955658259},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1702955658271},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1702955658228},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1702955658252},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"7369928305330c73ae0b3f063a681a8384d8fde4","modified":1702955658252},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1702955658252},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1702955658255},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1702955658255},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1702955658268},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1702955658268},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1702955658259},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1702955658234},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1702955658235},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1702955658268},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1702955658268},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1702955658246},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1702955658237},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1702955658271},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1702955658234},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1702955658213},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1702955658228},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1702955658235},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1702955658162},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1702955658250},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1702955658248},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1702955658248},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1702955658260},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1702955658237},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1702955658228},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1702955658237},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1702955658277},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1702955658271},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1702955658259},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1702955658235},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"bbbc40b03cb299d2a6a568f329b2ce98e1cdc430","modified":1702955658249},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1702955658232},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1702955658272},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1702955658268},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1702955658228},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1702955658259},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1702955658259},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1702955658269},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1702955658272},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1702955658272},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1702955658272},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1702955658264},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1702955658272},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1702955658274},{"_id":"public/images/beian.png","hash":"e8a9b658667041bc3c2c337337c90996eecf460d","modified":1702981059711},{"_id":"public/images/avatar/avatar.jpg","hash":"ce8fa86113d7ec563456bd8ee4736bb59b3fa6c0","modified":1702981059711},{"_id":"public/images/avatar/avatar_1.jpg","hash":"00d2ff1a408dc3f85a381edcec6eedfcca9acf0e","modified":1702981059711},{"_id":"public/images/favicon-16x16-next.png","hash":"5ee510e58b7b9e062a22da28ce1eb35a2f381021","modified":1702981059711},{"_id":"public/images/apple-touch-icon-next.png","hash":"b972160c147e9bec3a0f7432e6e80dfa92581b0b","modified":1702981059711},{"_id":"public/images/favicon-32x32-next.png","hash":"f88e49404e4c2a326e51ae65ea5b2375b5d5fde8","modified":1702981059711},{"_id":"public/images/logo.svg","hash":"24e43f48102f1bbfaafbff07e4ca94927d062578","modified":1702981059711},{"_id":"public/2019/01/07/sentinel相关概念/令牌桶.png","hash":"48d05060b57a6733f5f167a5e9c83ffcc2d40b33","modified":1702981059711},{"_id":"public/2019/01/07/sentinel相关概念/漏桶.png","hash":"3cca8c99d489c9af7c3550a32f4a39bd38cb1673","modified":1702981059711},{"_id":"public/2019/01/07/sentinel相关概念/集群限流-嵌入模式.png","hash":"e1b464c43b4dd554a3b5b5535f611d55bcb802eb","modified":1702981059711},{"_id":"public/2019/01/07/sentinel相关概念/集群限流-独立模式.png","hash":"bfbc95aefc725d7205c367d0bd0f8959e3eec1b7","modified":1702981059711},{"_id":"public/2019/09/09/spring-message/spring-message-1.png","hash":"9ba1574fcff801184a25d261a3adbb6306654994","modified":1702981059711},{"_id":"public/2019/09/09/spring-message/spring-message-2.png","hash":"dcedf4b643c1fd5f08edf7ec60bf6211963af378","modified":1702981059711},{"_id":"public/2019/09/09/spring-message/spring-messaging-2.png","hash":"9ef2a9d5d44d0ea90ddd7194d50d04e86dbaffb8","modified":1702981059711},{"_id":"public/2018/12/27/sentinel学习笔记-1/主要特性.png","hash":"269216a5ffe00f221d362cfa53b8c11c90e5923f","modified":1702981059711},{"_id":"public/2020/02/28/Git-Commit规范/idea-commit-1.png","hash":"7059947717b0168725db7c83547a5d9bb28c09b2","modified":1702981059711},{"_id":"public/2020/02/28/Git-Commit规范/idea-commit-2.png","hash":"ef7b21e0e6260062ac3a49570038d3c30f6da2d6","modified":1702981059711},{"_id":"public/2020/02/26/git-workflow之gitflow说明/o_git-workflow-release-cycle-1historical.png","hash":"ee9f0f63924c6872d2b6410ddfdc9163db6e020b","modified":1702981059711},{"_id":"public/2020/02/26/git-workflow之gitflow说明/o_git-workflow-release-cycle-2feature.png","hash":"25938d974075250ace15728f063939606bdfd94c","modified":1702981059711},{"_id":"public/2020/02/26/git-workflow之gitflow说明/o_git-workflow-release-cycle-3release.png","hash":"fa63061a5e99bc67423d84ddd9b3edb0872a2af2","modified":1702981059711},{"_id":"public/2020/02/26/git-workflow之gitflow说明/o_git-workflow-release-cycle-4maintenance.png","hash":"64b440c9eb759d7ad4689cd397ca5ad8948b82f9","modified":1702981059711},{"_id":"public/2020/02/26/git-workflow之gitflow的工具/idea-gitflow-1.png","hash":"8ff4ba236c150293d0743c05007bfaea93e2c5f7","modified":1702981059711},{"_id":"public/css/style.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1702981059711},{"_id":"public/service-worker.js","hash":"606b34da1165c4a25db7519f656c02856f34d942","modified":1702981059711},{"_id":"public/googlecc4a5534aecf666a.html","hash":"c0f88819ee38a68a52d77d078aa901c5b1915ef2","modified":1702981059711},{"_id":"public/sitemap.xml","hash":"a90b3b489f614c5a87b223ba878f6b3a940623fe","modified":1702981059711},{"_id":"public/about/index.html","hash":"5c8650625f10e7f481e649f6d35d5aa7c99a5c5b","modified":1702981059711},{"_id":"public/baidu_verify_LjhEXUygCP.html","hash":"08c6c962205bada26333b672d62baa497fe00e4b","modified":1702981059711},{"_id":"public/404.html","hash":"d13fb12a6c17ab7a740410105b1f4a702ba1f18c","modified":1702981059711},{"_id":"public/photos/index.html","hash":"e4b0b4ffaa0f01ffce065deac905eb7c3c140ea7","modified":1702981059711},{"_id":"public/schedule/index.html","hash":"1df55cf548b05a23cd66abb76aff74d1f15ca132","modified":1702981059711},{"_id":"public/tags/index.html","hash":"c342416a685c11e3b527158e08fd3caf4ea2ed72","modified":1702981059711},{"_id":"public/archives/page/5/index.html","hash":"fdd69ea30b4baefc02ee066e39b6ce3d487c2acb","modified":1702981059711},{"_id":"public/archives/2016/index.html","hash":"f5707b445d48965947f66a190fe221b51b91f353","modified":1702981059711},{"_id":"public/archives/2016/03/index.html","hash":"0d8e69b7bc9c061c0f3f8ce3faccb026c70dd559","modified":1702981059711},{"_id":"public/archives/2016/12/index.html","hash":"82c2789f0b9ea3610717052df41ba5b8cb5200db","modified":1702981059711},{"_id":"public/archives/2016/11/index.html","hash":"e8536affe3a07fdfdc0265f3395497aebeed35b4","modified":1702981059711},{"_id":"public/archives/2017/02/index.html","hash":"bec3d8f81d3609b0a5abff3653a876d340a773ba","modified":1702981059711},{"_id":"public/archives/2017/04/index.html","hash":"74809c4ffe41a38b72c1f018964d79141f1d3555","modified":1702981059711},{"_id":"public/archives/2017/05/index.html","hash":"87e31d62f60c71f0c1fe9a0c7dc3254d18f84329","modified":1702981059711},{"_id":"public/archives/2017/09/index.html","hash":"6643669f6e4e6e7904fb8fc998105cb8d072cbf9","modified":1702981059711},{"_id":"public/archives/2017/10/index.html","hash":"d4ddbb97344e7daf4c037010a99b4e190a2499b8","modified":1702981059711},{"_id":"public/archives/2017/12/index.html","hash":"63ec3aae1c04ee926c8ddea7cb02bcda7f46978f","modified":1702981059711},{"_id":"public/archives/2018/index.html","hash":"8f4ee8a6604674c1d30226ca4bef741d0e65369f","modified":1702981059711},{"_id":"public/archives/2018/03/index.html","hash":"1eb82b1481a8e90867374e079db473ad6f72e0cf","modified":1702981059711},{"_id":"public/archives/2018/04/index.html","hash":"615f79aea22dc6568950265802c4f7f1ac4513f6","modified":1702981059711},{"_id":"public/archives/2018/12/index.html","hash":"4eb8f50092cd7886caad2414c22dee7dd6b2e38c","modified":1702981059711},{"_id":"public/archives/2019/index.html","hash":"542d16cd5a09dae56f3f0c60cfa7a503740e3c76","modified":1702981059711},{"_id":"public/archives/2019/01/index.html","hash":"ac2763c80c45dc7cc3556dada210005d7bd58a0c","modified":1702981059711},{"_id":"public/archives/2019/09/index.html","hash":"a1973644dc35bf19beeef69c4aea36cf8b1ecb20","modified":1702981059711},{"_id":"public/archives/2020/02/index.html","hash":"af275e48e2847d8f0b967a5753f60cf8340f92f3","modified":1702981059711},{"_id":"public/archives/2020/03/index.html","hash":"f90f1d5dcd1fe5582bc77a59658e785fcfd8790f","modified":1702981059711},{"_id":"public/archives/2020/04/index.html","hash":"eaf7cc2648752bd54e2d6d48e67376979ae41b89","modified":1702981059711},{"_id":"public/archives/2020/08/index.html","hash":"75766aa1bfb3949dbf7821bf4389d7fe357f186b","modified":1702981059711},{"_id":"public/archives/2021/index.html","hash":"ad46a5dec5985795db47e3ca492ac080f8528995","modified":1702981059711},{"_id":"public/archives/2021/05/index.html","hash":"b1ab4ff18f4e9d8e355e2d243f3ca635e890b181","modified":1702981059711},{"_id":"public/archives/2021/06/index.html","hash":"1c7e9eebe9b3d556c86a714984be21f6f44bb9e4","modified":1702981059711},{"_id":"public/categories/hexo/index.html","hash":"35297ef920892ddde95b997229043057780280b1","modified":1702981059711},{"_id":"public/categories/mysql/index.html","hash":"e5118463c1c9274872055892282ac5d9f2a9c539","modified":1702981059711},{"_id":"public/categories/git/index.html","hash":"ab07f4dee6a029a7a4613a5c7c4a182c28925f6b","modified":1702981059711},{"_id":"public/categories/loopback/index.html","hash":"b038f016d1b17ae68f89e112cb179d7cd15aa068","modified":1702981059711},{"_id":"public/categories/java/page/2/index.html","hash":"5fb984599ffe09f702acae1bd38c30896faab130","modified":1702981059711},{"_id":"public/categories/linux/index.html","hash":"1789bc4266a501ed8361760f76c930ab8294f4ff","modified":1702981059711},{"_id":"public/categories/maven/index.html","hash":"ac0a43bb594feac0ff7758032a6e7b193aea3d7e","modified":1702981059711},{"_id":"public/categories/spring-cloud/index.html","hash":"d4bcef27890782e4772d88357ebd2246145a943c","modified":1702981059711},{"_id":"public/categories/test/index.html","hash":"13ebf66671061303b08e38402e2239c24406c905","modified":1702981059711},{"_id":"public/categories/other/index.html","hash":"f174971dc2326dc83585d4ff7642f32d09a158e5","modified":1702981059711},{"_id":"public/categories/springboot/index.html","hash":"4ba9a262dd9939f0e8aed2bd73e20112db91624a","modified":1702981059711},{"_id":"public/categories/spring/index.html","hash":"d5177884d37c454858ffbd4312cdf514ea2d13f9","modified":1702981059711},{"_id":"public/categories/logback/index.html","hash":"4fb32f2e3ab5497d6d7d0fdf381d0aaf68cc6eed","modified":1702981059711},{"_id":"public/categories/sentinel/index.html","hash":"45c07df9fd2f26d69141d0938b41188cf883e914","modified":1702981059711},{"_id":"public/categories/springmvc/index.html","hash":"cd138ebb6e39a5a5402eb8f650487817735691f0","modified":1702981059711},{"_id":"public/categories/leetcode/index.html","hash":"60e0487aab75c3ca000deebe3e8bd2dc1eb1308c","modified":1702981059711},{"_id":"public/categories/面试题/index.html","hash":"aa5dcd60f2bf8f2229716d8f2984cf6bedfe54a3","modified":1702981059711},{"_id":"public/categories/electron/index.html","hash":"31b8f25a5640d9c46062621eca7fbfcd66919e76","modified":1702981059711},{"_id":"public/categories/java/junit/index.html","hash":"c2ca5bd84ded8b8cad6a40c2a0c4a3d0af7d074e","modified":1702981059711},{"_id":"public/categories/java/fastjson/index.html","hash":"0a57b909ae123c114a1efd1f878289857e3c91f2","modified":1702981059711},{"_id":"public/categories/算法/index.html","hash":"8342eccd01bc45b83e699955597453fa284c63de","modified":1702981059711},{"_id":"public/categories/leetcode/算法/index.html","hash":"31ab51eb942ffb8645bd087b637772fcd3e8813f","modified":1702981059711},{"_id":"public/categories/算法/排序/index.html","hash":"cde562e749ec0904c571ba86061fac7557ef80f7","modified":1702981059711},{"_id":"public/tags/hexo/index.html","hash":"d702423842c48b8777b4bbd09876bc675e2e9432","modified":1702981059711},{"_id":"public/tags/theme/index.html","hash":"2cda6d75c992258a94f1f1e7b34e73c0de89aa6f","modified":1702981059711},{"_id":"public/tags/NexT/index.html","hash":"41d4deaae5ee311137dd352cebeff0a1e3ff7f41","modified":1702981059711},{"_id":"public/tags/git/index.html","hash":"96713635d5b85c61c02281e6114616b04bee604a","modified":1702981059711},{"_id":"public/tags/loopback/index.html","hash":"eebca5f85dcb825f1351e7dcb3a7d6f042def66e","modified":1702981059711},{"_id":"public/tags/mysql/index.html","hash":"d5e6bad918847392e770f9aa10f265da3ab6973b","modified":1702981059711},{"_id":"public/tags/spring-boot/index.html","hash":"245f3ec613f2dabd3404183630b2a3c6f4ba634c","modified":1702981059711},{"_id":"public/tags/maven/index.html","hash":"25a3569ffe32417b9ae8e49b2ddf6158f67f252a","modified":1702981059711},{"_id":"public/tags/jdk/index.html","hash":"86120ca7f9d42ece3751de44143f7c90f699dc8d","modified":1702981059711},{"_id":"public/tags/java/index.html","hash":"1ea8ab931570c2b3c0813961f214d94869a85263","modified":1702981059711},{"_id":"public/tags/spring-cloud/index.html","hash":"da2baef4cd8581d61bd89b503111137eb148d854","modified":1702981059711},{"_id":"public/tags/zuul/index.html","hash":"05cfdc32ce7d5d94efe9a42ccc692d1106dd69e2","modified":1702981059711},{"_id":"public/tags/test-karma-jamine/index.html","hash":"5aa56dd80def18a9750e43ab5247aca0a7424fb2","modified":1702981059711},{"_id":"public/tags/springboot/index.html","hash":"e2d4a921ef7ffea8232773e1117546dbecb57369","modified":1702981059711},{"_id":"public/tags/sentinel/index.html","hash":"6c05a7e07b03701dd72e595f6de4cfa74ae67c47","modified":1702981059711},{"_id":"public/tags/spring/index.html","hash":"2d2792bb541ceefc18d927bd17e1739e8f63faaa","modified":1702981059711},{"_id":"public/tags/leetcode/index.html","hash":"1fd821e963009d4175aa81c2ab231ab1a0e646fb","modified":1702981059711},{"_id":"public/tags/springmvc/index.html","hash":"cb0fefa9b538ed42ce40c36617d1df4997664f0e","modified":1702981059711},{"_id":"public/tags/多线程/index.html","hash":"09e242e39676955585e6e97c98c9e0a7ff578f64","modified":1702981059711},{"_id":"public/tags/electron/index.html","hash":"626f214a58f8655eee8523fcf11a716fc1ba17d0","modified":1702981059711},{"_id":"public/tags/node/index.html","hash":"a7b492879484a90d122a23b8464ea4c41836f097","modified":1702981059711},{"_id":"public/tags/排序/index.html","hash":"832773847f049c360801841157fb7e89d7d35cad","modified":1702981059711},{"_id":"public/tags/junit/index.html","hash":"5a5aa13ca9add49adc8909f96fb4d2b6c152d1f7","modified":1702981059711},{"_id":"public/tags/git-flow/index.html","hash":"3489ea11e4926a18158f9bbfcea83fa0bbbe57e2","modified":1702981059711},{"_id":"public/tags/fastjson/index.html","hash":"0e319a2b3a3c92d4ae9c21e7efcc28402e253ed6","modified":1702981059711},{"_id":"public/categories/index.html","hash":"8a4753834d8e5ccd8b6edbcb6611ac591776e946","modified":1702981059711},{"_id":"public/index.html","hash":"61b2d8b2e70ae25711b8f5e961141dbbd4a3e1a9","modified":1702981059711},{"_id":"public/2021/06/20/springIOC的refresh方法/index.html","hash":"18c59b8f855ce7f878f840e66135daa9fbd4f8c0","modified":1702981059711},{"_id":"public/2021/06/17/spring-Bean-注解的用法/index.html","hash":"293c1eb567cad25bcbc200c487e49ee49956d067","modified":1702981059711},{"_id":"public/2021/06/03/spring-boot中-Configuration是怎么实现-Bean方法注入的/index.html","hash":"65902aa0ea5341f78f9a85419010903e5611d028","modified":1702981059711},{"_id":"public/2021/06/01/两个线程交替输出1-100的奇偶数/index.html","hash":"2cdb469b561f1fa850799730cf98ea256b9e8eb4","modified":1702981059711},{"_id":"public/2021/05/30/leetcode-07-整数反转/index.html","hash":"b829310cd6588542a6c011a3e063deebbf0323c5","modified":1702981059711},{"_id":"public/2021/05/30/leetcode-01-两数之和/index.html","hash":"54d6a60659992adbbb2bd867db599355f105bda5","modified":1702981059711},{"_id":"public/2020/08/23/Fastjson反序列化使用new-ParameterizedTypeImpl导致内存泄漏/index.html","hash":"8b1da78de701198f412886ad7d034c1e50d64a58","modified":1702981059711},{"_id":"public/2020/04/29/Jira-Bitbucket-Confluence使用CAS完成SSO/index.html","hash":"39c40aa4903b2310ebe6964efa650a1677b57389","modified":1702981059711},{"_id":"public/2020/03/22/排序算法/index.html","hash":"017b49365fee00ad65f4918a618dc43cc78e5a1d","modified":1702981059711},{"_id":"public/2020/03/07/Electron常见问题/index.html","hash":"93d6ba014dcf7c977dfe7743847ea5d1deacf411","modified":1702981059711},{"_id":"public/2020/03/06/给Junit4增加Benchmark-基准测试/index.html","hash":"1909e8a6aa46759c6dbe74ff3019b3a95c1a5f67","modified":1702981059711},{"_id":"public/2020/02/28/Git-Commit规范/index.html","hash":"77ffaa2369ca10bbf77018b2f39fe13fd18f587d","modified":1702981059711},{"_id":"public/2020/02/26/git-workflow之gitflow的工具/index.html","hash":"79d72ef25929cc66e5d84ecb978767a91a989c66","modified":1702981059711},{"_id":"public/2020/02/26/git-workflow之gitflow说明/index.html","hash":"c2adc34881de91147749e40e2596dc78a46fc805","modified":1702981059711},{"_id":"public/2019/09/09/spring-message/index.html","hash":"cf9265a4b1d2d7e6ceb61ad9e95a531377e5047e","modified":1702981059711},{"_id":"public/2019/01/13/Sentine默认slot说明/index.html","hash":"d427911343751c666b5cdcc5a41ad81b38bdd0bf","modified":1702981059711},{"_id":"public/2019/01/07/sentinel相关概念/index.html","hash":"484f5629cae75d9bbf2d1a6ebab6ed03f854c4ef","modified":1702981059711},{"_id":"public/2018/12/27/sentinel学习笔记-1/index.html","hash":"f506c2a572fb1dc821c13850bbe96a55c4cc8655","modified":1702981059711},{"_id":"public/2018/04/07/2018-4-springmvc初始化MultipartResolver/index.html","hash":"6ad3bfeb29a5d91aa9d16f891f8dbfb3a5464449","modified":1702981059711},{"_id":"public/2018/03/20/2018-3-springmvc学习/index.html","hash":"e9f2ed3bf5f0409c82287a40dbd8811d44777e1a","modified":1702981059711},{"_id":"public/2018/03/16/2018-3-Spring动态新增删除Bean/index.html","hash":"4b7962b4d43455965f6fc58b5208410522e67913","modified":1702981059711},{"_id":"public/2017/12/05/ArrayList与LinkedList的区别/index.html","hash":"a7261f20af63a79aad1274b2a7a6d6b729dcc184","modified":1702981059711},{"_id":"public/2017/11/12/effective-java-九/index.html","hash":"4ab6ef94e664f6ee4d204d8c1010f4bfef5dec0f","modified":1702981059711},{"_id":"public/2017/11/12/effective-java-八/index.html","hash":"f29ec38fa45585b6c69865e544346219d38bde13","modified":1702981059711},{"_id":"public/2017/11/10/effective-java-七/index.html","hash":"649e8195790cf3b9e4a09abb3a53f1c8921ec1e3","modified":1702981059711},{"_id":"public/2017/11/10/effective-java-六/index.html","hash":"5198cbac788545236aab2c93ecaea226d00336a6","modified":1702981059711},{"_id":"public/2017/11/10/effective-java-五/index.html","hash":"3cb5d058d25efbf0c7065109a9bff67ad41aa150","modified":1702981059711},{"_id":"public/2017/11/08/effective-java-四/index.html","hash":"e68f54468087bf5d526661b8a1df5c13b6173251","modified":1702981059711},{"_id":"public/2017/11/06/effective-java-三/index.html","hash":"724f02917d82c11e70cda51f7dec7940fefe31e4","modified":1702981059711},{"_id":"public/2017/11/03/zuul入门/index.html","hash":"bc8f7353a22a0818100016f3e7be1aa63e6d7f0f","modified":1702981059711},{"_id":"public/2017/11/02/maven-release版本管理插件/index.html","hash":"952aaf2bcfcb39c840a55733287aaed90956cfd5","modified":1702981059711},{"_id":"public/2017/11/02/effective-java-二/index.html","hash":"da65c068e5d18adc56c700a03ae19b97abd1e73b","modified":1702981059711},{"_id":"public/2017/10/31/deepin添加开机启动脚本/index.html","hash":"f9e749fb4f44b53f69fa29bbd29077ab7d4bf03c","modified":1702981059711},{"_id":"public/2017/09/14/2017-9-spring一些用法小结/index.html","hash":"e98502e418f8d4bea77cee7368b0e00c173f4574","modified":1702981059711},{"_id":"public/2017/05/22/2017-5-自定义lopback的Appender时设置枚举属性/index.html","hash":"8c1c3b831ba188d792d5d7411a8ebcdec185fbd9","modified":1702981059711},{"_id":"public/2017/05/18/2017-5-基于spring的类扫描器/index.html","hash":"6a08c7bf83db3f07e74374f4dc1170c9658b4732","modified":1702981059711},{"_id":"public/2017/04/22/2017-4-windows-use-oh-my-zsh/index.html","hash":"5096116561aa7922778550c0da12a845d1581af3","modified":1702981059711},{"_id":"public/2017/04/19/2017-4-springboot-fileupdat-in-Filter-can-t-get/index.html","hash":"f91f3f32e5cf58f02bfca51b9be90ab1f64aa385","modified":1702981059711},{"_id":"public/2017/02/17/2017-2-karma-jasmine-build-an-automated-test-environment/index.html","hash":"e5cdd283f46f66feff31f661866a3e44a49b62bc","modified":1702981059711},{"_id":"public/2016/12/29/spring-boot-slf4j/index.html","hash":"b5346487f87bed18d15030e9f32f8a7918b39a88","modified":1702981059711},{"_id":"public/2016/12/06/mysql-record/index.html","hash":"393be1a353ef74ce6eb66526a6b06b82cc95767b","modified":1702981059711},{"_id":"public/2016/12/06/loopback-two/index.html","hash":"d90246aaa87ef940895cb8b433b8cdacaf47e568","modified":1702981059711},{"_id":"public/2016/12/01/loopback-one/index.html","hash":"2a71bdcc856d562a976bbfdbe2c93617c44721fb","modified":1702981059711},{"_id":"public/2016/11/29/DIY-hexo-theme-next/index.html","hash":"52c0edf135e2bed52f8d55b666504c034bc21098","modified":1702981059711},{"_id":"public/2016/11/30/git/index.html","hash":"e9150c9e59a308271042c452998344340cc12a31","modified":1702981059711},{"_id":"public/2016/03/14/2016-3-effective-java-一/index.html","hash":"4b74fbfd30b8959b89f8bee413da6cb267497c10","modified":1702981059711},{"_id":"public/2016/03/13/2016-3-hello-world/index.html","hash":"c04ea2493a253416603d9f8c1142893b5d35305d","modified":1702981059711},{"_id":"public/archives/index.html","hash":"99bd8d56fbb0676162019f068bc8d7a3cf6ffc4f","modified":1702981059711},{"_id":"public/archives/page/2/index.html","hash":"493b3ea886999fd9bcd513e393278ddb7d4872e9","modified":1702981059711},{"_id":"public/archives/page/3/index.html","hash":"42acea9a65e57f7840c23e75788d02e04f31a032","modified":1702981059711},{"_id":"public/archives/page/4/index.html","hash":"36179ec50bbd08b392f3cd72f7e2c7d1de2d3e1d","modified":1702981059711},{"_id":"public/archives/2017/index.html","hash":"7cb92d132823e236aa2d0c7077617894c942e04f","modified":1702981059711},{"_id":"public/archives/2017/page/2/index.html","hash":"6685dca2bdb41d2b8caf4cf8f237c12e1ce43ec2","modified":1702981059711},{"_id":"public/archives/2017/11/index.html","hash":"f8a8ada79c93df77b343fa8cd8a9822d15d20582","modified":1702981059711},{"_id":"public/archives/2020/index.html","hash":"3cdf91e16058c5d23794aea64e33b4459a4a8daa","modified":1702981059711},{"_id":"public/page/2/index.html","hash":"272d132171fc8702abe9860e9aacbddc7283d7ea","modified":1702981059711},{"_id":"public/page/3/index.html","hash":"6eb1b4b5d1e57c50f0a51be5a0fb2c10eb375aac","modified":1702981059711},{"_id":"public/page/4/index.html","hash":"14d5e68d5d62b8cad56554009e05b474e6cc9312","modified":1702981059711},{"_id":"public/page/5/index.html","hash":"51bb7df54364e92a52ef2f89190adbea1feec78d","modified":1702981059711},{"_id":"public/categories/java/index.html","hash":"f57f72a514660094d11b828d06dee9a1adb3e3e0","modified":1702981059711},{"_id":"public/tags/effective-java/index.html","hash":"7e301f0d0df66a7dc46535966262e98ba3b38198","modified":1702981059711},{"_id":"public/BingSiteAuth.xml","hash":"1a5087a50de930d8763b86850574cfd783b1fa3a","modified":1702981059711},{"_id":"public/favicon.ico","hash":"f52ddbc2d8d943cfcbb532d5f4bec8d8a4c4b95f","modified":1702981059711},{"_id":"public/ads.txt","hash":"abc648af73f5bdafad595243a8622890efa70de1","modified":1702981059711},{"_id":"public/robots.txt","hash":"0385fc657415aaea98074023ec9a86cd51b5ea79","modified":1702981059711},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1702981059711},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1702981059711},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"284416885e4e80e27fa4eae6fc305f4de15b914c","modified":1702981059711},{"_id":"public/css/noscript.css","hash":"7a71aa0a25cb21127fff8b6155beebba28b4c028","modified":1702981059711},{"_id":"public/js/config.js","hash":"0859f239f619a6658da9d449bad8406de7ccc243","modified":1702981059711},{"_id":"public/js/bookmark.js","hash":"015c6110f23b00946756eb69d2a75e1ee78f0eb6","modified":1702981059711},{"_id":"public/js/comments-buttons.js","hash":"ebe15e0d713ce91699a9045e5c35c290c32d6443","modified":1702981059711},{"_id":"public/js/next-boot.js","hash":"c5aa5695d92edf4188e652cac1baaf9ca3ff3d72","modified":1702981059711},{"_id":"public/js/comments.js","hash":"0d16bec0ad0ddd98aa65d9dbcdf0bfaaeccaed21","modified":1702981059711},{"_id":"public/js/motion.js","hash":"2bc8188184d792a4dce141ea8e760aa48248bc10","modified":1702981059711},{"_id":"public/js/schemes/muse.js","hash":"39b6ae84f7b1ea5f87894fa1c0818cf3c0ae392a","modified":1702981059711},{"_id":"public/js/utils.js","hash":"e525f54445ff147e8ed0c681fa9f4df2a3da2fc2","modified":1702981059711},{"_id":"public/js/pjax.js","hash":"56613a919f83f81c816f4cff5d9b03fb862e3006","modified":1702981059711},{"_id":"public/js/third-party/addtoany.js","hash":"772cd4e74be085c16c987bd28c1c260dc3543898","modified":1702981059711},{"_id":"public/js/third-party/pace.js","hash":"f008cb85d53292fad17f6a79a776857f4782a501","modified":1702981059711},{"_id":"public/js/schedule.js","hash":"77107a3869502e7f2c9a4ea4bc19b350fe7842a5","modified":1702981059711},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"d72ead686eccffcb296d9119b948c8ac0ff44726","modified":1702981059711},{"_id":"public/js/third-party/quicklink.js","hash":"dcfe698932b7537d536dacbda63c83b0d511f795","modified":1702981059711},{"_id":"public/js/third-party/fancybox.js","hash":"b1f91b35453604df339a6944a7ab77719709ce6e","modified":1702981059711},{"_id":"public/js/third-party/chat/chatra.js","hash":"ff2c1269abd210dd72c75852ec325bf16648f4b5","modified":1702981059711},{"_id":"public/js/third-party/chat/tidio.js","hash":"103bb254d0d91254ac944ef0fb7a7f6022aeab7a","modified":1702981059711},{"_id":"public/js/third-party/comments/changyan.js","hash":"6503bd80de8bb1fd57199404a899adfb938c7d06","modified":1702981059711},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"ea19d6823f452cb5e78e48a4e09f852ddb5927b7","modified":1702981059711},{"_id":"public/js/third-party/analytics/growingio.js","hash":"f53844d0d7df88ee692da60340e1b9db76480cae","modified":1702981059711},{"_id":"public/js/third-party/analytics/matomo.js","hash":"6eaecea2a0b2060454879898041844ebc72da799","modified":1702981059711},{"_id":"public/css/main.css","hash":"29ef82135eb0f28c6c61181be7f512a71cdad377","modified":1702981059711},{"_id":"public/js/third-party/comments/disqus.js","hash":"e4198b5f0c28711efb4676d9611ed6e5cb71a39b","modified":1702981059711},{"_id":"public/js/third-party/comments/gitalk.js","hash":"4c63d0aec51c093981e579707790ab0af816ddc7","modified":1702981059711},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b2275c4aaec6fefb6c6252f425f794ad1ed3479c","modified":1702981059711},{"_id":"public/js/third-party/comments/isso.js","hash":"84c5a4bb3547b417f49a0f93f5a7a4a2c3433478","modified":1702981059711},{"_id":"public/js/third-party/comments/livere.js","hash":"94f4b7de5704985d54cd8f97a0e9b724ae494541","modified":1702981059711},{"_id":"public/js/third-party/comments/utterances.js","hash":"13a5b6876dcb12d4cbda8db87a0416546c410464","modified":1702981059711},{"_id":"public/js/third-party/math/katex.js","hash":"cef3ecf7816c7eb32031e25c1752577fafe30c9b","modified":1702981059711},{"_id":"public/js/third-party/math/mathjax.js","hash":"fec11f523dca78b4e6521b78b9a44321d3456327","modified":1702981059711},{"_id":"public/js/third-party/statistics/firestore.js","hash":"162c9b14c059b9adde6ffdc7cbb1881e1f9d2a51","modified":1702981059711},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"2a0a0d6ab64fcf065ec688a1c7d85ce836e60eb2","modified":1702981059711},{"_id":"public/js/third-party/search/algolia-search.js","hash":"34c45347c0102955f31b83bb81ea1f13dc558943","modified":1702981059711},{"_id":"public/js/third-party/search/local-search.js","hash":"a61092e4f03e4c1fa7bcc29f4af7e201bb33c930","modified":1702981059711},{"_id":"public/js/third-party/tags/mermaid.js","hash":"d9764ee80251b23d13151796044e089cdd29ded6","modified":1702981059711},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40930c99f50513c24e51ff65cc909af34cad8253","modified":1702981059711},{"_id":"public/js/third-party/tags/pdf.js","hash":"294aeebdf203f3769ac24705da4fc9ac8d436761","modified":1702981059711},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e56ad6b82caf69066de545201014291fc961635e","modified":1702981059711},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"a3b131a9a47ccc16f4dd8988fabb6d306548db2f","modified":1702981059711},{"_id":"public/assets/algolia/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1702981059711}],"Category":[{"name":"hexo","_id":"clqc6ydq40005fki49kyhavjb"},{"name":"git","_id":"clqc6ydqa000dfki4dsg9eido"},{"name":"loopback","_id":"clqc6ydqd000kfki45jfj8zyu"},{"name":"mysql","_id":"clqc6ydqk000yfki4ftuh5lbz"},{"name":"java","_id":"clqc6ydqm0016fki400hp1cac"},{"name":"linux","_id":"clqc6ydqq001dfki4896bheqb"},{"name":"maven","_id":"clqc6ydr1002gfki4710b32lq"},{"name":"spring cloud","_id":"clqc6ydr3002nfki437kf85qv"},{"name":"test","_id":"clqc6ydr4002tfki4bekk0f7u"},{"name":"other","_id":"clqc6ydr70031fki44qxtgit3"},{"name":"springboot","_id":"clqc6ydr80037fki4h7shbfyf"},{"name":"spring","_id":"clqc6ydra003dfki4g8j22cw1"},{"name":"logback","_id":"clqc6ydrc003kfki44rv3drek"},{"name":"sentinel","_id":"clqc6ydre003sfki44y85ds3u"},{"name":"springmvc","_id":"clqc6ydrj004ffki45hfdfzeo"},{"name":"leetcode","_id":"clqc6ydrk004nfki49z8v4a3b"},{"name":"面试题","_id":"clqc6ydrm0055fki44pde5207"},{"name":"electron","_id":"clqc6ydrn005afki46uhggorc"},{"name":"算法","_id":"clqc6ydro005efki4dvcyejnn"},{"name":"junit","parent":"clqc6ydqm0016fki400hp1cac","_id":"clqc6ydro005ifki46240a9uz"},{"name":"fastjson","parent":"clqc6ydqm0016fki400hp1cac","_id":"clqc6ydrp005mfki4196zdszf"},{"name":"算法","parent":"clqc6ydrk004nfki49z8v4a3b","_id":"clqc6ydrp005qfki4h7sj99cw"},{"name":"排序","parent":"clqc6ydro005efki4dvcyejnn","_id":"clqc6ydrt005xfki487v69bg8"}],"Data":[{"_id":"favicons","data":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]},{"_id":"next-bak","data":{"override":false,"reminder":true,"cache":{"enable":true},"minify":true,"custom_file_path":{"head":"source/_data/layout/head.swig","footer":"source/_data/layout/footer.swig"},"favicon":{"small":"favicon.ico","medium":"favicon.ico","apple_touch_icon":"favicon.ico","safari_pinned_tab":"favicon.ico"},"rss":null,"footer":{"since":2016,"icon":{"name":"heart","animated":true,"color":"#808080"},"copyright":null,"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":true,"icp":"粤ICP备18053302号-1","gongan_id":null,"gongan_num":null,"gongan_icon_url":"/images/beian.png"}},"creative_commons":{"license":"by-nc-sa","sidebar":false,"post":true,"language":"zh-CN"},"disable_baidu_transformation":true,"canonical":true,"seo":true,"index_with_subtitle":false,"exturl":true,"google_site_verification":"googlecc4a5534aecf666a","bing_site_verification":"9A52370764A7595064B6F16905B428C6","yandex_site_verification":null,"baidu_site_verification":"LjhEXUygCP","baidu_push":true,"menu":{"home":"/ || home","about":"/about/ || user","tags":"/tags/ || tags","categories":"/categories/ || th","archives":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":true},"scheme":"Gemini","site_state":true,"social":{"GitHub":"https://github.com/xyz327 || github","Weibo":"http://weibo.com/xyz327 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":true},"links_settings":{"icon":"link","title":"Links","layout":"block"},"links":{"漠北空城":"https://www.yuech.net/"},"avatar":{"url":"/images/avatar/avatar.jpg","rounded":false,"rotated":false},"toc":{"enable":true,"number":true,"wrap":false,"expand_all":false,"max_depth":6},"sidebar":{"position":"left","display":"post","offset":12,"onmobile":false},"chat":{"enable":false,"icon":"comment","text":"Chat"},"scroll_to_more":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":{"enable":true,"another_day":true},"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":4,"wpm":275},"tag_icon":true,"wechat_subscriber":{"enable":false,"qcode":null},"reward_settings":{"enable":false,"animation":false},"reward":null,"related_posts":{"enable":true,"title":null,"display_in_home":false,"params":{"maxCount":5}},"post_edit":{"enable":false,"url":"https://github.com/xyz327/blog/tree/pages/source/_posts"},"cheers":true,"tagcloud":{"enable":true,"min":12,"max":30,"start":"#ccc","end":"#111","amount":200},"calendar":{"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"showDeleted":false,"singleEvents":true,"maxResults":250},"text_align":{"desktop":"justify","mobile":"justify"},"mobile_layout_economy":true,"android_chrome_color":"#222","safari_rainbow":false,"custom_scrollbar":true,"custom_logo":null,"codeblock":{"highlight_theme":"normal","copy_button":{"enable":true,"show_result":true,"style":"mac"}},"back2top":{"enable":true,"sidebar":true,"scrollpercent":true},"reading_progress":{"enable":true,"position":"top","color":"#37c6c0","height":"2px"},"bookmark":{"enable":true,"color":"#222","save":"auto"},"github_banner":{"enable":false,"permalink":"https://github.com/xyz327","title":"Follow me on GitHub"},"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"title":{"external":true,"family":null,"size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"codes":{"external":true,"family":null}},"math":{"enable":false,"per_page":true,"mathjax":{"enable":false,"mhchem":false},"katex":{"enable":false,"copy_tex":false}},"pjax":true,"fancybox":true,"mediumzoom":false,"lazyload":false,"pangu":true,"quicklink":{"enable":true,"home":true,"archive":true,"delay":true,"timeout":3000,"priority":true,"ignores":null},"comments":{"style":"tabs","active":"gitalk","storage":true,"lazyload":true,"nav":{"gitalk":"Load Gitalk"}},"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"disqusjs":{"enable":false,"api":null,"apikey":null,"shortname":null},"changyan":{"enable":false,"appid":"cyv7g2uVT","appkey":"b87c0c2ff107b1a001f045a1c3e6dc58"},"valine":{"enable":true,"appid":"2QL6dD6mOyWHGh2H7QpPJYJK-gzGzoHsz","appkey":"1zzQPCVkUlrtcRjKszGxgUFE","notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail","pageSize":10,"language":"zh-cn","visitor":false,"comment_count":true},"livere_uid":null,"gitalk":{"enable":false,"github_id":"xyz327","repo":"blog-comment","client_id":"e6c462c697b6f4a3a0ab","client_secret":"739d24ad16c588b6660afddf961000dd93e4073c","admin_user":["xyz327"],"distraction_free_mode":true,"language":"zh-CN"},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"add_this_id":"ra-5e630a2a6de906f0","baidu_analytics":"0729ac685bdd8ae2db011f10ca53844b","growingio_analytics":null,"google_analytics":{"tracking_id":null,"localhost_ignored":true},"cnzz_siteid":1000536644,"application_insights":null,"leancloud_visitors":{"enable":true,"app_id":"2QL6dD6mOyWHGh2H7QpPJYJK-gzGzoHsz","app_key":"1zzQPCVkUlrtcRjKszGxgUFE","security":false,"betterPerformance":true},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null},"busuanzi_count":{"enable":true,"total_visitors":true,"total_visitors_icon":"user","total_views":true,"total_views_icon":"eye","post_views":false,"post_views_icon":"eye"},"tencent_analytics":64039091,"tencent_mta":null,"algolia_search":{"enable":true,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"swiftype_key":null,"chatra":{"enable":false,"async":true,"id":null},"tidio":{"enable":false,"key":null},"note":{"style":"modern","icons":true,"border_radius":3,"light_bg_offset":0},"tabs":{"transition":{"tabs":false,"labels":true},"border_radius":0},"pdf":{"enable":false,"height":"500px"},"mermaid":{"enable":false,"theme":"forest"},"motion":{"enable":true,"async":true,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"pace":{"enable":true,"theme":"minimal"},"three":{"enable":true,"delay":true,"three_waves":false,"canvas_lines":false,"canvas_sphere":false},"canvas_nest":{"enable":true,"onmobile":true,"color":"0,0,255","opacity":0.5,"zIndex":-1,"count":99},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fontawesome":"//cdn.jsdelivr.net/npm/font-awesome@4/css/font-awesome.min.css","mathjax":null,"mhchem":null,"katex":null,"copy_tex_js":null,"copy_tex_css":null,"pjax":"//cdn.jsdelivr.net/gh/theme-next/theme-next-pjax@0/pjax.min.js","fancybox":"//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js","fancybox_css":"//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css","mediumzoom":null,"lazyload":"//cdn.jsdelivr.net/npm/lozad@1/dist/lozad.min.js","pangu":"//cdn.jsdelivr.net/npm/pangu@4/dist/browser/pangu.min.js","quicklink":"//cdn.jsdelivr.net/npm/quicklink@1/dist/quicklink.umd.js","disqusjs_js":null,"disqusjs_css":null,"valine":"//cdn.jsdelivr.net/npm/valine@1/dist/Valine.min.js","gitalk_js":"//cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js","gitalk_css":"//cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css","algolia_instant_js":"//cdn.jsdelivr.net/npm/instantsearch.js@2/dist/instantsearch.min.js","algolia_instant_css":"//cdn.jsdelivr.net/npm/instantsearch.js@2/dist/instantsearch.min.css","pdfobject":"//cdn.jsdelivr.net/npm/pdfobject@2/pdfobject.min.js","mermaid":"//cdn.jsdelivr.net/npm/mermaid@8/dist/mermaid.min.js","velocity":"//cdn.jsdelivr.net/npm/velocity-animate@1/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/npm/velocity-animate@1/velocity.ui.min.js","pace":"//cdn.jsdelivr.net/npm/pace-js@1/pace.min.js","pace_css":"//cdn.jsdelivr.net/npm/pace-js@1/themes/blue/pace-theme-minimal.css","three":"//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/three.min.js","three_waves":"//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/three-waves.min.js","canvas_lines":"//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/canvas_lines.min.js","canvas_sphere":"//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/canvas_sphere.min.js","canvas_nest":"//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1/canvas-nest.min.js","canvas_nest_nomobile":"//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1/canvas-nest.min.js","canvas_ribbon":null,"reading_progress":"//cdn.jsdelivr.net/gh/theme-next/theme-next-reading-progress@1/reading_progress.min.js"},"css":"css","js":"js","images":"images"}},{"_id":"next-v7.1.0","data":{"override":false,"cache":{"enable":true},"custom_file_path":{"head":"source/_data/head.swig"},"favicon":{"small":"favicon.ico","medium":"favicon.ico","apple_touch_icon":"favicon.ico","safari_pinned_tab":"favicon.ico"},"rss":null,"footer":{"icon":{"name":"heart","animated":true,"color":"#808080"},"copyright":null,"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":true,"icp":"粤ICP备18053302号-1"},"custom_text":"Hosted by <a href=\"https://pages.coding.me\" class=\"theme-link\" rel=\"noopener\" target=\"_blank\">Coding Pages</a>"},"creative_commons":{"license":"by-nc-sa","sidebar":false,"post":true,"language":"zh-CN"},"github_banner":{"enable":true,"permalink":"https://github.com/xyz327","title":"Follow me on GitHub"},"disable_baidu_transformation":true,"canonical":true,"seo":true,"index_with_subtitle":false,"exturl":true,"google_site_verification":"googlecc4a5534aecf666a","bing_site_verification":"9A52370764A7595064B6F16905B428C6","baidu_site_verification":"LjhEXUygCP","baidu_push":true,"menu":{"home":"/ || home","tags":"/tags/ || tags","categories":"/categories/ || th","archives":"/archives/ || archive","sitemap":"/sitemap.xml || sitemap"},"menu_settings":{"icons":true,"badges":true},"scheme":"Gemini","site_state":true,"social":{"GitHub":"https://github.com/xyz327 || github","Weibo":"http://weibo.com/xyz327 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":true},"links_icon":"link","links_title":"Links","links_layout":"block","links":{"漠北空城":"https://www.yuech.net/"},"avatar":{"url":"http://cdn.xyz327.cn/images/avatar/avatar.jpg","rounded":false,"opacity":1,"rotated":false},"toc":{"enable":true,"number":true,"wrap":false,"expand_all":false,"max_depth":6},"sidebar":{"position":"left","display":"post","offset":12,"onmobile":false,"dimmer":false},"back2top":{"enable":true,"sidebar":true,"scrollpercent":true},"chat":{"enable":false,"icon":"comment","text":"Chat"},"text_align":{"desktop":"justify","mobile":"justify"},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":{"enabled":true,"another_day":true},"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":4,"wpm":275},"codeblock":{"border_radius":null,"copy_button":{"enable":true,"show_result":true,"style":null}},"wechat_subscriber":{"enable":false},"reward_settings":{"enable":false,"animation":false},"reward":null,"related_posts":{"enable":false,"title":null,"display_in_home":false,"params":{"maxCount":5}},"post_edit":{"enable":false,"url":"https://github.com/user-name/repo-name/tree/branch-name/subdirectory-name"},"mobile_layout_economy":false,"android_chrome_color":"#222","safari_rainbow":false,"custom_scrollbar":false,"custom_logo":{"enable":false,"image":null},"highlight_theme":"normal","cheers":true,"tagcloud":{"enable":true,"min":12,"max":30,"start":"#ccc","end":"#111","amount":200},"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0/dist/katex.min.css","copy_tex":{"enable":false,"copy_tex_js":"//cdn.jsdelivr.net/npm/katex@0/dist/contrib/copy-tex.min.js","copy_tex_css":"//cdn.jsdelivr.net/npm/katex@0/dist/contrib/copy-tex.min.css"}}},"han":false,"pangu":false,"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":3000,"priority":true,"ignores":null},"bookmark":{"enable":false,"save":"auto"},"reading_progress":{"enable":true,"color":"#37c6c0","height":"2px"},"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"disqusjs":{"enable":false,"api":null,"apikey":null,"shortname":null},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":"2QL6dD6mOyWHGh2H7QpPJYJK-gzGzoHsz","appkey":"1zzQPCVkUlrtcRjKszGxgUFE","notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10,"visitor":true},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"gitalk":{"enable":true,"github_id":"xyz327","repo":"blog-comment","client_id":"e6c462c697b6f4a3a0ab","client_secret":"739d24ad16c588b6660afddf961000dd93e4073c","admin_user":["xyz327"],"distraction_free_mode":true,"language":null},"likely":{"enable":false,"look":"normal","networks":{"twitter":"Tweet","facebook":"Share","linkedin":"Link","gplus":"Plus","vkontakte":"Share","odnoklassniki":"Class","telegram":"Send","whatsapp":"Send","pinterest":"Pin"}},"needmoreshare2":{"enable":true,"postbottom":{"enable":true,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":true,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"cnzz_siteid":1000536644,"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"2QL6dD6mOyWHGh2H7QpPJYJK-gzGzoHsz","app_key":"1zzQPCVkUlrtcRjKszGxgUFE","security":true,"betterPerformance":true},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"total_visitors":true,"total_visitors_icon":"user","total_views":true,"total_views_icon":"eye","post_views":true,"post_views_icon":"eye"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"chatra":{"enable":false,"async":true,"id":null},"tidio":{"enable":false,"key":null},"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"pdf":{"enable":false,"height":"500px","pdfobject":{"cdn":"//cdn.jsdelivr.net/npm/pdfobject@2/pdfobject.min.js"}},"mermaid":{"enable":false,"theme":"forest","cdn":"//cdn.jsdelivr.net/npm/mermaid@8/dist/mermaid.min.js"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":{"enable":false,"onmobile":true,"color":"0,0,255","opacity":0.5,"zIndex":-1,"count":99},"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":"//cdn.jsdelivr.net/npm/jquery@2.1.3/dist/jquery.min.js","fancybox":"//cdn.jsdelivr.net/npm/fancybox@3.0.0/dist/js/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/npm/fancybox@3.0.0/dist/css/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/npm/fastclick@1.0.6/lib/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/npm/jquery_lazyload@1.9.7/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/npm/velocity-animate@1/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/npm/velocity-animate@1/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/npm/ua-parser-js@0.7.17/src/ua-parser.min.js","fontawesome":"//cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":"//cdn.jsdelivr.net/npm/pace-js@1.0.2/pace.min.js","pace_css":"//cdn.jsdelivr.net/npm/pace-js@1.0.2/themes/blue/pace-theme-minimal.css","canvas_nest":"//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest.min.js","canvas_nest_nomobile":"//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest-nomobile.min.js","three":"//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three.min.js","three_waves":"//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three-waves.min.js","canvas_lines":"//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_lines.min.js","canvas_sphere":"//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_sphere.min.js","canvas_ribbon":null,"han":null,"pangu":"//cdn.jsdelivr.net/npm/pangu@3.3.0/dist/browser/pangu.min.js","quicklink":null,"needmoreshare2_js":"//cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1.0.0/needsharebutton.min.js","needmoreshare2_css":"//cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1.0.0/needsharebutton.min.css","bookmark":"//cdn.jsdelivr.net/gh/theme-next/theme-next-bookmark@1.0.0/bookmark.min.js","reading_progress":"//cdn.jsdelivr.net/gh/theme-next/theme-next-reading-progress@1.1/reading_progress.min.js","leancloud":"//cdn.jsdelivr.net/npm/leancloud-storage@3/dist/av-min.js","valine":null,"gitalk_js":null,"gitalk_css":null,"md5":null,"likely_js":null,"likely_css":null,"disqusjs_js":null,"disqusjs_css":null},"css":"css","js":"js","images":"images"}},{"_id":"next-v7.3.0","data":{"override":false,"reminder":true,"cache":{"enable":true},"minify":true,"custom_file_path":{"head":"source/_data/layout/head.swig"},"favicon":{"small":"favicon.ico","medium":"favicon.ico","apple_touch_icon":"favicon.ico","safari_pinned_tab":"favicon.ico"},"rss":null,"footer":{"icon":{"name":"heart","animated":true,"color":"#808080"},"copyright":null,"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":true,"icp":"粤ICP备18053302号-1","gongan_id":null,"gongan_num":null,"gongan_icon_url":"/images/beian.png"}},"creative_commons":{"license":"by-nc-sa","sidebar":false,"post":true,"language":"zh-CN"},"disable_baidu_transformation":true,"canonical":true,"seo":true,"index_with_subtitle":false,"exturl":true,"google_site_verification":"googlecc4a5534aecf666a","bing_site_verification":"9A52370764A7595064B6F16905B428C6","yandex_site_verification":null,"baidu_site_verification":"LjhEXUygCP","baidu_push":true,"menu":{"home":"/ || home","tags":"/tags/ || tags","categories":"/categories/ || th","archives":"/archives/ || archive","schedule":"/schedule/ || calendar"},"menu_settings":{"icons":true,"badges":true},"scheme":"Gemini","site_state":true,"social":{"GitHub":"https://github.com/xyz327 || github","Weibo":"http://weibo.com/xyz327 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":true},"links_settings":{"icon":"link","title":"Links","layout":"block"},"links":{"漠北空城":"https://www.yuech.net/"},"avatar":{"url":"/images/avatar/avatar.jpg","rounded":false,"rotated":false},"toc":{"enable":true,"number":true,"wrap":false,"expand_all":false,"max_depth":6},"sidebar":{"position":"left","display":"post","offset":12,"onmobile":false},"chat":{"enable":false,"icon":"comment","text":"Chat"},"scroll_to_more":true,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":{"enable":true,"another_day":true},"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":4,"wpm":275},"tag_icon":false,"wechat_subscriber":{"enable":false,"qcode":null},"reward_settings":{"enable":false,"animation":false},"reward":null,"related_posts":{"enable":true,"title":null,"display_in_home":false,"params":{"maxCount":5}},"post_edit":{"enable":false,"url":"https://github.com/xyz327/blog/tree/pages/source/_posts"},"cheers":true,"tagcloud":{"enable":true,"min":12,"max":30,"start":"#ccc","end":"#111","amount":200},"calendar":{"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"showDeleted":false,"singleEvents":true,"maxResults":250},"text_align":{"desktop":"justify","mobile":"justify"},"mobile_layout_economy":false,"android_chrome_color":"#222","safari_rainbow":false,"custom_scrollbar":false,"custom_logo":null,"codeblock":{"highlight_theme":"normal","copy_button":{"enable":true,"show_result":false,"style":null}},"back2top":{"enable":true,"sidebar":true,"scrollpercent":true},"reading_progress":{"enable":true,"position":"top","color":"#37c6c0","height":"2px"},"bookmark":{"enable":true,"color":"#222","save":"auto"},"github_banner":{"enable":false,"permalink":"https://github.com/xyz327","title":"Follow me on GitHub"},"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"title":{"external":true,"family":null,"size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"codes":{"external":true,"family":null}},"math":{"enable":false,"per_page":true,"mathjax":{"enable":false,"mhchem":false},"katex":{"enable":false,"copy_tex":false}},"pjax":true,"fancybox":true,"mediumzoom":false,"lazyload":true,"pangu":true,"quicklink":{"enable":true,"home":true,"archive":true,"delay":true,"timeout":3000,"priority":true,"ignores":null},"comments":{"style":"tabs","active":"gitalk","storage":true,"nav":{"gitalk":"Load Gitalk"}},"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"disqusjs":{"enable":false,"api":null,"apikey":null,"shortname":null},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10,"language":null,"visitor":false,"comment_count":true},"livere_uid":null,"gitalk":{"enable":true,"github_id":"xyz327","repo":"blog-comment","client_id":"e6c462c697b6f4a3a0ab","client_secret":"739d24ad16c588b6660afddf961000dd93e4073c","admin_user":["xyz327"],"distraction_free_mode":true,"language":"zh-CN"},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"add_this_id":null,"baidu_analytics":"0729ac685bdd8ae2db011f10ca53844b","growingio_analytics":null,"google_analytics":{"tracking_id":null,"localhost_ignored":true},"cnzz_siteid":1000536644,"application_insights":null,"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null,"security":true,"betterPerformance":false},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null},"busuanzi_count":{"enable":true,"total_visitors":true,"total_visitors_icon":"user","total_views":true,"total_views_icon":"eye","post_views":true,"post_views_icon":"eye"},"tencent_analytics":64039091,"tencent_mta":null,"algolia_search":{"enable":true,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"swiftype_key":null,"chatra":{"enable":false,"async":true,"id":null},"tidio":{"enable":false,"key":null},"note":{"style":"modern","icons":true,"border_radius":3,"light_bg_offset":0},"tabs":{"transition":{"tabs":false,"labels":true},"border_radius":0},"pdf":{"enable":false,"height":"500px"},"mermaid":{"enable":false,"theme":"forest"},"motion":{"enable":true,"async":true,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"pace":{"enable":true,"theme":"minimal"},"three":{"enable":true,"delay":true,"three_waves":false,"canvas_lines":false,"canvas_sphere":false},"canvas_nest":{"enable":true,"onmobile":true,"color":"0,0,255","opacity":0.5,"zIndex":-1,"count":99},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fontawesome":"//cdn.jsdelivr.net/npm/font-awesome@4/css/font-awesome.min.css","mathjax":null,"mhchem":null,"katex":null,"copy_tex_js":null,"copy_tex_css":null,"pjax":"//cdn.jsdelivr.net/gh/theme-next/theme-next-pjax@0/pjax.min.js","fancybox":"//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js","fancybox_css":"//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css","mediumzoom":null,"lazyload":"//cdn.jsdelivr.net/npm/lozad@1/dist/lozad.min.js","pangu":"//cdn.jsdelivr.net/npm/pangu@4/dist/browser/pangu.min.js","quicklink":"//cdn.jsdelivr.net/npm/quicklink@1/dist/quicklink.umd.js","disqusjs_js":null,"disqusjs_css":null,"valine":"//cdn.jsdelivr.net/npm/valine@1/dist/Valine.min.js","gitalk_js":"//cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js","gitalk_css":"//cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css","algolia_instant_js":"//cdn.jsdelivr.net/npm/instantsearch.js@2/dist/instantsearch.min.js","algolia_instant_css":"//cdn.jsdelivr.net/npm/instantsearch.js@2/dist/instantsearch.min.css","pdfobject":"//cdn.jsdelivr.net/npm/pdfobject@2/pdfobject.min.js","mermaid":"//cdn.jsdelivr.net/npm/mermaid@8/dist/mermaid.min.js","velocity":"//cdn.jsdelivr.net/npm/velocity-animate@1/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/npm/velocity-animate@1/velocity.ui.min.js","pace":"//cdn.jsdelivr.net/npm/pace-js@1/pace.min.js","pace_css":"//cdn.jsdelivr.net/npm/pace-js@1/themes/blue/pace-theme-minimal.css","three":"//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/three.min.js","three_waves":"//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/three-waves.min.js","canvas_lines":"//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/canvas_lines.min.js","canvas_sphere":"//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/canvas_sphere.min.js","canvas_nest":"//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1/canvas-nest.min.js","canvas_nest_nomobile":"//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1/canvas-nest.min.js","canvas_ribbon":null},"css":"css","js":"js","images":"images"}},{"_id":"layout/footer","data":"<div class=\"footer-custom\">\n</div>\n"},{"_id":"layout/head","data":"<script type=\"text/javascript\" >\nif('serviceWorker' in navigator) {\n\t//注册上一步创建的js文件\n   /* navigator.serviceWorker\n        .register('/service-worker.js')\n        .then(function() { console.log('Service Worker Registered'); })\n        .catch(function(err) {                                                                         \n        // 注册失败 :(\n        console.log('ServiceWorker registration failed: ', err);\n      });\n      */\n}\n</script>\n"}],"Page":[{"title":"404","date":"2016-11-29T10:36:34.000Z","comments":0,"_content":"404\n","source":"404.md","raw":"---\ntitle: 404\ndate: 2016-11-29 18:36:34\ncomments: false\n---\n404\n","updated":"2023-12-19T02:25:24.503Z","path":"404.html","layout":"page","_id":"clqc6ydp20000fki4fgq3gvg7","content":"<p>404</p>\n","length":3,"excerpt":"","more":"<p>404</p>\n"},{"_content":"LjhEXUygCP","source":"baidu_verify_LjhEXUygCP.html","raw":"LjhEXUygCP","date":"2023-12-19T02:25:24.589Z","updated":"2023-12-19T02:25:24.589Z","path":"baidu_verify_LjhEXUygCP.html","title":"","comments":1,"layout":"page","_id":"clqc6ydpy0001fki4ag3i35qv","content":"LjhEXUygCP","length":10,"excerpt":"","more":"LjhEXUygCP"},{"layout":"false","_content":"google-site-verification: googlecc4a5534aecf666a.html\n","source":"googlecc4a5534aecf666a.html","raw":"---\nlayout: false\n---\ngoogle-site-verification: googlecc4a5534aecf666a.html\n","date":"2023-12-19T02:25:24.593Z","updated":"2023-12-19T02:25:24.593Z","path":"googlecc4a5534aecf666a.html","title":"","comments":1,"_id":"clqc6ydq20003fki4a9q7gis5","content":"google-site-verification: googlecc4a5534aecf666a.html\n","length":52,"excerpt":"","more":"google-site-verification: googlecc4a5534aecf666a.html\n"},{"title":"about","date":"2016-11-29T10:36:34.000Z","comments":0,"_content":"about\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-11-29 18:36:34\ncomments: false\n---\nabout\n","updated":"2023-12-19T02:25:24.589Z","path":"about/index.html","layout":"page","_id":"clqc6ydq60007fki4382zg3o1","content":"<p>about</p>\n","length":5,"excerpt":"","more":"<p>about</p>\n"},{"_content":"(function(){\n  var themeVersion = '7.3.0';\n  var cacheName = 'xyz32-service-worker-v0.1';\n  var filesToCache = [\n      'https://blog.xyz327.cn/',\n      'https://blog.xyz327.cn/js/src/utils.js?v='+themeVersion,\n      'https://blog.xyz327.cn/js/src/motion.js?v='+themeVersion,\n      'https://blog.xyz327.cn/js/src/affix.js?v='+themeVersion,\n      'https://blog.xyz327.cn/js/src/bootstrap.js?v='+themeVersion,\n      'https://blog.xyz327.cn/images/avatar/avatar.jpg',\n      'https://blog.xyz327.cn/css/style.css?v='+themeVersion,\n      'https://blog.xyz327.cn/css/main.css?v='+themeVersion,\n  \n  \n  ];\n  \n  self.addEventListener('install', function(e) {\n    console.log('[ServiceWorker] Install');\n    e.waitUntil(\n      caches.open(cacheName).then(function(cache) {\n        console.log('[ServiceWorker] Caching app shell');\n        return cache.addAll(filesToCache);\n      })\n    );\n  });\n  \n  self.addEventListener('activate', function(e) {\n    console.log('[ServiceWorker] Activate');\n    e.waitUntil(\n      caches.keys().then(function(keyList) {\n        return Promise.all(keyList.map(function(key) {\n          console.log('[ServiceWorker] Removing old cache', key);\n          if (key !== cacheName) {\n            return caches.delete(key);\n          }\n        }));\n      })\n    );\n  });\n  \n  self.addEventListener('fetch', function(e) {\n    console.log('[Service Worker] Fetch', e.request.url);\n  \n  //  var allDataUrl = extendDataUrl.concat(filesToCache);\n    var url = e.request.url//.split('?')[0];\n    var excludeUrls = ['https://hm.baidu.com','https://sp0.baidu.com', 'chrome-extension']\n    for (var index in excludeUrls) {\n      if (excludeUrls.hasOwnProperty(index)) {\n        var element = excludeUrls[index];\n        if(url.indexOf(url) === 0){\n          //不做处理\n          //e.respondWith(fetch(e.request));\n          return;\n        }\n      }\n    }\n    if(e.request.method === 'GET'){\n      e.respondWith(\n        caches.match(e.request).then(function(response) {\n          return response || fetch(e.request).then(function (response) {\n            return caches.open(cacheName).then(function(cache){\n              cache.put(e.request.url, response.clone());\n              console.log('[ServiceWorker] Fetched&Cached Data');\n              return response;\n            })\n          });\n        })\n      );\n      /*e.respondWith(fetch(e.request).then(function (response) {\n        return caches.open(cacheName).then(function(cache){\n          cache.put(e.request.url, response.clone());\n          console.log('[ServiceWorker] Fetched&Cached Data');\n          return response;\n        })\n      }));*/\n    } else {\n      e.respondWith(fetch(e.request));\n    }\n  \n  });\n  \n})()\n","source":"service-worker.js","raw":"(function(){\n  var themeVersion = '7.3.0';\n  var cacheName = 'xyz32-service-worker-v0.1';\n  var filesToCache = [\n      'https://blog.xyz327.cn/',\n      'https://blog.xyz327.cn/js/src/utils.js?v='+themeVersion,\n      'https://blog.xyz327.cn/js/src/motion.js?v='+themeVersion,\n      'https://blog.xyz327.cn/js/src/affix.js?v='+themeVersion,\n      'https://blog.xyz327.cn/js/src/bootstrap.js?v='+themeVersion,\n      'https://blog.xyz327.cn/images/avatar/avatar.jpg',\n      'https://blog.xyz327.cn/css/style.css?v='+themeVersion,\n      'https://blog.xyz327.cn/css/main.css?v='+themeVersion,\n  \n  \n  ];\n  \n  self.addEventListener('install', function(e) {\n    console.log('[ServiceWorker] Install');\n    e.waitUntil(\n      caches.open(cacheName).then(function(cache) {\n        console.log('[ServiceWorker] Caching app shell');\n        return cache.addAll(filesToCache);\n      })\n    );\n  });\n  \n  self.addEventListener('activate', function(e) {\n    console.log('[ServiceWorker] Activate');\n    e.waitUntil(\n      caches.keys().then(function(keyList) {\n        return Promise.all(keyList.map(function(key) {\n          console.log('[ServiceWorker] Removing old cache', key);\n          if (key !== cacheName) {\n            return caches.delete(key);\n          }\n        }));\n      })\n    );\n  });\n  \n  self.addEventListener('fetch', function(e) {\n    console.log('[Service Worker] Fetch', e.request.url);\n  \n  //  var allDataUrl = extendDataUrl.concat(filesToCache);\n    var url = e.request.url//.split('?')[0];\n    var excludeUrls = ['https://hm.baidu.com','https://sp0.baidu.com', 'chrome-extension']\n    for (var index in excludeUrls) {\n      if (excludeUrls.hasOwnProperty(index)) {\n        var element = excludeUrls[index];\n        if(url.indexOf(url) === 0){\n          //不做处理\n          //e.respondWith(fetch(e.request));\n          return;\n        }\n      }\n    }\n    if(e.request.method === 'GET'){\n      e.respondWith(\n        caches.match(e.request).then(function(response) {\n          return response || fetch(e.request).then(function (response) {\n            return caches.open(cacheName).then(function(cache){\n              cache.put(e.request.url, response.clone());\n              console.log('[ServiceWorker] Fetched&Cached Data');\n              return response;\n            })\n          });\n        })\n      );\n      /*e.respondWith(fetch(e.request).then(function (response) {\n        return caches.open(cacheName).then(function(cache){\n          cache.put(e.request.url, response.clone());\n          console.log('[ServiceWorker] Fetched&Cached Data');\n          return response;\n        })\n      }));*/\n    } else {\n      e.respondWith(fetch(e.request));\n    }\n  \n  });\n  \n})()\n","date":"2023-12-19T02:25:24.599Z","updated":"2023-12-19T02:25:24.599Z","path":"service-worker.js","layout":"false","title":"","comments":1,"_id":"clqc6ydq70009fki4fkrrhcjw","content":"!function(){var e=\"xyz32-service-worker-v0.1\",t=[\"https://blog.xyz327.cn/\",\"https://blog.xyz327.cn/js/src/utils.js?v=7.3.0\",\"https://blog.xyz327.cn/js/src/motion.js?v=7.3.0\",\"https://blog.xyz327.cn/js/src/affix.js?v=7.3.0\",\"https://blog.xyz327.cn/js/src/bootstrap.js?v=7.3.0\",\"https://blog.xyz327.cn/images/avatar/avatar.jpg\",\"https://blog.xyz327.cn/css/style.css?v=7.3.0\",\"https://blog.xyz327.cn/css/main.css?v=7.3.0\"];self.addEventListener(\"install\",function(n){console.log(\"[ServiceWorker] Install\"),n.waitUntil(caches.open(e).then(function(e){return console.log(\"[ServiceWorker] Caching app shell\"),e.addAll(t)}))}),self.addEventListener(\"activate\",function(t){console.log(\"[ServiceWorker] Activate\"),t.waitUntil(caches.keys().then(function(t){return Promise.all(t.map(function(t){if(console.log(\"[ServiceWorker] Removing old cache\",t),t!==e)return caches.delete(t)}))}))}),self.addEventListener(\"fetch\",function(t){console.log(\"[Service Worker] Fetch\",t.request.url);var n=t.request.url,s=[\"https://hm.baidu.com\",\"https://sp0.baidu.com\",\"chrome-extension\"];for(var c in s)if(s.hasOwnProperty(c)){s[c];if(0===n.indexOf(n))return}\"GET\"===t.request.method?t.respondWith(caches.match(t.request).then(function(n){return n||fetch(t.request).then(function(n){return caches.open(e).then(function(e){return e.put(t.request.url,n.clone()),console.log(\"[ServiceWorker] Fetched&Cached Data\"),n})})})):t.respondWith(fetch(t.request))})}();"},{"_content":"","source":"index.md","raw":"","date":"2023-12-19T09:19:23.191Z","updated":"2023-12-19T09:19:23.191Z","path":"index.html","title":"","comments":1,"layout":"page","_id":"clqc6ydq9000bfki4dyfo10ca","content":"","length":0,"excerpt":"","more":""},{"title":"categories","date":"2016-11-29T08:22:40.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-29 16:22:40\ntype: \"categories\"\ncomments: false\n---\n","updated":"2023-12-19T02:25:24.591Z","path":"categories/index.html","layout":"page","_id":"clqc6ydqb000ffki4cc7eej9q","content":"","length":0,"excerpt":"","more":""},{"_content":"","source":"css/style.css","raw":"","date":"2023-12-19T02:25:24.591Z","updated":"2023-12-19T02:25:24.591Z","path":"css/style.css","layout":"false","title":"","comments":1,"_id":"clqc6ydqc000hfki4dze42pkv","content":""},{"title":"photos","date":"2016-11-29T08:21:34.000Z","type":"photos","comments":0,"_content":"aadas","source":"photos/index.md","raw":"---\ntitle: photos\ndate: 2016-11-29 16:21:34\ntype: photos\ncomments: false\n---\naadas","updated":"2023-12-19T02:25:24.596Z","path":"photos/index.html","layout":"page","_id":"clqc6ydqe000mfki43m2x0ot3","content":"<p>aadas</p>\n","length":5,"excerpt":"","more":"<p>aadas</p>\n"},{"title":"schedule","date":"2016-11-29T08:21:34.000Z","type":"schedule","comments":0,"_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2016-11-29 16:21:34\ntype: schedule\ncomments: false\n---","updated":"2023-12-19T02:25:24.598Z","path":"schedule/index.html","layout":"page","_id":"clqc6ydqf000ofki48yfod2y8","content":"","length":0,"excerpt":"","more":""},{"title":"tags","date":"2016-11-29T08:21:34.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-29 16:21:34\ntype: \"tags\"\ncomments: false\n---\n","updated":"2023-12-19T02:25:24.600Z","path":"tags/index.html","layout":"page","_id":"clqc6ydqi000tfki4f5a14gk3","content":"","length":0,"excerpt":"","more":""}],"Post":[{"title":"折腾hexo的主题--NexT","date":"2016-11-29T15:11:04.000Z","_content":"**针对NexT.Pisces**\n ## 固定边侧栏\n 修改\n >theme/next/source/js/src/schemes/pisces.js\n\n ```javascript\n $(document).ready(function () {\n   var $headerInner = $('.header-inner');\n   var $sidebar = $('#sidebar');\n   $sidebar.show();\n   // 固定顶部黑条\n   $('.headband').css({'position':'fixed', top:0,width:'100%',zIndex:1});\n   $headerInner.css({top:0})\n   var affix = function() {\n     var sidebarTop = $headerInner.height() + 10;\n     $('#sidebar').css({ 'margin-top': sidebarTop }).affix();\n     if (document.body.clientWidth < 975) {\n       $headerInner.css({position: 'static'})\n     } else {\n       $headerInner.css({position: 'fixed'})\n     }\n   };\n   affix()\n   $(window).on('resize', function(){\n        affix()\n   });\n });\n ```\n## 修改文章页面滚动站点信息栏会覆盖菜单栏\n>theme/next/source/js/src/util.js\n\n把 needAffix方法修改为始终返回false\n```javascript\n    needAffix = function () {\n      return false;//this.isPisces();\n    }\n```\n\n~~修改后会影响搜索弹出框,下次解决...~~\n## 修改搜索弹出框会被遮住\n>theme/next/layout/_script/third-party/localsearch.swig\n\n```javascript\n//在首行添加\n$('.popup').appendTo($('body'));\n//并注释\n// $('.popup').detach().appendTo('.header-inner');\n```\n~~## 修改静态js等文件使用七牛~~\n~~> stheme/next/lauout/_script/commons.swig~~\n~~> theme/next/lauout/_partials/head.swig~~\n~~> theme/next/lauout/_script/bootstrap.swig~~\n~~> theme/next/lauout/_script/schemes/pisces.swig~~\n\n```ejsfont\n//在循环添加script之前添加\nurl_for()改为\n(config.qiniu.siteUrlPrefix || url_for())+'/'+theme.js\n```\n ~~在项目_config.yaml 中的七牛下添加siteUrlPrefix（这样会影响https）~~\ndone！\n","source":"_posts/2016/11/DIY-hexo-theme-next.md","raw":"---\ntitle: 折腾hexo的主题--NexT\ndate: 2016-11-29 23:11:04\ntags: [hexo, theme, NexT]\ncategories: hexo\n---\n**针对NexT.Pisces**\n ## 固定边侧栏\n 修改\n >theme/next/source/js/src/schemes/pisces.js\n\n ```javascript\n $(document).ready(function () {\n   var $headerInner = $('.header-inner');\n   var $sidebar = $('#sidebar');\n   $sidebar.show();\n   // 固定顶部黑条\n   $('.headband').css({'position':'fixed', top:0,width:'100%',zIndex:1});\n   $headerInner.css({top:0})\n   var affix = function() {\n     var sidebarTop = $headerInner.height() + 10;\n     $('#sidebar').css({ 'margin-top': sidebarTop }).affix();\n     if (document.body.clientWidth < 975) {\n       $headerInner.css({position: 'static'})\n     } else {\n       $headerInner.css({position: 'fixed'})\n     }\n   };\n   affix()\n   $(window).on('resize', function(){\n        affix()\n   });\n });\n ```\n## 修改文章页面滚动站点信息栏会覆盖菜单栏\n>theme/next/source/js/src/util.js\n\n把 needAffix方法修改为始终返回false\n```javascript\n    needAffix = function () {\n      return false;//this.isPisces();\n    }\n```\n\n~~修改后会影响搜索弹出框,下次解决...~~\n## 修改搜索弹出框会被遮住\n>theme/next/layout/_script/third-party/localsearch.swig\n\n```javascript\n//在首行添加\n$('.popup').appendTo($('body'));\n//并注释\n// $('.popup').detach().appendTo('.header-inner');\n```\n~~## 修改静态js等文件使用七牛~~\n~~> stheme/next/lauout/_script/commons.swig~~\n~~> theme/next/lauout/_partials/head.swig~~\n~~> theme/next/lauout/_script/bootstrap.swig~~\n~~> theme/next/lauout/_script/schemes/pisces.swig~~\n\n```ejsfont\n//在循环添加script之前添加\nurl_for()改为\n(config.qiniu.siteUrlPrefix || url_for())+'/'+theme.js\n```\n ~~在项目_config.yaml 中的七牛下添加siteUrlPrefix（这样会影响https）~~\ndone！\n","slug":"DIY-hexo-theme-next","published":1,"updated":"2023-12-19T02:25:24.510Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydq00002fki45lcw1u1g","content":"<p><strong>针对NexT.Pisces</strong></p>\n<h2 id=\"固定边侧栏\"><a href=\"#固定边侧栏\" class=\"headerlink\" title=\"固定边侧栏\"></a>固定边侧栏</h2><p> 修改</p>\n<blockquote>\n<p>theme&#x2F;next&#x2F;source&#x2F;js&#x2F;src&#x2F;schemes&#x2F;pisces.js</p>\n</blockquote>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"variable language_\">document</span>).<span class=\"title function_\">ready</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $headerInner = $(<span class=\"string\">&#x27;.header-inner&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $sidebar = $(<span class=\"string\">&#x27;#sidebar&#x27;</span>);</span><br><span class=\"line\">  $sidebar.<span class=\"title function_\">show</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 固定顶部黑条</span></span><br><span class=\"line\">  $(<span class=\"string\">&#x27;.headband&#x27;</span>).<span class=\"title function_\">css</span>(&#123;<span class=\"string\">&#x27;position&#x27;</span>:<span class=\"string\">&#x27;fixed&#x27;</span>, <span class=\"attr\">top</span>:<span class=\"number\">0</span>,<span class=\"attr\">width</span>:<span class=\"string\">&#x27;100%&#x27;</span>,<span class=\"attr\">zIndex</span>:<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">  $headerInner.<span class=\"title function_\">css</span>(&#123;<span class=\"attr\">top</span>:<span class=\"number\">0</span>&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> affix = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sidebarTop = $headerInner.<span class=\"title function_\">height</span>() + <span class=\"number\">10</span>;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#sidebar&#x27;</span>).<span class=\"title function_\">css</span>(&#123; <span class=\"string\">&#x27;margin-top&#x27;</span>: sidebarTop &#125;).<span class=\"title function_\">affix</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> &lt; <span class=\"number\">975</span>) &#123;</span><br><span class=\"line\">      $headerInner.<span class=\"title function_\">css</span>(&#123;<span class=\"attr\">position</span>: <span class=\"string\">&#x27;static&#x27;</span>&#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      $headerInner.<span class=\"title function_\">css</span>(&#123;<span class=\"attr\">position</span>: <span class=\"string\">&#x27;fixed&#x27;</span>&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">affix</span>()</span><br><span class=\"line\">  $(<span class=\"variable language_\">window</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"title function_\">affix</span>()</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改文章页面滚动站点信息栏会覆盖菜单栏\"><a href=\"#修改文章页面滚动站点信息栏会覆盖菜单栏\" class=\"headerlink\" title=\"修改文章页面滚动站点信息栏会覆盖菜单栏\"></a>修改文章页面滚动站点信息栏会覆盖菜单栏</h2><blockquote>\n<p>theme&#x2F;next&#x2F;source&#x2F;js&#x2F;src&#x2F;util.js</p>\n</blockquote>\n<p>把 needAffix方法修改为始终返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">needAffix = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//this.isPisces();</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><del>修改后会影响搜索弹出框,下次解决…</del></p>\n<h2 id=\"修改搜索弹出框会被遮住\"><a href=\"#修改搜索弹出框会被遮住\" class=\"headerlink\" title=\"修改搜索弹出框会被遮住\"></a>修改搜索弹出框会被遮住</h2><blockquote>\n<p>theme&#x2F;next&#x2F;layout&#x2F;_script&#x2F;third-party&#x2F;localsearch.swig</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在首行添加</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;.popup&#x27;</span>).<span class=\"title function_\">appendTo</span>($(<span class=\"string\">&#x27;body&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">//并注释</span></span><br><span class=\"line\"><span class=\"comment\">// $(&#x27;.popup&#x27;).detach().appendTo(&#x27;.header-inner&#x27;);</span></span><br></pre></td></tr></table></figure>\n<p><del>## 修改静态js等文件使用七牛</del><br><del>&gt; stheme&#x2F;next&#x2F;lauout&#x2F;_script&#x2F;commons.swig</del><br><del>&gt; theme&#x2F;next&#x2F;lauout&#x2F;_partials&#x2F;head.swig</del><br><del>&gt; theme&#x2F;next&#x2F;lauout&#x2F;_script&#x2F;bootstrap.swig</del><br><del>&gt; theme&#x2F;next&#x2F;lauout&#x2F;_script&#x2F;schemes&#x2F;pisces.swig</del></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在循环添加script之前添加</span><br><span class=\"line\">url_for()改为</span><br><span class=\"line\">(config.qiniu.siteUrlPrefix || url_for())+&#x27;/&#x27;+theme.js</span><br></pre></td></tr></table></figure>\n<p> <del>在项目_config.yaml 中的七牛下添加siteUrlPrefix（这样会影响https）</del><br>done！</p>\n","length":1658,"excerpt":"","more":"<p><strong>针对NexT.Pisces</strong></p>\n<h2 id=\"固定边侧栏\"><a href=\"#固定边侧栏\" class=\"headerlink\" title=\"固定边侧栏\"></a>固定边侧栏</h2><p> 修改</p>\n<blockquote>\n<p>theme&#x2F;next&#x2F;source&#x2F;js&#x2F;src&#x2F;schemes&#x2F;pisces.js</p>\n</blockquote>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"variable language_\">document</span>).<span class=\"title function_\">ready</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $headerInner = $(<span class=\"string\">&#x27;.header-inner&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $sidebar = $(<span class=\"string\">&#x27;#sidebar&#x27;</span>);</span><br><span class=\"line\">  $sidebar.<span class=\"title function_\">show</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 固定顶部黑条</span></span><br><span class=\"line\">  $(<span class=\"string\">&#x27;.headband&#x27;</span>).<span class=\"title function_\">css</span>(&#123;<span class=\"string\">&#x27;position&#x27;</span>:<span class=\"string\">&#x27;fixed&#x27;</span>, <span class=\"attr\">top</span>:<span class=\"number\">0</span>,<span class=\"attr\">width</span>:<span class=\"string\">&#x27;100%&#x27;</span>,<span class=\"attr\">zIndex</span>:<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">  $headerInner.<span class=\"title function_\">css</span>(&#123;<span class=\"attr\">top</span>:<span class=\"number\">0</span>&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> affix = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sidebarTop = $headerInner.<span class=\"title function_\">height</span>() + <span class=\"number\">10</span>;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#sidebar&#x27;</span>).<span class=\"title function_\">css</span>(&#123; <span class=\"string\">&#x27;margin-top&#x27;</span>: sidebarTop &#125;).<span class=\"title function_\">affix</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> &lt; <span class=\"number\">975</span>) &#123;</span><br><span class=\"line\">      $headerInner.<span class=\"title function_\">css</span>(&#123;<span class=\"attr\">position</span>: <span class=\"string\">&#x27;static&#x27;</span>&#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      $headerInner.<span class=\"title function_\">css</span>(&#123;<span class=\"attr\">position</span>: <span class=\"string\">&#x27;fixed&#x27;</span>&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">affix</span>()</span><br><span class=\"line\">  $(<span class=\"variable language_\">window</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"title function_\">affix</span>()</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改文章页面滚动站点信息栏会覆盖菜单栏\"><a href=\"#修改文章页面滚动站点信息栏会覆盖菜单栏\" class=\"headerlink\" title=\"修改文章页面滚动站点信息栏会覆盖菜单栏\"></a>修改文章页面滚动站点信息栏会覆盖菜单栏</h2><blockquote>\n<p>theme&#x2F;next&#x2F;source&#x2F;js&#x2F;src&#x2F;util.js</p>\n</blockquote>\n<p>把 needAffix方法修改为始终返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">needAffix = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//this.isPisces();</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><del>修改后会影响搜索弹出框,下次解决…</del></p>\n<h2 id=\"修改搜索弹出框会被遮住\"><a href=\"#修改搜索弹出框会被遮住\" class=\"headerlink\" title=\"修改搜索弹出框会被遮住\"></a>修改搜索弹出框会被遮住</h2><blockquote>\n<p>theme&#x2F;next&#x2F;layout&#x2F;_script&#x2F;third-party&#x2F;localsearch.swig</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在首行添加</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;.popup&#x27;</span>).<span class=\"title function_\">appendTo</span>($(<span class=\"string\">&#x27;body&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">//并注释</span></span><br><span class=\"line\"><span class=\"comment\">// $(&#x27;.popup&#x27;).detach().appendTo(&#x27;.header-inner&#x27;);</span></span><br></pre></td></tr></table></figure>\n<p><del>## 修改静态js等文件使用七牛</del><br><del>&gt; stheme&#x2F;next&#x2F;lauout&#x2F;_script&#x2F;commons.swig</del><br><del>&gt; theme&#x2F;next&#x2F;lauout&#x2F;_partials&#x2F;head.swig</del><br><del>&gt; theme&#x2F;next&#x2F;lauout&#x2F;_script&#x2F;bootstrap.swig</del><br><del>&gt; theme&#x2F;next&#x2F;lauout&#x2F;_script&#x2F;schemes&#x2F;pisces.swig</del></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在循环添加script之前添加</span><br><span class=\"line\">url_for()改为</span><br><span class=\"line\">(config.qiniu.siteUrlPrefix || url_for())+&#x27;/&#x27;+theme.js</span><br></pre></td></tr></table></figure>\n<p> <del>在项目_config.yaml 中的七牛下添加siteUrlPrefix（这样会影响https）</del><br>done！</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"折腾hexo的主题--NexT","path":"2016/11/29/DIY-hexo-theme-next/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2016-11-29T15:11:04.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-11-29T15:11:04.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"hexo","tags":["hexo","theme","NexT"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"git操作记录","date":"2016-11-30T01:20:44.000Z","_content":"\n## 开始\n设置git\n```shell\n$ git config --global user.name \"xyz327\"   //给自己起个用户名\n$ git config --globla user.email  \"xyz327@outlook.com\"   //填写自己的邮箱\n```\n## 解决冲突\n1. 放弃本地修改，直接更新远端内容  \n```shell\ngit fetch --all\ngit reset --hard origin/master\n# git fetch 只是下载远程的库的内容，\n# 不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本\n```\n2.\n","source":"_posts/2016/11/git.md","raw":"---\ntitle: git操作记录\ndate: 2016-11-30 09:20:44\ntags: git\ncategories: git\n---\n\n## 开始\n设置git\n```shell\n$ git config --global user.name \"xyz327\"   //给自己起个用户名\n$ git config --globla user.email  \"xyz327@outlook.com\"   //填写自己的邮箱\n```\n## 解决冲突\n1. 放弃本地修改，直接更新远端内容  \n```shell\ngit fetch --all\ngit reset --hard origin/master\n# git fetch 只是下载远程的库的内容，\n# 不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本\n```\n2.\n","slug":"git","published":1,"updated":"2023-12-19T02:25:24.510Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydq30004fki40tc4g26i","content":"<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>设置git</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git config --global user.name <span class=\"string\">&quot;xyz327&quot;</span>   //给自己起个用户名</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git config --globla user.email  <span class=\"string\">&quot;xyz327@outlook.com&quot;</span>   //填写自己的邮箱</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h2><ol>\n<li>放弃本地修改，直接更新远端内容  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin/master</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">git fetch 只是下载远程的库的内容，</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本</span></span><br></pre></td></tr></table></figure></li>\n<li></li>\n</ol>\n","length":248,"excerpt":"","more":"<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>设置git</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git config --global user.name <span class=\"string\">&quot;xyz327&quot;</span>   //给自己起个用户名</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git config --globla user.email  <span class=\"string\">&quot;xyz327@outlook.com&quot;</span>   //填写自己的邮箱</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h2><ol>\n<li>放弃本地修改，直接更新远端内容  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin/master</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">git fetch 只是下载远程的库的内容，</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本</span></span><br></pre></td></tr></table></figure></li>\n<li></li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"git操作记录","path":"2016/11/30/git/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2016-11-30T01:20:44.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-11-30T01:20:44.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"git","tags":["git"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"loopback one","date":"2016-12-01T06:35:20.000Z","keywords":"loopback","_content":"\nloopback是一个用来构建restfulAPI的轻量级的nodejs框架 基于express\n[官网](http://loopback.io/) [github](https://github.com/strongloop/loopback/)\n<!-- more -->\n## 开始\n~~~安装slc工具~~~ 官网现在使用loopback-cli代替了原来的slc\n\n关于基础的安装官网上都有介绍，直接开始\n### 新建项目\n  ```shell\n  lb\n  #输入项目名,选择版本，选择对应的模板，一个loopback项目就已经创建好了。\n  ```\n我选择的是`3.x`版和 `api-server`的模板\n\n  然后等待下载依赖包就ok了\n  **这里npm可能会比较慢，推荐安装[nrm](https://github.com/Pana/nrm)，可以切换npm的源**\n### 启动\n  ```shell\n  node .\n  ```\n  然后浏览器进入 [http://localhost:3000/explorer](http://localhost:3000/explorer) 查看相应的restfulAPI\n  会有一个默认的User\n\n一个loopback项目的目录结构如下\n```\n\nloopback-demo\n|\n|--client //存放静态文件\n|\n|--common\n|   |\n|   |--mixins //mixins的相关Model\n|   |--models //公共的model\n|\n|--server\n|   |\n|   |--boot //项目启动时会加载这个目录下的文件\n|   |--models //服务器的model\n|   |--component-config.js // \n|   |--config.js //loopback配置文件\n|   |--datasources.js //数据源设置\n|   |--middleware.js //中间件设置\n|   |--model-config.js //model定义\n|   |--server.js //启动文件\n|\n```\n创建一个用户管理的restfulApi程序\n\n### 新建BaseUser模型\n```shell\nlb model \n#根据提示创建一个名为BaseUser的模型 继承自User\n```\n`User`模型为loopback内置的用户模型，包含了login/logout/accesstoken等方法属性，我们自己的用户模型自己继承与它就行\n\n### 新建File模型\n\n`PersistedModel`模型为内置的包含CRUD的存储模型","source":"_posts/2016/12/loopback-one.md","raw":"---\ntitle: loopback one\ndate: 2016-12-01 14:35:20\ntags: [loopback]\ncategories: [loopback]\nkeywords: loopback\n---\n\nloopback是一个用来构建restfulAPI的轻量级的nodejs框架 基于express\n[官网](http://loopback.io/) [github](https://github.com/strongloop/loopback/)\n<!-- more -->\n## 开始\n~~~安装slc工具~~~ 官网现在使用loopback-cli代替了原来的slc\n\n关于基础的安装官网上都有介绍，直接开始\n### 新建项目\n  ```shell\n  lb\n  #输入项目名,选择版本，选择对应的模板，一个loopback项目就已经创建好了。\n  ```\n我选择的是`3.x`版和 `api-server`的模板\n\n  然后等待下载依赖包就ok了\n  **这里npm可能会比较慢，推荐安装[nrm](https://github.com/Pana/nrm)，可以切换npm的源**\n### 启动\n  ```shell\n  node .\n  ```\n  然后浏览器进入 [http://localhost:3000/explorer](http://localhost:3000/explorer) 查看相应的restfulAPI\n  会有一个默认的User\n\n一个loopback项目的目录结构如下\n```\n\nloopback-demo\n|\n|--client //存放静态文件\n|\n|--common\n|   |\n|   |--mixins //mixins的相关Model\n|   |--models //公共的model\n|\n|--server\n|   |\n|   |--boot //项目启动时会加载这个目录下的文件\n|   |--models //服务器的model\n|   |--component-config.js // \n|   |--config.js //loopback配置文件\n|   |--datasources.js //数据源设置\n|   |--middleware.js //中间件设置\n|   |--model-config.js //model定义\n|   |--server.js //启动文件\n|\n```\n创建一个用户管理的restfulApi程序\n\n### 新建BaseUser模型\n```shell\nlb model \n#根据提示创建一个名为BaseUser的模型 继承自User\n```\n`User`模型为loopback内置的用户模型，包含了login/logout/accesstoken等方法属性，我们自己的用户模型自己继承与它就行\n\n### 新建File模型\n\n`PersistedModel`模型为内置的包含CRUD的存储模型","slug":"loopback-one","published":1,"updated":"2023-12-19T02:25:24.511Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydq60008fki49ico1sea","content":"<p>loopback是一个用来构建restfulAPI的轻量级的nodejs框架 基于express<br><span class=\"exturl\" data-url=\"aHR0cDovL2xvb3BiYWNrLmlvLw==\">官网<i class=\"fa fa-external-link-alt\"></i></span> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N0cm9uZ2xvb3AvbG9vcGJhY2sv\">github<i class=\"fa fa-external-link-alt\"></i></span></p>\n<span id=\"more\"></span>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><pre><code class=\"安装slc工具~~~\">\n关于基础的安装官网上都有介绍，直接开始\n### 新建项目\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">输入项目名,选择版本，选择对应的模板，一个loopback项目就已经创建好了。</span></span><br></pre></td></tr></table></figure>\n我选择的是`3.x`版和 `api-server`的模板\n\n  然后等待下载依赖包就ok了\n  **这里npm可能会比较慢，推荐安装[nrm](https://github.com/Pana/nrm)，可以切换npm的源**\n### 启动\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node .</span><br></pre></td></tr></table></figure>\n  然后浏览器进入 [http://localhost:3000/explorer](http://localhost:3000/explorer) 查看相应的restfulAPI\n  会有一个默认的User\n\n一个loopback项目的目录结构如下\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">loopback-demo</span><br><span class=\"line\">|<span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">--client //存放静态文件</span></span><br><span class=\"line\"><span class=\"string\"></span>|</span><br><span class=\"line\">|<span class=\"string\">--common</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|</span><br><span class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--mixins //mixins的相关Model</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--models //公共的model</span></span><br><span class=\"line\"><span class=\"string\"></span>|</span><br><span class=\"line\">|<span class=\"string\">--server</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|</span><br><span class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--boot //项目启动时会加载这个目录下的文件</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--models //服务器的model</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--component-config.js // </span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--config.js //loopback配置文件</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--datasources.js //数据源设置</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--middleware.js //中间件设置</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--model-config.js //model定义</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--server.js //启动文件</span></span><br><span class=\"line\"><span class=\"string\"></span>|</span><br></pre></td></tr></table></figure>\n创建一个用户管理的restfulApi程序\n\n### 新建BaseUser模型\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb model </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">根据提示创建一个名为BaseUser的模型 继承自User</span></span><br></pre></td></tr></table></figure>\n`User`模型为loopback内置的用户模型，包含了login/logout/accesstoken等方法属性，我们自己的用户模型自己继承与它就行\n\n### 新建File模型\n\n`PersistedModel`模型为内置的包含CRUD的存储模型\n</code></pre>\n","length":881,"excerpt":"<p>loopback是一个用来构建restfulAPI的轻量级的nodejs框架 基于express<br><a href=\"http://loopback.io/\">官网</a> <a href=\"https://github.com/strongloop/loopback/\">github</a></p>","more":"<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><pre><code class=\"安装slc工具~~~\">\n关于基础的安装官网上都有介绍，直接开始\n### 新建项目\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">输入项目名,选择版本，选择对应的模板，一个loopback项目就已经创建好了。</span></span><br></pre></td></tr></table></figure>\n我选择的是`3.x`版和 `api-server`的模板\n\n  然后等待下载依赖包就ok了\n  **这里npm可能会比较慢，推荐安装[nrm](https://github.com/Pana/nrm)，可以切换npm的源**\n### 启动\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node .</span><br></pre></td></tr></table></figure>\n  然后浏览器进入 [http://localhost:3000/explorer](http://localhost:3000/explorer) 查看相应的restfulAPI\n  会有一个默认的User\n\n一个loopback项目的目录结构如下\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">loopback-demo</span><br><span class=\"line\">|<span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">--client //存放静态文件</span></span><br><span class=\"line\"><span class=\"string\"></span>|</span><br><span class=\"line\">|<span class=\"string\">--common</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|</span><br><span class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--mixins //mixins的相关Model</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--models //公共的model</span></span><br><span class=\"line\"><span class=\"string\"></span>|</span><br><span class=\"line\">|<span class=\"string\">--server</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|</span><br><span class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--boot //项目启动时会加载这个目录下的文件</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--models //服务器的model</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--component-config.js // </span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--config.js //loopback配置文件</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--datasources.js //数据源设置</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--middleware.js //中间件设置</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--model-config.js //model定义</span></span><br><span class=\"line\"><span class=\"string\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--server.js //启动文件</span></span><br><span class=\"line\"><span class=\"string\"></span>|</span><br></pre></td></tr></table></figure>\n创建一个用户管理的restfulApi程序\n\n### 新建BaseUser模型\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb model </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">根据提示创建一个名为BaseUser的模型 继承自User</span></span><br></pre></td></tr></table></figure>\n`User`模型为loopback内置的用户模型，包含了login/logout/accesstoken等方法属性，我们自己的用户模型自己继承与它就行\n\n### 新建File模型\n\n`PersistedModel`模型为内置的包含CRUD的存储模型\n</code></pre>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"loopback one","path":"2016/12/01/loopback-one/","eyeCatchImage":null,"excerpt":"<p>loopback是一个用来构建restfulAPI的轻量级的nodejs框架 基于express<br><a href=\"http://loopback.io/\">官网</a> <a href=\"https://github.com/strongloop/loopback/\">github</a></p>","date":{"_isAMomentObject":true,"_i":"2016-12-01T06:35:20.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-12-01T06:35:20.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"loopback","tags":["loopback"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"loopback two","date":"2016-12-06T03:44:37.000Z","keywords":"loopback","_content":"\nloopback PersistedModel 的方法与rest api对应表\n\nmodel的方法名|HTTP Method|restApi url|说明\n-----------|-----------|-----------|---\n`create`|POST|/Model\n`upsert`|PATCH|/Model\n`upsert`|PUT|/Model\n`exists`  |GET|/Model/:id/exists\n`findById`|GET|/Model/:id|查找对应id的Model\n`prototype.updateAttributes`|PATCH|/Model/:id\n`prototype.updateAttributes`|PUT|/Model/:id\n`destroyById`/`deleteById`|DELETE|/Model/:id\n`exists`|HEAD|/Model/:id\n`find`    |GET|/Model\n`findOne` |GET|/Model/findOne\n`count`    |GET|/Model/count\n`createChangeStream`| GET|/Model/chage-stream\n`createChangeStream`| POST|/Model/chage-stream\n`replaceById`|POST|/Model/:id/replace\n`replaceOrCreate`|POST|/Model/replaceOrCreate\n`updateAll`|POST|/Model/update\n`upsertWithWhere`|POST|/Model/upsertWithWhere\n\n关系模型的部分方法与rest api 对应表 更多说明参考 [官方文档](http://loopback.io/doc/en/lb2/Accessing-related-models.html)\n\nmodel的关联对象的方法名|HTTP Method|restApi url|说明\n-------------------|-----------|-----------|--------\n`__get__attr`|GET|/Model/:id/attr|查找对应id的Model下的attr数据\n`__create__attr`|POST|/Model/:id/attr|创建一条对应id的Model下的attr数据\n`__delete__attr`|DELETE|/Model/:id/attr|删除对应id的Model下的所有attr数据\n`__count__attr`|GET|/Model/:id/attr/count|查找对应id的Model下的attr数据数量\n`__findById__attr`|GET|/Model/:id/attr/:attrId|查找对应id的Model下的id为attrId的数据\n`__destroyById__attr`|DELETE|/Model/:id/attr/:attrId|删除对应id的Model下的id为attrId的数据\n`__updateById__attr`|PUT|/Model/:id/attr/:attrId|更新对应id的Model下的id为attrId的数据\n`__exists__attr`|HEAD|/Model/:id/attr/rel/:attrId|检查对应id的Model下的id为attrId的数据(貌似没什么用)\n`__link__attr`|PUT|/Model/:id/attr/rel/:attrId|新增Model与attr的中间数据 (多对多关系)\n`__unlink__attr`|DELETE|/Model/:id/attr/rel/:attrId|删除Model与attr的中间数据 (多对多关系)\n","source":"_posts/2016/12/loopback-two.md","raw":"---\ntitle: loopback two\ndate: 2016-12-06 11:44:37\ntags: loopback\ncategories: loopback\nkeywords: loopback\n---\n\nloopback PersistedModel 的方法与rest api对应表\n\nmodel的方法名|HTTP Method|restApi url|说明\n-----------|-----------|-----------|---\n`create`|POST|/Model\n`upsert`|PATCH|/Model\n`upsert`|PUT|/Model\n`exists`  |GET|/Model/:id/exists\n`findById`|GET|/Model/:id|查找对应id的Model\n`prototype.updateAttributes`|PATCH|/Model/:id\n`prototype.updateAttributes`|PUT|/Model/:id\n`destroyById`/`deleteById`|DELETE|/Model/:id\n`exists`|HEAD|/Model/:id\n`find`    |GET|/Model\n`findOne` |GET|/Model/findOne\n`count`    |GET|/Model/count\n`createChangeStream`| GET|/Model/chage-stream\n`createChangeStream`| POST|/Model/chage-stream\n`replaceById`|POST|/Model/:id/replace\n`replaceOrCreate`|POST|/Model/replaceOrCreate\n`updateAll`|POST|/Model/update\n`upsertWithWhere`|POST|/Model/upsertWithWhere\n\n关系模型的部分方法与rest api 对应表 更多说明参考 [官方文档](http://loopback.io/doc/en/lb2/Accessing-related-models.html)\n\nmodel的关联对象的方法名|HTTP Method|restApi url|说明\n-------------------|-----------|-----------|--------\n`__get__attr`|GET|/Model/:id/attr|查找对应id的Model下的attr数据\n`__create__attr`|POST|/Model/:id/attr|创建一条对应id的Model下的attr数据\n`__delete__attr`|DELETE|/Model/:id/attr|删除对应id的Model下的所有attr数据\n`__count__attr`|GET|/Model/:id/attr/count|查找对应id的Model下的attr数据数量\n`__findById__attr`|GET|/Model/:id/attr/:attrId|查找对应id的Model下的id为attrId的数据\n`__destroyById__attr`|DELETE|/Model/:id/attr/:attrId|删除对应id的Model下的id为attrId的数据\n`__updateById__attr`|PUT|/Model/:id/attr/:attrId|更新对应id的Model下的id为attrId的数据\n`__exists__attr`|HEAD|/Model/:id/attr/rel/:attrId|检查对应id的Model下的id为attrId的数据(貌似没什么用)\n`__link__attr`|PUT|/Model/:id/attr/rel/:attrId|新增Model与attr的中间数据 (多对多关系)\n`__unlink__attr`|DELETE|/Model/:id/attr/rel/:attrId|删除Model与attr的中间数据 (多对多关系)\n","slug":"loopback-two","published":1,"updated":"2023-12-19T02:25:24.512Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydq8000afki4f8mee7pt","content":"<p>loopback PersistedModel 的方法与rest api对应表</p>\n<table>\n<thead>\n<tr>\n<th>model的方法名</th>\n<th>HTTP Method</th>\n<th>restApi url</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>create</code></td>\n<td>POST</td>\n<td>&#x2F;Model</td>\n<td></td>\n</tr>\n<tr>\n<td><code>upsert</code></td>\n<td>PATCH</td>\n<td>&#x2F;Model</td>\n<td></td>\n</tr>\n<tr>\n<td><code>upsert</code></td>\n<td>PUT</td>\n<td>&#x2F;Model</td>\n<td></td>\n</tr>\n<tr>\n<td><code>exists</code></td>\n<td>GET</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;exists</td>\n<td></td>\n</tr>\n<tr>\n<td><code>findById</code></td>\n<td>GET</td>\n<td>&#x2F;Model&#x2F;:id</td>\n<td>查找对应id的Model</td>\n</tr>\n<tr>\n<td><code>prototype.updateAttributes</code></td>\n<td>PATCH</td>\n<td>&#x2F;Model&#x2F;:id</td>\n<td></td>\n</tr>\n<tr>\n<td><code>prototype.updateAttributes</code></td>\n<td>PUT</td>\n<td>&#x2F;Model&#x2F;:id</td>\n<td></td>\n</tr>\n<tr>\n<td><code>destroyById</code>&#x2F;<code>deleteById</code></td>\n<td>DELETE</td>\n<td>&#x2F;Model&#x2F;:id</td>\n<td></td>\n</tr>\n<tr>\n<td><code>exists</code></td>\n<td>HEAD</td>\n<td>&#x2F;Model&#x2F;:id</td>\n<td></td>\n</tr>\n<tr>\n<td><code>find</code></td>\n<td>GET</td>\n<td>&#x2F;Model</td>\n<td></td>\n</tr>\n<tr>\n<td><code>findOne</code></td>\n<td>GET</td>\n<td>&#x2F;Model&#x2F;findOne</td>\n<td></td>\n</tr>\n<tr>\n<td><code>count</code></td>\n<td>GET</td>\n<td>&#x2F;Model&#x2F;count</td>\n<td></td>\n</tr>\n<tr>\n<td><code>createChangeStream</code></td>\n<td>GET</td>\n<td>&#x2F;Model&#x2F;chage-stream</td>\n<td></td>\n</tr>\n<tr>\n<td><code>createChangeStream</code></td>\n<td>POST</td>\n<td>&#x2F;Model&#x2F;chage-stream</td>\n<td></td>\n</tr>\n<tr>\n<td><code>replaceById</code></td>\n<td>POST</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;replace</td>\n<td></td>\n</tr>\n<tr>\n<td><code>replaceOrCreate</code></td>\n<td>POST</td>\n<td>&#x2F;Model&#x2F;replaceOrCreate</td>\n<td></td>\n</tr>\n<tr>\n<td><code>updateAll</code></td>\n<td>POST</td>\n<td>&#x2F;Model&#x2F;update</td>\n<td></td>\n</tr>\n<tr>\n<td><code>upsertWithWhere</code></td>\n<td>POST</td>\n<td>&#x2F;Model&#x2F;upsertWithWhere</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>关系模型的部分方法与rest api 对应表 更多说明参考 <span class=\"exturl\" data-url=\"aHR0cDovL2xvb3BiYWNrLmlvL2RvYy9lbi9sYjIvQWNjZXNzaW5nLXJlbGF0ZWQtbW9kZWxzLmh0bWw=\">官方文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n<table>\n<thead>\n<tr>\n<th>model的关联对象的方法名</th>\n<th>HTTP Method</th>\n<th>restApi url</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>__get__attr</code></td>\n<td>GET</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr</td>\n<td>查找对应id的Model下的attr数据</td>\n</tr>\n<tr>\n<td><code>__create__attr</code></td>\n<td>POST</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr</td>\n<td>创建一条对应id的Model下的attr数据</td>\n</tr>\n<tr>\n<td><code>__delete__attr</code></td>\n<td>DELETE</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr</td>\n<td>删除对应id的Model下的所有attr数据</td>\n</tr>\n<tr>\n<td><code>__count__attr</code></td>\n<td>GET</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr&#x2F;count</td>\n<td>查找对应id的Model下的attr数据数量</td>\n</tr>\n<tr>\n<td><code>__findById__attr</code></td>\n<td>GET</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr&#x2F;:attrId</td>\n<td>查找对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__destroyById__attr</code></td>\n<td>DELETE</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr&#x2F;:attrId</td>\n<td>删除对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__updateById__attr</code></td>\n<td>PUT</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr&#x2F;:attrId</td>\n<td>更新对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__exists__attr</code></td>\n<td>HEAD</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr&#x2F;rel&#x2F;:attrId</td>\n<td>检查对应id的Model下的id为attrId的数据(貌似没什么用)</td>\n</tr>\n<tr>\n<td><code>__link__attr</code></td>\n<td>PUT</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr&#x2F;rel&#x2F;:attrId</td>\n<td>新增Model与attr的中间数据 (多对多关系)</td>\n</tr>\n<tr>\n<td><code>__unlink__attr</code></td>\n<td>DELETE</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr&#x2F;rel&#x2F;:attrId</td>\n<td>删除Model与attr的中间数据 (多对多关系)</td>\n</tr>\n</tbody></table>\n","length":1680,"excerpt":"","more":"<p>loopback PersistedModel 的方法与rest api对应表</p>\n<table>\n<thead>\n<tr>\n<th>model的方法名</th>\n<th>HTTP Method</th>\n<th>restApi url</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>create</code></td>\n<td>POST</td>\n<td>&#x2F;Model</td>\n<td></td>\n</tr>\n<tr>\n<td><code>upsert</code></td>\n<td>PATCH</td>\n<td>&#x2F;Model</td>\n<td></td>\n</tr>\n<tr>\n<td><code>upsert</code></td>\n<td>PUT</td>\n<td>&#x2F;Model</td>\n<td></td>\n</tr>\n<tr>\n<td><code>exists</code></td>\n<td>GET</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;exists</td>\n<td></td>\n</tr>\n<tr>\n<td><code>findById</code></td>\n<td>GET</td>\n<td>&#x2F;Model&#x2F;:id</td>\n<td>查找对应id的Model</td>\n</tr>\n<tr>\n<td><code>prototype.updateAttributes</code></td>\n<td>PATCH</td>\n<td>&#x2F;Model&#x2F;:id</td>\n<td></td>\n</tr>\n<tr>\n<td><code>prototype.updateAttributes</code></td>\n<td>PUT</td>\n<td>&#x2F;Model&#x2F;:id</td>\n<td></td>\n</tr>\n<tr>\n<td><code>destroyById</code>&#x2F;<code>deleteById</code></td>\n<td>DELETE</td>\n<td>&#x2F;Model&#x2F;:id</td>\n<td></td>\n</tr>\n<tr>\n<td><code>exists</code></td>\n<td>HEAD</td>\n<td>&#x2F;Model&#x2F;:id</td>\n<td></td>\n</tr>\n<tr>\n<td><code>find</code></td>\n<td>GET</td>\n<td>&#x2F;Model</td>\n<td></td>\n</tr>\n<tr>\n<td><code>findOne</code></td>\n<td>GET</td>\n<td>&#x2F;Model&#x2F;findOne</td>\n<td></td>\n</tr>\n<tr>\n<td><code>count</code></td>\n<td>GET</td>\n<td>&#x2F;Model&#x2F;count</td>\n<td></td>\n</tr>\n<tr>\n<td><code>createChangeStream</code></td>\n<td>GET</td>\n<td>&#x2F;Model&#x2F;chage-stream</td>\n<td></td>\n</tr>\n<tr>\n<td><code>createChangeStream</code></td>\n<td>POST</td>\n<td>&#x2F;Model&#x2F;chage-stream</td>\n<td></td>\n</tr>\n<tr>\n<td><code>replaceById</code></td>\n<td>POST</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;replace</td>\n<td></td>\n</tr>\n<tr>\n<td><code>replaceOrCreate</code></td>\n<td>POST</td>\n<td>&#x2F;Model&#x2F;replaceOrCreate</td>\n<td></td>\n</tr>\n<tr>\n<td><code>updateAll</code></td>\n<td>POST</td>\n<td>&#x2F;Model&#x2F;update</td>\n<td></td>\n</tr>\n<tr>\n<td><code>upsertWithWhere</code></td>\n<td>POST</td>\n<td>&#x2F;Model&#x2F;upsertWithWhere</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>关系模型的部分方法与rest api 对应表 更多说明参考 <a href=\"http://loopback.io/doc/en/lb2/Accessing-related-models.html\">官方文档</a></p>\n<table>\n<thead>\n<tr>\n<th>model的关联对象的方法名</th>\n<th>HTTP Method</th>\n<th>restApi url</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>__get__attr</code></td>\n<td>GET</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr</td>\n<td>查找对应id的Model下的attr数据</td>\n</tr>\n<tr>\n<td><code>__create__attr</code></td>\n<td>POST</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr</td>\n<td>创建一条对应id的Model下的attr数据</td>\n</tr>\n<tr>\n<td><code>__delete__attr</code></td>\n<td>DELETE</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr</td>\n<td>删除对应id的Model下的所有attr数据</td>\n</tr>\n<tr>\n<td><code>__count__attr</code></td>\n<td>GET</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr&#x2F;count</td>\n<td>查找对应id的Model下的attr数据数量</td>\n</tr>\n<tr>\n<td><code>__findById__attr</code></td>\n<td>GET</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr&#x2F;:attrId</td>\n<td>查找对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__destroyById__attr</code></td>\n<td>DELETE</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr&#x2F;:attrId</td>\n<td>删除对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__updateById__attr</code></td>\n<td>PUT</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr&#x2F;:attrId</td>\n<td>更新对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__exists__attr</code></td>\n<td>HEAD</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr&#x2F;rel&#x2F;:attrId</td>\n<td>检查对应id的Model下的id为attrId的数据(貌似没什么用)</td>\n</tr>\n<tr>\n<td><code>__link__attr</code></td>\n<td>PUT</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr&#x2F;rel&#x2F;:attrId</td>\n<td>新增Model与attr的中间数据 (多对多关系)</td>\n</tr>\n<tr>\n<td><code>__unlink__attr</code></td>\n<td>DELETE</td>\n<td>&#x2F;Model&#x2F;:id&#x2F;attr&#x2F;rel&#x2F;:attrId</td>\n<td>删除Model与attr的中间数据 (多对多关系)</td>\n</tr>\n</tbody></table>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"loopback two","path":"2016/12/06/loopback-two/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2016-12-06T03:44:37.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-12-06T03:44:37.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"loopback","tags":["loopback"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"mysql 记录","date":"2016-12-06T08:36:39.000Z","keywords":"mysql xyz327","_content":"## 全角字符\n存入全角的字母，然后用模糊查询 查询不出来..暂时先把全角改为半角...\n\n## 事物隔离级别\n今天把程序发布到线上环境时，插入数据时mysql直接报错\n>Cannot execute statement: binlogging impossible since BINLOG_FORMAT = STATEMENT and at least one table uses a storage engine limited to row-logging. InnoDB is limited to row-logging when transaction isolation level is READ COMMITTED or READ UNCOMMITTED.\n\n百度一番，说问题是因为我程序插入数据时开启了事物\n mysql默认的binlog_format是STATEMENT，而在READ COMMITTED或READ UNCOMMITTED隔离级别下，innodb只能使用的binlog_format是ROW。\n 我程序事物使用的隔离级别默认为READ_COMMINTED \n\n 解决办法有两个\n  1. 修改程序的事物隔离级别,不使用READ COMMITTED或READ UNCOMMITTED 这两种隔离级别。mysql默认的事物隔离级别是REPEATABLE_READ\n  2. 修改mysql的配置 my.ini 设置 binlog_format=ROW","source":"_posts/2016/12/mysql-record.md","raw":"---\ntitle: mysql 记录\ndate: 2016-12-06 16:36:39\ntags: mysql\ncategories: mysql\nkeywords: mysql xyz327\n---\n## 全角字符\n存入全角的字母，然后用模糊查询 查询不出来..暂时先把全角改为半角...\n\n## 事物隔离级别\n今天把程序发布到线上环境时，插入数据时mysql直接报错\n>Cannot execute statement: binlogging impossible since BINLOG_FORMAT = STATEMENT and at least one table uses a storage engine limited to row-logging. InnoDB is limited to row-logging when transaction isolation level is READ COMMITTED or READ UNCOMMITTED.\n\n百度一番，说问题是因为我程序插入数据时开启了事物\n mysql默认的binlog_format是STATEMENT，而在READ COMMITTED或READ UNCOMMITTED隔离级别下，innodb只能使用的binlog_format是ROW。\n 我程序事物使用的隔离级别默认为READ_COMMINTED \n\n 解决办法有两个\n  1. 修改程序的事物隔离级别,不使用READ COMMITTED或READ UNCOMMITTED 这两种隔离级别。mysql默认的事物隔离级别是REPEATABLE_READ\n  2. 修改mysql的配置 my.ini 设置 binlog_format=ROW","slug":"mysql-record","published":1,"updated":"2023-12-19T02:25:24.512Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqa000cfki44os29nex","content":"<h2 id=\"全角字符\"><a href=\"#全角字符\" class=\"headerlink\" title=\"全角字符\"></a>全角字符</h2><p>存入全角的字母，然后用模糊查询 查询不出来..暂时先把全角改为半角…</p>\n<h2 id=\"事物隔离级别\"><a href=\"#事物隔离级别\" class=\"headerlink\" title=\"事物隔离级别\"></a>事物隔离级别</h2><p>今天把程序发布到线上环境时，插入数据时mysql直接报错</p>\n<blockquote>\n<p>Cannot execute statement: binlogging impossible since BINLOG_FORMAT &#x3D; STATEMENT and at least one table uses a storage engine limited to row-logging. InnoDB is limited to row-logging when transaction isolation level is READ COMMITTED or READ UNCOMMITTED.</p>\n</blockquote>\n<p>百度一番，说问题是因为我程序插入数据时开启了事物<br> mysql默认的binlog_format是STATEMENT，而在READ COMMITTED或READ UNCOMMITTED隔离级别下，innodb只能使用的binlog_format是ROW。<br> 我程序事物使用的隔离级别默认为READ_COMMINTED </p>\n<p> 解决办法有两个</p>\n<ol>\n<li>修改程序的事物隔离级别,不使用READ COMMITTED或READ UNCOMMITTED 这两种隔离级别。mysql默认的事物隔离级别是REPEATABLE_READ</li>\n<li>修改mysql的配置 my.ini 设置 binlog_format&#x3D;ROW</li>\n</ol>\n","length":574,"excerpt":"","more":"<h2 id=\"全角字符\"><a href=\"#全角字符\" class=\"headerlink\" title=\"全角字符\"></a>全角字符</h2><p>存入全角的字母，然后用模糊查询 查询不出来..暂时先把全角改为半角…</p>\n<h2 id=\"事物隔离级别\"><a href=\"#事物隔离级别\" class=\"headerlink\" title=\"事物隔离级别\"></a>事物隔离级别</h2><p>今天把程序发布到线上环境时，插入数据时mysql直接报错</p>\n<blockquote>\n<p>Cannot execute statement: binlogging impossible since BINLOG_FORMAT &#x3D; STATEMENT and at least one table uses a storage engine limited to row-logging. InnoDB is limited to row-logging when transaction isolation level is READ COMMITTED or READ UNCOMMITTED.</p>\n</blockquote>\n<p>百度一番，说问题是因为我程序插入数据时开启了事物<br> mysql默认的binlog_format是STATEMENT，而在READ COMMITTED或READ UNCOMMITTED隔离级别下，innodb只能使用的binlog_format是ROW。<br> 我程序事物使用的隔离级别默认为READ_COMMINTED </p>\n<p> 解决办法有两个</p>\n<ol>\n<li>修改程序的事物隔离级别,不使用READ COMMITTED或READ UNCOMMITTED 这两种隔离级别。mysql默认的事物隔离级别是REPEATABLE_READ</li>\n<li>修改mysql的配置 my.ini 设置 binlog_format&#x3D;ROW</li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"mysql 记录","path":"2016/12/06/mysql-record/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2016-12-06T08:36:39.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-12-06T08:36:39.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"mysql","tags":["mysql"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"扩展spring-boot自带的logback输出设置","date":"2016-12-29T11:42:04.000Z","keywords":["spring spring-boot slf4j"],"_content":"`spring-boot-starter-web`依赖了`spring-boot-starter-logging`默认是使用logback的实现。\n在`spring-boot`默认的日志输出设置\n在`resources`目录下添加`logback.xml`内容如下\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <include resource=\"org/springframework/boot/logging/logback/base.xml\" />\n    <logger name=\"cn.xyz327\" level=\"debug\"/>\n</configuration>\n```\n设置后就可以在代码中使用`org.slf4j.Logger`了,日志的输出格式采用`spring-boot`默认的格式\n","source":"_posts/2016/12/spring-boot-slf4j.md","raw":"---\ntitle: 扩展spring-boot自带的logback输出设置\ndate: 2016-12-29 19:42:04\ntags: [spring-boot]\ncategories:\nkeywords: [spring spring-boot slf4j]\n---\n`spring-boot-starter-web`依赖了`spring-boot-starter-logging`默认是使用logback的实现。\n在`spring-boot`默认的日志输出设置\n在`resources`目录下添加`logback.xml`内容如下\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <include resource=\"org/springframework/boot/logging/logback/base.xml\" />\n    <logger name=\"cn.xyz327\" level=\"debug\"/>\n</configuration>\n```\n设置后就可以在代码中使用`org.slf4j.Logger`了,日志的输出格式采用`spring-boot`默认的格式\n","slug":"spring-boot-slf4j","published":1,"updated":"2023-12-19T02:25:24.513Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqb000gfki404bvc238","content":"<p><code>spring-boot-starter-web</code>依赖了<code>spring-boot-starter-logging</code>默认是使用logback的实现。<br>在<code>spring-boot</code>默认的日志输出设置<br>在<code>resources</code>目录下添加<code>logback.xml</code>内容如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;org/springframework/boot/logging/logback/base.xml&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;cn.xyz327&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;debug&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>设置后就可以在代码中使用<code>org.slf4j.Logger</code>了,日志的输出格式采用<code>spring-boot</code>默认的格式</p>\n","length":435,"excerpt":"","more":"<p><code>spring-boot-starter-web</code>依赖了<code>spring-boot-starter-logging</code>默认是使用logback的实现。<br>在<code>spring-boot</code>默认的日志输出设置<br>在<code>resources</code>目录下添加<code>logback.xml</code>内容如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;org/springframework/boot/logging/logback/base.xml&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;cn.xyz327&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;debug&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>设置后就可以在代码中使用<code>org.slf4j.Logger</code>了,日志的输出格式采用<code>spring-boot</code>默认的格式</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"扩展spring-boot自带的logback输出设置","path":"2016/12/29/spring-boot-slf4j/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2016-12-29T11:42:04.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-12-29T11:42:04.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["spring-boot"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"effective java(一)","date":"2016-03-14T13:52:18.000Z","_content":"## 考虑使用静态工厂方法代替构造器\n\n\n### 静态工厂方法相比构造器的<font color=\"red\">优势</font>：\n1. 它们有名称_。根据方法名字可以清楚的知道可以获得什么样子的对象\n2. 不必再每次调用的时候都创建一个新对象。\n3. 它们可以返回原返回类型的任何子类型的对象。    \n4. 在创建参数化类型实例的时候，它们是代码变得更加简洁    \n<!-- more -->\n```java\n         //Service provider framework sketch(描述)\n\n         //Service interface\n         public interface Service{\n            ...//service specific methods\n         }\n\n         //Service provider interface\n         public interface Provider{\n            public Service newService();\n         }\n\n         //noninstantiable(不可实例化的) class for service registration and success\n         public class Services{\n            //prevents instantiation (阻止实例化)\n            private Services{\n\n            }\n            //maps service name for services\n            private static final Map<String, Provider> providers =\n                new ConcurrentHashMap<String, Provider>();\n            //\n            public static final String DEFAULT_PROVIDER_NAME = \"<def>\";\n            //provider registration API\n            public static void registerDefaultProvider(Provider p){\n                registerProvider(DEFAULT_PROVIDER_NAME, p);\n            }\n            public static void registerProvider(String name, Provider p){\n                providers.put(name, p);\n            }\n\n            //Services access API\n            public static Service newInstance(){\n                return newInstance(DEFAULT_PROVIDER_NAME);\n            }\n            public static Service newInstance(String name){\n                Provider p = providers.get(name);\n                if(p == null){\n                    throw new IllegalArgumentException(\n                        \"No provider register with name :\" + name);\n                }\n                return p;\n            }\n         }\n\n```\n\n### 静态工厂方法的主要<font color=\"red\">缺点</font>:\n1. _类如果不含公有的或者受保护的构造器，就不能被子类化_\n2. _它们其他的静态方法实际上没有任何区别_\n    下面是静态工厂方法的一些惯用名称\n```java\n        valueOf  —————— 不太严格的讲，改方法返回的实例与它的参数具有相同的值。这样的静态工厂方法实际上是类型转换方法\n\n        of —————— valueOf 的一种更为简洁的替代，在EnummSet中使用并流行起来\n\n        getInstance —————— 返回的实例通过方法的参数描述的，但是不能够说与参数具有同样的值，对于singleton来说，该方法没有参数并返回唯一实例\n\n        newInstance —————— 与getInstance一样，但是newInstance能确保返回的每个实例都与其他实例不同\n\n        getType —————— 与getInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型\n\n        newType —————— 像newInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型\n\n```\n\n## 遇到多个构造器参数时考虑使用构建器\n\n```java\n\n    //Builder pattern\n    public class NutritionFacts{\n        private final int servingSize;\n        private final int servings;\n        private final int calories;\n        private final int fat;\n        private final int sodium;\n        private final int carbohydrate;\n\n        public static calss Builder{\n            //Required parameter\n            private final int servingSize;\n            private final int servings;\n\n            //optional parameter -- initialized to default value\n            private int calories = 0;\n            private int fat = 0;\n            private int carbohydrate = 0;\n            private int sodium = 0;\n\n            public Builder(int servingSize, int servings){\n                this.servingSize = servingSize;\n                this.servings = servings;\n            }\n            public Builder calories(int calories){\n                this.calories = calories;\n                return this;\n            }\n            public Builder fat(int fat){\n                this.fat = fat;\n                return this;\n            }\n            public Builder carbohydrate(int carbohydrate){\n                this.carbohydrate = carbohydrate;\n                return this;\n            }\n            public Builder sodium(int sodium){\n                this.sodium = sodium;\n                return this;\n            }\n\n            public NutritionFacts build(){\n                return this;\n            }\n        }\n        private NutritionFacts(Builder builder){\n            servingSize = builder.servingSize;\n            servings = builder.servings;\n            calories = builder.calories;\n            fat = build.fat;\n            sodium = build.sodium;\n            carbohydrate = build.carbohydrate;\n        }\n    }\n\n    //Test\n    NutritionFacts cocaCola = new NutritionFacts.Builder(240, 2).calories(2)\n                                .fat(2).carbohydrate(2).sodium(0).build();\n```\n","source":"_posts/2016/3/effective-java-一.md","raw":"---\ntitle: effective java(一)\ndate: 2016-03-14 21:52:18\ntags: effective java\ncategories: java\n---\n## 考虑使用静态工厂方法代替构造器\n\n\n### 静态工厂方法相比构造器的<font color=\"red\">优势</font>：\n1. 它们有名称_。根据方法名字可以清楚的知道可以获得什么样子的对象\n2. 不必再每次调用的时候都创建一个新对象。\n3. 它们可以返回原返回类型的任何子类型的对象。    \n4. 在创建参数化类型实例的时候，它们是代码变得更加简洁    \n<!-- more -->\n```java\n         //Service provider framework sketch(描述)\n\n         //Service interface\n         public interface Service{\n            ...//service specific methods\n         }\n\n         //Service provider interface\n         public interface Provider{\n            public Service newService();\n         }\n\n         //noninstantiable(不可实例化的) class for service registration and success\n         public class Services{\n            //prevents instantiation (阻止实例化)\n            private Services{\n\n            }\n            //maps service name for services\n            private static final Map<String, Provider> providers =\n                new ConcurrentHashMap<String, Provider>();\n            //\n            public static final String DEFAULT_PROVIDER_NAME = \"<def>\";\n            //provider registration API\n            public static void registerDefaultProvider(Provider p){\n                registerProvider(DEFAULT_PROVIDER_NAME, p);\n            }\n            public static void registerProvider(String name, Provider p){\n                providers.put(name, p);\n            }\n\n            //Services access API\n            public static Service newInstance(){\n                return newInstance(DEFAULT_PROVIDER_NAME);\n            }\n            public static Service newInstance(String name){\n                Provider p = providers.get(name);\n                if(p == null){\n                    throw new IllegalArgumentException(\n                        \"No provider register with name :\" + name);\n                }\n                return p;\n            }\n         }\n\n```\n\n### 静态工厂方法的主要<font color=\"red\">缺点</font>:\n1. _类如果不含公有的或者受保护的构造器，就不能被子类化_\n2. _它们其他的静态方法实际上没有任何区别_\n    下面是静态工厂方法的一些惯用名称\n```java\n        valueOf  —————— 不太严格的讲，改方法返回的实例与它的参数具有相同的值。这样的静态工厂方法实际上是类型转换方法\n\n        of —————— valueOf 的一种更为简洁的替代，在EnummSet中使用并流行起来\n\n        getInstance —————— 返回的实例通过方法的参数描述的，但是不能够说与参数具有同样的值，对于singleton来说，该方法没有参数并返回唯一实例\n\n        newInstance —————— 与getInstance一样，但是newInstance能确保返回的每个实例都与其他实例不同\n\n        getType —————— 与getInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型\n\n        newType —————— 像newInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型\n\n```\n\n## 遇到多个构造器参数时考虑使用构建器\n\n```java\n\n    //Builder pattern\n    public class NutritionFacts{\n        private final int servingSize;\n        private final int servings;\n        private final int calories;\n        private final int fat;\n        private final int sodium;\n        private final int carbohydrate;\n\n        public static calss Builder{\n            //Required parameter\n            private final int servingSize;\n            private final int servings;\n\n            //optional parameter -- initialized to default value\n            private int calories = 0;\n            private int fat = 0;\n            private int carbohydrate = 0;\n            private int sodium = 0;\n\n            public Builder(int servingSize, int servings){\n                this.servingSize = servingSize;\n                this.servings = servings;\n            }\n            public Builder calories(int calories){\n                this.calories = calories;\n                return this;\n            }\n            public Builder fat(int fat){\n                this.fat = fat;\n                return this;\n            }\n            public Builder carbohydrate(int carbohydrate){\n                this.carbohydrate = carbohydrate;\n                return this;\n            }\n            public Builder sodium(int sodium){\n                this.sodium = sodium;\n                return this;\n            }\n\n            public NutritionFacts build(){\n                return this;\n            }\n        }\n        private NutritionFacts(Builder builder){\n            servingSize = builder.servingSize;\n            servings = builder.servings;\n            calories = builder.calories;\n            fat = build.fat;\n            sodium = build.sodium;\n            carbohydrate = build.carbohydrate;\n        }\n    }\n\n    //Test\n    NutritionFacts cocaCola = new NutritionFacts.Builder(240, 2).calories(2)\n                                .fat(2).carbohydrate(2).sodium(0).build();\n```\n","slug":"2016-3-effective-java-一","published":1,"updated":"2023-12-19T02:25:24.514Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqd000ifki4dhdp9sey","content":"<h2 id=\"考虑使用静态工厂方法代替构造器\"><a href=\"#考虑使用静态工厂方法代替构造器\" class=\"headerlink\" title=\"考虑使用静态工厂方法代替构造器\"></a>考虑使用静态工厂方法代替构造器</h2><h3 id=\"静态工厂方法相比构造器的优势：\"><a href=\"#静态工厂方法相比构造器的优势：\" class=\"headerlink\" title=\"静态工厂方法相比构造器的优势：\"></a>静态工厂方法相比构造器的<font color=\"red\">优势</font>：</h3><ol>\n<li>它们有名称_。根据方法名字可以清楚的知道可以获得什么样子的对象</li>\n<li>不必再每次调用的时候都创建一个新对象。</li>\n<li>它们可以返回原返回类型的任何子类型的对象。    </li>\n<li>在创建参数化类型实例的时候，它们是代码变得更加简洁    <span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Service provider framework sketch(描述)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Service interface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Service</span>&#123;</span><br><span class=\"line\">   ...<span class=\"comment\">//service specific methods</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Service provider interface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Provider</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> Service <span class=\"title function_\">newService</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//noninstantiable(不可实例化的) class for service registration and success</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Services</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//prevents instantiation (阻止实例化)</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> Services&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//maps service name for services</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, Provider&gt; providers =</span><br><span class=\"line\">       <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;String, Provider&gt;();</span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEFAULT_PROVIDER_NAME</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&lt;def&gt;&quot;</span>;</span><br><span class=\"line\">   <span class=\"comment\">//provider registration API</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerDefaultProvider</span><span class=\"params\">(Provider p)</span>&#123;</span><br><span class=\"line\">       registerProvider(DEFAULT_PROVIDER_NAME, p);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerProvider</span><span class=\"params\">(String name, Provider p)</span>&#123;</span><br><span class=\"line\">       providers.put(name, p);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//Services access API</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Service <span class=\"title function_\">newInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> newInstance(DEFAULT_PROVIDER_NAME);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Service <span class=\"title function_\">newInstance</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">Provider</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> providers.get(name);</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(p == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(</span><br><span class=\"line\">               <span class=\"string\">&quot;No provider register with name :&quot;</span> + name);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"静态工厂方法的主要缺点\"><a href=\"#静态工厂方法的主要缺点\" class=\"headerlink\" title=\"静态工厂方法的主要缺点:\"></a>静态工厂方法的主要<font color=\"red\">缺点</font>:</h3><ol>\n<li><em>类如果不含公有的或者受保护的构造器，就不能被子类化</em></li>\n<li><em>它们其他的静态方法实际上没有任何区别</em><br> 下面是静态工厂方法的一些惯用名称<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valueOf  —————— 不太严格的讲，改方法返回的实例与它的参数具有相同的值。这样的静态工厂方法实际上是类型转换方法</span><br><span class=\"line\"></span><br><span class=\"line\">of —————— valueOf 的一种更为简洁的替代，在EnummSet中使用并流行起来</span><br><span class=\"line\"></span><br><span class=\"line\">getInstance —————— 返回的实例通过方法的参数描述的，但是不能够说与参数具有同样的值，对于singleton来说，该方法没有参数并返回唯一实例</span><br><span class=\"line\"></span><br><span class=\"line\">newInstance —————— 与getInstance一样，但是newInstance能确保返回的每个实例都与其他实例不同</span><br><span class=\"line\"></span><br><span class=\"line\">getType —————— 与getInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型</span><br><span class=\"line\"></span><br><span class=\"line\">newType —————— 像newInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"遇到多个构造器参数时考虑使用构建器\"><a href=\"#遇到多个构造器参数时考虑使用构建器\" class=\"headerlink\" title=\"遇到多个构造器参数时考虑使用构建器\"></a>遇到多个构造器参数时考虑使用构建器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Builder pattern</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NutritionFacts</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> servingSize;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> servings;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> calories;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> fat;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> sodium;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> carbohydrate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> calss Builder&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Required parameter</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> servingSize;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> servings;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//optional parameter -- initialized to default value</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">calories</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">fat</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">carbohydrate</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">sodium</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Builder</span><span class=\"params\">(<span class=\"type\">int</span> servingSize, <span class=\"type\">int</span> servings)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.servingSize = servingSize;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.servings = servings;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Builder <span class=\"title function_\">calories</span><span class=\"params\">(<span class=\"type\">int</span> calories)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.calories = calories;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Builder <span class=\"title function_\">fat</span><span class=\"params\">(<span class=\"type\">int</span> fat)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.fat = fat;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Builder <span class=\"title function_\">carbohydrate</span><span class=\"params\">(<span class=\"type\">int</span> carbohydrate)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.carbohydrate = carbohydrate;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Builder <span class=\"title function_\">sodium</span><span class=\"params\">(<span class=\"type\">int</span> sodium)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.sodium = sodium;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> NutritionFacts <span class=\"title function_\">build</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">NutritionFacts</span><span class=\"params\">(Builder builder)</span>&#123;</span><br><span class=\"line\">        servingSize = builder.servingSize;</span><br><span class=\"line\">        servings = builder.servings;</span><br><span class=\"line\">        calories = builder.calories;</span><br><span class=\"line\">        fat = build.fat;</span><br><span class=\"line\">        sodium = build.sodium;</span><br><span class=\"line\">        carbohydrate = build.carbohydrate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Test</span></span><br><span class=\"line\"><span class=\"type\">NutritionFacts</span> <span class=\"variable\">cocaCola</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NutritionFacts</span>.Builder(<span class=\"number\">240</span>, <span class=\"number\">2</span>).calories(<span class=\"number\">2</span>)</span><br><span class=\"line\">                            .fat(<span class=\"number\">2</span>).carbohydrate(<span class=\"number\">2</span>).sodium(<span class=\"number\">0</span>).build();</span><br></pre></td></tr></table></figure>\n","length":3064,"excerpt":"<h2 id=\"考虑使用静态工厂方法代替构造器\"><a href=\"#考虑使用静态工厂方法代替构造器\" class=\"headerlink\" title=\"考虑使用静态工厂方法代替构造器\"></a>考虑使用静态工厂方法代替构造器</h2><h3 id=\"静态工厂方法相比构造器的优势：\"><a href=\"#静态工厂方法相比构造器的优势：\" class=\"headerlink\" title=\"静态工厂方法相比构造器的优势：\"></a>静态工厂方法相比构造器的<font color=\"red\">优势</font>：</h3><ol>\n<li>它们有名称_。根据方法名字可以清楚的知道可以获得什么样子的对象</li>\n<li>不必再每次调用的时候都创建一个新对象。</li>\n<li>它们可以返回原返回类型的任何子类型的对象。    </li>\n<li>在创建参数化类型实例的时候，它们是代码变得更加简洁</li></ol>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Service provider framework sketch(描述)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Service interface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Service</span>&#123;</span><br><span class=\"line\">   ...<span class=\"comment\">//service specific methods</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Service provider interface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Provider</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> Service <span class=\"title function_\">newService</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//noninstantiable(不可实例化的) class for service registration and success</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Services</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//prevents instantiation (阻止实例化)</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> Services&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//maps service name for services</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, Provider&gt; providers =</span><br><span class=\"line\">       <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;String, Provider&gt;();</span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEFAULT_PROVIDER_NAME</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&lt;def&gt;&quot;</span>;</span><br><span class=\"line\">   <span class=\"comment\">//provider registration API</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerDefaultProvider</span><span class=\"params\">(Provider p)</span>&#123;</span><br><span class=\"line\">       registerProvider(DEFAULT_PROVIDER_NAME, p);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerProvider</span><span class=\"params\">(String name, Provider p)</span>&#123;</span><br><span class=\"line\">       providers.put(name, p);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//Services access API</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Service <span class=\"title function_\">newInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> newInstance(DEFAULT_PROVIDER_NAME);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Service <span class=\"title function_\">newInstance</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">Provider</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> providers.get(name);</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(p == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(</span><br><span class=\"line\">               <span class=\"string\">&quot;No provider register with name :&quot;</span> + name);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"静态工厂方法的主要缺点\"><a href=\"#静态工厂方法的主要缺点\" class=\"headerlink\" title=\"静态工厂方法的主要缺点:\"></a>静态工厂方法的主要<font color=\"red\">缺点</font>:</h3><ol>\n<li><em>类如果不含公有的或者受保护的构造器，就不能被子类化</em></li>\n<li><em>它们其他的静态方法实际上没有任何区别</em><br> 下面是静态工厂方法的一些惯用名称<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valueOf  —————— 不太严格的讲，改方法返回的实例与它的参数具有相同的值。这样的静态工厂方法实际上是类型转换方法</span><br><span class=\"line\"></span><br><span class=\"line\">of —————— valueOf 的一种更为简洁的替代，在EnummSet中使用并流行起来</span><br><span class=\"line\"></span><br><span class=\"line\">getInstance —————— 返回的实例通过方法的参数描述的，但是不能够说与参数具有同样的值，对于singleton来说，该方法没有参数并返回唯一实例</span><br><span class=\"line\"></span><br><span class=\"line\">newInstance —————— 与getInstance一样，但是newInstance能确保返回的每个实例都与其他实例不同</span><br><span class=\"line\"></span><br><span class=\"line\">getType —————— 与getInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型</span><br><span class=\"line\"></span><br><span class=\"line\">newType —————— 像newInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"遇到多个构造器参数时考虑使用构建器\"><a href=\"#遇到多个构造器参数时考虑使用构建器\" class=\"headerlink\" title=\"遇到多个构造器参数时考虑使用构建器\"></a>遇到多个构造器参数时考虑使用构建器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Builder pattern</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NutritionFacts</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> servingSize;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> servings;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> calories;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> fat;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> sodium;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> carbohydrate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> calss Builder&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Required parameter</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> servingSize;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> servings;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//optional parameter -- initialized to default value</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">calories</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">fat</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">carbohydrate</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">sodium</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Builder</span><span class=\"params\">(<span class=\"type\">int</span> servingSize, <span class=\"type\">int</span> servings)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.servingSize = servingSize;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.servings = servings;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Builder <span class=\"title function_\">calories</span><span class=\"params\">(<span class=\"type\">int</span> calories)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.calories = calories;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Builder <span class=\"title function_\">fat</span><span class=\"params\">(<span class=\"type\">int</span> fat)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.fat = fat;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Builder <span class=\"title function_\">carbohydrate</span><span class=\"params\">(<span class=\"type\">int</span> carbohydrate)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.carbohydrate = carbohydrate;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Builder <span class=\"title function_\">sodium</span><span class=\"params\">(<span class=\"type\">int</span> sodium)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.sodium = sodium;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> NutritionFacts <span class=\"title function_\">build</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">NutritionFacts</span><span class=\"params\">(Builder builder)</span>&#123;</span><br><span class=\"line\">        servingSize = builder.servingSize;</span><br><span class=\"line\">        servings = builder.servings;</span><br><span class=\"line\">        calories = builder.calories;</span><br><span class=\"line\">        fat = build.fat;</span><br><span class=\"line\">        sodium = build.sodium;</span><br><span class=\"line\">        carbohydrate = build.carbohydrate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Test</span></span><br><span class=\"line\"><span class=\"type\">NutritionFacts</span> <span class=\"variable\">cocaCola</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NutritionFacts</span>.Builder(<span class=\"number\">240</span>, <span class=\"number\">2</span>).calories(<span class=\"number\">2</span>)</span><br><span class=\"line\">                            .fat(<span class=\"number\">2</span>).carbohydrate(<span class=\"number\">2</span>).sodium(<span class=\"number\">0</span>).build();</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"effective java(一)","path":"2016/03/14/2016-3-effective-java-一/","eyeCatchImage":null,"excerpt":"<h2 id=\"考虑使用静态工厂方法代替构造器\"><a href=\"#考虑使用静态工厂方法代替构造器\" class=\"headerlink\" title=\"考虑使用静态工厂方法代替构造器\"></a>考虑使用静态工厂方法代替构造器</h2><h3 id=\"静态工厂方法相比构造器的优势：\"><a href=\"#静态工厂方法相比构造器的优势：\" class=\"headerlink\" title=\"静态工厂方法相比构造器的优势：\"></a>静态工厂方法相比构造器的<font color=\"red\">优势</font>：</h3><ol>\n<li>它们有名称_。根据方法名字可以清楚的知道可以获得什么样子的对象</li>\n<li>不必再每次调用的时候都创建一个新对象。</li>\n<li>它们可以返回原返回类型的任何子类型的对象。    </li>\n<li>在创建参数化类型实例的时候，它们是代码变得更加简洁</li></ol>","date":{"_isAMomentObject":true,"_i":"2016-03-14T13:52:18.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-03-14T13:52:18.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"java","tags":["effective java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Hello World","date":"2016-03-13T13:52:18.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/2016/3/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-03-13 21:52:18\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"2016-3-hello-world","published":1,"updated":"2023-12-19T02:25:24.515Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqe000nfki4eh8w8v2s","content":"<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo<i class=\"fa fa-external-link-alt\"></i></span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation<i class=\"fa fa-external-link-alt\"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting<i class=\"fa fa-external-link-alt\"></i></span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZGVwbG95bWVudC5odG1s\">Deployment<i class=\"fa fa-external-link-alt\"></i></span></p>\n","length":367,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"Hello World","path":"2016/03/13/2016-3-hello-world/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2016-03-13T13:52:18.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2016-03-13T13:52:18.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"deepin添加开机启动脚本","date":"2017-10-31T07:24:23.000Z","keywords":null,"_content":"\n公司服务器ip网段与电脑网段不同。于是要通过配置路由去访问。\n\n每次开机都要重新执行一遍添加路由的脚本，\n\n```bash\nsudo route add -net 192.168.103.0/24 gw 192.168.8.118\n```\n\n于是就把脚本放入开机启动自动执行\n\n\n只需要在 `/etc/init.d/`文件夹下新建一个文件 \n\n*** 添加执行权限 ***\n*** 在文件开头添加 ***\n\n``` bash\n#!/bin/bash\n\n### BEGIN INIT INFO\n# Provides:          kiway.cn\n# Required-Start:    $local_fs $network\n# Required-Stop:     $local_fs\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: static route service\n# Description:       static route daemon\n### END INIT INFO\n\n```\n*** 消除执行时的警告 ***\n","source":"_posts/2017/10/deepin添加开机启动脚本.md","raw":"---\ntitle: deepin添加开机启动脚本\ndate: 2017-10-31 15:24:23\ntags: \ncategories: [linux]\nkeywords: \n---\n\n公司服务器ip网段与电脑网段不同。于是要通过配置路由去访问。\n\n每次开机都要重新执行一遍添加路由的脚本，\n\n```bash\nsudo route add -net 192.168.103.0/24 gw 192.168.8.118\n```\n\n于是就把脚本放入开机启动自动执行\n\n\n只需要在 `/etc/init.d/`文件夹下新建一个文件 \n\n*** 添加执行权限 ***\n*** 在文件开头添加 ***\n\n``` bash\n#!/bin/bash\n\n### BEGIN INIT INFO\n# Provides:          kiway.cn\n# Required-Start:    $local_fs $network\n# Required-Stop:     $local_fs\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: static route service\n# Description:       static route daemon\n### END INIT INFO\n\n```\n*** 消除执行时的警告 ***\n","slug":"deepin添加开机启动脚本","published":1,"updated":"2023-12-19T02:25:24.516Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqf000pfki46azb0d8y","content":"<p>公司服务器ip网段与电脑网段不同。于是要通过配置路由去访问。</p>\n<p>每次开机都要重新执行一遍添加路由的脚本，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo route add -net 192.168.103.0/24 gw 192.168.8.118</span><br></pre></td></tr></table></figure>\n\n<p>于是就把脚本放入开机启动自动执行</p>\n<p>只需要在 <code>/etc/init.d/</code>文件夹下新建一个文件 </p>\n<p>*** 添加执行权限 ***<br>*** 在文件开头添加 ***</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### BEGIN INIT INFO</span></span><br><span class=\"line\"><span class=\"comment\"># Provides:          kiway.cn</span></span><br><span class=\"line\"><span class=\"comment\"># Required-Start:    $local_fs $network</span></span><br><span class=\"line\"><span class=\"comment\"># Required-Stop:     $local_fs</span></span><br><span class=\"line\"><span class=\"comment\"># Default-Start:     2 3 4 5</span></span><br><span class=\"line\"><span class=\"comment\"># Default-Stop:      0 1 6</span></span><br><span class=\"line\"><span class=\"comment\"># Short-Description: static route service</span></span><br><span class=\"line\"><span class=\"comment\"># Description:       static route daemon</span></span><br><span class=\"line\"><span class=\"comment\">### END INIT INFO</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>*** 消除执行时的警告 ***</p>\n","length":413,"excerpt":"","more":"<p>公司服务器ip网段与电脑网段不同。于是要通过配置路由去访问。</p>\n<p>每次开机都要重新执行一遍添加路由的脚本，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo route add -net 192.168.103.0/24 gw 192.168.8.118</span><br></pre></td></tr></table></figure>\n\n<p>于是就把脚本放入开机启动自动执行</p>\n<p>只需要在 <code>/etc/init.d/</code>文件夹下新建一个文件 </p>\n<p>*** 添加执行权限 ***<br>*** 在文件开头添加 ***</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### BEGIN INIT INFO</span></span><br><span class=\"line\"><span class=\"comment\"># Provides:          kiway.cn</span></span><br><span class=\"line\"><span class=\"comment\"># Required-Start:    $local_fs $network</span></span><br><span class=\"line\"><span class=\"comment\"># Required-Stop:     $local_fs</span></span><br><span class=\"line\"><span class=\"comment\"># Default-Start:     2 3 4 5</span></span><br><span class=\"line\"><span class=\"comment\"># Default-Stop:      0 1 6</span></span><br><span class=\"line\"><span class=\"comment\"># Short-Description: static route service</span></span><br><span class=\"line\"><span class=\"comment\"># Description:       static route daemon</span></span><br><span class=\"line\"><span class=\"comment\">### END INIT INFO</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>*** 消除执行时的警告 ***</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"deepin添加开机启动脚本","path":"2017/10/31/deepin添加开机启动脚本/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2017-10-31T07:24:23.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-10-31T07:24:23.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"linux","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"effective-java-七","date":"2017-11-10T13:55:26.000Z","keywords":"effective java","_content":"\n方法\n\n## 第38条： 检查参数的有效性\n\n## 第39条： 必要时进行保护性拷贝\n\n## 第40条： 谨慎设计方法签名\n    1. 谨慎地选择方法的名称。方法的名称应该始终遵循标准的命名习惯\n    2. 不要过于追求提供便利的方法。每个方法应该尽其所能。只有当一项操作被经常用到的时候，才考虑为它提供快捷方式。如果不能确定，还是不提供快捷为好\n    3. 避免过长的参数列表。 目标是4个或更少\n        缩短过长参数的方法\n        1. 把方法分解成多个方法，每个方法只需要这些参数的一个子集。\n        2. 创建辅助类，用来保存参数的分组。这些辅助类一般为静态成员类。\n        3. 从对象构建到方法调用都采用Builder模式，设置完参数再调用执行(execute)方法\n    4. 对于参数类型，要优先使用接口而不是类\n\n## 第41条：慎用重载\n    对于重载方法(overloaded method)的选择是静态的，而对于被覆盖的方法(overridden method)的选择则是动态的\n\n## 第42条： 慎用可变参数\n\n## 第43条：返回零长度的数组或者集合，而不是null\n\n## 第44条： 为所有导出的API元素编写文档注释","source":"_posts/2017/11/effective-java-七.md","raw":"---\ntitle: effective-java-七\ndate: 2017-11-10 21:55:26\ntags: [effective java]\ncategories: java\nkeywords: effective java\n---\n\n方法\n\n## 第38条： 检查参数的有效性\n\n## 第39条： 必要时进行保护性拷贝\n\n## 第40条： 谨慎设计方法签名\n    1. 谨慎地选择方法的名称。方法的名称应该始终遵循标准的命名习惯\n    2. 不要过于追求提供便利的方法。每个方法应该尽其所能。只有当一项操作被经常用到的时候，才考虑为它提供快捷方式。如果不能确定，还是不提供快捷为好\n    3. 避免过长的参数列表。 目标是4个或更少\n        缩短过长参数的方法\n        1. 把方法分解成多个方法，每个方法只需要这些参数的一个子集。\n        2. 创建辅助类，用来保存参数的分组。这些辅助类一般为静态成员类。\n        3. 从对象构建到方法调用都采用Builder模式，设置完参数再调用执行(execute)方法\n    4. 对于参数类型，要优先使用接口而不是类\n\n## 第41条：慎用重载\n    对于重载方法(overloaded method)的选择是静态的，而对于被覆盖的方法(overridden method)的选择则是动态的\n\n## 第42条： 慎用可变参数\n\n## 第43条：返回零长度的数组或者集合，而不是null\n\n## 第44条： 为所有导出的API元素编写文档注释","slug":"effective-java-七","published":1,"updated":"2023-12-19T02:25:24.517Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqi000ufki4agficwtt","content":"<p>方法</p>\n<h2 id=\"第38条：-检查参数的有效性\"><a href=\"#第38条：-检查参数的有效性\" class=\"headerlink\" title=\"第38条： 检查参数的有效性\"></a>第38条： 检查参数的有效性</h2><h2 id=\"第39条：-必要时进行保护性拷贝\"><a href=\"#第39条：-必要时进行保护性拷贝\" class=\"headerlink\" title=\"第39条： 必要时进行保护性拷贝\"></a>第39条： 必要时进行保护性拷贝</h2><h2 id=\"第40条：-谨慎设计方法签名\"><a href=\"#第40条：-谨慎设计方法签名\" class=\"headerlink\" title=\"第40条： 谨慎设计方法签名\"></a>第40条： 谨慎设计方法签名</h2><pre><code>1. 谨慎地选择方法的名称。方法的名称应该始终遵循标准的命名习惯\n2. 不要过于追求提供便利的方法。每个方法应该尽其所能。只有当一项操作被经常用到的时候，才考虑为它提供快捷方式。如果不能确定，还是不提供快捷为好\n3. 避免过长的参数列表。 目标是4个或更少\n    缩短过长参数的方法\n    1. 把方法分解成多个方法，每个方法只需要这些参数的一个子集。\n    2. 创建辅助类，用来保存参数的分组。这些辅助类一般为静态成员类。\n    3. 从对象构建到方法调用都采用Builder模式，设置完参数再调用执行(execute)方法\n4. 对于参数类型，要优先使用接口而不是类\n</code></pre>\n<h2 id=\"第41条：慎用重载\"><a href=\"#第41条：慎用重载\" class=\"headerlink\" title=\"第41条：慎用重载\"></a>第41条：慎用重载</h2><pre><code>对于重载方法(overloaded method)的选择是静态的，而对于被覆盖的方法(overridden method)的选择则是动态的\n</code></pre>\n<h2 id=\"第42条：-慎用可变参数\"><a href=\"#第42条：-慎用可变参数\" class=\"headerlink\" title=\"第42条： 慎用可变参数\"></a>第42条： 慎用可变参数</h2><h2 id=\"第43条：返回零长度的数组或者集合，而不是null\"><a href=\"#第43条：返回零长度的数组或者集合，而不是null\" class=\"headerlink\" title=\"第43条：返回零长度的数组或者集合，而不是null\"></a>第43条：返回零长度的数组或者集合，而不是null</h2><h2 id=\"第44条：-为所有导出的API元素编写文档注释\"><a href=\"#第44条：-为所有导出的API元素编写文档注释\" class=\"headerlink\" title=\"第44条： 为所有导出的API元素编写文档注释\"></a>第44条： 为所有导出的API元素编写文档注释</h2>","length":436,"excerpt":"","more":"<p>方法</p>\n<h2 id=\"第38条：-检查参数的有效性\"><a href=\"#第38条：-检查参数的有效性\" class=\"headerlink\" title=\"第38条： 检查参数的有效性\"></a>第38条： 检查参数的有效性</h2><h2 id=\"第39条：-必要时进行保护性拷贝\"><a href=\"#第39条：-必要时进行保护性拷贝\" class=\"headerlink\" title=\"第39条： 必要时进行保护性拷贝\"></a>第39条： 必要时进行保护性拷贝</h2><h2 id=\"第40条：-谨慎设计方法签名\"><a href=\"#第40条：-谨慎设计方法签名\" class=\"headerlink\" title=\"第40条： 谨慎设计方法签名\"></a>第40条： 谨慎设计方法签名</h2><pre><code>1. 谨慎地选择方法的名称。方法的名称应该始终遵循标准的命名习惯\n2. 不要过于追求提供便利的方法。每个方法应该尽其所能。只有当一项操作被经常用到的时候，才考虑为它提供快捷方式。如果不能确定，还是不提供快捷为好\n3. 避免过长的参数列表。 目标是4个或更少\n    缩短过长参数的方法\n    1. 把方法分解成多个方法，每个方法只需要这些参数的一个子集。\n    2. 创建辅助类，用来保存参数的分组。这些辅助类一般为静态成员类。\n    3. 从对象构建到方法调用都采用Builder模式，设置完参数再调用执行(execute)方法\n4. 对于参数类型，要优先使用接口而不是类\n</code></pre>\n<h2 id=\"第41条：慎用重载\"><a href=\"#第41条：慎用重载\" class=\"headerlink\" title=\"第41条：慎用重载\"></a>第41条：慎用重载</h2><pre><code>对于重载方法(overloaded method)的选择是静态的，而对于被覆盖的方法(overridden method)的选择则是动态的\n</code></pre>\n<h2 id=\"第42条：-慎用可变参数\"><a href=\"#第42条：-慎用可变参数\" class=\"headerlink\" title=\"第42条： 慎用可变参数\"></a>第42条： 慎用可变参数</h2><h2 id=\"第43条：返回零长度的数组或者集合，而不是null\"><a href=\"#第43条：返回零长度的数组或者集合，而不是null\" class=\"headerlink\" title=\"第43条：返回零长度的数组或者集合，而不是null\"></a>第43条：返回零长度的数组或者集合，而不是null</h2><h2 id=\"第44条：-为所有导出的API元素编写文档注释\"><a href=\"#第44条：-为所有导出的API元素编写文档注释\" class=\"headerlink\" title=\"第44条： 为所有导出的API元素编写文档注释\"></a>第44条： 为所有导出的API元素编写文档注释</h2>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"effective-java-七","path":"2017/11/10/effective-java-七/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2017-11-10T13:55:26.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-11-10T13:55:26.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"java","tags":["effective java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"effective-java-三","date":"2017-11-06T13:03:57.000Z","keywords":"effective java","_content":"\n## 第八条：覆盖equals时请遵守通用约定\n1. 类的每个实例本质上都是唯一的\n2. 不关心类是否提供了“逻辑相等”的测试功能\n3. 超类已经覆盖了equals， 从超类继承过来的行为对于子类也是合适的\n4. 类是私有的或者包级别私有的，可以确定它的equals方法永远不会被调用\n\nequals方法实现了等价关系\n1. 自反性： 对于任何非`null`的引用值`x`, `x.equals(x)` 必须返回`true`;\n2. 对称性： 对于任何非`null`的引用值`x`和`y`， 当且仅当`x.equals(y)`返回`true`时， `y.equals(x)`必须返回`true`;\n3. 传递性： 对于任何非`null`的引用值`x`,'y'和`z`，如果`x.equals(y)`返回`true`，并且`y.equals(z)`也返回`true`，那么`x.equals(z)`也必须返回`true`;\n4. 一致性： 对于任何非`null`的引用值`x`和`y`，只要`equals`中的比较信息没有被改变，多次调用`x.equals(y)`就会一直返回`true`或者`false`;\n5. 对于任何非`null`的引用值`x`，`x.equals(null)`必须返回`false`;\n\n## 第九条： 覆盖equals时总要覆盖hashCode\n\n## 第十条： 始终要覆盖toString\n\n## 第十一条： 谨慎覆盖clone\n\n## 第十二条： 考虑实现Comparable接口\n    compareTo 方法返回值为负值，0，正值， 表示 小于， 等于， 大于","source":"_posts/2017/11/effective-java-三.md","raw":"---\ntitle: effective-java-三\ndate: 2017-11-06 21:03:57\ntags: effective java\ncategories: java\nkeywords: effective java\n---\n\n## 第八条：覆盖equals时请遵守通用约定\n1. 类的每个实例本质上都是唯一的\n2. 不关心类是否提供了“逻辑相等”的测试功能\n3. 超类已经覆盖了equals， 从超类继承过来的行为对于子类也是合适的\n4. 类是私有的或者包级别私有的，可以确定它的equals方法永远不会被调用\n\nequals方法实现了等价关系\n1. 自反性： 对于任何非`null`的引用值`x`, `x.equals(x)` 必须返回`true`;\n2. 对称性： 对于任何非`null`的引用值`x`和`y`， 当且仅当`x.equals(y)`返回`true`时， `y.equals(x)`必须返回`true`;\n3. 传递性： 对于任何非`null`的引用值`x`,'y'和`z`，如果`x.equals(y)`返回`true`，并且`y.equals(z)`也返回`true`，那么`x.equals(z)`也必须返回`true`;\n4. 一致性： 对于任何非`null`的引用值`x`和`y`，只要`equals`中的比较信息没有被改变，多次调用`x.equals(y)`就会一直返回`true`或者`false`;\n5. 对于任何非`null`的引用值`x`，`x.equals(null)`必须返回`false`;\n\n## 第九条： 覆盖equals时总要覆盖hashCode\n\n## 第十条： 始终要覆盖toString\n\n## 第十一条： 谨慎覆盖clone\n\n## 第十二条： 考虑实现Comparable接口\n    compareTo 方法返回值为负值，0，正值， 表示 小于， 等于， 大于","slug":"effective-java-三","published":1,"updated":"2023-12-19T02:25:24.518Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqj000wfki4c3drf7p3","content":"<h2 id=\"第八条：覆盖equals时请遵守通用约定\"><a href=\"#第八条：覆盖equals时请遵守通用约定\" class=\"headerlink\" title=\"第八条：覆盖equals时请遵守通用约定\"></a>第八条：覆盖equals时请遵守通用约定</h2><ol>\n<li>类的每个实例本质上都是唯一的</li>\n<li>不关心类是否提供了“逻辑相等”的测试功能</li>\n<li>超类已经覆盖了equals， 从超类继承过来的行为对于子类也是合适的</li>\n<li>类是私有的或者包级别私有的，可以确定它的equals方法永远不会被调用</li>\n</ol>\n<p>equals方法实现了等价关系</p>\n<ol>\n<li>自反性： 对于任何非<code>null</code>的引用值<code>x</code>, <code>x.equals(x)</code> 必须返回<code>true</code>;</li>\n<li>对称性： 对于任何非<code>null</code>的引用值<code>x</code>和<code>y</code>， 当且仅当<code>x.equals(y)</code>返回<code>true</code>时， <code>y.equals(x)</code>必须返回<code>true</code>;</li>\n<li>传递性： 对于任何非<code>null</code>的引用值<code>x</code>,’y’和<code>z</code>，如果<code>x.equals(y)</code>返回<code>true</code>，并且<code>y.equals(z)</code>也返回<code>true</code>，那么<code>x.equals(z)</code>也必须返回<code>true</code>;</li>\n<li>一致性： 对于任何非<code>null</code>的引用值<code>x</code>和<code>y</code>，只要<code>equals</code>中的比较信息没有被改变，多次调用<code>x.equals(y)</code>就会一直返回<code>true</code>或者<code>false</code>;</li>\n<li>对于任何非<code>null</code>的引用值<code>x</code>，<code>x.equals(null)</code>必须返回<code>false</code>;</li>\n</ol>\n<h2 id=\"第九条：-覆盖equals时总要覆盖hashCode\"><a href=\"#第九条：-覆盖equals时总要覆盖hashCode\" class=\"headerlink\" title=\"第九条： 覆盖equals时总要覆盖hashCode\"></a>第九条： 覆盖equals时总要覆盖hashCode</h2><h2 id=\"第十条：-始终要覆盖toString\"><a href=\"#第十条：-始终要覆盖toString\" class=\"headerlink\" title=\"第十条： 始终要覆盖toString\"></a>第十条： 始终要覆盖toString</h2><h2 id=\"第十一条：-谨慎覆盖clone\"><a href=\"#第十一条：-谨慎覆盖clone\" class=\"headerlink\" title=\"第十一条： 谨慎覆盖clone\"></a>第十一条： 谨慎覆盖clone</h2><h2 id=\"第十二条：-考虑实现Comparable接口\"><a href=\"#第十二条：-考虑实现Comparable接口\" class=\"headerlink\" title=\"第十二条： 考虑实现Comparable接口\"></a>第十二条： 考虑实现Comparable接口</h2><pre><code>compareTo 方法返回值为负值，0，正值， 表示 小于， 等于， 大于\n</code></pre>\n","length":552,"excerpt":"","more":"<h2 id=\"第八条：覆盖equals时请遵守通用约定\"><a href=\"#第八条：覆盖equals时请遵守通用约定\" class=\"headerlink\" title=\"第八条：覆盖equals时请遵守通用约定\"></a>第八条：覆盖equals时请遵守通用约定</h2><ol>\n<li>类的每个实例本质上都是唯一的</li>\n<li>不关心类是否提供了“逻辑相等”的测试功能</li>\n<li>超类已经覆盖了equals， 从超类继承过来的行为对于子类也是合适的</li>\n<li>类是私有的或者包级别私有的，可以确定它的equals方法永远不会被调用</li>\n</ol>\n<p>equals方法实现了等价关系</p>\n<ol>\n<li>自反性： 对于任何非<code>null</code>的引用值<code>x</code>, <code>x.equals(x)</code> 必须返回<code>true</code>;</li>\n<li>对称性： 对于任何非<code>null</code>的引用值<code>x</code>和<code>y</code>， 当且仅当<code>x.equals(y)</code>返回<code>true</code>时， <code>y.equals(x)</code>必须返回<code>true</code>;</li>\n<li>传递性： 对于任何非<code>null</code>的引用值<code>x</code>,’y’和<code>z</code>，如果<code>x.equals(y)</code>返回<code>true</code>，并且<code>y.equals(z)</code>也返回<code>true</code>，那么<code>x.equals(z)</code>也必须返回<code>true</code>;</li>\n<li>一致性： 对于任何非<code>null</code>的引用值<code>x</code>和<code>y</code>，只要<code>equals</code>中的比较信息没有被改变，多次调用<code>x.equals(y)</code>就会一直返回<code>true</code>或者<code>false</code>;</li>\n<li>对于任何非<code>null</code>的引用值<code>x</code>，<code>x.equals(null)</code>必须返回<code>false</code>;</li>\n</ol>\n<h2 id=\"第九条：-覆盖equals时总要覆盖hashCode\"><a href=\"#第九条：-覆盖equals时总要覆盖hashCode\" class=\"headerlink\" title=\"第九条： 覆盖equals时总要覆盖hashCode\"></a>第九条： 覆盖equals时总要覆盖hashCode</h2><h2 id=\"第十条：-始终要覆盖toString\"><a href=\"#第十条：-始终要覆盖toString\" class=\"headerlink\" title=\"第十条： 始终要覆盖toString\"></a>第十条： 始终要覆盖toString</h2><h2 id=\"第十一条：-谨慎覆盖clone\"><a href=\"#第十一条：-谨慎覆盖clone\" class=\"headerlink\" title=\"第十一条： 谨慎覆盖clone\"></a>第十一条： 谨慎覆盖clone</h2><h2 id=\"第十二条：-考虑实现Comparable接口\"><a href=\"#第十二条：-考虑实现Comparable接口\" class=\"headerlink\" title=\"第十二条： 考虑实现Comparable接口\"></a>第十二条： 考虑实现Comparable接口</h2><pre><code>compareTo 方法返回值为负值，0，正值， 表示 小于， 等于， 大于\n</code></pre>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"effective-java-三","path":"2017/11/06/effective-java-三/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2017-11-06T13:03:57.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-11-06T13:03:57.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"java","tags":["effective java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"effective-java-九","date":"2017-11-12T03:12:50.000Z","keywords":"effective java","_content":"\n异常\n\n## 第57条：只针对异常的情况才使用异常\n\n## 第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常\n    java 三种可抛出结构(throwable): 受检异常，运行时异常，错误\n\n## 第59条：避免不必要的使用受检的异常\n\n## 第60条：优先使用标准的异常\n\n|异常|使用场合|\n|---|---|\n|IllegalArgumentException | 非null的参数值不正确|\n|IllegalStateException | 对于方法调用而言，对象状态不合适|\n|NullPointerException | 在禁止使用null的情况下参数值为null|\n|IndexOutOfBoundsException | 下标参数值越界|\n|ConcurrentModificationException | 在禁止并发修改的情况下，检测到对象的并发修改|\n|UnsupportOperationException | 对象不支持用户请求的方法|\n\n## 第61条：抛出与抽象相对应的异常\n    高层的实现应该捕获底层的异常，同时抛出可以按照高层抽象进行解释的异常。这种做法被称为'异常转译'。\n    一种特殊的异常转译形式称为异常链，如果底层的异常对与调试高层异常的问题有帮助，使用异常链就合适。底层的异常被传到高层的异常，高层异常提供访问方法(`Throwable.getCause`)来获得底层异常\n","source":"_posts/2017/11/effective-java-九.md","raw":"---\ntitle: effective-java-九\ndate: 2017-11-12 11:12:50\ntags: [effective java]\ncategories: java\nkeywords: effective java\n---\n\n异常\n\n## 第57条：只针对异常的情况才使用异常\n\n## 第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常\n    java 三种可抛出结构(throwable): 受检异常，运行时异常，错误\n\n## 第59条：避免不必要的使用受检的异常\n\n## 第60条：优先使用标准的异常\n\n|异常|使用场合|\n|---|---|\n|IllegalArgumentException | 非null的参数值不正确|\n|IllegalStateException | 对于方法调用而言，对象状态不合适|\n|NullPointerException | 在禁止使用null的情况下参数值为null|\n|IndexOutOfBoundsException | 下标参数值越界|\n|ConcurrentModificationException | 在禁止并发修改的情况下，检测到对象的并发修改|\n|UnsupportOperationException | 对象不支持用户请求的方法|\n\n## 第61条：抛出与抽象相对应的异常\n    高层的实现应该捕获底层的异常，同时抛出可以按照高层抽象进行解释的异常。这种做法被称为'异常转译'。\n    一种特殊的异常转译形式称为异常链，如果底层的异常对与调试高层异常的问题有帮助，使用异常链就合适。底层的异常被传到高层的异常，高层异常提供访问方法(`Throwable.getCause`)来获得底层异常\n","slug":"effective-java-九","published":1,"updated":"2023-12-19T02:25:24.518Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqk0011fki442sqf8gr","content":"<p>异常</p>\n<h2 id=\"第57条：只针对异常的情况才使用异常\"><a href=\"#第57条：只针对异常的情况才使用异常\" class=\"headerlink\" title=\"第57条：只针对异常的情况才使用异常\"></a>第57条：只针对异常的情况才使用异常</h2><h2 id=\"第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常\"><a href=\"#第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常\" class=\"headerlink\" title=\"第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常\"></a>第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常</h2><pre><code>java 三种可抛出结构(throwable): 受检异常，运行时异常，错误\n</code></pre>\n<h2 id=\"第59条：避免不必要的使用受检的异常\"><a href=\"#第59条：避免不必要的使用受检的异常\" class=\"headerlink\" title=\"第59条：避免不必要的使用受检的异常\"></a>第59条：避免不必要的使用受检的异常</h2><h2 id=\"第60条：优先使用标准的异常\"><a href=\"#第60条：优先使用标准的异常\" class=\"headerlink\" title=\"第60条：优先使用标准的异常\"></a>第60条：优先使用标准的异常</h2><table>\n<thead>\n<tr>\n<th>异常</th>\n<th>使用场合</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IllegalArgumentException</td>\n<td>非null的参数值不正确</td>\n</tr>\n<tr>\n<td>IllegalStateException</td>\n<td>对于方法调用而言，对象状态不合适</td>\n</tr>\n<tr>\n<td>NullPointerException</td>\n<td>在禁止使用null的情况下参数值为null</td>\n</tr>\n<tr>\n<td>IndexOutOfBoundsException</td>\n<td>下标参数值越界</td>\n</tr>\n<tr>\n<td>ConcurrentModificationException</td>\n<td>在禁止并发修改的情况下，检测到对象的并发修改</td>\n</tr>\n<tr>\n<td>UnsupportOperationException</td>\n<td>对象不支持用户请求的方法</td>\n</tr>\n</tbody></table>\n<h2 id=\"第61条：抛出与抽象相对应的异常\"><a href=\"#第61条：抛出与抽象相对应的异常\" class=\"headerlink\" title=\"第61条：抛出与抽象相对应的异常\"></a>第61条：抛出与抽象相对应的异常</h2><pre><code>高层的实现应该捕获底层的异常，同时抛出可以按照高层抽象进行解释的异常。这种做法被称为&#39;异常转译&#39;。\n一种特殊的异常转译形式称为异常链，如果底层的异常对与调试高层异常的问题有帮助，使用异常链就合适。底层的异常被传到高层的异常，高层异常提供访问方法(`Throwable.getCause`)来获得底层异常\n</code></pre>\n","length":538,"excerpt":"","more":"<p>异常</p>\n<h2 id=\"第57条：只针对异常的情况才使用异常\"><a href=\"#第57条：只针对异常的情况才使用异常\" class=\"headerlink\" title=\"第57条：只针对异常的情况才使用异常\"></a>第57条：只针对异常的情况才使用异常</h2><h2 id=\"第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常\"><a href=\"#第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常\" class=\"headerlink\" title=\"第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常\"></a>第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常</h2><pre><code>java 三种可抛出结构(throwable): 受检异常，运行时异常，错误\n</code></pre>\n<h2 id=\"第59条：避免不必要的使用受检的异常\"><a href=\"#第59条：避免不必要的使用受检的异常\" class=\"headerlink\" title=\"第59条：避免不必要的使用受检的异常\"></a>第59条：避免不必要的使用受检的异常</h2><h2 id=\"第60条：优先使用标准的异常\"><a href=\"#第60条：优先使用标准的异常\" class=\"headerlink\" title=\"第60条：优先使用标准的异常\"></a>第60条：优先使用标准的异常</h2><table>\n<thead>\n<tr>\n<th>异常</th>\n<th>使用场合</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IllegalArgumentException</td>\n<td>非null的参数值不正确</td>\n</tr>\n<tr>\n<td>IllegalStateException</td>\n<td>对于方法调用而言，对象状态不合适</td>\n</tr>\n<tr>\n<td>NullPointerException</td>\n<td>在禁止使用null的情况下参数值为null</td>\n</tr>\n<tr>\n<td>IndexOutOfBoundsException</td>\n<td>下标参数值越界</td>\n</tr>\n<tr>\n<td>ConcurrentModificationException</td>\n<td>在禁止并发修改的情况下，检测到对象的并发修改</td>\n</tr>\n<tr>\n<td>UnsupportOperationException</td>\n<td>对象不支持用户请求的方法</td>\n</tr>\n</tbody></table>\n<h2 id=\"第61条：抛出与抽象相对应的异常\"><a href=\"#第61条：抛出与抽象相对应的异常\" class=\"headerlink\" title=\"第61条：抛出与抽象相对应的异常\"></a>第61条：抛出与抽象相对应的异常</h2><pre><code>高层的实现应该捕获底层的异常，同时抛出可以按照高层抽象进行解释的异常。这种做法被称为&#39;异常转译&#39;。\n一种特殊的异常转译形式称为异常链，如果底层的异常对与调试高层异常的问题有帮助，使用异常链就合适。底层的异常被传到高层的异常，高层异常提供访问方法(`Throwable.getCause`)来获得底层异常\n</code></pre>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"effective-java-九","path":"2017/11/12/effective-java-九/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2017-11-12T03:12:50.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-11-12T03:12:50.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"java","tags":["effective java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"effective-java-五","date":"2017-11-10T12:03:59.000Z","keywords":"effective java","_content":"\n泛型\n\n## 第23条：不要在新代码中使用原生态类型\n\n## 第24条：消除非受检警告\n\n```java\n@SuppressWarnings(\"unchecked\")\n```\n    `@SuppressWarnings`注解可以用在任何粒度的级别中，应该尽可能使用在小的范围中 \n    每当使用`@SuppressWarnings`注解时，都要添加一条注释，说明为什么这么做是安全的\n\n## 第25条：列表优先于数组\n\n    数组于泛型相比，有两个重要的不同点\n    1. 数组是协变的(covariant) \n        如果`Sub`是`Super`的子类型，那么数组类型`Sub[]`就是`Super[]`的子类型\n       泛型是不可变的(invariant)\n    2. 数组是具体化的(reified) 数组会在运行时才知道并检测她们的元素类型\n       泛型则是通过擦除(erasure)来实现的。因此泛型只是在编译时强化他们的类型信息，\n       并在运行时丢弃(或者擦除)它们的元素类型信息\n\n## 第26条：优先考虑泛型\n\n## 第27条：优先考虑泛型方法\n\n## 第28条： 利用有限制通配符来提升API的灵活性\n    Collection<? extends E> : E 的子类型的集合\n    Collection<? super E> : E的超类的集合\n\n## 第29条：优先考虑类型安全的异构容器\n\n","source":"_posts/2017/11/effective-java-五.md","raw":"---\ntitle: effective-java-五\ndate: 2017-11-10 20:03:59\ntags: [effective java]\ncategories: java\nkeywords: effective java\n---\n\n泛型\n\n## 第23条：不要在新代码中使用原生态类型\n\n## 第24条：消除非受检警告\n\n```java\n@SuppressWarnings(\"unchecked\")\n```\n    `@SuppressWarnings`注解可以用在任何粒度的级别中，应该尽可能使用在小的范围中 \n    每当使用`@SuppressWarnings`注解时，都要添加一条注释，说明为什么这么做是安全的\n\n## 第25条：列表优先于数组\n\n    数组于泛型相比，有两个重要的不同点\n    1. 数组是协变的(covariant) \n        如果`Sub`是`Super`的子类型，那么数组类型`Sub[]`就是`Super[]`的子类型\n       泛型是不可变的(invariant)\n    2. 数组是具体化的(reified) 数组会在运行时才知道并检测她们的元素类型\n       泛型则是通过擦除(erasure)来实现的。因此泛型只是在编译时强化他们的类型信息，\n       并在运行时丢弃(或者擦除)它们的元素类型信息\n\n## 第26条：优先考虑泛型\n\n## 第27条：优先考虑泛型方法\n\n## 第28条： 利用有限制通配符来提升API的灵活性\n    Collection<? extends E> : E 的子类型的集合\n    Collection<? super E> : E的超类的集合\n\n## 第29条：优先考虑类型安全的异构容器\n\n","slug":"effective-java-五","published":1,"updated":"2023-12-19T02:25:24.519Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydql0013fki4euby6n5v","content":"<p>泛型</p>\n<h2 id=\"第23条：不要在新代码中使用原生态类型\"><a href=\"#第23条：不要在新代码中使用原生态类型\" class=\"headerlink\" title=\"第23条：不要在新代码中使用原生态类型\"></a>第23条：不要在新代码中使用原生态类型</h2><h2 id=\"第24条：消除非受检警告\"><a href=\"#第24条：消除非受检警告\" class=\"headerlink\" title=\"第24条：消除非受检警告\"></a>第24条：消除非受检警告</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br></pre></td></tr></table></figure>\n<pre><code>`@SuppressWarnings`注解可以用在任何粒度的级别中，应该尽可能使用在小的范围中 \n每当使用`@SuppressWarnings`注解时，都要添加一条注释，说明为什么这么做是安全的\n</code></pre>\n<h2 id=\"第25条：列表优先于数组\"><a href=\"#第25条：列表优先于数组\" class=\"headerlink\" title=\"第25条：列表优先于数组\"></a>第25条：列表优先于数组</h2><pre><code>数组于泛型相比，有两个重要的不同点\n1. 数组是协变的(covariant) \n    如果`Sub`是`Super`的子类型，那么数组类型`Sub[]`就是`Super[]`的子类型\n   泛型是不可变的(invariant)\n2. 数组是具体化的(reified) 数组会在运行时才知道并检测她们的元素类型\n   泛型则是通过擦除(erasure)来实现的。因此泛型只是在编译时强化他们的类型信息，\n   并在运行时丢弃(或者擦除)它们的元素类型信息\n</code></pre>\n<h2 id=\"第26条：优先考虑泛型\"><a href=\"#第26条：优先考虑泛型\" class=\"headerlink\" title=\"第26条：优先考虑泛型\"></a>第26条：优先考虑泛型</h2><h2 id=\"第27条：优先考虑泛型方法\"><a href=\"#第27条：优先考虑泛型方法\" class=\"headerlink\" title=\"第27条：优先考虑泛型方法\"></a>第27条：优先考虑泛型方法</h2><h2 id=\"第28条：-利用有限制通配符来提升API的灵活性\"><a href=\"#第28条：-利用有限制通配符来提升API的灵活性\" class=\"headerlink\" title=\"第28条： 利用有限制通配符来提升API的灵活性\"></a>第28条： 利用有限制通配符来提升API的灵活性</h2><pre><code>Collection&lt;? extends E&gt; : E 的子类型的集合\nCollection&lt;? super E&gt; : E的超类的集合\n</code></pre>\n<h2 id=\"第29条：优先考虑类型安全的异构容器\"><a href=\"#第29条：优先考虑类型安全的异构容器\" class=\"headerlink\" title=\"第29条：优先考虑类型安全的异构容器\"></a>第29条：优先考虑类型安全的异构容器</h2>","length":519,"excerpt":"","more":"<p>泛型</p>\n<h2 id=\"第23条：不要在新代码中使用原生态类型\"><a href=\"#第23条：不要在新代码中使用原生态类型\" class=\"headerlink\" title=\"第23条：不要在新代码中使用原生态类型\"></a>第23条：不要在新代码中使用原生态类型</h2><h2 id=\"第24条：消除非受检警告\"><a href=\"#第24条：消除非受检警告\" class=\"headerlink\" title=\"第24条：消除非受检警告\"></a>第24条：消除非受检警告</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br></pre></td></tr></table></figure>\n<pre><code>`@SuppressWarnings`注解可以用在任何粒度的级别中，应该尽可能使用在小的范围中 \n每当使用`@SuppressWarnings`注解时，都要添加一条注释，说明为什么这么做是安全的\n</code></pre>\n<h2 id=\"第25条：列表优先于数组\"><a href=\"#第25条：列表优先于数组\" class=\"headerlink\" title=\"第25条：列表优先于数组\"></a>第25条：列表优先于数组</h2><pre><code>数组于泛型相比，有两个重要的不同点\n1. 数组是协变的(covariant) \n    如果`Sub`是`Super`的子类型，那么数组类型`Sub[]`就是`Super[]`的子类型\n   泛型是不可变的(invariant)\n2. 数组是具体化的(reified) 数组会在运行时才知道并检测她们的元素类型\n   泛型则是通过擦除(erasure)来实现的。因此泛型只是在编译时强化他们的类型信息，\n   并在运行时丢弃(或者擦除)它们的元素类型信息\n</code></pre>\n<h2 id=\"第26条：优先考虑泛型\"><a href=\"#第26条：优先考虑泛型\" class=\"headerlink\" title=\"第26条：优先考虑泛型\"></a>第26条：优先考虑泛型</h2><h2 id=\"第27条：优先考虑泛型方法\"><a href=\"#第27条：优先考虑泛型方法\" class=\"headerlink\" title=\"第27条：优先考虑泛型方法\"></a>第27条：优先考虑泛型方法</h2><h2 id=\"第28条：-利用有限制通配符来提升API的灵活性\"><a href=\"#第28条：-利用有限制通配符来提升API的灵活性\" class=\"headerlink\" title=\"第28条： 利用有限制通配符来提升API的灵活性\"></a>第28条： 利用有限制通配符来提升API的灵活性</h2><pre><code>Collection&lt;? extends E&gt; : E 的子类型的集合\nCollection&lt;? super E&gt; : E的超类的集合\n</code></pre>\n<h2 id=\"第29条：优先考虑类型安全的异构容器\"><a href=\"#第29条：优先考虑类型安全的异构容器\" class=\"headerlink\" title=\"第29条：优先考虑类型安全的异构容器\"></a>第29条：优先考虑类型安全的异构容器</h2>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"effective-java-五","path":"2017/11/10/effective-java-五/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2017-11-10T12:03:59.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-11-10T12:03:59.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"java","tags":["effective java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"effective-java-八","date":"2017-11-12T02:36:17.000Z","keywords":"effective java","_content":"\n通用程序设计\n\n## 第45条：将局部变量的作用域最小化\n    1. 最有力的方法就是在第一次使用它的地方声明\n    2. 几乎每个局部变量的声明都应该包含一个初始化表达式\n    3. 在循环终止后不再需要循环变量的内容时, `for`循环优先于`while`循环\n\n## 第46条：for-each循环优先于传统的for循环\n    不能使用`for-each`循环的情况\n    1. 过滤， 需要使用显示的迭代器,或者java8的stream\n    2. 转换，\n    3. 平行迭代，\n\n## 第47条：了解和使用类库\n\n## 第48条：如果需要精确的答案，请避免使用float和double\n    使用`BigDecimal`\n\n## 第49条：基本类型优先于装箱基本类型\n    区别\n    1. 基本类型只有值， 而装箱基本类型则具有与他们的值不同的同一性(两个装箱基本类型可以具有相同的值和不同的同一性)\n    2. 基本类型只有功能完备的值， 装箱类型除了对应基本类型的所有功能值外，还有个非功能值`null`\n    3. 基本类型比装箱基本类型更节省时间和空间\n\n## 第50条：如果其他类型更适合，则尽量避免使用字符串\n\n## 第51条：当心字符串连接的性能\n    使用`StirngBuilder`代替`String`\n\n## 第52条：通过接口引用对象\n\n## 第53条：接口优先于反射机制\n\n## 第54条：谨慎地使用本地方法\n    使用本地方法提高性能的做法不值得提倡，因为JVM实现变得越来越快\n\n## 第55条：谨慎地进行优化\n\n## 第56条：遵守普遍接受的命名习惯\n    1. 类，接口，枚举，注解类型的名称，都应该包括一个或多个单词，每个单词的首字母大写\n    2. 方法和域的名称与上面的习惯一样，只不过首字母应该小写\n    3. 常量域名称应该用一个或多个大写的单词，每个单词用下划线`_`隔开，常量域是唯一推荐使用下划线的情形","source":"_posts/2017/11/effective-java-八.md","raw":"---\ntitle: effective-java-八\ndate: 2017-11-12 10:36:17\ntags: effective java\ncategories: java\nkeywords: effective java\n---\n\n通用程序设计\n\n## 第45条：将局部变量的作用域最小化\n    1. 最有力的方法就是在第一次使用它的地方声明\n    2. 几乎每个局部变量的声明都应该包含一个初始化表达式\n    3. 在循环终止后不再需要循环变量的内容时, `for`循环优先于`while`循环\n\n## 第46条：for-each循环优先于传统的for循环\n    不能使用`for-each`循环的情况\n    1. 过滤， 需要使用显示的迭代器,或者java8的stream\n    2. 转换，\n    3. 平行迭代，\n\n## 第47条：了解和使用类库\n\n## 第48条：如果需要精确的答案，请避免使用float和double\n    使用`BigDecimal`\n\n## 第49条：基本类型优先于装箱基本类型\n    区别\n    1. 基本类型只有值， 而装箱基本类型则具有与他们的值不同的同一性(两个装箱基本类型可以具有相同的值和不同的同一性)\n    2. 基本类型只有功能完备的值， 装箱类型除了对应基本类型的所有功能值外，还有个非功能值`null`\n    3. 基本类型比装箱基本类型更节省时间和空间\n\n## 第50条：如果其他类型更适合，则尽量避免使用字符串\n\n## 第51条：当心字符串连接的性能\n    使用`StirngBuilder`代替`String`\n\n## 第52条：通过接口引用对象\n\n## 第53条：接口优先于反射机制\n\n## 第54条：谨慎地使用本地方法\n    使用本地方法提高性能的做法不值得提倡，因为JVM实现变得越来越快\n\n## 第55条：谨慎地进行优化\n\n## 第56条：遵守普遍接受的命名习惯\n    1. 类，接口，枚举，注解类型的名称，都应该包括一个或多个单词，每个单词的首字母大写\n    2. 方法和域的名称与上面的习惯一样，只不过首字母应该小写\n    3. 常量域名称应该用一个或多个大写的单词，每个单词用下划线`_`隔开，常量域是唯一推荐使用下划线的情形","slug":"effective-java-八","published":1,"updated":"2023-12-19T02:25:24.520Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqm0017fki42sczbe50","content":"<p>通用程序设计</p>\n<h2 id=\"第45条：将局部变量的作用域最小化\"><a href=\"#第45条：将局部变量的作用域最小化\" class=\"headerlink\" title=\"第45条：将局部变量的作用域最小化\"></a>第45条：将局部变量的作用域最小化</h2><pre><code>1. 最有力的方法就是在第一次使用它的地方声明\n2. 几乎每个局部变量的声明都应该包含一个初始化表达式\n3. 在循环终止后不再需要循环变量的内容时, `for`循环优先于`while`循环\n</code></pre>\n<h2 id=\"第46条：for-each循环优先于传统的for循环\"><a href=\"#第46条：for-each循环优先于传统的for循环\" class=\"headerlink\" title=\"第46条：for-each循环优先于传统的for循环\"></a>第46条：for-each循环优先于传统的for循环</h2><pre><code>不能使用`for-each`循环的情况\n1. 过滤， 需要使用显示的迭代器,或者java8的stream\n2. 转换，\n3. 平行迭代，\n</code></pre>\n<h2 id=\"第47条：了解和使用类库\"><a href=\"#第47条：了解和使用类库\" class=\"headerlink\" title=\"第47条：了解和使用类库\"></a>第47条：了解和使用类库</h2><h2 id=\"第48条：如果需要精确的答案，请避免使用float和double\"><a href=\"#第48条：如果需要精确的答案，请避免使用float和double\" class=\"headerlink\" title=\"第48条：如果需要精确的答案，请避免使用float和double\"></a>第48条：如果需要精确的答案，请避免使用float和double</h2><pre><code>使用`BigDecimal`\n</code></pre>\n<h2 id=\"第49条：基本类型优先于装箱基本类型\"><a href=\"#第49条：基本类型优先于装箱基本类型\" class=\"headerlink\" title=\"第49条：基本类型优先于装箱基本类型\"></a>第49条：基本类型优先于装箱基本类型</h2><pre><code>区别\n1. 基本类型只有值， 而装箱基本类型则具有与他们的值不同的同一性(两个装箱基本类型可以具有相同的值和不同的同一性)\n2. 基本类型只有功能完备的值， 装箱类型除了对应基本类型的所有功能值外，还有个非功能值`null`\n3. 基本类型比装箱基本类型更节省时间和空间\n</code></pre>\n<h2 id=\"第50条：如果其他类型更适合，则尽量避免使用字符串\"><a href=\"#第50条：如果其他类型更适合，则尽量避免使用字符串\" class=\"headerlink\" title=\"第50条：如果其他类型更适合，则尽量避免使用字符串\"></a>第50条：如果其他类型更适合，则尽量避免使用字符串</h2><h2 id=\"第51条：当心字符串连接的性能\"><a href=\"#第51条：当心字符串连接的性能\" class=\"headerlink\" title=\"第51条：当心字符串连接的性能\"></a>第51条：当心字符串连接的性能</h2><pre><code>使用`StirngBuilder`代替`String`\n</code></pre>\n<h2 id=\"第52条：通过接口引用对象\"><a href=\"#第52条：通过接口引用对象\" class=\"headerlink\" title=\"第52条：通过接口引用对象\"></a>第52条：通过接口引用对象</h2><h2 id=\"第53条：接口优先于反射机制\"><a href=\"#第53条：接口优先于反射机制\" class=\"headerlink\" title=\"第53条：接口优先于反射机制\"></a>第53条：接口优先于反射机制</h2><h2 id=\"第54条：谨慎地使用本地方法\"><a href=\"#第54条：谨慎地使用本地方法\" class=\"headerlink\" title=\"第54条：谨慎地使用本地方法\"></a>第54条：谨慎地使用本地方法</h2><pre><code>使用本地方法提高性能的做法不值得提倡，因为JVM实现变得越来越快\n</code></pre>\n<h2 id=\"第55条：谨慎地进行优化\"><a href=\"#第55条：谨慎地进行优化\" class=\"headerlink\" title=\"第55条：谨慎地进行优化\"></a>第55条：谨慎地进行优化</h2><h2 id=\"第56条：遵守普遍接受的命名习惯\"><a href=\"#第56条：遵守普遍接受的命名习惯\" class=\"headerlink\" title=\"第56条：遵守普遍接受的命名习惯\"></a>第56条：遵守普遍接受的命名习惯</h2><pre><code>1. 类，接口，枚举，注解类型的名称，都应该包括一个或多个单词，每个单词的首字母大写\n2. 方法和域的名称与上面的习惯一样，只不过首字母应该小写\n3. 常量域名称应该用一个或多个大写的单词，每个单词用下划线`_`隔开，常量域是唯一推荐使用下划线的情形\n</code></pre>\n","length":689,"excerpt":"","more":"<p>通用程序设计</p>\n<h2 id=\"第45条：将局部变量的作用域最小化\"><a href=\"#第45条：将局部变量的作用域最小化\" class=\"headerlink\" title=\"第45条：将局部变量的作用域最小化\"></a>第45条：将局部变量的作用域最小化</h2><pre><code>1. 最有力的方法就是在第一次使用它的地方声明\n2. 几乎每个局部变量的声明都应该包含一个初始化表达式\n3. 在循环终止后不再需要循环变量的内容时, `for`循环优先于`while`循环\n</code></pre>\n<h2 id=\"第46条：for-each循环优先于传统的for循环\"><a href=\"#第46条：for-each循环优先于传统的for循环\" class=\"headerlink\" title=\"第46条：for-each循环优先于传统的for循环\"></a>第46条：for-each循环优先于传统的for循环</h2><pre><code>不能使用`for-each`循环的情况\n1. 过滤， 需要使用显示的迭代器,或者java8的stream\n2. 转换，\n3. 平行迭代，\n</code></pre>\n<h2 id=\"第47条：了解和使用类库\"><a href=\"#第47条：了解和使用类库\" class=\"headerlink\" title=\"第47条：了解和使用类库\"></a>第47条：了解和使用类库</h2><h2 id=\"第48条：如果需要精确的答案，请避免使用float和double\"><a href=\"#第48条：如果需要精确的答案，请避免使用float和double\" class=\"headerlink\" title=\"第48条：如果需要精确的答案，请避免使用float和double\"></a>第48条：如果需要精确的答案，请避免使用float和double</h2><pre><code>使用`BigDecimal`\n</code></pre>\n<h2 id=\"第49条：基本类型优先于装箱基本类型\"><a href=\"#第49条：基本类型优先于装箱基本类型\" class=\"headerlink\" title=\"第49条：基本类型优先于装箱基本类型\"></a>第49条：基本类型优先于装箱基本类型</h2><pre><code>区别\n1. 基本类型只有值， 而装箱基本类型则具有与他们的值不同的同一性(两个装箱基本类型可以具有相同的值和不同的同一性)\n2. 基本类型只有功能完备的值， 装箱类型除了对应基本类型的所有功能值外，还有个非功能值`null`\n3. 基本类型比装箱基本类型更节省时间和空间\n</code></pre>\n<h2 id=\"第50条：如果其他类型更适合，则尽量避免使用字符串\"><a href=\"#第50条：如果其他类型更适合，则尽量避免使用字符串\" class=\"headerlink\" title=\"第50条：如果其他类型更适合，则尽量避免使用字符串\"></a>第50条：如果其他类型更适合，则尽量避免使用字符串</h2><h2 id=\"第51条：当心字符串连接的性能\"><a href=\"#第51条：当心字符串连接的性能\" class=\"headerlink\" title=\"第51条：当心字符串连接的性能\"></a>第51条：当心字符串连接的性能</h2><pre><code>使用`StirngBuilder`代替`String`\n</code></pre>\n<h2 id=\"第52条：通过接口引用对象\"><a href=\"#第52条：通过接口引用对象\" class=\"headerlink\" title=\"第52条：通过接口引用对象\"></a>第52条：通过接口引用对象</h2><h2 id=\"第53条：接口优先于反射机制\"><a href=\"#第53条：接口优先于反射机制\" class=\"headerlink\" title=\"第53条：接口优先于反射机制\"></a>第53条：接口优先于反射机制</h2><h2 id=\"第54条：谨慎地使用本地方法\"><a href=\"#第54条：谨慎地使用本地方法\" class=\"headerlink\" title=\"第54条：谨慎地使用本地方法\"></a>第54条：谨慎地使用本地方法</h2><pre><code>使用本地方法提高性能的做法不值得提倡，因为JVM实现变得越来越快\n</code></pre>\n<h2 id=\"第55条：谨慎地进行优化\"><a href=\"#第55条：谨慎地进行优化\" class=\"headerlink\" title=\"第55条：谨慎地进行优化\"></a>第55条：谨慎地进行优化</h2><h2 id=\"第56条：遵守普遍接受的命名习惯\"><a href=\"#第56条：遵守普遍接受的命名习惯\" class=\"headerlink\" title=\"第56条：遵守普遍接受的命名习惯\"></a>第56条：遵守普遍接受的命名习惯</h2><pre><code>1. 类，接口，枚举，注解类型的名称，都应该包括一个或多个单词，每个单词的首字母大写\n2. 方法和域的名称与上面的习惯一样，只不过首字母应该小写\n3. 常量域名称应该用一个或多个大写的单词，每个单词用下划线`_`隔开，常量域是唯一推荐使用下划线的情形\n</code></pre>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"effective-java-八","path":"2017/11/12/effective-java-八/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2017-11-12T02:36:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-11-12T02:36:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"java","tags":["effective java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"effective-java-二","date":"2017-11-02T14:02:36.000Z","keywords":"effective java","_content":"\n## 第三条：用私有构造器或者枚举类型强化Singleton\n\n***从1.5开始使用单元素的枚举类是实现单例的的最佳方法***\n\n## 第四条：通过私有构造器强化不可实例化的能力\n\n主要对于工具类\n\n## 第五条： 避免创建不必要的对象\n\n***要优先使用基本类型而不是装箱类型，要当心无意识的自动装箱***\n\n## 第六条： 消除过期的对象引用\n\n常见的内存泄漏问题\n1. 程序自己管理内\n2. 缓存\n3. 监听器和其他回调\n\n## 第七条： 避免使用终结方法(finalize)\n\n缺点在于不能保证会被及时的执行\n","source":"_posts/2017/11/effective-java-二.md","raw":"---\ntitle: effective-java-二\ndate: 2017-11-02 22:02:36\ntags: effective java\ncategories: java\nkeywords: effective java\n---\n\n## 第三条：用私有构造器或者枚举类型强化Singleton\n\n***从1.5开始使用单元素的枚举类是实现单例的的最佳方法***\n\n## 第四条：通过私有构造器强化不可实例化的能力\n\n主要对于工具类\n\n## 第五条： 避免创建不必要的对象\n\n***要优先使用基本类型而不是装箱类型，要当心无意识的自动装箱***\n\n## 第六条： 消除过期的对象引用\n\n常见的内存泄漏问题\n1. 程序自己管理内\n2. 缓存\n3. 监听器和其他回调\n\n## 第七条： 避免使用终结方法(finalize)\n\n缺点在于不能保证会被及时的执行\n","slug":"effective-java-二","published":1,"updated":"2023-12-19T02:25:24.519Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqo001afki4ho7461kc","content":"<h2 id=\"第三条：用私有构造器或者枚举类型强化Singleton\"><a href=\"#第三条：用私有构造器或者枚举类型强化Singleton\" class=\"headerlink\" title=\"第三条：用私有构造器或者枚举类型强化Singleton\"></a>第三条：用私有构造器或者枚举类型强化Singleton</h2><p><em><strong>从1.5开始使用单元素的枚举类是实现单例的的最佳方法</strong></em></p>\n<h2 id=\"第四条：通过私有构造器强化不可实例化的能力\"><a href=\"#第四条：通过私有构造器强化不可实例化的能力\" class=\"headerlink\" title=\"第四条：通过私有构造器强化不可实例化的能力\"></a>第四条：通过私有构造器强化不可实例化的能力</h2><p>主要对于工具类</p>\n<h2 id=\"第五条：-避免创建不必要的对象\"><a href=\"#第五条：-避免创建不必要的对象\" class=\"headerlink\" title=\"第五条： 避免创建不必要的对象\"></a>第五条： 避免创建不必要的对象</h2><p><em><strong>要优先使用基本类型而不是装箱类型，要当心无意识的自动装箱</strong></em></p>\n<h2 id=\"第六条：-消除过期的对象引用\"><a href=\"#第六条：-消除过期的对象引用\" class=\"headerlink\" title=\"第六条： 消除过期的对象引用\"></a>第六条： 消除过期的对象引用</h2><p>常见的内存泄漏问题</p>\n<ol>\n<li>程序自己管理内</li>\n<li>缓存</li>\n<li>监听器和其他回调</li>\n</ol>\n<h2 id=\"第七条：-避免使用终结方法-finalize\"><a href=\"#第七条：-避免使用终结方法-finalize\" class=\"headerlink\" title=\"第七条： 避免使用终结方法(finalize)\"></a>第七条： 避免使用终结方法(finalize)</h2><p>缺点在于不能保证会被及时的执行</p>\n","length":199,"excerpt":"","more":"<h2 id=\"第三条：用私有构造器或者枚举类型强化Singleton\"><a href=\"#第三条：用私有构造器或者枚举类型强化Singleton\" class=\"headerlink\" title=\"第三条：用私有构造器或者枚举类型强化Singleton\"></a>第三条：用私有构造器或者枚举类型强化Singleton</h2><p><em><strong>从1.5开始使用单元素的枚举类是实现单例的的最佳方法</strong></em></p>\n<h2 id=\"第四条：通过私有构造器强化不可实例化的能力\"><a href=\"#第四条：通过私有构造器强化不可实例化的能力\" class=\"headerlink\" title=\"第四条：通过私有构造器强化不可实例化的能力\"></a>第四条：通过私有构造器强化不可实例化的能力</h2><p>主要对于工具类</p>\n<h2 id=\"第五条：-避免创建不必要的对象\"><a href=\"#第五条：-避免创建不必要的对象\" class=\"headerlink\" title=\"第五条： 避免创建不必要的对象\"></a>第五条： 避免创建不必要的对象</h2><p><em><strong>要优先使用基本类型而不是装箱类型，要当心无意识的自动装箱</strong></em></p>\n<h2 id=\"第六条：-消除过期的对象引用\"><a href=\"#第六条：-消除过期的对象引用\" class=\"headerlink\" title=\"第六条： 消除过期的对象引用\"></a>第六条： 消除过期的对象引用</h2><p>常见的内存泄漏问题</p>\n<ol>\n<li>程序自己管理内</li>\n<li>缓存</li>\n<li>监听器和其他回调</li>\n</ol>\n<h2 id=\"第七条：-避免使用终结方法-finalize\"><a href=\"#第七条：-避免使用终结方法-finalize\" class=\"headerlink\" title=\"第七条： 避免使用终结方法(finalize)\"></a>第七条： 避免使用终结方法(finalize)</h2><p>缺点在于不能保证会被及时的执行</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"effective-java-二","path":"2017/11/02/effective-java-二/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2017-11-02T14:02:36.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-11-02T14:02:36.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"java","tags":["effective java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"effective-java-六","date":"2017-11-10T13:06:44.000Z","keywords":"effective java","_content":"枚举和注解\n\n## 第30条： 用enum代替int常量\n\n## 第31条：用实例域代替序数\n    不要依赖枚举的`ordinal`而是自己定义实例域\n\n## 第32条：用EnumSet代替位域\n\n## 第33条：用EnumMap代替序数索引\n\n## 第34条：用接口模拟可伸缩的枚举\n    虽然无法编写可扩展的枚举类型，却可以通过编写接口以及实现该接口的基础枚举类型，对它进行模拟\n\n## 第35条：注解优先于命名模式\n\n## 第36条：坚持使用Override注解\n\n## 第37条：用标记接口定义类型\n    标记接口(marker interface) 是没有包含方法声明的接口，而是指明一个类实现了具有某种属性接口","source":"_posts/2017/11/effective-java-六.md","raw":"---\ntitle: effective-java-六\ndate: 2017-11-10 21:06:44\ntags: [effective java]\ncategories: java\nkeywords: effective java\n---\n枚举和注解\n\n## 第30条： 用enum代替int常量\n\n## 第31条：用实例域代替序数\n    不要依赖枚举的`ordinal`而是自己定义实例域\n\n## 第32条：用EnumSet代替位域\n\n## 第33条：用EnumMap代替序数索引\n\n## 第34条：用接口模拟可伸缩的枚举\n    虽然无法编写可扩展的枚举类型，却可以通过编写接口以及实现该接口的基础枚举类型，对它进行模拟\n\n## 第35条：注解优先于命名模式\n\n## 第36条：坚持使用Override注解\n\n## 第37条：用标记接口定义类型\n    标记接口(marker interface) 是没有包含方法声明的接口，而是指明一个类实现了具有某种属性接口","slug":"effective-java-六","published":1,"updated":"2023-12-19T02:25:24.520Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqp001cfki43wnd9s6q","content":"<p>枚举和注解</p>\n<h2 id=\"第30条：-用enum代替int常量\"><a href=\"#第30条：-用enum代替int常量\" class=\"headerlink\" title=\"第30条： 用enum代替int常量\"></a>第30条： 用enum代替int常量</h2><h2 id=\"第31条：用实例域代替序数\"><a href=\"#第31条：用实例域代替序数\" class=\"headerlink\" title=\"第31条：用实例域代替序数\"></a>第31条：用实例域代替序数</h2><pre><code>不要依赖枚举的`ordinal`而是自己定义实例域\n</code></pre>\n<h2 id=\"第32条：用EnumSet代替位域\"><a href=\"#第32条：用EnumSet代替位域\" class=\"headerlink\" title=\"第32条：用EnumSet代替位域\"></a>第32条：用EnumSet代替位域</h2><h2 id=\"第33条：用EnumMap代替序数索引\"><a href=\"#第33条：用EnumMap代替序数索引\" class=\"headerlink\" title=\"第33条：用EnumMap代替序数索引\"></a>第33条：用EnumMap代替序数索引</h2><h2 id=\"第34条：用接口模拟可伸缩的枚举\"><a href=\"#第34条：用接口模拟可伸缩的枚举\" class=\"headerlink\" title=\"第34条：用接口模拟可伸缩的枚举\"></a>第34条：用接口模拟可伸缩的枚举</h2><pre><code>虽然无法编写可扩展的枚举类型，却可以通过编写接口以及实现该接口的基础枚举类型，对它进行模拟\n</code></pre>\n<h2 id=\"第35条：注解优先于命名模式\"><a href=\"#第35条：注解优先于命名模式\" class=\"headerlink\" title=\"第35条：注解优先于命名模式\"></a>第35条：注解优先于命名模式</h2><h2 id=\"第36条：坚持使用Override注解\"><a href=\"#第36条：坚持使用Override注解\" class=\"headerlink\" title=\"第36条：坚持使用Override注解\"></a>第36条：坚持使用Override注解</h2><h2 id=\"第37条：用标记接口定义类型\"><a href=\"#第37条：用标记接口定义类型\" class=\"headerlink\" title=\"第37条：用标记接口定义类型\"></a>第37条：用标记接口定义类型</h2><pre><code>标记接口(marker interface) 是没有包含方法声明的接口，而是指明一个类实现了具有某种属性接口\n</code></pre>\n","length":256,"excerpt":"","more":"<p>枚举和注解</p>\n<h2 id=\"第30条：-用enum代替int常量\"><a href=\"#第30条：-用enum代替int常量\" class=\"headerlink\" title=\"第30条： 用enum代替int常量\"></a>第30条： 用enum代替int常量</h2><h2 id=\"第31条：用实例域代替序数\"><a href=\"#第31条：用实例域代替序数\" class=\"headerlink\" title=\"第31条：用实例域代替序数\"></a>第31条：用实例域代替序数</h2><pre><code>不要依赖枚举的`ordinal`而是自己定义实例域\n</code></pre>\n<h2 id=\"第32条：用EnumSet代替位域\"><a href=\"#第32条：用EnumSet代替位域\" class=\"headerlink\" title=\"第32条：用EnumSet代替位域\"></a>第32条：用EnumSet代替位域</h2><h2 id=\"第33条：用EnumMap代替序数索引\"><a href=\"#第33条：用EnumMap代替序数索引\" class=\"headerlink\" title=\"第33条：用EnumMap代替序数索引\"></a>第33条：用EnumMap代替序数索引</h2><h2 id=\"第34条：用接口模拟可伸缩的枚举\"><a href=\"#第34条：用接口模拟可伸缩的枚举\" class=\"headerlink\" title=\"第34条：用接口模拟可伸缩的枚举\"></a>第34条：用接口模拟可伸缩的枚举</h2><pre><code>虽然无法编写可扩展的枚举类型，却可以通过编写接口以及实现该接口的基础枚举类型，对它进行模拟\n</code></pre>\n<h2 id=\"第35条：注解优先于命名模式\"><a href=\"#第35条：注解优先于命名模式\" class=\"headerlink\" title=\"第35条：注解优先于命名模式\"></a>第35条：注解优先于命名模式</h2><h2 id=\"第36条：坚持使用Override注解\"><a href=\"#第36条：坚持使用Override注解\" class=\"headerlink\" title=\"第36条：坚持使用Override注解\"></a>第36条：坚持使用Override注解</h2><h2 id=\"第37条：用标记接口定义类型\"><a href=\"#第37条：用标记接口定义类型\" class=\"headerlink\" title=\"第37条：用标记接口定义类型\"></a>第37条：用标记接口定义类型</h2><pre><code>标记接口(marker interface) 是没有包含方法声明的接口，而是指明一个类实现了具有某种属性接口\n</code></pre>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"effective-java-六","path":"2017/11/10/effective-java-六/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2017-11-10T13:06:44.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-11-10T13:06:44.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"java","tags":["effective java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"effective-java-四","date":"2017-11-08T13:12:46.000Z","keywords":null,"_content":"\n## 第13条: 使类和成员的可访问性最小\n\n## 第14条：在共有类中使用方法而不是公有域\n\n## 第15条：使可变性最小\n    使类成为不可变，要遵循下面五条规则\n    1. 不要提供任何会修改对象状态的方法\n    2. 保证类不会被扩展\n    3. 所有的域都是final的\n    4. 所有的域都是私有的\n    5. 确保对任何可变组件的互斥访问\n\n## 第16条：复合优先于继承\n\n## 第17条：要么为继承而设计，并提供文档说明，要么就禁止继承 \n    构造器绝不能调用可被覆盖的方法\n\n## 第18条：接口优先于抽象类\n    1. 现有的类可以很容易被更新\n    2. 接口是定义mixin(混合类型)的理想选择\n    3. 接口允许构造非层次结构的类型框架\n\n## 第19条：接口只用于定义类型\n    常量接口是不好的使用方法\n    要导出常量应该使用不可实例化的工具类\n\n## 第20条：类层次优先于标签类\n\n## 第21条：用函数对象表示策略\n\n## 第22条：优先考虑静态成员类\n### 嵌套类\n    被定义在另一个类的内部类，嵌套类存在的目的应该只是为外部类提供服务。如果嵌套类可能会用于其他环境中，它就应该是顶层类\n\n嵌套类有四种\n1. 静态成员类\n2. 非静态成员类\n3. 匿名类\n4. 局部类\n除了第一种之外，其他三种都被称为内部类\n    \n","source":"_posts/2017/11/effective-java-四.md","raw":"---\ntitle: effective-java-四\ndate: 2017-11-08 21:12:46\ntags: [effective java]\ncategories: java\nkeywords:\n---\n\n## 第13条: 使类和成员的可访问性最小\n\n## 第14条：在共有类中使用方法而不是公有域\n\n## 第15条：使可变性最小\n    使类成为不可变，要遵循下面五条规则\n    1. 不要提供任何会修改对象状态的方法\n    2. 保证类不会被扩展\n    3. 所有的域都是final的\n    4. 所有的域都是私有的\n    5. 确保对任何可变组件的互斥访问\n\n## 第16条：复合优先于继承\n\n## 第17条：要么为继承而设计，并提供文档说明，要么就禁止继承 \n    构造器绝不能调用可被覆盖的方法\n\n## 第18条：接口优先于抽象类\n    1. 现有的类可以很容易被更新\n    2. 接口是定义mixin(混合类型)的理想选择\n    3. 接口允许构造非层次结构的类型框架\n\n## 第19条：接口只用于定义类型\n    常量接口是不好的使用方法\n    要导出常量应该使用不可实例化的工具类\n\n## 第20条：类层次优先于标签类\n\n## 第21条：用函数对象表示策略\n\n## 第22条：优先考虑静态成员类\n### 嵌套类\n    被定义在另一个类的内部类，嵌套类存在的目的应该只是为外部类提供服务。如果嵌套类可能会用于其他环境中，它就应该是顶层类\n\n嵌套类有四种\n1. 静态成员类\n2. 非静态成员类\n3. 匿名类\n4. 局部类\n除了第一种之外，其他三种都被称为内部类\n    \n","slug":"effective-java-四","published":1,"updated":"2023-12-19T02:25:24.521Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqq001gfki4fxiugk1d","content":"<h2 id=\"第13条-使类和成员的可访问性最小\"><a href=\"#第13条-使类和成员的可访问性最小\" class=\"headerlink\" title=\"第13条: 使类和成员的可访问性最小\"></a>第13条: 使类和成员的可访问性最小</h2><h2 id=\"第14条：在共有类中使用方法而不是公有域\"><a href=\"#第14条：在共有类中使用方法而不是公有域\" class=\"headerlink\" title=\"第14条：在共有类中使用方法而不是公有域\"></a>第14条：在共有类中使用方法而不是公有域</h2><h2 id=\"第15条：使可变性最小\"><a href=\"#第15条：使可变性最小\" class=\"headerlink\" title=\"第15条：使可变性最小\"></a>第15条：使可变性最小</h2><pre><code>使类成为不可变，要遵循下面五条规则\n1. 不要提供任何会修改对象状态的方法\n2. 保证类不会被扩展\n3. 所有的域都是final的\n4. 所有的域都是私有的\n5. 确保对任何可变组件的互斥访问\n</code></pre>\n<h2 id=\"第16条：复合优先于继承\"><a href=\"#第16条：复合优先于继承\" class=\"headerlink\" title=\"第16条：复合优先于继承\"></a>第16条：复合优先于继承</h2><h2 id=\"第17条：要么为继承而设计，并提供文档说明，要么就禁止继承\"><a href=\"#第17条：要么为继承而设计，并提供文档说明，要么就禁止继承\" class=\"headerlink\" title=\"第17条：要么为继承而设计，并提供文档说明，要么就禁止继承\"></a>第17条：要么为继承而设计，并提供文档说明，要么就禁止继承</h2><pre><code>构造器绝不能调用可被覆盖的方法\n</code></pre>\n<h2 id=\"第18条：接口优先于抽象类\"><a href=\"#第18条：接口优先于抽象类\" class=\"headerlink\" title=\"第18条：接口优先于抽象类\"></a>第18条：接口优先于抽象类</h2><pre><code>1. 现有的类可以很容易被更新\n2. 接口是定义mixin(混合类型)的理想选择\n3. 接口允许构造非层次结构的类型框架\n</code></pre>\n<h2 id=\"第19条：接口只用于定义类型\"><a href=\"#第19条：接口只用于定义类型\" class=\"headerlink\" title=\"第19条：接口只用于定义类型\"></a>第19条：接口只用于定义类型</h2><pre><code>常量接口是不好的使用方法\n要导出常量应该使用不可实例化的工具类\n</code></pre>\n<h2 id=\"第20条：类层次优先于标签类\"><a href=\"#第20条：类层次优先于标签类\" class=\"headerlink\" title=\"第20条：类层次优先于标签类\"></a>第20条：类层次优先于标签类</h2><h2 id=\"第21条：用函数对象表示策略\"><a href=\"#第21条：用函数对象表示策略\" class=\"headerlink\" title=\"第21条：用函数对象表示策略\"></a>第21条：用函数对象表示策略</h2><h2 id=\"第22条：优先考虑静态成员类\"><a href=\"#第22条：优先考虑静态成员类\" class=\"headerlink\" title=\"第22条：优先考虑静态成员类\"></a>第22条：优先考虑静态成员类</h2><h3 id=\"嵌套类\"><a href=\"#嵌套类\" class=\"headerlink\" title=\"嵌套类\"></a>嵌套类</h3><pre><code>被定义在另一个类的内部类，嵌套类存在的目的应该只是为外部类提供服务。如果嵌套类可能会用于其他环境中，它就应该是顶层类\n</code></pre>\n<p>嵌套类有四种</p>\n<ol>\n<li>静态成员类</li>\n<li>非静态成员类</li>\n<li>匿名类</li>\n<li>局部类<br>除了第一种之外，其他三种都被称为内部类</li>\n</ol>\n","length":447,"excerpt":"","more":"<h2 id=\"第13条-使类和成员的可访问性最小\"><a href=\"#第13条-使类和成员的可访问性最小\" class=\"headerlink\" title=\"第13条: 使类和成员的可访问性最小\"></a>第13条: 使类和成员的可访问性最小</h2><h2 id=\"第14条：在共有类中使用方法而不是公有域\"><a href=\"#第14条：在共有类中使用方法而不是公有域\" class=\"headerlink\" title=\"第14条：在共有类中使用方法而不是公有域\"></a>第14条：在共有类中使用方法而不是公有域</h2><h2 id=\"第15条：使可变性最小\"><a href=\"#第15条：使可变性最小\" class=\"headerlink\" title=\"第15条：使可变性最小\"></a>第15条：使可变性最小</h2><pre><code>使类成为不可变，要遵循下面五条规则\n1. 不要提供任何会修改对象状态的方法\n2. 保证类不会被扩展\n3. 所有的域都是final的\n4. 所有的域都是私有的\n5. 确保对任何可变组件的互斥访问\n</code></pre>\n<h2 id=\"第16条：复合优先于继承\"><a href=\"#第16条：复合优先于继承\" class=\"headerlink\" title=\"第16条：复合优先于继承\"></a>第16条：复合优先于继承</h2><h2 id=\"第17条：要么为继承而设计，并提供文档说明，要么就禁止继承\"><a href=\"#第17条：要么为继承而设计，并提供文档说明，要么就禁止继承\" class=\"headerlink\" title=\"第17条：要么为继承而设计，并提供文档说明，要么就禁止继承\"></a>第17条：要么为继承而设计，并提供文档说明，要么就禁止继承</h2><pre><code>构造器绝不能调用可被覆盖的方法\n</code></pre>\n<h2 id=\"第18条：接口优先于抽象类\"><a href=\"#第18条：接口优先于抽象类\" class=\"headerlink\" title=\"第18条：接口优先于抽象类\"></a>第18条：接口优先于抽象类</h2><pre><code>1. 现有的类可以很容易被更新\n2. 接口是定义mixin(混合类型)的理想选择\n3. 接口允许构造非层次结构的类型框架\n</code></pre>\n<h2 id=\"第19条：接口只用于定义类型\"><a href=\"#第19条：接口只用于定义类型\" class=\"headerlink\" title=\"第19条：接口只用于定义类型\"></a>第19条：接口只用于定义类型</h2><pre><code>常量接口是不好的使用方法\n要导出常量应该使用不可实例化的工具类\n</code></pre>\n<h2 id=\"第20条：类层次优先于标签类\"><a href=\"#第20条：类层次优先于标签类\" class=\"headerlink\" title=\"第20条：类层次优先于标签类\"></a>第20条：类层次优先于标签类</h2><h2 id=\"第21条：用函数对象表示策略\"><a href=\"#第21条：用函数对象表示策略\" class=\"headerlink\" title=\"第21条：用函数对象表示策略\"></a>第21条：用函数对象表示策略</h2><h2 id=\"第22条：优先考虑静态成员类\"><a href=\"#第22条：优先考虑静态成员类\" class=\"headerlink\" title=\"第22条：优先考虑静态成员类\"></a>第22条：优先考虑静态成员类</h2><h3 id=\"嵌套类\"><a href=\"#嵌套类\" class=\"headerlink\" title=\"嵌套类\"></a>嵌套类</h3><pre><code>被定义在另一个类的内部类，嵌套类存在的目的应该只是为外部类提供服务。如果嵌套类可能会用于其他环境中，它就应该是顶层类\n</code></pre>\n<p>嵌套类有四种</p>\n<ol>\n<li>静态成员类</li>\n<li>非静态成员类</li>\n<li>匿名类</li>\n<li>局部类<br>除了第一种之外，其他三种都被称为内部类</li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"effective-java-四","path":"2017/11/08/effective-java-四/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2017-11-08T13:12:46.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-11-08T13:12:46.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"java","tags":["effective java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"maven-release版本管理插件","date":"2017-11-02T10:22:49.000Z","keywords":"maven","_content":"使用maven管理项目时，完成开发后需要把项目发布到maven私服上去。\n\n手动`SNAPSHOT`版本开发时执行`mvn clean deploy`就可以部署到私服上。\n\n在开发是还会需要SNAPSHOT版本和RELEASE版本可以用`mvn versions:set -DnewVersion=0.1.1-SNAPSHOT`进行更改版本号\n\n当然maven还有更好的管理插件进行RELEASE管理`maven-release-plugin`\n\n<!--more-->\n\n在pom.xml添加插件\n```xml\n<build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-release-plugin</artifactId>\n        <version>2.5.3</version>\n      </plugin>\n    </plugins>\n  </build>\n```\n在pom.xml添加scm信息(SCM：Software Configuration Management)\n```xml\n  <scm>\n    <!--项目url-->\n    <url>http://192.168.8.65/xx/cli</url>\n    <!--代码版本仓库地址-->\n    <connection>scm:git:http://192.168.8.65/xx/cli.git</connection>\n    <developerConnection>scm:git:http://192.168.8.65/xx/cli.git</developerConnection>\n    <tag>HEAD</tag>\n  </scm>\n```\n配置好后可以使用mvn的scm命令管理\n\n添加scm插件\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-scm-plugin</artifactId>\n    <version>1.9.5</version>\n</plugin>\n\n```\n```bash\n #提交\nmvn -Dmessage=\"<commit_log_here>\" scm:checkin\n\n# 获取最新版本：\nmvn scm:update\n```\n\nSCM支持两种连接类型：connection 及 developerConnection\n\n```xml\n <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-scm-plugin</artifactId>\n        <version>1.8.1</version>\n        <configuration>\n            <!--<connectionType>developerConnection</connectionType>-->\n            <connectionType>connection</connectionType>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n```\n项目是SNAPSHOT版本开发好之后就可以发布RELEASE版了，直接使用\n\n```bash\n#把版本号改为RELEASE，向代码仓库推送新的版本\nmvn release:prepare\n\n#向maven私服中推送RELEASE版本\nmvn release:perform\n\n#prepare之后可以回退\nmvn release:rollback\n```\n\n使用`mvn release`命令时 如需要添加跳过测试之类的参数 需要使用`-Darguments`进行指定\n\n```bash\n mvn release:perform -Darguments=\"-Dmaven.test.skip=true -Dmaven.javadoc.skip=true\" \n```\n\n\n\n","source":"_posts/2017/11/maven-release版本管理插件.md","raw":"---\ntitle: maven-release版本管理插件\ndate: 2017-11-02 18:22:49\ntags: maven\ncategories: maven\nkeywords: maven\n---\n使用maven管理项目时，完成开发后需要把项目发布到maven私服上去。\n\n手动`SNAPSHOT`版本开发时执行`mvn clean deploy`就可以部署到私服上。\n\n在开发是还会需要SNAPSHOT版本和RELEASE版本可以用`mvn versions:set -DnewVersion=0.1.1-SNAPSHOT`进行更改版本号\n\n当然maven还有更好的管理插件进行RELEASE管理`maven-release-plugin`\n\n<!--more-->\n\n在pom.xml添加插件\n```xml\n<build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-release-plugin</artifactId>\n        <version>2.5.3</version>\n      </plugin>\n    </plugins>\n  </build>\n```\n在pom.xml添加scm信息(SCM：Software Configuration Management)\n```xml\n  <scm>\n    <!--项目url-->\n    <url>http://192.168.8.65/xx/cli</url>\n    <!--代码版本仓库地址-->\n    <connection>scm:git:http://192.168.8.65/xx/cli.git</connection>\n    <developerConnection>scm:git:http://192.168.8.65/xx/cli.git</developerConnection>\n    <tag>HEAD</tag>\n  </scm>\n```\n配置好后可以使用mvn的scm命令管理\n\n添加scm插件\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-scm-plugin</artifactId>\n    <version>1.9.5</version>\n</plugin>\n\n```\n```bash\n #提交\nmvn -Dmessage=\"<commit_log_here>\" scm:checkin\n\n# 获取最新版本：\nmvn scm:update\n```\n\nSCM支持两种连接类型：connection 及 developerConnection\n\n```xml\n <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-scm-plugin</artifactId>\n        <version>1.8.1</version>\n        <configuration>\n            <!--<connectionType>developerConnection</connectionType>-->\n            <connectionType>connection</connectionType>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n```\n项目是SNAPSHOT版本开发好之后就可以发布RELEASE版了，直接使用\n\n```bash\n#把版本号改为RELEASE，向代码仓库推送新的版本\nmvn release:prepare\n\n#向maven私服中推送RELEASE版本\nmvn release:perform\n\n#prepare之后可以回退\nmvn release:rollback\n```\n\n使用`mvn release`命令时 如需要添加跳过测试之类的参数 需要使用`-Darguments`进行指定\n\n```bash\n mvn release:perform -Darguments=\"-Dmaven.test.skip=true -Dmaven.javadoc.skip=true\" \n```\n\n\n\n","slug":"maven-release版本管理插件","published":1,"updated":"2023-12-19T02:25:24.523Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqr001hfki47kz08zg6","content":"<p>使用maven管理项目时，完成开发后需要把项目发布到maven私服上去。</p>\n<p>手动<code>SNAPSHOT</code>版本开发时执行<code>mvn clean deploy</code>就可以部署到私服上。</p>\n<p>在开发是还会需要SNAPSHOT版本和RELEASE版本可以用<code>mvn versions:set -DnewVersion=0.1.1-SNAPSHOT</code>进行更改版本号</p>\n<p>当然maven还有更好的管理插件进行RELEASE管理<code>maven-release-plugin</code></p>\n<span id=\"more\"></span>\n\n<p>在pom.xml添加插件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-release-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在pom.xml添加scm信息(SCM：Software Configuration Management)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scm</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--项目url--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://192.168.8.65/xx/cli<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--代码版本仓库地址--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">connection</span>&gt;</span>scm:git:http://192.168.8.65/xx/cli.git<span class=\"tag\">&lt;/<span class=\"name\">connection</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">developerConnection</span>&gt;</span>scm:git:http://192.168.8.65/xx/cli.git<span class=\"tag\">&lt;/<span class=\"name\">developerConnection</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tag</span>&gt;</span>HEAD<span class=\"tag\">&lt;/<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">scm</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>配置好后可以使用mvn的scm命令管理</p>\n<p>添加scm插件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-scm-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#提交</span></span><br><span class=\"line\">mvn -Dmessage=<span class=\"string\">&quot;&lt;commit_log_here&gt;&quot;</span> scm:checkin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取最新版本：</span></span><br><span class=\"line\">mvn scm:update</span><br></pre></td></tr></table></figure>\n\n<p>SCM支持两种连接类型：connection 及 developerConnection</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-scm-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">           <span class=\"comment\">&lt;!--&lt;connectionType&gt;developerConnection&lt;/connectionType&gt;--&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">connectionType</span>&gt;</span>connection<span class=\"tag\">&lt;/<span class=\"name\">connectionType</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>项目是SNAPSHOT版本开发好之后就可以发布RELEASE版了，直接使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#把版本号改为RELEASE，向代码仓库推送新的版本</span></span><br><span class=\"line\">mvn release:prepare</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#向maven私服中推送RELEASE版本</span></span><br><span class=\"line\">mvn release:perform</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#prepare之后可以回退</span></span><br><span class=\"line\">mvn release:rollback</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>mvn release</code>命令时 如需要添加跳过测试之类的参数 需要使用<code>-Darguments</code>进行指定</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn release:perform -Darguments=<span class=\"string\">&quot;-Dmaven.test.skip=true -Dmaven.javadoc.skip=true&quot;</span> </span><br></pre></td></tr></table></figure>\n\n\n\n","length":1883,"excerpt":"<p>使用maven管理项目时，完成开发后需要把项目发布到maven私服上去。</p>\n<p>手动<code>SNAPSHOT</code>版本开发时执行<code>mvn clean deploy</code>就可以部署到私服上。</p>\n<p>在开发是还会需要SNAPSHOT版本和RELEASE版本可以用<code>mvn versions:set -DnewVersion=0.1.1-SNAPSHOT</code>进行更改版本号</p>\n<p>当然maven还有更好的管理插件进行RELEASE管理<code>maven-release-plugin</code></p>","more":"<p>在pom.xml添加插件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-release-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在pom.xml添加scm信息(SCM：Software Configuration Management)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scm</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--项目url--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://192.168.8.65/xx/cli<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--代码版本仓库地址--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">connection</span>&gt;</span>scm:git:http://192.168.8.65/xx/cli.git<span class=\"tag\">&lt;/<span class=\"name\">connection</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">developerConnection</span>&gt;</span>scm:git:http://192.168.8.65/xx/cli.git<span class=\"tag\">&lt;/<span class=\"name\">developerConnection</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tag</span>&gt;</span>HEAD<span class=\"tag\">&lt;/<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">scm</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>配置好后可以使用mvn的scm命令管理</p>\n<p>添加scm插件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-scm-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#提交</span></span><br><span class=\"line\">mvn -Dmessage=<span class=\"string\">&quot;&lt;commit_log_here&gt;&quot;</span> scm:checkin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取最新版本：</span></span><br><span class=\"line\">mvn scm:update</span><br></pre></td></tr></table></figure>\n\n<p>SCM支持两种连接类型：connection 及 developerConnection</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-scm-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">           <span class=\"comment\">&lt;!--&lt;connectionType&gt;developerConnection&lt;/connectionType&gt;--&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">connectionType</span>&gt;</span>connection<span class=\"tag\">&lt;/<span class=\"name\">connectionType</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>项目是SNAPSHOT版本开发好之后就可以发布RELEASE版了，直接使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#把版本号改为RELEASE，向代码仓库推送新的版本</span></span><br><span class=\"line\">mvn release:prepare</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#向maven私服中推送RELEASE版本</span></span><br><span class=\"line\">mvn release:perform</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#prepare之后可以回退</span></span><br><span class=\"line\">mvn release:rollback</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>mvn release</code>命令时 如需要添加跳过测试之类的参数 需要使用<code>-Darguments</code>进行指定</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn release:perform -Darguments=<span class=\"string\">&quot;-Dmaven.test.skip=true -Dmaven.javadoc.skip=true&quot;</span> </span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"maven-release版本管理插件","path":"2017/11/02/maven-release版本管理插件/","eyeCatchImage":null,"excerpt":"<p>使用maven管理项目时，完成开发后需要把项目发布到maven私服上去。</p>\n<p>手动<code>SNAPSHOT</code>版本开发时执行<code>mvn clean deploy</code>就可以部署到私服上。</p>\n<p>在开发是还会需要SNAPSHOT版本和RELEASE版本可以用<code>mvn versions:set -DnewVersion=0.1.1-SNAPSHOT</code>进行更改版本号</p>\n<p>当然maven还有更好的管理插件进行RELEASE管理<code>maven-release-plugin</code></p>","date":{"_isAMomentObject":true,"_i":"2017-11-02T10:22:49.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-11-02T10:22:49.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"maven","tags":["maven"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ArrayList与LinkedList的区别","date":"2017-12-05T03:58:10.000Z","keywords":"java","_content":"### java中`ArrayList`和`LinkedList`的区别\n\n1. <font style=\"color:green\">`ArrayList`是实现了基于动态数组的数据结构，`LinkedList`基于链表的数据结构。</font>\n1. 对于随机访问`get`和`set`，`ArrayList`觉得优于`LinkedList`，因为`LinkedList`要移动指针。\n1. 对于新增和删除操作`add`和`remove`，`LinedList`比较占优势，因为`ArrayList`要移动数据。\n\n### `ArrayList`使用动态数组存储数据，\n\n使用无参构造函数时默认大小是`10`，初始化时动态数组是个空数组`{}`\n\n当数组容量不够时会扩容，扩容方式是 `newCapacity=oldCapacity+(oldCapacity>>1)`, 当前数组大小*1.5\n所以当插入数据量比较大时可能会浪费一部分空间，在可以确定数据量大小时给定初始化容量大小可以提高效率\n在空间分配完毕后可以使用`trimToSize`去除掉多余的空间\n\n### `LinkedList`使用链表存储数据，\n\n内部使用一个`Node`的结构， 存储数据和前后节点信息\n\n```java\nprivate static class Node<E> {\n    E item;\n    Node<E> next;\n    Node<E> prev;\n\n    Node(Node<E> prev, E element, Node<E> next) {\n        this.item = element;\n        this.next = next;\n        this.prev = prev;\n    }\n}\n```\n\n### 总结 \n\n`ArrayList`和`LinkedList`在性能上各有优缺点，都有各自所适用的地方，总的说来可以描述如下： \n\n1．对`ArrayList`和`LinkedList`而言，在列表末尾增加一个元素所花的开销都是固定的。\n  1.1 对`ArrayList`而言，主要是在内部数组中增加一项，指向所添加的元素，偶尔可能会导致对数组重新进行分配；\n  1.2 而对`LinkedList`而言，这个开销是统一的，分配一个内部`Node`对象。\n\n2．在`ArrayList`的中间插入或删除一个元素意味着这个列表中剩余的元素都会被移动；而在`LinkedList`的中间插入或删除一个元素的开销是固定的。\n\n3．`LinkedList`不支持高效的随机元素访问。\n\n4．`ArrayList`的空间浪费主要体现在在list列表的结尾预留一定的容量空间，而`LinkedList`的空间花费则体现在它的每一个元素都需要消耗相当的空间\n\n可以这样说：\n\n<font style=\"color:green\">当操作是在一列数据的后面添加数据而不是在前面或中间,并且需要随机地访问其中的元素时,使用`ArrayList`会提供比较好的性能；</font><br/>\n\n<font style=\"color:green\">当你的操作是在一列数据的前面或中间添加或删除数据,并且按照顺序访问其中的元素时,就应该使用`LinkedList`了。</font>","source":"_posts/2017/12/ArrayList与LinkedList的区别.md","raw":"---\ntitle: ArrayList与LinkedList的区别\ndate: 2017-12-05 11:58:10\ntags: [jdk, java]\ncategories: java\nkeywords: java\n---\n### java中`ArrayList`和`LinkedList`的区别\n\n1. <font style=\"color:green\">`ArrayList`是实现了基于动态数组的数据结构，`LinkedList`基于链表的数据结构。</font>\n1. 对于随机访问`get`和`set`，`ArrayList`觉得优于`LinkedList`，因为`LinkedList`要移动指针。\n1. 对于新增和删除操作`add`和`remove`，`LinedList`比较占优势，因为`ArrayList`要移动数据。\n\n### `ArrayList`使用动态数组存储数据，\n\n使用无参构造函数时默认大小是`10`，初始化时动态数组是个空数组`{}`\n\n当数组容量不够时会扩容，扩容方式是 `newCapacity=oldCapacity+(oldCapacity>>1)`, 当前数组大小*1.5\n所以当插入数据量比较大时可能会浪费一部分空间，在可以确定数据量大小时给定初始化容量大小可以提高效率\n在空间分配完毕后可以使用`trimToSize`去除掉多余的空间\n\n### `LinkedList`使用链表存储数据，\n\n内部使用一个`Node`的结构， 存储数据和前后节点信息\n\n```java\nprivate static class Node<E> {\n    E item;\n    Node<E> next;\n    Node<E> prev;\n\n    Node(Node<E> prev, E element, Node<E> next) {\n        this.item = element;\n        this.next = next;\n        this.prev = prev;\n    }\n}\n```\n\n### 总结 \n\n`ArrayList`和`LinkedList`在性能上各有优缺点，都有各自所适用的地方，总的说来可以描述如下： \n\n1．对`ArrayList`和`LinkedList`而言，在列表末尾增加一个元素所花的开销都是固定的。\n  1.1 对`ArrayList`而言，主要是在内部数组中增加一项，指向所添加的元素，偶尔可能会导致对数组重新进行分配；\n  1.2 而对`LinkedList`而言，这个开销是统一的，分配一个内部`Node`对象。\n\n2．在`ArrayList`的中间插入或删除一个元素意味着这个列表中剩余的元素都会被移动；而在`LinkedList`的中间插入或删除一个元素的开销是固定的。\n\n3．`LinkedList`不支持高效的随机元素访问。\n\n4．`ArrayList`的空间浪费主要体现在在list列表的结尾预留一定的容量空间，而`LinkedList`的空间花费则体现在它的每一个元素都需要消耗相当的空间\n\n可以这样说：\n\n<font style=\"color:green\">当操作是在一列数据的后面添加数据而不是在前面或中间,并且需要随机地访问其中的元素时,使用`ArrayList`会提供比较好的性能；</font><br/>\n\n<font style=\"color:green\">当你的操作是在一列数据的前面或中间添加或删除数据,并且按照顺序访问其中的元素时,就应该使用`LinkedList`了。</font>","slug":"ArrayList与LinkedList的区别","published":1,"updated":"2023-12-19T02:25:24.524Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqs001lfki4a6apbamv","content":"<h3 id=\"java中ArrayList和LinkedList的区别\"><a href=\"#java中ArrayList和LinkedList的区别\" class=\"headerlink\" title=\"java中ArrayList和LinkedList的区别\"></a>java中<code>ArrayList</code>和<code>LinkedList</code>的区别</h3><ol>\n<li><font style=\"color:green\"><code>ArrayList</code>是实现了基于动态数组的数据结构，<code>LinkedList</code>基于链表的数据结构。</font></li>\n<li>对于随机访问<code>get</code>和<code>set</code>，<code>ArrayList</code>觉得优于<code>LinkedList</code>，因为<code>LinkedList</code>要移动指针。</li>\n<li>对于新增和删除操作<code>add</code>和<code>remove</code>，<code>LinedList</code>比较占优势，因为<code>ArrayList</code>要移动数据。</li>\n</ol>\n<h3 id=\"ArrayList使用动态数组存储数据，\"><a href=\"#ArrayList使用动态数组存储数据，\" class=\"headerlink\" title=\"ArrayList使用动态数组存储数据，\"></a><code>ArrayList</code>使用动态数组存储数据，</h3><p>使用无参构造函数时默认大小是<code>10</code>，初始化时动态数组是个空数组<code>&#123;&#125;</code></p>\n<p>当数组容量不够时会扩容，扩容方式是 <code>newCapacity=oldCapacity+(oldCapacity&gt;&gt;1)</code>, 当前数组大小*1.5<br>所以当插入数据量比较大时可能会浪费一部分空间，在可以确定数据量大小时给定初始化容量大小可以提高效率<br>在空间分配完毕后可以使用<code>trimToSize</code>去除掉多余的空间</p>\n<h3 id=\"LinkedList使用链表存储数据，\"><a href=\"#LinkedList使用链表存储数据，\" class=\"headerlink\" title=\"LinkedList使用链表存储数据，\"></a><code>LinkedList</code>使用链表存储数据，</h3><p>内部使用一个<code>Node</code>的结构， 存储数据和前后节点信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;E&gt; &#123;</span><br><span class=\"line\">    E item;</span><br><span class=\"line\">    Node&lt;E&gt; next;</span><br><span class=\"line\">    Node&lt;E&gt; prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.item = element;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.next = next;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.prev = prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>ArrayList</code>和<code>LinkedList</code>在性能上各有优缺点，都有各自所适用的地方，总的说来可以描述如下： </p>\n<p>1．对<code>ArrayList</code>和<code>LinkedList</code>而言，在列表末尾增加一个元素所花的开销都是固定的。<br>  1.1 对<code>ArrayList</code>而言，主要是在内部数组中增加一项，指向所添加的元素，偶尔可能会导致对数组重新进行分配；<br>  1.2 而对<code>LinkedList</code>而言，这个开销是统一的，分配一个内部<code>Node</code>对象。</p>\n<p>2．在<code>ArrayList</code>的中间插入或删除一个元素意味着这个列表中剩余的元素都会被移动；而在<code>LinkedList</code>的中间插入或删除一个元素的开销是固定的。</p>\n<p>3．<code>LinkedList</code>不支持高效的随机元素访问。</p>\n<p>4．<code>ArrayList</code>的空间浪费主要体现在在list列表的结尾预留一定的容量空间，而<code>LinkedList</code>的空间花费则体现在它的每一个元素都需要消耗相当的空间</p>\n<p>可以这样说：</p>\n<p><font style=\"color:green\">当操作是在一列数据的后面添加数据而不是在前面或中间,并且需要随机地访问其中的元素时,使用<code>ArrayList</code>会提供比较好的性能；</font><br></p>\n<p><font style=\"color:green\">当你的操作是在一列数据的前面或中间添加或删除数据,并且按照顺序访问其中的元素时,就应该使用<code>LinkedList</code>了。</font></p>\n","length":1150,"excerpt":"","more":"<h3 id=\"java中ArrayList和LinkedList的区别\"><a href=\"#java中ArrayList和LinkedList的区别\" class=\"headerlink\" title=\"java中ArrayList和LinkedList的区别\"></a>java中<code>ArrayList</code>和<code>LinkedList</code>的区别</h3><ol>\n<li><font style=\"color:green\"><code>ArrayList</code>是实现了基于动态数组的数据结构，<code>LinkedList</code>基于链表的数据结构。</font></li>\n<li>对于随机访问<code>get</code>和<code>set</code>，<code>ArrayList</code>觉得优于<code>LinkedList</code>，因为<code>LinkedList</code>要移动指针。</li>\n<li>对于新增和删除操作<code>add</code>和<code>remove</code>，<code>LinedList</code>比较占优势，因为<code>ArrayList</code>要移动数据。</li>\n</ol>\n<h3 id=\"ArrayList使用动态数组存储数据，\"><a href=\"#ArrayList使用动态数组存储数据，\" class=\"headerlink\" title=\"ArrayList使用动态数组存储数据，\"></a><code>ArrayList</code>使用动态数组存储数据，</h3><p>使用无参构造函数时默认大小是<code>10</code>，初始化时动态数组是个空数组<code>&#123;&#125;</code></p>\n<p>当数组容量不够时会扩容，扩容方式是 <code>newCapacity=oldCapacity+(oldCapacity&gt;&gt;1)</code>, 当前数组大小*1.5<br>所以当插入数据量比较大时可能会浪费一部分空间，在可以确定数据量大小时给定初始化容量大小可以提高效率<br>在空间分配完毕后可以使用<code>trimToSize</code>去除掉多余的空间</p>\n<h3 id=\"LinkedList使用链表存储数据，\"><a href=\"#LinkedList使用链表存储数据，\" class=\"headerlink\" title=\"LinkedList使用链表存储数据，\"></a><code>LinkedList</code>使用链表存储数据，</h3><p>内部使用一个<code>Node</code>的结构， 存储数据和前后节点信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;E&gt; &#123;</span><br><span class=\"line\">    E item;</span><br><span class=\"line\">    Node&lt;E&gt; next;</span><br><span class=\"line\">    Node&lt;E&gt; prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.item = element;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.next = next;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.prev = prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>ArrayList</code>和<code>LinkedList</code>在性能上各有优缺点，都有各自所适用的地方，总的说来可以描述如下： </p>\n<p>1．对<code>ArrayList</code>和<code>LinkedList</code>而言，在列表末尾增加一个元素所花的开销都是固定的。<br>  1.1 对<code>ArrayList</code>而言，主要是在内部数组中增加一项，指向所添加的元素，偶尔可能会导致对数组重新进行分配；<br>  1.2 而对<code>LinkedList</code>而言，这个开销是统一的，分配一个内部<code>Node</code>对象。</p>\n<p>2．在<code>ArrayList</code>的中间插入或删除一个元素意味着这个列表中剩余的元素都会被移动；而在<code>LinkedList</code>的中间插入或删除一个元素的开销是固定的。</p>\n<p>3．<code>LinkedList</code>不支持高效的随机元素访问。</p>\n<p>4．<code>ArrayList</code>的空间浪费主要体现在在list列表的结尾预留一定的容量空间，而<code>LinkedList</code>的空间花费则体现在它的每一个元素都需要消耗相当的空间</p>\n<p>可以这样说：</p>\n<p><font style=\"color:green\">当操作是在一列数据的后面添加数据而不是在前面或中间,并且需要随机地访问其中的元素时,使用<code>ArrayList</code>会提供比较好的性能；</font><br></p>\n<p><font style=\"color:green\">当你的操作是在一列数据的前面或中间添加或删除数据,并且按照顺序访问其中的元素时,就应该使用<code>LinkedList</code>了。</font></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"ArrayList与LinkedList的区别","path":"2017/12/05/ArrayList与LinkedList的区别/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2017-12-05T03:58:10.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-12-05T03:58:10.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"java","tags":["jdk","java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"zuul入门","date":"2017-11-03T02:24:22.000Z","keywords":"zuul, spring cloud","_content":"\nzuul是spring cloud的网关组件，用户在微服务中提供一个统一的对外接口，官方对zuul的说明是 \n\n`Zuul is an edge service that provides dynamic routing, monitoring, resiliency, security, and more. `\n<!--more-->\n## ZuulFilter\nzuul是的核心就是`com.netflix.zuul.ZuulFilter`,对于zuul网关的相关功能都是通过扩展这个ZuulFilter来实现的\n\nZuulFilter只需要实现几个方法就行\n```java\npublic abstract class ZuulFilter implements IZuulFilter, Comparable<ZuulFilter> {\n    /**\n     * 指明过滤器的类型 zuul定义类四种类型 pre, route, post, error\n     * 可以在 com.netflix.zuul.FilterProcessor 中看到\n     */\n    abstract public String filterType();\n    /**\n     * filter的排序序号 在同类型中 filterOrder 越小约先执行\n     */\n    abstract public int filterOrder();\n    /**\n     * 是否应该执行Filter\n     */\n    abstract public boolean shouldFilter();\n\n    /**\n     * 如果 shouldFilter() 为 true, 才会调用这个方法.\n     * 这个方法是一个ZuulFilter的核心方法\n     * @return 随意返回，反正zuul会忽略这个返回值\n     */\n    abstract public Object run();\n}\n\n```\n### 编写ZuulFilter\n\n例如实现一个判断请求是否带有accessToken的Filter \n\n```java\npublic class AuthenticationFilter extends ZuulPreFilter {\n    public String filterType(){\n        return \"pre\";\n    }\n    public int filterOrder(){\n        return 0;\n    }\n    public boolean shouldFilter(){\n        return true;\n    }\n    public Object run(){\n        RequestContext ctx = RequestContext.getCurrentContext();\n        HttpServletRequest request = ctx.getRequest();\n        String accessToken = request.getParameter(\"access_token\");\n        if(accessToken == null || \"\".equals(accessToken)){\n            ctx.setSendZuulResponse(false);\n            ctx.setResponseStatusCode(403);\n            return null;\n        }\n        return null;\n    }\n\n}\n```\n\n### 注册ZuulFilter\n实现的`ZuulFilter`都通过`com.netflix.zuul.filters.FilterRegistry#put(String, ZuulFilter)`进行注册\n\n`FilterRegistry`是个单例\n\n直接通过`com.netflix.zuul.filters.FilterRegistry#instance`就可以获取实例\n\nZuul里面单例用的比较多\n\n## 配置Zuul\n\n要使用Zuul 需要配置一个`com.netflix.zuul.context.ContextLifecycleFilter`和一个 \n\n`com.netflix.zuul.filters.ZuulServletFilter` \n\n或者 `com.netflix.zuul.http.ZuulServlet`\n\n`ZuulServlertFilter`和`ZuulServlet`二选一就行 这两个就是请求的入口\n\n`ContextLifecycleFilter`主要是对`com.netflix.zuul.context.RequestContext`的生命周期做管理\n\n`com.netflix.zuul.context.RequestContext`是一个上下问对象，在`ZuulFilter`中可以使用`RequestContext#getInstacne()`获取到当前的请求上下文，\n`RequestContext`内部使用`ThreadLocal`来实现\n\n配置了`ZuulServlertFilter`或者`ZuulServlet`之后 \n\n### ZuulServlet\n以`ZuulServlet`来说，`service`方法就是核心\n\n在`service`方法中主要就是初始化`RequestContext`以及调用各个类型的`ZuulFilter` \n\n```java\ntry {\n    init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);\n\n    // Marks this request as having passed through the \"Zuul engine\", as opposed to servlets\n    // explicitly bound in web.xml, for which requests will not have the same data attached\n    RequestContext context = RequestContext.getCurrentContext();\n    context.setZuulEngineRan();\n\n    try {\n        preRoute();\n    } catch (ZuulException e) {\n        error(e);\n        postRoute();\n        return;\n    }\n    try {\n        route();\n    } catch (ZuulException e) {\n        error(e);\n        postRoute();\n        return;\n    }\n    try {\n        postRoute();\n    } catch (ZuulException e) {\n        error(e);\n        return;\n    }\n} catch (Throwable e) {\n    error(new ZuulException(e, 500, \"UNHANDLED_EXCEPTION_\" + e.getClass().getName()));\n} finally {\n    RequestContext.getCurrentContext().unset();\n}\n```\n在`ZuulServlet`内部持有个`com.netflix.zuul.ZuulRunner`对象\n\n各个`xxRoute()`方法都是委托给`ZuulRunner`的方法去调用\n\n`ZuulRunner`在委托给`FilterProcessor`去调用， `FilterProcessor`是一个单例\n\n`FilterProcessor`使用`FilterLoad`最后调用到`FilterRegistry`获取注册的Filter进行调用\n\n\n","source":"_posts/2017/11/zuul入门.md","raw":"---\ntitle: zuul入门\ndate: 2017-11-03 10:24:22\ntags: [spring cloud, zuul]\ncategories: spring cloud\nkeywords: zuul, spring cloud\n---\n\nzuul是spring cloud的网关组件，用户在微服务中提供一个统一的对外接口，官方对zuul的说明是 \n\n`Zuul is an edge service that provides dynamic routing, monitoring, resiliency, security, and more. `\n<!--more-->\n## ZuulFilter\nzuul是的核心就是`com.netflix.zuul.ZuulFilter`,对于zuul网关的相关功能都是通过扩展这个ZuulFilter来实现的\n\nZuulFilter只需要实现几个方法就行\n```java\npublic abstract class ZuulFilter implements IZuulFilter, Comparable<ZuulFilter> {\n    /**\n     * 指明过滤器的类型 zuul定义类四种类型 pre, route, post, error\n     * 可以在 com.netflix.zuul.FilterProcessor 中看到\n     */\n    abstract public String filterType();\n    /**\n     * filter的排序序号 在同类型中 filterOrder 越小约先执行\n     */\n    abstract public int filterOrder();\n    /**\n     * 是否应该执行Filter\n     */\n    abstract public boolean shouldFilter();\n\n    /**\n     * 如果 shouldFilter() 为 true, 才会调用这个方法.\n     * 这个方法是一个ZuulFilter的核心方法\n     * @return 随意返回，反正zuul会忽略这个返回值\n     */\n    abstract public Object run();\n}\n\n```\n### 编写ZuulFilter\n\n例如实现一个判断请求是否带有accessToken的Filter \n\n```java\npublic class AuthenticationFilter extends ZuulPreFilter {\n    public String filterType(){\n        return \"pre\";\n    }\n    public int filterOrder(){\n        return 0;\n    }\n    public boolean shouldFilter(){\n        return true;\n    }\n    public Object run(){\n        RequestContext ctx = RequestContext.getCurrentContext();\n        HttpServletRequest request = ctx.getRequest();\n        String accessToken = request.getParameter(\"access_token\");\n        if(accessToken == null || \"\".equals(accessToken)){\n            ctx.setSendZuulResponse(false);\n            ctx.setResponseStatusCode(403);\n            return null;\n        }\n        return null;\n    }\n\n}\n```\n\n### 注册ZuulFilter\n实现的`ZuulFilter`都通过`com.netflix.zuul.filters.FilterRegistry#put(String, ZuulFilter)`进行注册\n\n`FilterRegistry`是个单例\n\n直接通过`com.netflix.zuul.filters.FilterRegistry#instance`就可以获取实例\n\nZuul里面单例用的比较多\n\n## 配置Zuul\n\n要使用Zuul 需要配置一个`com.netflix.zuul.context.ContextLifecycleFilter`和一个 \n\n`com.netflix.zuul.filters.ZuulServletFilter` \n\n或者 `com.netflix.zuul.http.ZuulServlet`\n\n`ZuulServlertFilter`和`ZuulServlet`二选一就行 这两个就是请求的入口\n\n`ContextLifecycleFilter`主要是对`com.netflix.zuul.context.RequestContext`的生命周期做管理\n\n`com.netflix.zuul.context.RequestContext`是一个上下问对象，在`ZuulFilter`中可以使用`RequestContext#getInstacne()`获取到当前的请求上下文，\n`RequestContext`内部使用`ThreadLocal`来实现\n\n配置了`ZuulServlertFilter`或者`ZuulServlet`之后 \n\n### ZuulServlet\n以`ZuulServlet`来说，`service`方法就是核心\n\n在`service`方法中主要就是初始化`RequestContext`以及调用各个类型的`ZuulFilter` \n\n```java\ntry {\n    init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);\n\n    // Marks this request as having passed through the \"Zuul engine\", as opposed to servlets\n    // explicitly bound in web.xml, for which requests will not have the same data attached\n    RequestContext context = RequestContext.getCurrentContext();\n    context.setZuulEngineRan();\n\n    try {\n        preRoute();\n    } catch (ZuulException e) {\n        error(e);\n        postRoute();\n        return;\n    }\n    try {\n        route();\n    } catch (ZuulException e) {\n        error(e);\n        postRoute();\n        return;\n    }\n    try {\n        postRoute();\n    } catch (ZuulException e) {\n        error(e);\n        return;\n    }\n} catch (Throwable e) {\n    error(new ZuulException(e, 500, \"UNHANDLED_EXCEPTION_\" + e.getClass().getName()));\n} finally {\n    RequestContext.getCurrentContext().unset();\n}\n```\n在`ZuulServlet`内部持有个`com.netflix.zuul.ZuulRunner`对象\n\n各个`xxRoute()`方法都是委托给`ZuulRunner`的方法去调用\n\n`ZuulRunner`在委托给`FilterProcessor`去调用， `FilterProcessor`是一个单例\n\n`FilterProcessor`使用`FilterLoad`最后调用到`FilterRegistry`获取注册的Filter进行调用\n\n\n","slug":"zuul入门","published":1,"updated":"2023-12-19T02:25:24.523Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqt001ofki45x830sy4","content":"<p>zuul是spring cloud的网关组件，用户在微服务中提供一个统一的对外接口，官方对zuul的说明是 </p>\n<p><code>Zuul is an edge service that provides dynamic routing, monitoring, resiliency, security, and more. </code></p>\n<span id=\"more\"></span>\n<h2 id=\"ZuulFilter\"><a href=\"#ZuulFilter\" class=\"headerlink\" title=\"ZuulFilter\"></a>ZuulFilter</h2><p>zuul是的核心就是<code>com.netflix.zuul.ZuulFilter</code>,对于zuul网关的相关功能都是通过扩展这个ZuulFilter来实现的</p>\n<p>ZuulFilter只需要实现几个方法就行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZuulFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IZuulFilter</span>, Comparable&lt;ZuulFilter&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指明过滤器的类型 zuul定义类四种类型 pre, route, post, error</span></span><br><span class=\"line\"><span class=\"comment\">     * 可以在 com.netflix.zuul.FilterProcessor 中看到</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> String <span class=\"title function_\">filterType</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * filter的排序序号 在同类型中 filterOrder 越小约先执行</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">filterOrder</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否应该执行Filter</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">shouldFilter</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果 shouldFilter() 为 true, 才会调用这个方法.</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个方法是一个ZuulFilter的核心方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 随意返回，反正zuul会忽略这个返回值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> Object <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"编写ZuulFilter\"><a href=\"#编写ZuulFilter\" class=\"headerlink\" title=\"编写ZuulFilter\"></a>编写ZuulFilter</h3><p>例如实现一个判断请求是否带有accessToken的Filter </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AuthenticationFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ZuulPreFilter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">filterType</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;pre&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">filterOrder</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">shouldFilter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">RequestContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> RequestContext.getCurrentContext();</span><br><span class=\"line\">        <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> ctx.getRequest();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">accessToken</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;access_token&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(accessToken == <span class=\"literal\">null</span> || <span class=\"string\">&quot;&quot;</span>.equals(accessToken))&#123;</span><br><span class=\"line\">            ctx.setSendZuulResponse(<span class=\"literal\">false</span>);</span><br><span class=\"line\">            ctx.setResponseStatusCode(<span class=\"number\">403</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注册ZuulFilter\"><a href=\"#注册ZuulFilter\" class=\"headerlink\" title=\"注册ZuulFilter\"></a>注册ZuulFilter</h3><p>实现的<code>ZuulFilter</code>都通过<code>com.netflix.zuul.filters.FilterRegistry#put(String, ZuulFilter)</code>进行注册</p>\n<p><code>FilterRegistry</code>是个单例</p>\n<p>直接通过<code>com.netflix.zuul.filters.FilterRegistry#instance</code>就可以获取实例</p>\n<p>Zuul里面单例用的比较多</p>\n<h2 id=\"配置Zuul\"><a href=\"#配置Zuul\" class=\"headerlink\" title=\"配置Zuul\"></a>配置Zuul</h2><p>要使用Zuul 需要配置一个<code>com.netflix.zuul.context.ContextLifecycleFilter</code>和一个 </p>\n<p><code>com.netflix.zuul.filters.ZuulServletFilter</code> </p>\n<p>或者 <code>com.netflix.zuul.http.ZuulServlet</code></p>\n<p><code>ZuulServlertFilter</code>和<code>ZuulServlet</code>二选一就行 这两个就是请求的入口</p>\n<p><code>ContextLifecycleFilter</code>主要是对<code>com.netflix.zuul.context.RequestContext</code>的生命周期做管理</p>\n<p><code>com.netflix.zuul.context.RequestContext</code>是一个上下问对象，在<code>ZuulFilter</code>中可以使用<code>RequestContext#getInstacne()</code>获取到当前的请求上下文，<br><code>RequestContext</code>内部使用<code>ThreadLocal</code>来实现</p>\n<p>配置了<code>ZuulServlertFilter</code>或者<code>ZuulServlet</code>之后 </p>\n<h3 id=\"ZuulServlet\"><a href=\"#ZuulServlet\" class=\"headerlink\" title=\"ZuulServlet\"></a>ZuulServlet</h3><p>以<code>ZuulServlet</code>来说，<code>service</code>方法就是核心</p>\n<p>在<code>service</code>方法中主要就是初始化<code>RequestContext</code>以及调用各个类型的<code>ZuulFilter</code> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Marks this request as having passed through the &quot;Zuul engine&quot;, as opposed to servlets</span></span><br><span class=\"line\">    <span class=\"comment\">// explicitly bound in web.xml, for which requests will not have the same data attached</span></span><br><span class=\"line\">    <span class=\"type\">RequestContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> RequestContext.getCurrentContext();</span><br><span class=\"line\">    context.setZuulEngineRan();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        preRoute();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ZuulException e) &#123;</span><br><span class=\"line\">        error(e);</span><br><span class=\"line\">        postRoute();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        route();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ZuulException e) &#123;</span><br><span class=\"line\">        error(e);</span><br><span class=\"line\">        postRoute();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        postRoute();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ZuulException e) &#123;</span><br><span class=\"line\">        error(e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">    error(<span class=\"keyword\">new</span> <span class=\"title class_\">ZuulException</span>(e, <span class=\"number\">500</span>, <span class=\"string\">&quot;UNHANDLED_EXCEPTION_&quot;</span> + e.getClass().getName()));</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    RequestContext.getCurrentContext().unset();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>ZuulServlet</code>内部持有个<code>com.netflix.zuul.ZuulRunner</code>对象</p>\n<p>各个<code>xxRoute()</code>方法都是委托给<code>ZuulRunner</code>的方法去调用</p>\n<p><code>ZuulRunner</code>在委托给<code>FilterProcessor</code>去调用， <code>FilterProcessor</code>是一个单例</p>\n<p><code>FilterProcessor</code>使用<code>FilterLoad</code>最后调用到<code>FilterRegistry</code>获取注册的Filter进行调用</p>\n","length":3078,"excerpt":"<p>zuul是spring cloud的网关组件，用户在微服务中提供一个统一的对外接口，官方对zuul的说明是 </p>\n<p><code>Zuul is an edge service that provides dynamic routing, monitoring, resiliency, security, and more. </code></p>","more":"<h2 id=\"ZuulFilter\"><a href=\"#ZuulFilter\" class=\"headerlink\" title=\"ZuulFilter\"></a>ZuulFilter</h2><p>zuul是的核心就是<code>com.netflix.zuul.ZuulFilter</code>,对于zuul网关的相关功能都是通过扩展这个ZuulFilter来实现的</p>\n<p>ZuulFilter只需要实现几个方法就行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZuulFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IZuulFilter</span>, Comparable&lt;ZuulFilter&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指明过滤器的类型 zuul定义类四种类型 pre, route, post, error</span></span><br><span class=\"line\"><span class=\"comment\">     * 可以在 com.netflix.zuul.FilterProcessor 中看到</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> String <span class=\"title function_\">filterType</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * filter的排序序号 在同类型中 filterOrder 越小约先执行</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">filterOrder</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否应该执行Filter</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">shouldFilter</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果 shouldFilter() 为 true, 才会调用这个方法.</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个方法是一个ZuulFilter的核心方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 随意返回，反正zuul会忽略这个返回值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> Object <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"编写ZuulFilter\"><a href=\"#编写ZuulFilter\" class=\"headerlink\" title=\"编写ZuulFilter\"></a>编写ZuulFilter</h3><p>例如实现一个判断请求是否带有accessToken的Filter </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AuthenticationFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ZuulPreFilter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">filterType</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;pre&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">filterOrder</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">shouldFilter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">RequestContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> RequestContext.getCurrentContext();</span><br><span class=\"line\">        <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> ctx.getRequest();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">accessToken</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;access_token&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(accessToken == <span class=\"literal\">null</span> || <span class=\"string\">&quot;&quot;</span>.equals(accessToken))&#123;</span><br><span class=\"line\">            ctx.setSendZuulResponse(<span class=\"literal\">false</span>);</span><br><span class=\"line\">            ctx.setResponseStatusCode(<span class=\"number\">403</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注册ZuulFilter\"><a href=\"#注册ZuulFilter\" class=\"headerlink\" title=\"注册ZuulFilter\"></a>注册ZuulFilter</h3><p>实现的<code>ZuulFilter</code>都通过<code>com.netflix.zuul.filters.FilterRegistry#put(String, ZuulFilter)</code>进行注册</p>\n<p><code>FilterRegistry</code>是个单例</p>\n<p>直接通过<code>com.netflix.zuul.filters.FilterRegistry#instance</code>就可以获取实例</p>\n<p>Zuul里面单例用的比较多</p>\n<h2 id=\"配置Zuul\"><a href=\"#配置Zuul\" class=\"headerlink\" title=\"配置Zuul\"></a>配置Zuul</h2><p>要使用Zuul 需要配置一个<code>com.netflix.zuul.context.ContextLifecycleFilter</code>和一个 </p>\n<p><code>com.netflix.zuul.filters.ZuulServletFilter</code> </p>\n<p>或者 <code>com.netflix.zuul.http.ZuulServlet</code></p>\n<p><code>ZuulServlertFilter</code>和<code>ZuulServlet</code>二选一就行 这两个就是请求的入口</p>\n<p><code>ContextLifecycleFilter</code>主要是对<code>com.netflix.zuul.context.RequestContext</code>的生命周期做管理</p>\n<p><code>com.netflix.zuul.context.RequestContext</code>是一个上下问对象，在<code>ZuulFilter</code>中可以使用<code>RequestContext#getInstacne()</code>获取到当前的请求上下文，<br><code>RequestContext</code>内部使用<code>ThreadLocal</code>来实现</p>\n<p>配置了<code>ZuulServlertFilter</code>或者<code>ZuulServlet</code>之后 </p>\n<h3 id=\"ZuulServlet\"><a href=\"#ZuulServlet\" class=\"headerlink\" title=\"ZuulServlet\"></a>ZuulServlet</h3><p>以<code>ZuulServlet</code>来说，<code>service</code>方法就是核心</p>\n<p>在<code>service</code>方法中主要就是初始化<code>RequestContext</code>以及调用各个类型的<code>ZuulFilter</code> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Marks this request as having passed through the &quot;Zuul engine&quot;, as opposed to servlets</span></span><br><span class=\"line\">    <span class=\"comment\">// explicitly bound in web.xml, for which requests will not have the same data attached</span></span><br><span class=\"line\">    <span class=\"type\">RequestContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> RequestContext.getCurrentContext();</span><br><span class=\"line\">    context.setZuulEngineRan();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        preRoute();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ZuulException e) &#123;</span><br><span class=\"line\">        error(e);</span><br><span class=\"line\">        postRoute();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        route();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ZuulException e) &#123;</span><br><span class=\"line\">        error(e);</span><br><span class=\"line\">        postRoute();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        postRoute();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ZuulException e) &#123;</span><br><span class=\"line\">        error(e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">    error(<span class=\"keyword\">new</span> <span class=\"title class_\">ZuulException</span>(e, <span class=\"number\">500</span>, <span class=\"string\">&quot;UNHANDLED_EXCEPTION_&quot;</span> + e.getClass().getName()));</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    RequestContext.getCurrentContext().unset();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>ZuulServlet</code>内部持有个<code>com.netflix.zuul.ZuulRunner</code>对象</p>\n<p>各个<code>xxRoute()</code>方法都是委托给<code>ZuulRunner</code>的方法去调用</p>\n<p><code>ZuulRunner</code>在委托给<code>FilterProcessor</code>去调用， <code>FilterProcessor</code>是一个单例</p>\n<p><code>FilterProcessor</code>使用<code>FilterLoad</code>最后调用到<code>FilterRegistry</code>获取注册的Filter进行调用</p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"zuul入门","path":"2017/11/03/zuul入门/","eyeCatchImage":null,"excerpt":"<p>zuul是spring cloud的网关组件，用户在微服务中提供一个统一的对外接口，官方对zuul的说明是 </p>\n<p><code>Zuul is an edge service that provides dynamic routing, monitoring, resiliency, security, and more. </code></p>","date":{"_isAMomentObject":true,"_i":"2017-11-03T02:24:22.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-11-03T02:24:22.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"spring cloud","tags":["spring cloud","zuul"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"用karma+jasmine构建自动化测试环境","date":"2017-02-17T03:28:26.000Z","keywords":["测试 karma jasmine"],"_content":"使用karma+jasmine 构建前端自动化测试环境\n\n在项目下先安装karma 和 jasmine\n```shell\nnpm install karma karma-jasmine karma-chrome-launcher --save-dev\n```\n安装karma的命令行\n```shell\nnpm install karma-cli -g\n```\n\n在项目跟路径下初始化karma\n```shell\nkarma init\n```\n需要选择初始化的选项，根据自己的需要设置初始化的设置(会生成一个karma.conf.js)\n\n安装karma-coverage 生成代码覆盖率报告\n```shell\nnpm install karma-coverage --save-dev\n```\n安装karma-coverage后需要在karma.conf.js 添加相应的配置信息\n\n安装完成后，编写源文件以及相对应的测试文件\n\n开始执行测试(会打开chrome 修改了源文件或测试文件后会自动重新执行测试)\n```shell\nkarma start karma.conf.js\n```\n\nkarma.conf.js 具体内容\n<!--more-->\n```javascript\nmodule.exports = function(config) {\n  config.set({\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['jasmine'],\n\n    // list of files / patterns to load in the browser\n    // 要测试的源文件与测试文件的路径\n    files: [\n      'client/sdk/dist/*.js',\n      'spec/**/*[sS]pec.js'\n    ],\n    // list of files to exclude\n    exclude: [\n    ],\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    // 使用karma-coverage 生成对对应的源文件的 覆盖率报告\n    preprocessors: {\n      'client/sdk/dist/admin.js':'coverage'\n    },\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: ['progress','coverage'],\n    // karma-coverage 生成报告的设置\n    coverageReporter: {\n      type : 'html',\n      dir : 'spec/reporter/coverage/'\n    },\n    // web server port\n    port: 9876,\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: ['Chrome'],\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: false,\n    // Concurrency level\n    // how many browser should be started simultaneous\n    concurrency: Infinity\n  })\n}\n```\n","source":"_posts/2017/2/karma-jasmine-build-an-automated-test-environment.md","raw":"---\ntitle: 用karma+jasmine构建自动化测试环境\ndate: 2017-02-17 11:28:26\ntags: [test karma jamine]\ncategories: [test]\nkeywords: [测试 karma jasmine]\n---\n使用karma+jasmine 构建前端自动化测试环境\n\n在项目下先安装karma 和 jasmine\n```shell\nnpm install karma karma-jasmine karma-chrome-launcher --save-dev\n```\n安装karma的命令行\n```shell\nnpm install karma-cli -g\n```\n\n在项目跟路径下初始化karma\n```shell\nkarma init\n```\n需要选择初始化的选项，根据自己的需要设置初始化的设置(会生成一个karma.conf.js)\n\n安装karma-coverage 生成代码覆盖率报告\n```shell\nnpm install karma-coverage --save-dev\n```\n安装karma-coverage后需要在karma.conf.js 添加相应的配置信息\n\n安装完成后，编写源文件以及相对应的测试文件\n\n开始执行测试(会打开chrome 修改了源文件或测试文件后会自动重新执行测试)\n```shell\nkarma start karma.conf.js\n```\n\nkarma.conf.js 具体内容\n<!--more-->\n```javascript\nmodule.exports = function(config) {\n  config.set({\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['jasmine'],\n\n    // list of files / patterns to load in the browser\n    // 要测试的源文件与测试文件的路径\n    files: [\n      'client/sdk/dist/*.js',\n      'spec/**/*[sS]pec.js'\n    ],\n    // list of files to exclude\n    exclude: [\n    ],\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    // 使用karma-coverage 生成对对应的源文件的 覆盖率报告\n    preprocessors: {\n      'client/sdk/dist/admin.js':'coverage'\n    },\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: ['progress','coverage'],\n    // karma-coverage 生成报告的设置\n    coverageReporter: {\n      type : 'html',\n      dir : 'spec/reporter/coverage/'\n    },\n    // web server port\n    port: 9876,\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: ['Chrome'],\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: false,\n    // Concurrency level\n    // how many browser should be started simultaneous\n    concurrency: Infinity\n  })\n}\n```\n","slug":"2017-2-karma-jasmine-build-an-automated-test-environment","published":1,"updated":"2023-12-19T02:25:24.525Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqu001sfki49c9w88gp","content":"<p>使用karma+jasmine 构建前端自动化测试环境</p>\n<p>在项目下先安装karma 和 jasmine</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma karma-jasmine karma-chrome-launcher --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装karma的命令行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>在项目跟路径下初始化karma</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">karma init</span><br></pre></td></tr></table></figure>\n<p>需要选择初始化的选项，根据自己的需要设置初始化的设置(会生成一个karma.conf.js)</p>\n<p>安装karma-coverage 生成代码覆盖率报告</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma-coverage --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装karma-coverage后需要在karma.conf.js 添加相应的配置信息</p>\n<p>安装完成后，编写源文件以及相对应的测试文件</p>\n<p>开始执行测试(会打开chrome 修改了源文件或测试文件后会自动重新执行测试)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">karma start karma.conf.js</span><br></pre></td></tr></table></figure>\n\n<p>karma.conf.js 具体内容</p>\n<span id=\"more\"></span>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">  config.<span class=\"title function_\">set</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// base path that will be used to resolve all patterns (eg. files, exclude)</span></span><br><span class=\"line\">    <span class=\"attr\">basePath</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// frameworks to use</span></span><br><span class=\"line\">    <span class=\"comment\">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span></span><br><span class=\"line\">    <span class=\"attr\">frameworks</span>: [<span class=\"string\">&#x27;jasmine&#x27;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// list of files / patterns to load in the browser</span></span><br><span class=\"line\">    <span class=\"comment\">// 要测试的源文件与测试文件的路径</span></span><br><span class=\"line\">    <span class=\"attr\">files</span>: [</span><br><span class=\"line\">      <span class=\"string\">&#x27;client/sdk/dist/*.js&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;spec/**/*[sS]pec.js&#x27;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// list of files to exclude</span></span><br><span class=\"line\">    <span class=\"attr\">exclude</span>: [</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// preprocess matching files before serving them to the browser</span></span><br><span class=\"line\">    <span class=\"comment\">// available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用karma-coverage 生成对对应的源文件的 覆盖率报告</span></span><br><span class=\"line\">    <span class=\"attr\">preprocessors</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;client/sdk/dist/admin.js&#x27;</span>:<span class=\"string\">&#x27;coverage&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// test results reporter to use</span></span><br><span class=\"line\">    <span class=\"comment\">// possible values: &#x27;dots&#x27;, &#x27;progress&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// available reporters: https://npmjs.org/browse/keyword/karma-reporter</span></span><br><span class=\"line\">    <span class=\"attr\">reporters</span>: [<span class=\"string\">&#x27;progress&#x27;</span>,<span class=\"string\">&#x27;coverage&#x27;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// karma-coverage 生成报告的设置</span></span><br><span class=\"line\">    <span class=\"attr\">coverageReporter</span>: &#123;</span><br><span class=\"line\">      type : <span class=\"string\">&#x27;html&#x27;</span>,</span><br><span class=\"line\">      dir : <span class=\"string\">&#x27;spec/reporter/coverage/&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// web server port</span></span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">9876</span>,</span><br><span class=\"line\">    <span class=\"comment\">// enable / disable colors in the output (reporters and logs)</span></span><br><span class=\"line\">    <span class=\"attr\">colors</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// level of logging</span></span><br><span class=\"line\">    <span class=\"comment\">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span></span><br><span class=\"line\">    <span class=\"attr\">logLevel</span>: config.<span class=\"property\">LOG_INFO</span>,</span><br><span class=\"line\">    <span class=\"comment\">// enable / disable watching file and executing tests whenever any file changes</span></span><br><span class=\"line\">    <span class=\"attr\">autoWatch</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// start these browsers</span></span><br><span class=\"line\">    <span class=\"comment\">// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span></span><br><span class=\"line\">    <span class=\"attr\">browsers</span>: [<span class=\"string\">&#x27;Chrome&#x27;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// Continuous Integration mode</span></span><br><span class=\"line\">    <span class=\"comment\">// if true, Karma captures browsers, runs the tests and exits</span></span><br><span class=\"line\">    <span class=\"attr\">singleRun</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// Concurrency level</span></span><br><span class=\"line\">    <span class=\"comment\">// how many browser should be started simultaneous</span></span><br><span class=\"line\">    <span class=\"attr\">concurrency</span>: <span class=\"title class_\">Infinity</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","length":2118,"excerpt":"<p>使用karma+jasmine 构建前端自动化测试环境</p>\n<p>在项目下先安装karma 和 jasmine</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma karma-jasmine karma-chrome-launcher --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装karma的命令行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>在项目跟路径下初始化karma</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">karma init</span><br></pre></td></tr></table></figure>\n<p>需要选择初始化的选项，根据自己的需要设置初始化的设置(会生成一个karma.conf.js)</p>\n<p>安装karma-coverage 生成代码覆盖率报告</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma-coverage --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装karma-coverage后需要在karma.conf.js 添加相应的配置信息</p>\n<p>安装完成后，编写源文件以及相对应的测试文件</p>\n<p>开始执行测试(会打开chrome 修改了源文件或测试文件后会自动重新执行测试)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">karma start karma.conf.js</span><br></pre></td></tr></table></figure>\n\n<p>karma.conf.js 具体内容</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">  config.<span class=\"title function_\">set</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// base path that will be used to resolve all patterns (eg. files, exclude)</span></span><br><span class=\"line\">    <span class=\"attr\">basePath</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// frameworks to use</span></span><br><span class=\"line\">    <span class=\"comment\">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span></span><br><span class=\"line\">    <span class=\"attr\">frameworks</span>: [<span class=\"string\">&#x27;jasmine&#x27;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// list of files / patterns to load in the browser</span></span><br><span class=\"line\">    <span class=\"comment\">// 要测试的源文件与测试文件的路径</span></span><br><span class=\"line\">    <span class=\"attr\">files</span>: [</span><br><span class=\"line\">      <span class=\"string\">&#x27;client/sdk/dist/*.js&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;spec/**/*[sS]pec.js&#x27;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// list of files to exclude</span></span><br><span class=\"line\">    <span class=\"attr\">exclude</span>: [</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// preprocess matching files before serving them to the browser</span></span><br><span class=\"line\">    <span class=\"comment\">// available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用karma-coverage 生成对对应的源文件的 覆盖率报告</span></span><br><span class=\"line\">    <span class=\"attr\">preprocessors</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;client/sdk/dist/admin.js&#x27;</span>:<span class=\"string\">&#x27;coverage&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// test results reporter to use</span></span><br><span class=\"line\">    <span class=\"comment\">// possible values: &#x27;dots&#x27;, &#x27;progress&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// available reporters: https://npmjs.org/browse/keyword/karma-reporter</span></span><br><span class=\"line\">    <span class=\"attr\">reporters</span>: [<span class=\"string\">&#x27;progress&#x27;</span>,<span class=\"string\">&#x27;coverage&#x27;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// karma-coverage 生成报告的设置</span></span><br><span class=\"line\">    <span class=\"attr\">coverageReporter</span>: &#123;</span><br><span class=\"line\">      type : <span class=\"string\">&#x27;html&#x27;</span>,</span><br><span class=\"line\">      dir : <span class=\"string\">&#x27;spec/reporter/coverage/&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// web server port</span></span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">9876</span>,</span><br><span class=\"line\">    <span class=\"comment\">// enable / disable colors in the output (reporters and logs)</span></span><br><span class=\"line\">    <span class=\"attr\">colors</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// level of logging</span></span><br><span class=\"line\">    <span class=\"comment\">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span></span><br><span class=\"line\">    <span class=\"attr\">logLevel</span>: config.<span class=\"property\">LOG_INFO</span>,</span><br><span class=\"line\">    <span class=\"comment\">// enable / disable watching file and executing tests whenever any file changes</span></span><br><span class=\"line\">    <span class=\"attr\">autoWatch</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// start these browsers</span></span><br><span class=\"line\">    <span class=\"comment\">// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span></span><br><span class=\"line\">    <span class=\"attr\">browsers</span>: [<span class=\"string\">&#x27;Chrome&#x27;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// Continuous Integration mode</span></span><br><span class=\"line\">    <span class=\"comment\">// if true, Karma captures browsers, runs the tests and exits</span></span><br><span class=\"line\">    <span class=\"attr\">singleRun</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// Concurrency level</span></span><br><span class=\"line\">    <span class=\"comment\">// how many browser should be started simultaneous</span></span><br><span class=\"line\">    <span class=\"attr\">concurrency</span>: <span class=\"title class_\">Infinity</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"用karma+jasmine构建自动化测试环境","path":"2017/02/17/2017-2-karma-jasmine-build-an-automated-test-environment/","eyeCatchImage":null,"excerpt":"<p>使用karma+jasmine 构建前端自动化测试环境</p>\n<p>在项目下先安装karma 和 jasmine</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma karma-jasmine karma-chrome-launcher --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装karma的命令行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>在项目跟路径下初始化karma</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">karma init</span><br></pre></td></tr></table></figure>\n<p>需要选择初始化的选项，根据自己的需要设置初始化的设置(会生成一个karma.conf.js)</p>\n<p>安装karma-coverage 生成代码覆盖率报告</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma-coverage --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装karma-coverage后需要在karma.conf.js 添加相应的配置信息</p>\n<p>安装完成后，编写源文件以及相对应的测试文件</p>\n<p>开始执行测试(会打开chrome 修改了源文件或测试文件后会自动重新执行测试)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">karma start karma.conf.js</span><br></pre></td></tr></table></figure>\n\n<p>karma.conf.js 具体内容</p>","date":{"_isAMomentObject":true,"_i":"2017-02-17T03:28:26.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-02-17T03:28:26.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"test","tags":["test karma jamine"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"windows使用oh-my-zsh","date":"2017-04-22T12:49:51.000Z","keywords":["windows terminal zsh oh-my-zsh"],"_content":"\n开发有时候需要使用terminal,无奈家里电脑还是只能用Windows,但是感觉CMD真的很难用,就是是powershell也不太习惯\n\n公司电脑用deepin oh-my-zsh不能更舒服，就想到能不能在windows上也能装上oh-my-zsh\n\n于是开始一番baidu+google \n\n## 安装cywin\n\n先装上[cywin](http://cywin.com) 网络太慢的话可以从迅雷下 [32位](http://www.cygwin.com/setup-x86.exe) [64位](http://www.cygwin.com/setup-x86_64.exe)\n\n开始安装，选择从网络安装，太慢的话可以使用国内的源 `http://mirrors.ustc.edu.cn/cygwin/`\n\n***记得安装zsh***\n\n## 安装`oh-my-zsh` \n\n不知道为什么直接使用`oh-my-zsh`提供的从网络安装总是git clone失败. 于是先手动把`oh-my-zsh`clone到 `$HOME` 目录下 `$HOME`在 `cywin的安装目录/home/用户名`\n\n`git clone https://github.com/robbyrussell/oh-my-zsh.git .oh-my-zsh` \n\n直接用`oh-my-zsh`提供的安装的文件是不能装上的,自己手动复制里面的命令一个个的在`cywin`的终端里执行\n\n```bash\n # 先设置oh-my-zsh 的目录\n export ZSH=~/.oh-my-zsh\n # 生成zsh的配置文件\n cp $ZSH/templates/zshrc.zsh-template ~/.zshrc\n\n```\n此时zsh会报找不到env grep 之类的命令\n修改`zsh`的配置文件 `.zshrc` 把第一行修改为下面的\n```bash\n# If you come from bash you might have to change your $PATH.\n export PATH=/bin:$HOME/bin:/usr/local/bin:$PATH\n``` \nok 打开cmd或者 cywin的终端 输入 `zsh` \n\n会有挺多bug的，比如有些字符不能显示，\n\n我使用的`gnzh`主题 这是光标会有点bug 比正常的光标后大概3个字符\n\n修改CMD字体  [http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html](http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html)\n\n我使用的是 [dejavu](https://dejavu-fonts.github.io/)\n\n在CMD输入 chcp 437 然后就多出几个可选择的字体了\n\n## 修改HOME目录\n此时zsh的用户根目录是在 `cywin安装目录/home/用户名`下的，修改到Windows的用户目录下去\n\n在windows的环境变量设置里面新建一条记录\n```\nHOME=windows的用户目录\n```\n并把原来用户目录下的文件都copy到新的用户目录下\n\n现在在cmd或者cywin的终端里面输入zsh. \n\n以后就win+R 输入zsh吧~\n\n## 安装 `apt-cyg` \n\ncywin里面类似于`apt-get`的软件包安装工具。立马装上\n\n```bash\nwget https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg -O apt-cyg\ninstall apt-cyg /bin\n```\n\n现在可以用`apt-cyg install vim`来在cywin上安装`vim`了~\n","source":"_posts/2017/4/windows-use-oh-my-zsh.md","raw":"---\ntitle: windows使用oh-my-zsh\ndate: 2017-04-22 20:49:51\ntags: \ncategories: [other]\nkeywords: [windows terminal zsh oh-my-zsh ]\n---\n\n开发有时候需要使用terminal,无奈家里电脑还是只能用Windows,但是感觉CMD真的很难用,就是是powershell也不太习惯\n\n公司电脑用deepin oh-my-zsh不能更舒服，就想到能不能在windows上也能装上oh-my-zsh\n\n于是开始一番baidu+google \n\n## 安装cywin\n\n先装上[cywin](http://cywin.com) 网络太慢的话可以从迅雷下 [32位](http://www.cygwin.com/setup-x86.exe) [64位](http://www.cygwin.com/setup-x86_64.exe)\n\n开始安装，选择从网络安装，太慢的话可以使用国内的源 `http://mirrors.ustc.edu.cn/cygwin/`\n\n***记得安装zsh***\n\n## 安装`oh-my-zsh` \n\n不知道为什么直接使用`oh-my-zsh`提供的从网络安装总是git clone失败. 于是先手动把`oh-my-zsh`clone到 `$HOME` 目录下 `$HOME`在 `cywin的安装目录/home/用户名`\n\n`git clone https://github.com/robbyrussell/oh-my-zsh.git .oh-my-zsh` \n\n直接用`oh-my-zsh`提供的安装的文件是不能装上的,自己手动复制里面的命令一个个的在`cywin`的终端里执行\n\n```bash\n # 先设置oh-my-zsh 的目录\n export ZSH=~/.oh-my-zsh\n # 生成zsh的配置文件\n cp $ZSH/templates/zshrc.zsh-template ~/.zshrc\n\n```\n此时zsh会报找不到env grep 之类的命令\n修改`zsh`的配置文件 `.zshrc` 把第一行修改为下面的\n```bash\n# If you come from bash you might have to change your $PATH.\n export PATH=/bin:$HOME/bin:/usr/local/bin:$PATH\n``` \nok 打开cmd或者 cywin的终端 输入 `zsh` \n\n会有挺多bug的，比如有些字符不能显示，\n\n我使用的`gnzh`主题 这是光标会有点bug 比正常的光标后大概3个字符\n\n修改CMD字体  [http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html](http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html)\n\n我使用的是 [dejavu](https://dejavu-fonts.github.io/)\n\n在CMD输入 chcp 437 然后就多出几个可选择的字体了\n\n## 修改HOME目录\n此时zsh的用户根目录是在 `cywin安装目录/home/用户名`下的，修改到Windows的用户目录下去\n\n在windows的环境变量设置里面新建一条记录\n```\nHOME=windows的用户目录\n```\n并把原来用户目录下的文件都copy到新的用户目录下\n\n现在在cmd或者cywin的终端里面输入zsh. \n\n以后就win+R 输入zsh吧~\n\n## 安装 `apt-cyg` \n\ncywin里面类似于`apt-get`的软件包安装工具。立马装上\n\n```bash\nwget https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg -O apt-cyg\ninstall apt-cyg /bin\n```\n\n现在可以用`apt-cyg install vim`来在cywin上安装`vim`了~\n","slug":"2017-4-windows-use-oh-my-zsh","published":1,"updated":"2023-12-19T02:25:24.527Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqv001vfki47rtr6nv9","content":"<p>开发有时候需要使用terminal,无奈家里电脑还是只能用Windows,但是感觉CMD真的很难用,就是是powershell也不太习惯</p>\n<p>公司电脑用deepin oh-my-zsh不能更舒服，就想到能不能在windows上也能装上oh-my-zsh</p>\n<p>于是开始一番baidu+google </p>\n<h2 id=\"安装cywin\"><a href=\"#安装cywin\" class=\"headerlink\" title=\"安装cywin\"></a>安装cywin</h2><p>先装上<span class=\"exturl\" data-url=\"aHR0cDovL2N5d2luLmNvbS8=\">cywin<i class=\"fa fa-external-link-alt\"></i></span> 网络太慢的话可以从迅雷下 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jeWd3aW4uY29tL3NldHVwLXg4Ni5leGU=\">32位<i class=\"fa fa-external-link-alt\"></i></span> <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jeWd3aW4uY29tL3NldHVwLXg4Nl82NC5leGU=\">64位<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>开始安装，选择从网络安装，太慢的话可以使用国内的源 <code>http://mirrors.ustc.edu.cn/cygwin/</code></p>\n<p><em><strong>记得安装zsh</strong></em></p>\n<h2 id=\"安装oh-my-zsh\"><a href=\"#安装oh-my-zsh\" class=\"headerlink\" title=\"安装oh-my-zsh\"></a>安装<code>oh-my-zsh</code></h2><p>不知道为什么直接使用<code>oh-my-zsh</code>提供的从网络安装总是git clone失败. 于是先手动把<code>oh-my-zsh</code>clone到 <code>$HOME</code> 目录下 <code>$HOME</code>在 <code>cywin的安装目录/home/用户名</code></p>\n<p><code>git clone https://github.com/robbyrussell/oh-my-zsh.git .oh-my-zsh</code> </p>\n<p>直接用<code>oh-my-zsh</code>提供的安装的文件是不能装上的,自己手动复制里面的命令一个个的在<code>cywin</code>的终端里执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先设置oh-my-zsh 的目录</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ZSH=~/.oh-my-zsh</span><br><span class=\"line\"><span class=\"comment\"># 生成zsh的配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> <span class=\"variable\">$ZSH</span>/templates/zshrc.zsh-template ~/.zshrc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>此时zsh会报找不到env grep 之类的命令<br>修改<code>zsh</code>的配置文件 <code>.zshrc</code> 把第一行修改为下面的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># If you come from bash you might have to change your $PATH.</span></span><br><span class=\"line\"> <span class=\"built_in\">export</span> PATH=/bin:<span class=\"variable\">$HOME</span>/bin:/usr/local/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n<p>ok 打开cmd或者 cywin的终端 输入 <code>zsh</code> </p>\n<p>会有挺多bug的，比如有些字符不能显示，</p>\n<p>我使用的<code>gnzh</code>主题 这是光标会有点bug 比正常的光标后大概3个字符</p>\n<p>修改CMD字体  <span class=\"exturl\" data-url=\"aHR0cDovL2ppbmd5YW4uYmFpZHUuY29tL2FydGljbGUvM2EyZjdjMmU2MWVjNWQyNmFmZDYxMWM4Lmh0bWw=\">http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>我使用的是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZWphdnUtZm9udHMuZ2l0aHViLmlvLw==\">dejavu<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>在CMD输入 chcp 437 然后就多出几个可选择的字体了</p>\n<h2 id=\"修改HOME目录\"><a href=\"#修改HOME目录\" class=\"headerlink\" title=\"修改HOME目录\"></a>修改HOME目录</h2><p>此时zsh的用户根目录是在 <code>cywin安装目录/home/用户名</code>下的，修改到Windows的用户目录下去</p>\n<p>在windows的环境变量设置里面新建一条记录</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">HOME</span><span class=\"operator\">=</span>windows的用户目录</span><br></pre></td></tr></table></figure>\n<p>并把原来用户目录下的文件都copy到新的用户目录下</p>\n<p>现在在cmd或者cywin的终端里面输入zsh. </p>\n<p>以后就win+R 输入zsh吧~</p>\n<h2 id=\"安装-apt-cyg\"><a href=\"#安装-apt-cyg\" class=\"headerlink\" title=\"安装 apt-cyg\"></a>安装 <code>apt-cyg</code></h2><p>cywin里面类似于<code>apt-get</code>的软件包安装工具。立马装上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg -O apt-cyg</span><br><span class=\"line\">install apt-cyg /bin</span><br></pre></td></tr></table></figure>\n\n<p>现在可以用<code>apt-cyg install vim</code>来在cywin上安装<code>vim</code>了~</p>\n","length":1228,"excerpt":"","more":"<p>开发有时候需要使用terminal,无奈家里电脑还是只能用Windows,但是感觉CMD真的很难用,就是是powershell也不太习惯</p>\n<p>公司电脑用deepin oh-my-zsh不能更舒服，就想到能不能在windows上也能装上oh-my-zsh</p>\n<p>于是开始一番baidu+google </p>\n<h2 id=\"安装cywin\"><a href=\"#安装cywin\" class=\"headerlink\" title=\"安装cywin\"></a>安装cywin</h2><p>先装上<a href=\"http://cywin.com/\">cywin</a> 网络太慢的话可以从迅雷下 <a href=\"http://www.cygwin.com/setup-x86.exe\">32位</a> <a href=\"http://www.cygwin.com/setup-x86_64.exe\">64位</a></p>\n<p>开始安装，选择从网络安装，太慢的话可以使用国内的源 <code>http://mirrors.ustc.edu.cn/cygwin/</code></p>\n<p><em><strong>记得安装zsh</strong></em></p>\n<h2 id=\"安装oh-my-zsh\"><a href=\"#安装oh-my-zsh\" class=\"headerlink\" title=\"安装oh-my-zsh\"></a>安装<code>oh-my-zsh</code></h2><p>不知道为什么直接使用<code>oh-my-zsh</code>提供的从网络安装总是git clone失败. 于是先手动把<code>oh-my-zsh</code>clone到 <code>$HOME</code> 目录下 <code>$HOME</code>在 <code>cywin的安装目录/home/用户名</code></p>\n<p><code>git clone https://github.com/robbyrussell/oh-my-zsh.git .oh-my-zsh</code> </p>\n<p>直接用<code>oh-my-zsh</code>提供的安装的文件是不能装上的,自己手动复制里面的命令一个个的在<code>cywin</code>的终端里执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先设置oh-my-zsh 的目录</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ZSH=~/.oh-my-zsh</span><br><span class=\"line\"><span class=\"comment\"># 生成zsh的配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> <span class=\"variable\">$ZSH</span>/templates/zshrc.zsh-template ~/.zshrc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>此时zsh会报找不到env grep 之类的命令<br>修改<code>zsh</code>的配置文件 <code>.zshrc</code> 把第一行修改为下面的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># If you come from bash you might have to change your $PATH.</span></span><br><span class=\"line\"> <span class=\"built_in\">export</span> PATH=/bin:<span class=\"variable\">$HOME</span>/bin:/usr/local/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n<p>ok 打开cmd或者 cywin的终端 输入 <code>zsh</code> </p>\n<p>会有挺多bug的，比如有些字符不能显示，</p>\n<p>我使用的<code>gnzh</code>主题 这是光标会有点bug 比正常的光标后大概3个字符</p>\n<p>修改CMD字体  <a href=\"http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html\">http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html</a></p>\n<p>我使用的是 <a href=\"https://dejavu-fonts.github.io/\">dejavu</a></p>\n<p>在CMD输入 chcp 437 然后就多出几个可选择的字体了</p>\n<h2 id=\"修改HOME目录\"><a href=\"#修改HOME目录\" class=\"headerlink\" title=\"修改HOME目录\"></a>修改HOME目录</h2><p>此时zsh的用户根目录是在 <code>cywin安装目录/home/用户名</code>下的，修改到Windows的用户目录下去</p>\n<p>在windows的环境变量设置里面新建一条记录</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">HOME</span><span class=\"operator\">=</span>windows的用户目录</span><br></pre></td></tr></table></figure>\n<p>并把原来用户目录下的文件都copy到新的用户目录下</p>\n<p>现在在cmd或者cywin的终端里面输入zsh. </p>\n<p>以后就win+R 输入zsh吧~</p>\n<h2 id=\"安装-apt-cyg\"><a href=\"#安装-apt-cyg\" class=\"headerlink\" title=\"安装 apt-cyg\"></a>安装 <code>apt-cyg</code></h2><p>cywin里面类似于<code>apt-get</code>的软件包安装工具。立马装上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg -O apt-cyg</span><br><span class=\"line\">install apt-cyg /bin</span><br></pre></td></tr></table></figure>\n\n<p>现在可以用<code>apt-cyg install vim</code>来在cywin上安装<code>vim</code>了~</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"windows使用oh-my-zsh","path":"2017/04/22/2017-4-windows-use-oh-my-zsh/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2017-04-22T12:49:51.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-04-22T12:49:51.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"other","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"springboot文件上传Filter获取不到文件","date":"2017-04-19T02:51:49.000Z","keywords":["springboot filter multipart/form-data"],"_content":"\n项目需要实现类似nginx反向代理的功能，于是就采用Filter+HttpClient去实现请求转发。\n\n为了开发方便就采用的springboot做测试项目。\n```java\n@SpringBootApplication\n//@ServletComponentScan\n@Controller\npublic class AppTestApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AppTestApplication.class, args);\n    }\n\n    @Bean\n    public FilterRegistrationBean indexFilterRegistration() {\n        FilterRegistrationBean registration = new FilterRegistrationBean(new TestFilter());\n        registration.addUrlPatterns(\"/*\");\n        return registration;\n    }\n}\n```\nFilter里面做匹配Uri后获取`request.getInputStream()`用httpClient转发请求\n\n但是在转发`Content-Type=multipart/form-data`文件上传时，转发后目标服务器总是获取不到正常的payload的请求体\n\n在Filter里面debug发现压根就获取不到文件...\n\n**经过各种google/baidu以及debug后，发现需要在`application.properties`里面添加文件上传的临时路径..**\n**或者不使用springboot而使用tomcat部署项目...**\n```\nspring.http.multipart.location= /tmp # 上传文件的临时目录\n```\n","source":"_posts/2017/4/springboot-fileupdat- in-Filter-can't-get.md","raw":"---\ntitle: springboot文件上传Filter获取不到文件\ndate: 2017-04-19 10:51:49\ntags: [springboot]\ncategories: [springboot]\nkeywords: [springboot filter multipart/form-data]\n---\n\n项目需要实现类似nginx反向代理的功能，于是就采用Filter+HttpClient去实现请求转发。\n\n为了开发方便就采用的springboot做测试项目。\n```java\n@SpringBootApplication\n//@ServletComponentScan\n@Controller\npublic class AppTestApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AppTestApplication.class, args);\n    }\n\n    @Bean\n    public FilterRegistrationBean indexFilterRegistration() {\n        FilterRegistrationBean registration = new FilterRegistrationBean(new TestFilter());\n        registration.addUrlPatterns(\"/*\");\n        return registration;\n    }\n}\n```\nFilter里面做匹配Uri后获取`request.getInputStream()`用httpClient转发请求\n\n但是在转发`Content-Type=multipart/form-data`文件上传时，转发后目标服务器总是获取不到正常的payload的请求体\n\n在Filter里面debug发现压根就获取不到文件...\n\n**经过各种google/baidu以及debug后，发现需要在`application.properties`里面添加文件上传的临时路径..**\n**或者不使用springboot而使用tomcat部署项目...**\n```\nspring.http.multipart.location= /tmp # 上传文件的临时目录\n```\n","slug":"2017-4-springboot-fileupdat-in-Filter-can-t-get","published":1,"updated":"2023-12-19T02:25:24.526Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqw001zfki47mne3nud","content":"<p>项目需要实现类似nginx反向代理的功能，于是就采用Filter+HttpClient去实现请求转发。</p>\n<p>为了开发方便就采用的springboot做测试项目。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"comment\">//@ServletComponentScan</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppTestApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(AppTestApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">indexFilterRegistration</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">FilterRegistrationBean</span> <span class=\"variable\">registration</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TestFilter</span>());</span><br><span class=\"line\">        registration.addUrlPatterns(<span class=\"string\">&quot;/*&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Filter里面做匹配Uri后获取<code>request.getInputStream()</code>用httpClient转发请求</p>\n<p>但是在转发<code>Content-Type=multipart/form-data</code>文件上传时，转发后目标服务器总是获取不到正常的payload的请求体</p>\n<p>在Filter里面debug发现压根就获取不到文件…</p>\n<p><strong>经过各种google&#x2F;baidu以及debug后，发现需要在<code>application.properties</code>里面添加文件上传的临时路径..</strong><br><strong>或者不使用springboot而使用tomcat部署项目…</strong></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.http.multipart.location</span>= /tmp <span class=\"comment\"># 上传文件的临时目录</span></span><br></pre></td></tr></table></figure>\n","length":807,"excerpt":"","more":"<p>项目需要实现类似nginx反向代理的功能，于是就采用Filter+HttpClient去实现请求转发。</p>\n<p>为了开发方便就采用的springboot做测试项目。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"comment\">//@ServletComponentScan</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppTestApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(AppTestApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">indexFilterRegistration</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">FilterRegistrationBean</span> <span class=\"variable\">registration</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TestFilter</span>());</span><br><span class=\"line\">        registration.addUrlPatterns(<span class=\"string\">&quot;/*&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Filter里面做匹配Uri后获取<code>request.getInputStream()</code>用httpClient转发请求</p>\n<p>但是在转发<code>Content-Type=multipart/form-data</code>文件上传时，转发后目标服务器总是获取不到正常的payload的请求体</p>\n<p>在Filter里面debug发现压根就获取不到文件…</p>\n<p><strong>经过各种google&#x2F;baidu以及debug后，发现需要在<code>application.properties</code>里面添加文件上传的临时路径..</strong><br><strong>或者不使用springboot而使用tomcat部署项目…</strong></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.http.multipart.location</span>= /tmp <span class=\"comment\"># 上传文件的临时目录</span></span><br></pre></td></tr></table></figure>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"springboot文件上传Filter获取不到文件","path":"2017/04/19/2017-4-springboot-fileupdat-in-Filter-can-t-get/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2017-04-19T02:51:49.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-04-19T02:51:49.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"springboot","tags":["springboot"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"基于spring的类扫描器","date":"2017-05-18T11:28:29.000Z","keywords":"spring","_content":"有时候想要扫描某一个包下的类，spring提供一个一扫描的类，\n`org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider`\n\n这个类的`findCandidateComponents`就是扫描的方法。通过自己继承这个类，再提供类的过滤条件。就可以了\n\n还可以继承它的子类`org.springframework.context.annotation.ClassPathBeanDefinitionScanner`\n\n需要两个过滤设置。因为扫描的时候会过滤两次\n第一次是`addIncludeFilter` 添加的条件\n第二次是调用`isCandidateComponent(AnnotatedBeanDefinition)`方法\n\n```java\n/**\n * Entity的扫描类，提供entity的包\n * 扫描包下 {@link Entity}或{@link Table} 标注的类\n * Created by xyz327 on 17-5-15.\n */\npublic class ClassPathCacheEntityScanner extends ClassPathScanningCandidateComponentProvider {\n    private Logger logger = LoggerFactory.getLogger(getClass());\n\n    ClassPathCacheEntityScanner(BeanDefinitionRegistry registry) {\n        super(false);//不使用默认的过滤器\n        //添加自己的过滤器\n         addIncludeFilter(new AnnotationTypeFilter(Entity.class));\n         addIncludeFilter(new AnnotationTypeFilter(Table.class));\n    }\n\n    public Set<Class> doScan(String... basePackages) throws ClassNotFoundException {\n        Assert.notEmpty(basePackages, \"At least one base package must be specified\");\n        Set<Class> entitySet = new HashSet<>();\n\n        for (String basePackage : basePackages) {\n            Set<BeanDefinition> candidates = findCandidateComponents(basePackage);\n\n            for (BeanDefinition candidate : candidates) {\n                Class entityClass = ClassUtils.forName(candidate.getBeanClassName(), null);\n                entitySet.add(entityClass);\n            }\n        }\n        return entitySet;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected boolean isCandidateComponent(AnnotatedBeanDefinition beanDefinition) {\n        return beanDefinition.getMetadata().isConcrete() //是否为具体的类 (非抽象和接口)\n            && (beanDefinition.getMetadata().hasAnnotation(Entity.class.getName()) //需要标记 @Entity\n            || beanDefinition.getMetadata().hasAnnotation(Table.class.getName())); // 或者标记 @Table\n    }\n\n}\n```\n","source":"_posts/2017/5/基于spring的类扫描器.md","raw":"---\ntitle: 基于spring的类扫描器\ndate: 2017-05-18 19:28:29\ntags:\ncategories: [spring ]\nkeywords: spring\n---\n有时候想要扫描某一个包下的类，spring提供一个一扫描的类，\n`org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider`\n\n这个类的`findCandidateComponents`就是扫描的方法。通过自己继承这个类，再提供类的过滤条件。就可以了\n\n还可以继承它的子类`org.springframework.context.annotation.ClassPathBeanDefinitionScanner`\n\n需要两个过滤设置。因为扫描的时候会过滤两次\n第一次是`addIncludeFilter` 添加的条件\n第二次是调用`isCandidateComponent(AnnotatedBeanDefinition)`方法\n\n```java\n/**\n * Entity的扫描类，提供entity的包\n * 扫描包下 {@link Entity}或{@link Table} 标注的类\n * Created by xyz327 on 17-5-15.\n */\npublic class ClassPathCacheEntityScanner extends ClassPathScanningCandidateComponentProvider {\n    private Logger logger = LoggerFactory.getLogger(getClass());\n\n    ClassPathCacheEntityScanner(BeanDefinitionRegistry registry) {\n        super(false);//不使用默认的过滤器\n        //添加自己的过滤器\n         addIncludeFilter(new AnnotationTypeFilter(Entity.class));\n         addIncludeFilter(new AnnotationTypeFilter(Table.class));\n    }\n\n    public Set<Class> doScan(String... basePackages) throws ClassNotFoundException {\n        Assert.notEmpty(basePackages, \"At least one base package must be specified\");\n        Set<Class> entitySet = new HashSet<>();\n\n        for (String basePackage : basePackages) {\n            Set<BeanDefinition> candidates = findCandidateComponents(basePackage);\n\n            for (BeanDefinition candidate : candidates) {\n                Class entityClass = ClassUtils.forName(candidate.getBeanClassName(), null);\n                entitySet.add(entityClass);\n            }\n        }\n        return entitySet;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected boolean isCandidateComponent(AnnotatedBeanDefinition beanDefinition) {\n        return beanDefinition.getMetadata().isConcrete() //是否为具体的类 (非抽象和接口)\n            && (beanDefinition.getMetadata().hasAnnotation(Entity.class.getName()) //需要标记 @Entity\n            || beanDefinition.getMetadata().hasAnnotation(Table.class.getName())); // 或者标记 @Table\n    }\n\n}\n```\n","slug":"2017-5-基于spring的类扫描器","published":1,"updated":"2023-12-19T02:25:24.529Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqx0022fki4g5ppdvtb","content":"<p>有时候想要扫描某一个包下的类，spring提供一个一扫描的类，<br><code>org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider</code></p>\n<p>这个类的<code>findCandidateComponents</code>就是扫描的方法。通过自己继承这个类，再提供类的过滤条件。就可以了</p>\n<p>还可以继承它的子类<code>org.springframework.context.annotation.ClassPathBeanDefinitionScanner</code></p>\n<p>需要两个过滤设置。因为扫描的时候会过滤两次<br>第一次是<code>addIncludeFilter</code> 添加的条件<br>第二次是调用<code>isCandidateComponent(AnnotatedBeanDefinition)</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Entity的扫描类，提供entity的包</span></span><br><span class=\"line\"><span class=\"comment\"> * 扫描包下 &#123;<span class=\"doctag\">@link</span> Entity&#125;或&#123;<span class=\"doctag\">@link</span> Table&#125; 标注的类</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by xyz327 on 17-5-15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClassPathCacheEntityScanner</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ClassPathScanningCandidateComponentProvider</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">    ClassPathCacheEntityScanner(BeanDefinitionRegistry registry) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(<span class=\"literal\">false</span>);<span class=\"comment\">//不使用默认的过滤器</span></span><br><span class=\"line\">        <span class=\"comment\">//添加自己的过滤器</span></span><br><span class=\"line\">         addIncludeFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationTypeFilter</span>(Entity.class));</span><br><span class=\"line\">         addIncludeFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationTypeFilter</span>(Table.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Set&lt;Class&gt; <span class=\"title function_\">doScan</span><span class=\"params\">(String... basePackages)</span> <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">        Assert.notEmpty(basePackages, <span class=\"string\">&quot;At least one base package must be specified&quot;</span>);</span><br><span class=\"line\">        Set&lt;Class&gt; entitySet = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String basePackage : basePackages) &#123;</span><br><span class=\"line\">            Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (BeanDefinition candidate : candidates) &#123;</span><br><span class=\"line\">                <span class=\"type\">Class</span> <span class=\"variable\">entityClass</span> <span class=\"operator\">=</span> ClassUtils.forName(candidate.getBeanClassName(), <span class=\"literal\">null</span>);</span><br><span class=\"line\">                entitySet.add(entityClass);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> entitySet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isCandidateComponent</span><span class=\"params\">(AnnotatedBeanDefinition beanDefinition)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanDefinition.getMetadata().isConcrete() <span class=\"comment\">//是否为具体的类 (非抽象和接口)</span></span><br><span class=\"line\">            &amp;&amp; (beanDefinition.getMetadata().hasAnnotation(Entity.class.getName()) <span class=\"comment\">//需要标记 @Entity</span></span><br><span class=\"line\">            || beanDefinition.getMetadata().hasAnnotation(Table.class.getName())); <span class=\"comment\">// 或者标记 @Table</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","length":1764,"excerpt":"","more":"<p>有时候想要扫描某一个包下的类，spring提供一个一扫描的类，<br><code>org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider</code></p>\n<p>这个类的<code>findCandidateComponents</code>就是扫描的方法。通过自己继承这个类，再提供类的过滤条件。就可以了</p>\n<p>还可以继承它的子类<code>org.springframework.context.annotation.ClassPathBeanDefinitionScanner</code></p>\n<p>需要两个过滤设置。因为扫描的时候会过滤两次<br>第一次是<code>addIncludeFilter</code> 添加的条件<br>第二次是调用<code>isCandidateComponent(AnnotatedBeanDefinition)</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Entity的扫描类，提供entity的包</span></span><br><span class=\"line\"><span class=\"comment\"> * 扫描包下 &#123;<span class=\"doctag\">@link</span> Entity&#125;或&#123;<span class=\"doctag\">@link</span> Table&#125; 标注的类</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by xyz327 on 17-5-15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClassPathCacheEntityScanner</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ClassPathScanningCandidateComponentProvider</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">    ClassPathCacheEntityScanner(BeanDefinitionRegistry registry) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(<span class=\"literal\">false</span>);<span class=\"comment\">//不使用默认的过滤器</span></span><br><span class=\"line\">        <span class=\"comment\">//添加自己的过滤器</span></span><br><span class=\"line\">         addIncludeFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationTypeFilter</span>(Entity.class));</span><br><span class=\"line\">         addIncludeFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationTypeFilter</span>(Table.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Set&lt;Class&gt; <span class=\"title function_\">doScan</span><span class=\"params\">(String... basePackages)</span> <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">        Assert.notEmpty(basePackages, <span class=\"string\">&quot;At least one base package must be specified&quot;</span>);</span><br><span class=\"line\">        Set&lt;Class&gt; entitySet = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String basePackage : basePackages) &#123;</span><br><span class=\"line\">            Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (BeanDefinition candidate : candidates) &#123;</span><br><span class=\"line\">                <span class=\"type\">Class</span> <span class=\"variable\">entityClass</span> <span class=\"operator\">=</span> ClassUtils.forName(candidate.getBeanClassName(), <span class=\"literal\">null</span>);</span><br><span class=\"line\">                entitySet.add(entityClass);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> entitySet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isCandidateComponent</span><span class=\"params\">(AnnotatedBeanDefinition beanDefinition)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanDefinition.getMetadata().isConcrete() <span class=\"comment\">//是否为具体的类 (非抽象和接口)</span></span><br><span class=\"line\">            &amp;&amp; (beanDefinition.getMetadata().hasAnnotation(Entity.class.getName()) <span class=\"comment\">//需要标记 @Entity</span></span><br><span class=\"line\">            || beanDefinition.getMetadata().hasAnnotation(Table.class.getName())); <span class=\"comment\">// 或者标记 @Table</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"基于spring的类扫描器","path":"2017/05/18/2017-5-基于spring的类扫描器/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2017-05-18T11:28:29.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-05-18T11:28:29.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"spring","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"自定义lopback的Appender时设置枚举属性","date":"2017-05-22T13:46:34.000Z","keywords":["logback"],"_content":"\n在自定义`Appender`时，设置属性可以直接通过`logback.xml`进行设置,但是枚举对象，默认的处理方法不能处理,\n这事可以自己定义一个新的解析规则\n\n\n```java\npublic class DIYAppender extends OutputStreamAppender {\n    /**\n    * 使用 {@link ch.qos.logback.core.joran.action.NestedBasicPropertyIA} 解析\n    */\n    private String attr;\n    /**\n    * 使用 {@link ch.qos.logback.core.joran.action.NestedComplexPropertyIA} 解析\n    */\n    private User objAttr;\n    /**\n    * 使用 {@link enumObjAction} 解析\n    */\n    private enumObj enumAttr;\n    //省略 getter/setter方法\n}\npublic class User {\n\n}\npublic enum enumObj {\n    Instance;\n    private String name;\n    //省略 getter/setter\n}\npublic class enumObjAction extends ch.qos.logback.core.joran.action.Action {\n    @Override\n    public void begin(InterpretationContext ic, String name, Attributes attributes) throws ActionException {\n        ic.pushObject(enumObj.Instance);\n    }\n\n    @Override\n    public void end(InterpretationContext ic, String name) throws ActionException {\n\n    }\n}\n```\n可以在`logback.xml`的appender节点中直接进行设置,如果属性是对象可以提供`class`属性进行设置\n```xml\n    <newRule pattern=\"configuration/appender/enumAttr\" class=\"enumObjAction\"/>\n    <appender class=\"DIYAppender\">\n        <attr>value</attr><!--设置attr的值为value  --> \n        <objAttr class=\"package.User\">\n            <!--还可以给User进行设置属性值-->\n        </objAttr>\n        <enumAttr>\n            <name>nameValue</name>\n        </enumAttr>\n    </appender>\n```\n\n\n","source":"_posts/2017/5/自定义lopback的Appender时设置枚举属性.md","raw":"---\ntitle: 自定义lopback的Appender时设置枚举属性\ndate: 2017-05-22 21:46:34\ntags: \ncategories: logback\nkeywords: [logback]\n---\n\n在自定义`Appender`时，设置属性可以直接通过`logback.xml`进行设置,但是枚举对象，默认的处理方法不能处理,\n这事可以自己定义一个新的解析规则\n\n\n```java\npublic class DIYAppender extends OutputStreamAppender {\n    /**\n    * 使用 {@link ch.qos.logback.core.joran.action.NestedBasicPropertyIA} 解析\n    */\n    private String attr;\n    /**\n    * 使用 {@link ch.qos.logback.core.joran.action.NestedComplexPropertyIA} 解析\n    */\n    private User objAttr;\n    /**\n    * 使用 {@link enumObjAction} 解析\n    */\n    private enumObj enumAttr;\n    //省略 getter/setter方法\n}\npublic class User {\n\n}\npublic enum enumObj {\n    Instance;\n    private String name;\n    //省略 getter/setter\n}\npublic class enumObjAction extends ch.qos.logback.core.joran.action.Action {\n    @Override\n    public void begin(InterpretationContext ic, String name, Attributes attributes) throws ActionException {\n        ic.pushObject(enumObj.Instance);\n    }\n\n    @Override\n    public void end(InterpretationContext ic, String name) throws ActionException {\n\n    }\n}\n```\n可以在`logback.xml`的appender节点中直接进行设置,如果属性是对象可以提供`class`属性进行设置\n```xml\n    <newRule pattern=\"configuration/appender/enumAttr\" class=\"enumObjAction\"/>\n    <appender class=\"DIYAppender\">\n        <attr>value</attr><!--设置attr的值为value  --> \n        <objAttr class=\"package.User\">\n            <!--还可以给User进行设置属性值-->\n        </objAttr>\n        <enumAttr>\n            <name>nameValue</name>\n        </enumAttr>\n    </appender>\n```\n\n\n","slug":"2017-5-自定义lopback的Appender时设置枚举属性","published":1,"updated":"2023-12-19T02:25:24.530Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqy0026fki45rfw637f","content":"<p>在自定义<code>Appender</code>时，设置属性可以直接通过<code>logback.xml</code>进行设置,但是枚举对象，默认的处理方法不能处理,<br>这事可以自己定义一个新的解析规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DIYAppender</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">OutputStreamAppender</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 使用 &#123;<span class=\"doctag\">@link</span> ch.qos.logback.core.joran.action.NestedBasicPropertyIA&#125; 解析</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String attr;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 使用 &#123;<span class=\"doctag\">@link</span> ch.qos.logback.core.joran.action.NestedComplexPropertyIA&#125; 解析</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> User objAttr;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 使用 &#123;<span class=\"doctag\">@link</span> enumObjAction&#125; 解析</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> enumObj enumAttr;</span><br><span class=\"line\">    <span class=\"comment\">//省略 getter/setter方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">enumObj</span> &#123;</span><br><span class=\"line\">    Instance;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"comment\">//省略 getter/setter</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">enumObjAction</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ch</span>.qos.logback.core.joran.action.Action &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">begin</span><span class=\"params\">(InterpretationContext ic, String name, Attributes attributes)</span> <span class=\"keyword\">throws</span> ActionException &#123;</span><br><span class=\"line\">        ic.pushObject(enumObj.Instance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">end</span><span class=\"params\">(InterpretationContext ic, String name)</span> <span class=\"keyword\">throws</span> ActionException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以在<code>logback.xml</code>的appender节点中直接进行设置,如果属性是对象可以提供<code>class</code>属性进行设置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">newRule</span> <span class=\"attr\">pattern</span>=<span class=\"string\">&quot;configuration/appender/enumAttr&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;enumObjAction&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;DIYAppender&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span>&gt;</span>value<span class=\"tag\">&lt;/<span class=\"name\">attr</span>&gt;</span><span class=\"comment\">&lt;!--设置attr的值为value  --&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objAttr</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;package.User&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--还可以给User进行设置属性值--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">objAttr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">enumAttr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>nameValue<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">enumAttr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n","length":1336,"excerpt":"","more":"<p>在自定义<code>Appender</code>时，设置属性可以直接通过<code>logback.xml</code>进行设置,但是枚举对象，默认的处理方法不能处理,<br>这事可以自己定义一个新的解析规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DIYAppender</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">OutputStreamAppender</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 使用 &#123;<span class=\"doctag\">@link</span> ch.qos.logback.core.joran.action.NestedBasicPropertyIA&#125; 解析</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String attr;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 使用 &#123;<span class=\"doctag\">@link</span> ch.qos.logback.core.joran.action.NestedComplexPropertyIA&#125; 解析</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> User objAttr;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 使用 &#123;<span class=\"doctag\">@link</span> enumObjAction&#125; 解析</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> enumObj enumAttr;</span><br><span class=\"line\">    <span class=\"comment\">//省略 getter/setter方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">enumObj</span> &#123;</span><br><span class=\"line\">    Instance;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"comment\">//省略 getter/setter</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">enumObjAction</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ch</span>.qos.logback.core.joran.action.Action &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">begin</span><span class=\"params\">(InterpretationContext ic, String name, Attributes attributes)</span> <span class=\"keyword\">throws</span> ActionException &#123;</span><br><span class=\"line\">        ic.pushObject(enumObj.Instance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">end</span><span class=\"params\">(InterpretationContext ic, String name)</span> <span class=\"keyword\">throws</span> ActionException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以在<code>logback.xml</code>的appender节点中直接进行设置,如果属性是对象可以提供<code>class</code>属性进行设置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">newRule</span> <span class=\"attr\">pattern</span>=<span class=\"string\">&quot;configuration/appender/enumAttr&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;enumObjAction&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;DIYAppender&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span>&gt;</span>value<span class=\"tag\">&lt;/<span class=\"name\">attr</span>&gt;</span><span class=\"comment\">&lt;!--设置attr的值为value  --&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objAttr</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;package.User&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--还可以给User进行设置属性值--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">objAttr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">enumAttr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>nameValue<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">enumAttr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"自定义lopback的Appender时设置枚举属性","path":"2017/05/22/2017-5-自定义lopback的Appender时设置枚举属性/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2017-05-22T13:46:34.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-05-22T13:46:34.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"logback","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Sentine默认slot说明","date":"2019-01-13T02:39:23.000Z","keywords":"sentinel","_content":"\nsentinel是通过slot来实现限流降级等功能，所以slot是sentinel的核心  \n\nsentinel使用`com.alibaba.csp.sentinel.slotchain.SlotChainBuilder`去构建slot的调用链  \n默认是使用`com.alibaba.csp.sentinel.slots.DefaultSlotChainBuilder`  \n在`com.alibaba.csp.sentinel.slotchain.SlotChainProvider`中使用serviceLoader去加载`slotChianBulder`的实现.有自定义实现就使用自定义实现，没有就使用默认的`DefaultSlotChainBuilder`  \n<!--more-->\nDefaultSlotChainBuilder中构建的默认slot\n```java\npublic class DefaultSlotChainBuilder implements SlotChainBuilder {\n    @Override\n    public ProcessorSlotChain build() {\n        ProcessorSlotChain chain = new DefaultProcessorSlotChain();\n        chain.addLast(new NodeSelectorSlot());\n        chain.addLast(new ClusterBuilderSlot());\n        chain.addLast(new LogSlot());\n        chain.addLast(new StatisticSlot());\n        chain.addLast(new SystemSlot());\n        chain.addLast(new AuthoritySlot());\n        chain.addLast(new FlowSlot());\n        chain.addLast(new DegradeSlot());\n\n        return chain;\n    }\n}\n```\nDefaultProcessorSlotChain类似链表，所以会按添加顺序依次调用这些slot\n## slot作用说明\n### NodeSelectorSlot\n负责收集资源的路径，并将这些资源的调用路径，以树状结构存储起来，用于根据调用路径来限流降级\n### ClusterBuilderSlot\n用于构建资源的 ClusterNode 以及调用来源节点。ClusterNode 保持资源运行统计信息（响应时间、QPS、block 数目、线程数、异常数等）以及原始调用者统计信息列表。来源调用者的名字由 Context.enter(contextName，origin) 中的 origin 标记。\n### LogSlot\n在接下来的插槽链中发生BlockException异常的话,LogSlot会记录日志信息。\n### StatisticSlot\n是sentienl的指标数据统计插槽，也是sentienl种非常重要的一个模块，sentienl后续的限流，降级，熔断都是根据这一阶段的统计数据进行\n统计的数据\n1. clusterNode：资源唯一标识的 ClusterNode 的 runtime 统计\n2. origin：根据来自不同调用者的统计信息\n3. defaultnode: 根据上下文条目名称和资源 ID 的 runtime 统计\n4. 入口的统计  \n执行过程\n先继续执行后面的slot，如果执行成功就增加node的线程数，通过请求数，并依次执行在`StatisticSlotCallbackRegistry`中注册的`ProcessorSlotEntryCallback`的`onPass`回调。\n如果执行触发`BlockException`失败就设置错误并新增被拦截的Qps数量，并依次执行`ProcessorSlotEntryCallback`的`onBlocked`\n如果其他异常就增加错误的Qps数量\n\n在exit退出时：\n成功执行时根据当前时间和entry的createTime计算出rt(response time)，减少node的线程计数\n### SystemSlot\nSystemSlot主要是用来系统规则的检查，包括平均RT，qps，线程数，系统负载（只是针对linux系统）    \n会根据对于当前系统的整体情况，对入口的资源进行调配。其原理是让入口的流量和当前系统的 load 达到一个动态平衡。  \n**注意这个功能的两个限制:**\n\n1. 只对入口流量起作用（调用类型为EntryType.IN），对出口流量无效。可通过 SphU.entry() 指定调用类型，如果不指定，默认是EntryType.OUT。\n ```java\n Entry entry = SphU.entry(\"resourceName\"，EntryType.IN);\n ```\n2. 只在 Unix-like 的操作系统上生效   \n\nSystemSlot插槽是整个插槽链规则校验的第一个，用于系统规则设置的校验。\n检验流程\n1. 是否设置了检验规则. 只有设置了规则才会开启检验\n2. 检验资源是不是入境`resource`的type为`IN`。不是就不做检验\n3. 检查Qps是否超过配置的qps数\n4. 检查当初线程数是否超过配置最大线程数\n5. 检查响应时间是否超过配置的最大响应时间\n6. 检查系统负载是否超标(BBR算法)\n### AuthoritySlot\n根据配置的黑白名单和调用来源信息，来做黑白名单控制\n### FlowSlot\n根据预设的限流规则以及前面 slot 统计的状态，来进行流量控制；\n主要根据预设的资源的统计信息，按照固定的次序，依次生效。如果一个资源对应两条或者多条流控规则，则会根据如下次序依次检验，直到全部通过或者有一个规则生效为止:\n\n指定应用生效的规则，即针对调用方限流的；\n调用方为 other 的规则；\n调用方为 default 的规则。\n### DegradeSlot\n通过统计信息以及预设的规则，来做熔断降级；\n从clusterNode中获取信息判断是否熔断降级\n判断的类型有三种\n1. DEGRADE_GRADE_RT 根据响应时间\n2. DEGRADE_GRADE_EXCEPTION_RATIO 根据时间间隔(默认一秒钟)内业务异常比例\n3. DEGRADE_GRADE_EXCEPTION_COUNT 根据前一分钟的业务异常的数量","source":"_posts/2019/01/Sentine默认slot说明.md","raw":"---\ntitle: Sentine默认slot说明\n\ndate: 2019-01-13 10:39:23\ntags: sentinel\ncategories: sentinel\nkeywords: sentinel\n---\n\nsentinel是通过slot来实现限流降级等功能，所以slot是sentinel的核心  \n\nsentinel使用`com.alibaba.csp.sentinel.slotchain.SlotChainBuilder`去构建slot的调用链  \n默认是使用`com.alibaba.csp.sentinel.slots.DefaultSlotChainBuilder`  \n在`com.alibaba.csp.sentinel.slotchain.SlotChainProvider`中使用serviceLoader去加载`slotChianBulder`的实现.有自定义实现就使用自定义实现，没有就使用默认的`DefaultSlotChainBuilder`  \n<!--more-->\nDefaultSlotChainBuilder中构建的默认slot\n```java\npublic class DefaultSlotChainBuilder implements SlotChainBuilder {\n    @Override\n    public ProcessorSlotChain build() {\n        ProcessorSlotChain chain = new DefaultProcessorSlotChain();\n        chain.addLast(new NodeSelectorSlot());\n        chain.addLast(new ClusterBuilderSlot());\n        chain.addLast(new LogSlot());\n        chain.addLast(new StatisticSlot());\n        chain.addLast(new SystemSlot());\n        chain.addLast(new AuthoritySlot());\n        chain.addLast(new FlowSlot());\n        chain.addLast(new DegradeSlot());\n\n        return chain;\n    }\n}\n```\nDefaultProcessorSlotChain类似链表，所以会按添加顺序依次调用这些slot\n## slot作用说明\n### NodeSelectorSlot\n负责收集资源的路径，并将这些资源的调用路径，以树状结构存储起来，用于根据调用路径来限流降级\n### ClusterBuilderSlot\n用于构建资源的 ClusterNode 以及调用来源节点。ClusterNode 保持资源运行统计信息（响应时间、QPS、block 数目、线程数、异常数等）以及原始调用者统计信息列表。来源调用者的名字由 Context.enter(contextName，origin) 中的 origin 标记。\n### LogSlot\n在接下来的插槽链中发生BlockException异常的话,LogSlot会记录日志信息。\n### StatisticSlot\n是sentienl的指标数据统计插槽，也是sentienl种非常重要的一个模块，sentienl后续的限流，降级，熔断都是根据这一阶段的统计数据进行\n统计的数据\n1. clusterNode：资源唯一标识的 ClusterNode 的 runtime 统计\n2. origin：根据来自不同调用者的统计信息\n3. defaultnode: 根据上下文条目名称和资源 ID 的 runtime 统计\n4. 入口的统计  \n执行过程\n先继续执行后面的slot，如果执行成功就增加node的线程数，通过请求数，并依次执行在`StatisticSlotCallbackRegistry`中注册的`ProcessorSlotEntryCallback`的`onPass`回调。\n如果执行触发`BlockException`失败就设置错误并新增被拦截的Qps数量，并依次执行`ProcessorSlotEntryCallback`的`onBlocked`\n如果其他异常就增加错误的Qps数量\n\n在exit退出时：\n成功执行时根据当前时间和entry的createTime计算出rt(response time)，减少node的线程计数\n### SystemSlot\nSystemSlot主要是用来系统规则的检查，包括平均RT，qps，线程数，系统负载（只是针对linux系统）    \n会根据对于当前系统的整体情况，对入口的资源进行调配。其原理是让入口的流量和当前系统的 load 达到一个动态平衡。  \n**注意这个功能的两个限制:**\n\n1. 只对入口流量起作用（调用类型为EntryType.IN），对出口流量无效。可通过 SphU.entry() 指定调用类型，如果不指定，默认是EntryType.OUT。\n ```java\n Entry entry = SphU.entry(\"resourceName\"，EntryType.IN);\n ```\n2. 只在 Unix-like 的操作系统上生效   \n\nSystemSlot插槽是整个插槽链规则校验的第一个，用于系统规则设置的校验。\n检验流程\n1. 是否设置了检验规则. 只有设置了规则才会开启检验\n2. 检验资源是不是入境`resource`的type为`IN`。不是就不做检验\n3. 检查Qps是否超过配置的qps数\n4. 检查当初线程数是否超过配置最大线程数\n5. 检查响应时间是否超过配置的最大响应时间\n6. 检查系统负载是否超标(BBR算法)\n### AuthoritySlot\n根据配置的黑白名单和调用来源信息，来做黑白名单控制\n### FlowSlot\n根据预设的限流规则以及前面 slot 统计的状态，来进行流量控制；\n主要根据预设的资源的统计信息，按照固定的次序，依次生效。如果一个资源对应两条或者多条流控规则，则会根据如下次序依次检验，直到全部通过或者有一个规则生效为止:\n\n指定应用生效的规则，即针对调用方限流的；\n调用方为 other 的规则；\n调用方为 default 的规则。\n### DegradeSlot\n通过统计信息以及预设的规则，来做熔断降级；\n从clusterNode中获取信息判断是否熔断降级\n判断的类型有三种\n1. DEGRADE_GRADE_RT 根据响应时间\n2. DEGRADE_GRADE_EXCEPTION_RATIO 根据时间间隔(默认一秒钟)内业务异常比例\n3. DEGRADE_GRADE_EXCEPTION_COUNT 根据前一分钟的业务异常的数量","slug":"Sentine默认slot说明","published":1,"updated":"2023-12-19T09:19:23.173Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydqz0029fki4c9wqfvur","content":"<p>sentinel是通过slot来实现限流降级等功能，所以slot是sentinel的核心  </p>\n<p>sentinel使用<code>com.alibaba.csp.sentinel.slotchain.SlotChainBuilder</code>去构建slot的调用链<br>默认是使用<code>com.alibaba.csp.sentinel.slots.DefaultSlotChainBuilder</code><br>在<code>com.alibaba.csp.sentinel.slotchain.SlotChainProvider</code>中使用serviceLoader去加载<code>slotChianBulder</code>的实现.有自定义实现就使用自定义实现，没有就使用默认的<code>DefaultSlotChainBuilder</code>  </p>\n<span id=\"more\"></span>\n<p>DefaultSlotChainBuilder中构建的默认slot</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DefaultSlotChainBuilder</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SlotChainBuilder</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ProcessorSlotChain <span class=\"title function_\">build</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessorSlotChain</span> <span class=\"variable\">chain</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultProcessorSlotChain</span>();</span><br><span class=\"line\">        chain.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">NodeSelectorSlot</span>());</span><br><span class=\"line\">        chain.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">ClusterBuilderSlot</span>());</span><br><span class=\"line\">        chain.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">LogSlot</span>());</span><br><span class=\"line\">        chain.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">StatisticSlot</span>());</span><br><span class=\"line\">        chain.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">SystemSlot</span>());</span><br><span class=\"line\">        chain.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">AuthoritySlot</span>());</span><br><span class=\"line\">        chain.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">FlowSlot</span>());</span><br><span class=\"line\">        chain.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">DegradeSlot</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> chain;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>DefaultProcessorSlotChain类似链表，所以会按添加顺序依次调用这些slot</p>\n<h2 id=\"slot作用说明\"><a href=\"#slot作用说明\" class=\"headerlink\" title=\"slot作用说明\"></a>slot作用说明</h2><h3 id=\"NodeSelectorSlot\"><a href=\"#NodeSelectorSlot\" class=\"headerlink\" title=\"NodeSelectorSlot\"></a>NodeSelectorSlot</h3><p>负责收集资源的路径，并将这些资源的调用路径，以树状结构存储起来，用于根据调用路径来限流降级</p>\n<h3 id=\"ClusterBuilderSlot\"><a href=\"#ClusterBuilderSlot\" class=\"headerlink\" title=\"ClusterBuilderSlot\"></a>ClusterBuilderSlot</h3><p>用于构建资源的 ClusterNode 以及调用来源节点。ClusterNode 保持资源运行统计信息（响应时间、QPS、block 数目、线程数、异常数等）以及原始调用者统计信息列表。来源调用者的名字由 Context.enter(contextName，origin) 中的 origin 标记。</p>\n<h3 id=\"LogSlot\"><a href=\"#LogSlot\" class=\"headerlink\" title=\"LogSlot\"></a>LogSlot</h3><p>在接下来的插槽链中发生BlockException异常的话,LogSlot会记录日志信息。</p>\n<h3 id=\"StatisticSlot\"><a href=\"#StatisticSlot\" class=\"headerlink\" title=\"StatisticSlot\"></a>StatisticSlot</h3><p>是sentienl的指标数据统计插槽，也是sentienl种非常重要的一个模块，sentienl后续的限流，降级，熔断都是根据这一阶段的统计数据进行<br>统计的数据</p>\n<ol>\n<li>clusterNode：资源唯一标识的 ClusterNode 的 runtime 统计</li>\n<li>origin：根据来自不同调用者的统计信息</li>\n<li>defaultnode: 根据上下文条目名称和资源 ID 的 runtime 统计</li>\n<li>入口的统计<br>执行过程<br>先继续执行后面的slot，如果执行成功就增加node的线程数，通过请求数，并依次执行在<code>StatisticSlotCallbackRegistry</code>中注册的<code>ProcessorSlotEntryCallback</code>的<code>onPass</code>回调。<br>如果执行触发<code>BlockException</code>失败就设置错误并新增被拦截的Qps数量，并依次执行<code>ProcessorSlotEntryCallback</code>的<code>onBlocked</code><br>如果其他异常就增加错误的Qps数量</li>\n</ol>\n<p>在exit退出时：<br>成功执行时根据当前时间和entry的createTime计算出rt(response time)，减少node的线程计数</p>\n<h3 id=\"SystemSlot\"><a href=\"#SystemSlot\" class=\"headerlink\" title=\"SystemSlot\"></a>SystemSlot</h3><p>SystemSlot主要是用来系统规则的检查，包括平均RT，qps，线程数，系统负载（只是针对linux系统）<br>会根据对于当前系统的整体情况，对入口的资源进行调配。其原理是让入口的流量和当前系统的 load 达到一个动态平衡。<br><strong>注意这个功能的两个限制:</strong></p>\n<ol>\n<li>只对入口流量起作用（调用类型为EntryType.IN），对出口流量无效。可通过 SphU.entry() 指定调用类型，如果不指定，默认是EntryType.OUT。 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Entry</span> <span class=\"variable\">entry</span> <span class=\"operator\">=</span> SphU.entry(<span class=\"string\">&quot;resourceName&quot;</span>，EntryType.IN);</span><br></pre></td></tr></table></figure></li>\n<li>只在 Unix-like 的操作系统上生效</li>\n</ol>\n<p>SystemSlot插槽是整个插槽链规则校验的第一个，用于系统规则设置的校验。<br>检验流程</p>\n<ol>\n<li>是否设置了检验规则. 只有设置了规则才会开启检验</li>\n<li>检验资源是不是入境<code>resource</code>的type为<code>IN</code>。不是就不做检验</li>\n<li>检查Qps是否超过配置的qps数</li>\n<li>检查当初线程数是否超过配置最大线程数</li>\n<li>检查响应时间是否超过配置的最大响应时间</li>\n<li>检查系统负载是否超标(BBR算法)</li>\n</ol>\n<h3 id=\"AuthoritySlot\"><a href=\"#AuthoritySlot\" class=\"headerlink\" title=\"AuthoritySlot\"></a>AuthoritySlot</h3><p>根据配置的黑白名单和调用来源信息，来做黑白名单控制</p>\n<h3 id=\"FlowSlot\"><a href=\"#FlowSlot\" class=\"headerlink\" title=\"FlowSlot\"></a>FlowSlot</h3><p>根据预设的限流规则以及前面 slot 统计的状态，来进行流量控制；<br>主要根据预设的资源的统计信息，按照固定的次序，依次生效。如果一个资源对应两条或者多条流控规则，则会根据如下次序依次检验，直到全部通过或者有一个规则生效为止:</p>\n<p>指定应用生效的规则，即针对调用方限流的；<br>调用方为 other 的规则；<br>调用方为 default 的规则。</p>\n<h3 id=\"DegradeSlot\"><a href=\"#DegradeSlot\" class=\"headerlink\" title=\"DegradeSlot\"></a>DegradeSlot</h3><p>通过统计信息以及预设的规则，来做熔断降级；<br>从clusterNode中获取信息判断是否熔断降级<br>判断的类型有三种</p>\n<ol>\n<li>DEGRADE_GRADE_RT 根据响应时间</li>\n<li>DEGRADE_GRADE_EXCEPTION_RATIO 根据时间间隔(默认一秒钟)内业务异常比例</li>\n<li>DEGRADE_GRADE_EXCEPTION_COUNT 根据前一分钟的业务异常的数量</li>\n</ol>\n","length":2474,"excerpt":"<p>sentinel是通过slot来实现限流降级等功能，所以slot是sentinel的核心  </p>\n<p>sentinel使用<code>com.alibaba.csp.sentinel.slotchain.SlotChainBuilder</code>去构建slot的调用链<br>默认是使用<code>com.alibaba.csp.sentinel.slots.DefaultSlotChainBuilder</code><br>在<code>com.alibaba.csp.sentinel.slotchain.SlotChainProvider</code>中使用serviceLoader去加载<code>slotChianBulder</code>的实现.有自定义实现就使用自定义实现，没有就使用默认的<code>DefaultSlotChainBuilder</code>  </p>","more":"<p>DefaultSlotChainBuilder中构建的默认slot</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DefaultSlotChainBuilder</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SlotChainBuilder</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ProcessorSlotChain <span class=\"title function_\">build</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessorSlotChain</span> <span class=\"variable\">chain</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultProcessorSlotChain</span>();</span><br><span class=\"line\">        chain.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">NodeSelectorSlot</span>());</span><br><span class=\"line\">        chain.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">ClusterBuilderSlot</span>());</span><br><span class=\"line\">        chain.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">LogSlot</span>());</span><br><span class=\"line\">        chain.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">StatisticSlot</span>());</span><br><span class=\"line\">        chain.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">SystemSlot</span>());</span><br><span class=\"line\">        chain.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">AuthoritySlot</span>());</span><br><span class=\"line\">        chain.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">FlowSlot</span>());</span><br><span class=\"line\">        chain.addLast(<span class=\"keyword\">new</span> <span class=\"title class_\">DegradeSlot</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> chain;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>DefaultProcessorSlotChain类似链表，所以会按添加顺序依次调用这些slot</p>\n<h2 id=\"slot作用说明\"><a href=\"#slot作用说明\" class=\"headerlink\" title=\"slot作用说明\"></a>slot作用说明</h2><h3 id=\"NodeSelectorSlot\"><a href=\"#NodeSelectorSlot\" class=\"headerlink\" title=\"NodeSelectorSlot\"></a>NodeSelectorSlot</h3><p>负责收集资源的路径，并将这些资源的调用路径，以树状结构存储起来，用于根据调用路径来限流降级</p>\n<h3 id=\"ClusterBuilderSlot\"><a href=\"#ClusterBuilderSlot\" class=\"headerlink\" title=\"ClusterBuilderSlot\"></a>ClusterBuilderSlot</h3><p>用于构建资源的 ClusterNode 以及调用来源节点。ClusterNode 保持资源运行统计信息（响应时间、QPS、block 数目、线程数、异常数等）以及原始调用者统计信息列表。来源调用者的名字由 Context.enter(contextName，origin) 中的 origin 标记。</p>\n<h3 id=\"LogSlot\"><a href=\"#LogSlot\" class=\"headerlink\" title=\"LogSlot\"></a>LogSlot</h3><p>在接下来的插槽链中发生BlockException异常的话,LogSlot会记录日志信息。</p>\n<h3 id=\"StatisticSlot\"><a href=\"#StatisticSlot\" class=\"headerlink\" title=\"StatisticSlot\"></a>StatisticSlot</h3><p>是sentienl的指标数据统计插槽，也是sentienl种非常重要的一个模块，sentienl后续的限流，降级，熔断都是根据这一阶段的统计数据进行<br>统计的数据</p>\n<ol>\n<li>clusterNode：资源唯一标识的 ClusterNode 的 runtime 统计</li>\n<li>origin：根据来自不同调用者的统计信息</li>\n<li>defaultnode: 根据上下文条目名称和资源 ID 的 runtime 统计</li>\n<li>入口的统计<br>执行过程<br>先继续执行后面的slot，如果执行成功就增加node的线程数，通过请求数，并依次执行在<code>StatisticSlotCallbackRegistry</code>中注册的<code>ProcessorSlotEntryCallback</code>的<code>onPass</code>回调。<br>如果执行触发<code>BlockException</code>失败就设置错误并新增被拦截的Qps数量，并依次执行<code>ProcessorSlotEntryCallback</code>的<code>onBlocked</code><br>如果其他异常就增加错误的Qps数量</li>\n</ol>\n<p>在exit退出时：<br>成功执行时根据当前时间和entry的createTime计算出rt(response time)，减少node的线程计数</p>\n<h3 id=\"SystemSlot\"><a href=\"#SystemSlot\" class=\"headerlink\" title=\"SystemSlot\"></a>SystemSlot</h3><p>SystemSlot主要是用来系统规则的检查，包括平均RT，qps，线程数，系统负载（只是针对linux系统）<br>会根据对于当前系统的整体情况，对入口的资源进行调配。其原理是让入口的流量和当前系统的 load 达到一个动态平衡。<br><strong>注意这个功能的两个限制:</strong></p>\n<ol>\n<li>只对入口流量起作用（调用类型为EntryType.IN），对出口流量无效。可通过 SphU.entry() 指定调用类型，如果不指定，默认是EntryType.OUT。 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Entry</span> <span class=\"variable\">entry</span> <span class=\"operator\">=</span> SphU.entry(<span class=\"string\">&quot;resourceName&quot;</span>，EntryType.IN);</span><br></pre></td></tr></table></figure></li>\n<li>只在 Unix-like 的操作系统上生效</li>\n</ol>\n<p>SystemSlot插槽是整个插槽链规则校验的第一个，用于系统规则设置的校验。<br>检验流程</p>\n<ol>\n<li>是否设置了检验规则. 只有设置了规则才会开启检验</li>\n<li>检验资源是不是入境<code>resource</code>的type为<code>IN</code>。不是就不做检验</li>\n<li>检查Qps是否超过配置的qps数</li>\n<li>检查当初线程数是否超过配置最大线程数</li>\n<li>检查响应时间是否超过配置的最大响应时间</li>\n<li>检查系统负载是否超标(BBR算法)</li>\n</ol>\n<h3 id=\"AuthoritySlot\"><a href=\"#AuthoritySlot\" class=\"headerlink\" title=\"AuthoritySlot\"></a>AuthoritySlot</h3><p>根据配置的黑白名单和调用来源信息，来做黑白名单控制</p>\n<h3 id=\"FlowSlot\"><a href=\"#FlowSlot\" class=\"headerlink\" title=\"FlowSlot\"></a>FlowSlot</h3><p>根据预设的限流规则以及前面 slot 统计的状态，来进行流量控制；<br>主要根据预设的资源的统计信息，按照固定的次序，依次生效。如果一个资源对应两条或者多条流控规则，则会根据如下次序依次检验，直到全部通过或者有一个规则生效为止:</p>\n<p>指定应用生效的规则，即针对调用方限流的；<br>调用方为 other 的规则；<br>调用方为 default 的规则。</p>\n<h3 id=\"DegradeSlot\"><a href=\"#DegradeSlot\" class=\"headerlink\" title=\"DegradeSlot\"></a>DegradeSlot</h3><p>通过统计信息以及预设的规则，来做熔断降级；<br>从clusterNode中获取信息判断是否熔断降级<br>判断的类型有三种</p>\n<ol>\n<li>DEGRADE_GRADE_RT 根据响应时间</li>\n<li>DEGRADE_GRADE_EXCEPTION_RATIO 根据时间间隔(默认一秒钟)内业务异常比例</li>\n<li>DEGRADE_GRADE_EXCEPTION_COUNT 根据前一分钟的业务异常的数量</li>\n</ol>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"Sentine默认slot说明","path":"2019/01/13/Sentine默认slot说明/","eyeCatchImage":null,"excerpt":"<p>sentinel是通过slot来实现限流降级等功能，所以slot是sentinel的核心  </p>\n<p>sentinel使用<code>com.alibaba.csp.sentinel.slotchain.SlotChainBuilder</code>去构建slot的调用链<br>默认是使用<code>com.alibaba.csp.sentinel.slots.DefaultSlotChainBuilder</code><br>在<code>com.alibaba.csp.sentinel.slotchain.SlotChainProvider</code>中使用serviceLoader去加载<code>slotChianBulder</code>的实现.有自定义实现就使用自定义实现，没有就使用默认的<code>DefaultSlotChainBuilder</code>  </p>","date":{"_isAMomentObject":true,"_i":"2019-01-13T02:39:23.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-01-13T02:39:23.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"sentinel","tags":["sentinel"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"spring一些用法小结","date":"2017-09-14T03:46:29.000Z","keywords":"spring","_content":"\n\n## 在spring容器初始化后执行操作\n\n```java\n@Component\npublic class AfterContextStarted implements ApplicationListener<ContextRefreshedEvent> {\n\n    @Override\n    public void onApplicationEvent(ContextRefreshedEvent event) {\n        //存在springMVC时 可能会被调用两次(一次spring容器，一次springMVC容器)\n        if(applicationContext.getParent() == null){//root application context 没有parent，他就是老大.\n            //TODO something\n        }\n    }\n}\n```\n\n## spring动态注册Bean\n\n```java\n //通过ConfigurableListableBeanFactory可以注册一个bean\nConfigurableApplicationContext configurableApplicationContext =\n                (ConfigurableApplicationContext) applicationContext;\nConfigurableListableBeanFactory beanFactory = \n                configurableApplicationContext.getBeanFactory();\nbeanFactory.registerSingleton(beanName, bean);\n```\n\n## 在Bean初始化时对Bean做一些操作\n\n```java\n//实现BeanPostProcessor接口\n@Component\npublic class BeanProcessor implements BeanPostProcessor {\n\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName)\n                throws BeansException {\n        return bean;\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName)\n             throws BeansException {\n        return bean;\n    }\n}\n```\n\n## Spring静态工具类\n\n```java\n@Component\npublic class SpringContextHolder implements ApplicationContextAware {\n\n    public static ApplicationContext getApplicationContext() {\n        return applicationContext;\n    }\n\n    private static ApplicationContext applicationContext;\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext)\n             throws BeansException {\n        SpringContextHolder.applicationContext = applicationContext;\n    }\n}\n```","source":"_posts/2017/9/spring一些用法小结.md","raw":"---\ntitle: spring一些用法小结\ndate: 2017-09-14 11:46:29\ntags:\ncategories: [spring ]\nkeywords: spring\n---\n\n\n## 在spring容器初始化后执行操作\n\n```java\n@Component\npublic class AfterContextStarted implements ApplicationListener<ContextRefreshedEvent> {\n\n    @Override\n    public void onApplicationEvent(ContextRefreshedEvent event) {\n        //存在springMVC时 可能会被调用两次(一次spring容器，一次springMVC容器)\n        if(applicationContext.getParent() == null){//root application context 没有parent，他就是老大.\n            //TODO something\n        }\n    }\n}\n```\n\n## spring动态注册Bean\n\n```java\n //通过ConfigurableListableBeanFactory可以注册一个bean\nConfigurableApplicationContext configurableApplicationContext =\n                (ConfigurableApplicationContext) applicationContext;\nConfigurableListableBeanFactory beanFactory = \n                configurableApplicationContext.getBeanFactory();\nbeanFactory.registerSingleton(beanName, bean);\n```\n\n## 在Bean初始化时对Bean做一些操作\n\n```java\n//实现BeanPostProcessor接口\n@Component\npublic class BeanProcessor implements BeanPostProcessor {\n\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName)\n                throws BeansException {\n        return bean;\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName)\n             throws BeansException {\n        return bean;\n    }\n}\n```\n\n## Spring静态工具类\n\n```java\n@Component\npublic class SpringContextHolder implements ApplicationContextAware {\n\n    public static ApplicationContext getApplicationContext() {\n        return applicationContext;\n    }\n\n    private static ApplicationContext applicationContext;\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext)\n             throws BeansException {\n        SpringContextHolder.applicationContext = applicationContext;\n    }\n}\n```","slug":"2017-9-spring一些用法小结","published":1,"updated":"2023-12-19T02:25:24.531Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydr0002dfki43q36hkid","content":"<h2 id=\"在spring容器初始化后执行操作\"><a href=\"#在spring容器初始化后执行操作\" class=\"headerlink\" title=\"在spring容器初始化后执行操作\"></a>在spring容器初始化后执行操作</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AfterContextStarted</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onApplicationEvent</span><span class=\"params\">(ContextRefreshedEvent event)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//存在springMVC时 可能会被调用两次(一次spring容器，一次springMVC容器)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(applicationContext.getParent() == <span class=\"literal\">null</span>)&#123;<span class=\"comment\">//root application context 没有parent，他就是老大.</span></span><br><span class=\"line\">            <span class=\"comment\">//TODO something</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"spring动态注册Bean\"><a href=\"#spring动态注册Bean\" class=\"headerlink\" title=\"spring动态注册Bean\"></a>spring动态注册Bean</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//通过ConfigurableListableBeanFactory可以注册一个bean</span></span><br><span class=\"line\"><span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">configurableApplicationContext</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                (ConfigurableApplicationContext) applicationContext;</span><br><span class=\"line\"><span class=\"type\">ConfigurableListableBeanFactory</span> <span class=\"variable\">beanFactory</span> <span class=\"operator\">=</span> </span><br><span class=\"line\">                configurableApplicationContext.getBeanFactory();</span><br><span class=\"line\">beanFactory.registerSingleton(beanName, bean);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在Bean初始化时对Bean做一些操作\"><a href=\"#在Bean初始化时对Bean做一些操作\" class=\"headerlink\" title=\"在Bean初始化时对Bean做一些操作\"></a>在Bean初始化时对Bean做一些操作</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现BeanPostProcessor接口</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BeanProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanPostProcessor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span></span><br><span class=\"line\">                <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span></span><br><span class=\"line\">             <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Spring静态工具类\"><a href=\"#Spring静态工具类\" class=\"headerlink\" title=\"Spring静态工具类\"></a>Spring静态工具类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringContextHolder</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationContextAware</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ApplicationContext <span class=\"title function_\">getApplicationContext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span></span><br><span class=\"line\">             <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        SpringContextHolder.applicationContext = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","length":1488,"excerpt":"","more":"<h2 id=\"在spring容器初始化后执行操作\"><a href=\"#在spring容器初始化后执行操作\" class=\"headerlink\" title=\"在spring容器初始化后执行操作\"></a>在spring容器初始化后执行操作</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AfterContextStarted</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onApplicationEvent</span><span class=\"params\">(ContextRefreshedEvent event)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//存在springMVC时 可能会被调用两次(一次spring容器，一次springMVC容器)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(applicationContext.getParent() == <span class=\"literal\">null</span>)&#123;<span class=\"comment\">//root application context 没有parent，他就是老大.</span></span><br><span class=\"line\">            <span class=\"comment\">//TODO something</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"spring动态注册Bean\"><a href=\"#spring动态注册Bean\" class=\"headerlink\" title=\"spring动态注册Bean\"></a>spring动态注册Bean</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//通过ConfigurableListableBeanFactory可以注册一个bean</span></span><br><span class=\"line\"><span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">configurableApplicationContext</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                (ConfigurableApplicationContext) applicationContext;</span><br><span class=\"line\"><span class=\"type\">ConfigurableListableBeanFactory</span> <span class=\"variable\">beanFactory</span> <span class=\"operator\">=</span> </span><br><span class=\"line\">                configurableApplicationContext.getBeanFactory();</span><br><span class=\"line\">beanFactory.registerSingleton(beanName, bean);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在Bean初始化时对Bean做一些操作\"><a href=\"#在Bean初始化时对Bean做一些操作\" class=\"headerlink\" title=\"在Bean初始化时对Bean做一些操作\"></a>在Bean初始化时对Bean做一些操作</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现BeanPostProcessor接口</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BeanProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanPostProcessor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span></span><br><span class=\"line\">                <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span></span><br><span class=\"line\">             <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Spring静态工具类\"><a href=\"#Spring静态工具类\" class=\"headerlink\" title=\"Spring静态工具类\"></a>Spring静态工具类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringContextHolder</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationContextAware</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ApplicationContext <span class=\"title function_\">getApplicationContext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span></span><br><span class=\"line\">             <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        SpringContextHolder.applicationContext = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"spring一些用法小结","path":"2017/09/14/2017-9-spring一些用法小结/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2017-09-14T03:46:29.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2017-09-14T03:46:29.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"spring","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"sentinel相关概念","date":"2019-01-07T14:57:49.000Z","keywords":"sentinel","_content":"\n# Sentinel相关概念\n## 资源与规则\n### 资源\n资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文档中，我们都会用资源来描述代码块。\n\n只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。\n\n### 规则\n围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。\n<!--more-->\n\n## 限流算法\n### 计数法\n### 漏桶法\n![漏桶](漏桶.png)\n### 令牌桶\n![令牌桶](令牌桶.png)\n## 分布式限流\n![](集群限流-嵌入模式.png)\n![](集群限流-独立模式.png)\n","source":"_posts/2019/01/sentinel相关概念.md","raw":"---\ntitle: sentinel相关概念\n\ndate: 2019-01-07 22:57:49\ntags: sentinel\ncategories: sentinel\nkeywords: sentinel\n---\n\n# Sentinel相关概念\n## 资源与规则\n### 资源\n资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文档中，我们都会用资源来描述代码块。\n\n只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。\n\n### 规则\n围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。\n<!--more-->\n\n## 限流算法\n### 计数法\n### 漏桶法\n![漏桶](漏桶.png)\n### 令牌桶\n![令牌桶](令牌桶.png)\n## 分布式限流\n![](集群限流-嵌入模式.png)\n![](集群限流-独立模式.png)\n","slug":"sentinel相关概念","published":1,"updated":"2023-12-19T09:19:23.174Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydr0002ffki4ec9q2uit","content":"<h1 id=\"Sentinel相关概念\"><a href=\"#Sentinel相关概念\" class=\"headerlink\" title=\"Sentinel相关概念\"></a>Sentinel相关概念</h1><h2 id=\"资源与规则\"><a href=\"#资源与规则\" class=\"headerlink\" title=\"资源与规则\"></a>资源与规则</h2><h3 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h3><p>资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文档中，我们都会用资源来描述代码块。</p>\n<p>只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"限流算法\"><a href=\"#限流算法\" class=\"headerlink\" title=\"限流算法\"></a>限流算法</h2><h3 id=\"计数法\"><a href=\"#计数法\" class=\"headerlink\" title=\"计数法\"></a>计数法</h3><h3 id=\"漏桶法\"><a href=\"#漏桶法\" class=\"headerlink\" title=\"漏桶法\"></a>漏桶法</h3><p><img src=\"/.cn//%E6%BC%8F%E6%A1%B6.png\" alt=\"漏桶\"></p>\n<h3 id=\"令牌桶\"><a href=\"#令牌桶\" class=\"headerlink\" title=\"令牌桶\"></a>令牌桶</h3><p><img src=\"/.cn//%E4%BB%A4%E7%89%8C%E6%A1%B6.png\" alt=\"令牌桶\"></p>\n<h2 id=\"分布式限流\"><a href=\"#分布式限流\" class=\"headerlink\" title=\"分布式限流\"></a>分布式限流</h2><p><img src=\"/.cn//%E9%9B%86%E7%BE%A4%E9%99%90%E6%B5%81-%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%BC%8F.png\"><br><img src=\"/.cn//%E9%9B%86%E7%BE%A4%E9%99%90%E6%B5%81-%E7%8B%AC%E7%AB%8B%E6%A8%A1%E5%BC%8F.png\"></p>\n","length":274,"excerpt":"<h1 id=\"Sentinel相关概念\"><a href=\"#Sentinel相关概念\" class=\"headerlink\" title=\"Sentinel相关概念\"></a>Sentinel相关概念</h1><h2 id=\"资源与规则\"><a href=\"#资源与规则\" class=\"headerlink\" title=\"资源与规则\"></a>资源与规则</h2><h3 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h3><p>资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文档中，我们都会用资源来描述代码块。</p>\n<p>只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p>","more":"<h2 id=\"限流算法\"><a href=\"#限流算法\" class=\"headerlink\" title=\"限流算法\"></a>限流算法</h2><h3 id=\"计数法\"><a href=\"#计数法\" class=\"headerlink\" title=\"计数法\"></a>计数法</h3><h3 id=\"漏桶法\"><a href=\"#漏桶法\" class=\"headerlink\" title=\"漏桶法\"></a>漏桶法</h3><p><img src=\"/.cn//%E6%BC%8F%E6%A1%B6.png\" alt=\"漏桶\"></p>\n<h3 id=\"令牌桶\"><a href=\"#令牌桶\" class=\"headerlink\" title=\"令牌桶\"></a>令牌桶</h3><p><img src=\"/.cn//%E4%BB%A4%E7%89%8C%E6%A1%B6.png\" alt=\"令牌桶\"></p>\n<h2 id=\"分布式限流\"><a href=\"#分布式限流\" class=\"headerlink\" title=\"分布式限流\"></a>分布式限流</h2><p><img src=\"/.cn//%E9%9B%86%E7%BE%A4%E9%99%90%E6%B5%81-%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%BC%8F.png\"><br><img src=\"/.cn//%E9%9B%86%E7%BE%A4%E9%99%90%E6%B5%81-%E7%8B%AC%E7%AB%8B%E6%A8%A1%E5%BC%8F.png\"></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"/.cn//%E6%BC%8F%E6%A1%B6.png","popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"sentinel相关概念","path":"2019/01/07/sentinel相关概念/","eyeCatchImage":"/.cn//%E6%BC%8F%E6%A1%B6.png","excerpt":"<h1 id=\"Sentinel相关概念\"><a href=\"#Sentinel相关概念\" class=\"headerlink\" title=\"Sentinel相关概念\"></a>Sentinel相关概念</h1><h2 id=\"资源与规则\"><a href=\"#资源与规则\" class=\"headerlink\" title=\"资源与规则\"></a>资源与规则</h2><h3 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h3><p>资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文档中，我们都会用资源来描述代码块。</p>\n<p>只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p>","date":{"_isAMomentObject":true,"_i":"2019-01-07T14:57:49.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-01-07T14:57:49.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"sentinel","tags":["sentinel"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"spring-message","date":"2019-09-09T13:18:08.000Z","keywords":["spring"],"_content":"[spring-messaging](https://github.com/spring-projects/spring-framework/tree/master/spring-messaging)的源码在spring-framework项目中,属于spring-framework项目中的一个组件\n\n看项目依赖图纸依赖了spring的核心包\n![](spring-message/spring-message-2.png)\n\nSpring Messaging 是 Spring Framework 中的一个模块，其作用就是统一消息的编程模型。\n\n+ 消息`Messaging` 对应的模型就包括一个消息体 Payload 和消息头 Header:\n![](spring-message/spring-message-1.png)\n```java\npackage org.springframework.messaging;\npublic interface Message<T> {\n    T getPayload();\n    MessageHeaders getHeaders();\n}\n```\n+ 消息通道 `MessageChannel` 用于接收消息，调用 send 方法可以将消息发送至该消息通道中 :\n![](spring-message/spring-messaging-2.png)\n```java\n@FunctionalInterface\npublic interface MessageChannel {\n    long INDEFINITE_TIMEOUT = -1;\n    default boolean send(Message<?> message) {\n        return send(message, INDEFINITE_TIMEOUT);\n    }\n    boolean send(Message<?> message, long timeout);\n}\n```\n","source":"_posts/2019/09/spring-message.md","raw":"---\ntitle: spring-message\n\ndate: 2019-09-09 21:18:08\ntags: [spring]\ncategories: [spring]\nkeywords: [spring]\n---\n[spring-messaging](https://github.com/spring-projects/spring-framework/tree/master/spring-messaging)的源码在spring-framework项目中,属于spring-framework项目中的一个组件\n\n看项目依赖图纸依赖了spring的核心包\n![](spring-message/spring-message-2.png)\n\nSpring Messaging 是 Spring Framework 中的一个模块，其作用就是统一消息的编程模型。\n\n+ 消息`Messaging` 对应的模型就包括一个消息体 Payload 和消息头 Header:\n![](spring-message/spring-message-1.png)\n```java\npackage org.springframework.messaging;\npublic interface Message<T> {\n    T getPayload();\n    MessageHeaders getHeaders();\n}\n```\n+ 消息通道 `MessageChannel` 用于接收消息，调用 send 方法可以将消息发送至该消息通道中 :\n![](spring-message/spring-messaging-2.png)\n```java\n@FunctionalInterface\npublic interface MessageChannel {\n    long INDEFINITE_TIMEOUT = -1;\n    default boolean send(Message<?> message) {\n        return send(message, INDEFINITE_TIMEOUT);\n    }\n    boolean send(Message<?> message, long timeout);\n}\n```\n","slug":"spring-message","published":1,"updated":"2023-12-19T09:19:23.175Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydr1002jfki42s1i33i4","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cy9zcHJpbmctZnJhbWV3b3JrL3RyZWUvbWFzdGVyL3NwcmluZy1tZXNzYWdpbmc=\">spring-messaging<i class=\"fa fa-external-link-alt\"></i></span>的源码在spring-framework项目中,属于spring-framework项目中的一个组件</p>\n<p>看项目依赖图纸依赖了spring的核心包<br><img src=\"/.cn//spring-message-2.png\"></p>\n<p>Spring Messaging 是 Spring Framework 中的一个模块，其作用就是统一消息的编程模型。</p>\n<ul>\n<li>消息<code>Messaging</code> 对应的模型就包括一个消息体 Payload 和消息头 Header:<br><img src=\"/.cn//spring-message-1.png\"><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.messaging;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Message</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    T <span class=\"title function_\">getPayload</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    MessageHeaders <span class=\"title function_\">getHeaders</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>消息通道 <code>MessageChannel</code> 用于接收消息，调用 send 方法可以将消息发送至该消息通道中 :<br><img src=\"/.cn//spring-messaging-2.png\"><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MessageChannel</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">INDEFINITE_TIMEOUT</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"type\">boolean</span> <span class=\"title function_\">send</span><span class=\"params\">(Message&lt;?&gt; message)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> send(message, INDEFINITE_TIMEOUT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">send</span><span class=\"params\">(Message&lt;?&gt; message, <span class=\"type\">long</span> timeout)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","length":593,"excerpt":"","more":"<p><a href=\"https://github.com/spring-projects/spring-framework/tree/master/spring-messaging\">spring-messaging</a>的源码在spring-framework项目中,属于spring-framework项目中的一个组件</p>\n<p>看项目依赖图纸依赖了spring的核心包<br><img src=\"/.cn//spring-message-2.png\"></p>\n<p>Spring Messaging 是 Spring Framework 中的一个模块，其作用就是统一消息的编程模型。</p>\n<ul>\n<li>消息<code>Messaging</code> 对应的模型就包括一个消息体 Payload 和消息头 Header:<br><img src=\"/.cn//spring-message-1.png\"><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.messaging;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Message</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    T <span class=\"title function_\">getPayload</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    MessageHeaders <span class=\"title function_\">getHeaders</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>消息通道 <code>MessageChannel</code> 用于接收消息，调用 send 方法可以将消息发送至该消息通道中 :<br><img src=\"/.cn//spring-messaging-2.png\"><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MessageChannel</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">INDEFINITE_TIMEOUT</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"type\">boolean</span> <span class=\"title function_\">send</span><span class=\"params\">(Message&lt;?&gt; message)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> send(message, INDEFINITE_TIMEOUT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">send</span><span class=\"params\">(Message&lt;?&gt; message, <span class=\"type\">long</span> timeout)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/.cn//spring-message-2.png","popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"spring-message","path":"2019/09/09/spring-message/","eyeCatchImage":"/.cn//spring-message-2.png","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2019-09-09T13:18:08.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-09-09T13:18:08.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"spring","tags":["spring"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Spring动态新增删除Bean","date":"2018-03-16T01:22:34.000Z","keywords":null,"_content":"","source":"_posts/2018/3/Spring动态新增删除Bean.md","raw":"---\ntitle: Spring动态新增删除Bean\ndate: 2018-03-16 09:22:34\ntags:\ncategories:\nkeywords:\n---\n","slug":"2018-3-Spring动态新增删除Bean","published":1,"updated":"2023-12-19T02:25:24.535Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydr2002lfki43bv29o9q","content":"","length":0,"excerpt":"","more":"","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"Spring动态新增删除Bean","path":"2018/03/16/2018-3-Spring动态新增删除Bean/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2018-03-16T01:22:34.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2018-03-16T01:22:34.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"sentinel学习笔记-1","date":"2018-12-27T14:19:40.000Z","keywords":"sentinel","_content":"\n# Sentinel\n\n## Sentinel入门\n\nSentinel 是面向分布式服务架构的轻量级流量控制框架，主要以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度来帮助您保护服务的稳定性。\n\n### 主要特性 \n![主要特性](主要特性.png)\n<!---more--->\n\n### 开始使用\n1. 引入sentinel依赖\n```xml\n<dependency>\n    <groupId>com.alibaba.csp</groupId>\n    <artifactId>sentinel-core</artifactId>\n    <version>1.4.1</version>\n</dependency>\n```\n2. 定义资源\n```java\npublic static void main(String[] args) {\n    // 配置规则.\n    initFlowRules();\n\n    while (true) {\n        Entry entry = null;\n        try {\n\t    entry = SphU.entry(\"HelloWorld\");\n            // 资源中的逻辑.\n            // TODO something\n            System.out.println(\"hello world\");\n\t} catch (BlockException e1) {\n\t    System.out.println(\"blocked!\");\n\t} finally {\n\t   if (entry != null) {\n\t       entry.exit();\n\t   }\n\t}\n    }\n}\n```\n3. 定义规则\n```java\n/**\n *  每秒最多只能通过 20 个请求。\n */\nprivate static void initFlowRules(){\n    List<FlowRule> rules = new ArrayList<>();\n    FlowRule rule = new FlowRule();\n    rule.setResource(\"HelloWorld\");\n    rule.setGrade(RuleConstant.FLOW_GRADE_QPS);\n    // Set limit QPS to 20.\n    rule.setCount(20);\n    rules.add(rule);\n    FlowRuleManager.loadRules(rules);\n}\n```\n\n4. 注解支持\n 在开发时一般不会去写sentinel的控制资源的逻辑,都是由AOP拦截来实现,所以sentinel提供了注解方式`@SentinelResource`的支持  \n **需要添加注解依赖**\n ```xml\n <dependency>\n    <groupId>com.alibaba.csp</groupId>\n    <artifactId>sentinel-annotation-aspectj</artifactId>\n    <version>x.y.z</version>\n</dependency>\n ```\n```java\npublic class TestService {\n\n    // 对应的 `handleException` 函数需要位于 `ExceptionUtil` 类中，并且必须为 static 函数.\n    @SentinelResource(value = \"test\", blockHandler = \"handleException\", blockHandlerClass = {ExceptionUtil.class})\n    public void test() {\n        System.out.println(\"Test\");\n    }\n\n    // 原函数\n    @SentinelResource(value = \"hello\", blockHandler = \"exceptionHandler\", fallback = \"helloFallback\")\n    public String hello(long s) {\n        return String.format(\"Hello at %d\", s);\n    }\n    \n    // Fallback 函数，函数签名与原函数一致或加一个 Throwable 类型的参数.\n    public String helloFallback(long s) {\n        return String.format(\"Halooooo %d\", s);\n    }\n\n    // Block 异常处理函数，参数最后多一个 BlockException，其余与原函数一致.\n    public String exceptionHandler(long s, BlockException ex) {\n        // Do some log here.\n        ex.printStackTrace();\n        return \"Oops, error occurred at \" + s;\n    }\n}\n```\n\n ```java\n public @interface SentinelResource {\n    /**\n     * 资源名称，必需项（不能为空）\n     */\n    String value() default \"\";\n\n    /**\n     * 入口类型，可选项（默认为 EntryType.OUT）\n     */\n    EntryType entryType() default EntryType.OUT;\n\n    /**\n     * 对应处理 BlockException 的函数名称，可选项。若未配置，\n     * 则将 BlockException 直接抛出。blockHandler 函数访问范围需要是 public，\n     * 返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外\n     * 的参数，类型为 BlockException\n     */\n    String blockHandler() default \"\";\n\n    /**\n     * blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，\n     * 则可以指定 blockHandlerClass 为对应的类的 Class 对象，注意对应的函数\n     * 必需为 static 函数，否则无法解析。\n     */\n    Class<?>[] blockHandlerClass() default {};\n\n    /**\n     * fallback 函数名称，可选项，仅针对降级功能生效（DegradeException）。\n     * fallback 函数的访问范围需要是 public，参数类型和返回类型都需要与原方法相\n     * 匹配，并且需要和原方法在同一个类中。业务异常不会进入 fallback 逻辑。\n     * \n     * 若 blockHandler 和 fallback 都进行了配置，则遇到降级的时候首先选择 \n     * fallback 函数进行处理\n     */\n    String fallback() default \"\";\n}\n ```","source":"_posts/2018/12/sentinel学习笔记-1.md","raw":"---\ntitle: sentinel学习笔记-1\n\ndate: 2018-12-27 22:19:40\ntags: sentinel\ncategories: sentinel\nkeywords: sentinel\n---\n\n# Sentinel\n\n## Sentinel入门\n\nSentinel 是面向分布式服务架构的轻量级流量控制框架，主要以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度来帮助您保护服务的稳定性。\n\n### 主要特性 \n![主要特性](主要特性.png)\n<!---more--->\n\n### 开始使用\n1. 引入sentinel依赖\n```xml\n<dependency>\n    <groupId>com.alibaba.csp</groupId>\n    <artifactId>sentinel-core</artifactId>\n    <version>1.4.1</version>\n</dependency>\n```\n2. 定义资源\n```java\npublic static void main(String[] args) {\n    // 配置规则.\n    initFlowRules();\n\n    while (true) {\n        Entry entry = null;\n        try {\n\t    entry = SphU.entry(\"HelloWorld\");\n            // 资源中的逻辑.\n            // TODO something\n            System.out.println(\"hello world\");\n\t} catch (BlockException e1) {\n\t    System.out.println(\"blocked!\");\n\t} finally {\n\t   if (entry != null) {\n\t       entry.exit();\n\t   }\n\t}\n    }\n}\n```\n3. 定义规则\n```java\n/**\n *  每秒最多只能通过 20 个请求。\n */\nprivate static void initFlowRules(){\n    List<FlowRule> rules = new ArrayList<>();\n    FlowRule rule = new FlowRule();\n    rule.setResource(\"HelloWorld\");\n    rule.setGrade(RuleConstant.FLOW_GRADE_QPS);\n    // Set limit QPS to 20.\n    rule.setCount(20);\n    rules.add(rule);\n    FlowRuleManager.loadRules(rules);\n}\n```\n\n4. 注解支持\n 在开发时一般不会去写sentinel的控制资源的逻辑,都是由AOP拦截来实现,所以sentinel提供了注解方式`@SentinelResource`的支持  \n **需要添加注解依赖**\n ```xml\n <dependency>\n    <groupId>com.alibaba.csp</groupId>\n    <artifactId>sentinel-annotation-aspectj</artifactId>\n    <version>x.y.z</version>\n</dependency>\n ```\n```java\npublic class TestService {\n\n    // 对应的 `handleException` 函数需要位于 `ExceptionUtil` 类中，并且必须为 static 函数.\n    @SentinelResource(value = \"test\", blockHandler = \"handleException\", blockHandlerClass = {ExceptionUtil.class})\n    public void test() {\n        System.out.println(\"Test\");\n    }\n\n    // 原函数\n    @SentinelResource(value = \"hello\", blockHandler = \"exceptionHandler\", fallback = \"helloFallback\")\n    public String hello(long s) {\n        return String.format(\"Hello at %d\", s);\n    }\n    \n    // Fallback 函数，函数签名与原函数一致或加一个 Throwable 类型的参数.\n    public String helloFallback(long s) {\n        return String.format(\"Halooooo %d\", s);\n    }\n\n    // Block 异常处理函数，参数最后多一个 BlockException，其余与原函数一致.\n    public String exceptionHandler(long s, BlockException ex) {\n        // Do some log here.\n        ex.printStackTrace();\n        return \"Oops, error occurred at \" + s;\n    }\n}\n```\n\n ```java\n public @interface SentinelResource {\n    /**\n     * 资源名称，必需项（不能为空）\n     */\n    String value() default \"\";\n\n    /**\n     * 入口类型，可选项（默认为 EntryType.OUT）\n     */\n    EntryType entryType() default EntryType.OUT;\n\n    /**\n     * 对应处理 BlockException 的函数名称，可选项。若未配置，\n     * 则将 BlockException 直接抛出。blockHandler 函数访问范围需要是 public，\n     * 返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外\n     * 的参数，类型为 BlockException\n     */\n    String blockHandler() default \"\";\n\n    /**\n     * blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，\n     * 则可以指定 blockHandlerClass 为对应的类的 Class 对象，注意对应的函数\n     * 必需为 static 函数，否则无法解析。\n     */\n    Class<?>[] blockHandlerClass() default {};\n\n    /**\n     * fallback 函数名称，可选项，仅针对降级功能生效（DegradeException）。\n     * fallback 函数的访问范围需要是 public，参数类型和返回类型都需要与原方法相\n     * 匹配，并且需要和原方法在同一个类中。业务异常不会进入 fallback 逻辑。\n     * \n     * 若 blockHandler 和 fallback 都进行了配置，则遇到降级的时候首先选择 \n     * fallback 函数进行处理\n     */\n    String fallback() default \"\";\n}\n ```","slug":"sentinel学习笔记-1","published":1,"updated":"2023-12-19T09:19:23.172Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydr3002pfki47urybgyw","content":"<h1 id=\"Sentinel\"><a href=\"#Sentinel\" class=\"headerlink\" title=\"Sentinel\"></a>Sentinel</h1><h2 id=\"Sentinel入门\"><a href=\"#Sentinel入门\" class=\"headerlink\" title=\"Sentinel入门\"></a>Sentinel入门</h2><p>Sentinel 是面向分布式服务架构的轻量级流量控制框架，主要以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度来帮助您保护服务的稳定性。</p>\n<h3 id=\"主要特性\"><a href=\"#主要特性\" class=\"headerlink\" title=\"主要特性\"></a>主要特性</h3><p><img src=\"/.cn//%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7.png\" alt=\"主要特性\"></p>\n<!---more--->\n\n<h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><ol>\n<li><p>引入sentinel依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>定义资源</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置规则.</span></span><br><span class=\"line\">    initFlowRules();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">Entry</span> <span class=\"variable\">entry</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t    entry = SphU.entry(<span class=\"string\">&quot;HelloWorld&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 资源中的逻辑.</span></span><br><span class=\"line\">            <span class=\"comment\">// TODO something</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (BlockException e1) &#123;</span><br><span class=\"line\">\t    System.out.println(<span class=\"string\">&quot;blocked!&quot;</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t   <span class=\"keyword\">if</span> (entry != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t       entry.exit();</span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>定义规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  每秒最多只能通过 20 个请求。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initFlowRules</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    List&lt;FlowRule&gt; rules = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">FlowRule</span> <span class=\"variable\">rule</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FlowRule</span>();</span><br><span class=\"line\">    rule.setResource(<span class=\"string\">&quot;HelloWorld&quot;</span>);</span><br><span class=\"line\">    rule.setGrade(RuleConstant.FLOW_GRADE_QPS);</span><br><span class=\"line\">    <span class=\"comment\">// Set limit QPS to 20.</span></span><br><span class=\"line\">    rule.setCount(<span class=\"number\">20</span>);</span><br><span class=\"line\">    rules.add(rule);</span><br><span class=\"line\">    FlowRuleManager.loadRules(rules);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注解支持<br> 在开发时一般不会去写sentinel的控制资源的逻辑,都是由AOP拦截来实现,所以sentinel提供了注解方式<code>@SentinelResource</code>的支持<br> <strong>需要添加注解依赖</strong></p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-annotation-aspectj<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>x.y.z<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对应的 `handleException` 函数需要位于 `ExceptionUtil` 类中，并且必须为 static 函数.</span></span><br><span class=\"line\">    <span class=\"meta\">@SentinelResource(value = &quot;test&quot;, blockHandler = &quot;handleException&quot;, blockHandlerClass = &#123;ExceptionUtil.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Test&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 原函数</span></span><br><span class=\"line\">    <span class=\"meta\">@SentinelResource(value = &quot;hello&quot;, blockHandler = &quot;exceptionHandler&quot;, fallback = &quot;helloFallback&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(<span class=\"type\">long</span> s)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;Hello at %d&quot;</span>, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Fallback 函数，函数签名与原函数一致或加一个 Throwable 类型的参数.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">helloFallback</span><span class=\"params\">(<span class=\"type\">long</span> s)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;Halooooo %d&quot;</span>, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Block 异常处理函数，参数最后多一个 BlockException，其余与原函数一致.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">exceptionHandler</span><span class=\"params\">(<span class=\"type\">long</span> s, BlockException ex)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Do some log here.</span></span><br><span class=\"line\">        ex.printStackTrace();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Oops, error occurred at &quot;</span> + s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SentinelResource &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 资源名称，必需项（不能为空）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 入口类型，可选项（默认为 EntryType.OUT）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    EntryType <span class=\"title function_\">entryType</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> EntryType.OUT;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 对应处理 BlockException 的函数名称，可选项。若未配置，</span></span><br><span class=\"line\"><span class=\"comment\">     * 则将 BlockException 直接抛出。blockHandler 函数访问范围需要是 public，</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外</span></span><br><span class=\"line\"><span class=\"comment\">     * 的参数，类型为 BlockException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    String <span class=\"title function_\">blockHandler</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，</span></span><br><span class=\"line\"><span class=\"comment\">     * 则可以指定 blockHandlerClass 为对应的类的 Class 对象，注意对应的函数</span></span><br><span class=\"line\"><span class=\"comment\">     * 必需为 static 函数，否则无法解析。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Class&lt;?&gt;[] blockHandlerClass() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * fallback 函数名称，可选项，仅针对降级功能生效（DegradeException）。</span></span><br><span class=\"line\"><span class=\"comment\">     * fallback 函数的访问范围需要是 public，参数类型和返回类型都需要与原方法相</span></span><br><span class=\"line\"><span class=\"comment\">     * 匹配，并且需要和原方法在同一个类中。业务异常不会进入 fallback 逻辑。</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 若 blockHandler 和 fallback 都进行了配置，则遇到降级的时候首先选择 </span></span><br><span class=\"line\"><span class=\"comment\">     * fallback 函数进行处理</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    String <span class=\"title function_\">fallback</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","length":2964,"excerpt":"","more":"<h1 id=\"Sentinel\"><a href=\"#Sentinel\" class=\"headerlink\" title=\"Sentinel\"></a>Sentinel</h1><h2 id=\"Sentinel入门\"><a href=\"#Sentinel入门\" class=\"headerlink\" title=\"Sentinel入门\"></a>Sentinel入门</h2><p>Sentinel 是面向分布式服务架构的轻量级流量控制框架，主要以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度来帮助您保护服务的稳定性。</p>\n<h3 id=\"主要特性\"><a href=\"#主要特性\" class=\"headerlink\" title=\"主要特性\"></a>主要特性</h3><p><img src=\"/.cn//%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7.png\" alt=\"主要特性\"></p>\n<!---more--->\n\n<h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><ol>\n<li><p>引入sentinel依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>定义资源</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置规则.</span></span><br><span class=\"line\">    initFlowRules();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">Entry</span> <span class=\"variable\">entry</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t    entry = SphU.entry(<span class=\"string\">&quot;HelloWorld&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 资源中的逻辑.</span></span><br><span class=\"line\">            <span class=\"comment\">// TODO something</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (BlockException e1) &#123;</span><br><span class=\"line\">\t    System.out.println(<span class=\"string\">&quot;blocked!&quot;</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t   <span class=\"keyword\">if</span> (entry != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t       entry.exit();</span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>定义规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  每秒最多只能通过 20 个请求。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initFlowRules</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    List&lt;FlowRule&gt; rules = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">FlowRule</span> <span class=\"variable\">rule</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FlowRule</span>();</span><br><span class=\"line\">    rule.setResource(<span class=\"string\">&quot;HelloWorld&quot;</span>);</span><br><span class=\"line\">    rule.setGrade(RuleConstant.FLOW_GRADE_QPS);</span><br><span class=\"line\">    <span class=\"comment\">// Set limit QPS to 20.</span></span><br><span class=\"line\">    rule.setCount(<span class=\"number\">20</span>);</span><br><span class=\"line\">    rules.add(rule);</span><br><span class=\"line\">    FlowRuleManager.loadRules(rules);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注解支持<br> 在开发时一般不会去写sentinel的控制资源的逻辑,都是由AOP拦截来实现,所以sentinel提供了注解方式<code>@SentinelResource</code>的支持<br> <strong>需要添加注解依赖</strong></p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-annotation-aspectj<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>x.y.z<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对应的 `handleException` 函数需要位于 `ExceptionUtil` 类中，并且必须为 static 函数.</span></span><br><span class=\"line\">    <span class=\"meta\">@SentinelResource(value = &quot;test&quot;, blockHandler = &quot;handleException&quot;, blockHandlerClass = &#123;ExceptionUtil.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Test&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 原函数</span></span><br><span class=\"line\">    <span class=\"meta\">@SentinelResource(value = &quot;hello&quot;, blockHandler = &quot;exceptionHandler&quot;, fallback = &quot;helloFallback&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(<span class=\"type\">long</span> s)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;Hello at %d&quot;</span>, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Fallback 函数，函数签名与原函数一致或加一个 Throwable 类型的参数.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">helloFallback</span><span class=\"params\">(<span class=\"type\">long</span> s)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;Halooooo %d&quot;</span>, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Block 异常处理函数，参数最后多一个 BlockException，其余与原函数一致.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">exceptionHandler</span><span class=\"params\">(<span class=\"type\">long</span> s, BlockException ex)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Do some log here.</span></span><br><span class=\"line\">        ex.printStackTrace();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Oops, error occurred at &quot;</span> + s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SentinelResource &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 资源名称，必需项（不能为空）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 入口类型，可选项（默认为 EntryType.OUT）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    EntryType <span class=\"title function_\">entryType</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> EntryType.OUT;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 对应处理 BlockException 的函数名称，可选项。若未配置，</span></span><br><span class=\"line\"><span class=\"comment\">     * 则将 BlockException 直接抛出。blockHandler 函数访问范围需要是 public，</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外</span></span><br><span class=\"line\"><span class=\"comment\">     * 的参数，类型为 BlockException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    String <span class=\"title function_\">blockHandler</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，</span></span><br><span class=\"line\"><span class=\"comment\">     * 则可以指定 blockHandlerClass 为对应的类的 Class 对象，注意对应的函数</span></span><br><span class=\"line\"><span class=\"comment\">     * 必需为 static 函数，否则无法解析。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Class&lt;?&gt;[] blockHandlerClass() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * fallback 函数名称，可选项，仅针对降级功能生效（DegradeException）。</span></span><br><span class=\"line\"><span class=\"comment\">     * fallback 函数的访问范围需要是 public，参数类型和返回类型都需要与原方法相</span></span><br><span class=\"line\"><span class=\"comment\">     * 匹配，并且需要和原方法在同一个类中。业务异常不会进入 fallback 逻辑。</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 若 blockHandler 和 fallback 都进行了配置，则遇到降级的时候首先选择 </span></span><br><span class=\"line\"><span class=\"comment\">     * fallback 函数进行处理</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    String <span class=\"title function_\">fallback</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"/.cn//%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7.png","popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"sentinel学习笔记-1","path":"2018/12/27/sentinel学习笔记-1/","eyeCatchImage":"/.cn//%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7.png","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2018-12-27T14:19:40.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2018-12-27T14:19:40.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"sentinel","tags":["sentinel"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"springmvc学习","date":"2018-03-20T04:18:39.000Z","keywords":"spring springmvc","_content":"# SpringMvc初始化\n\nSpringmvc的入口是`DispatcherServlet`，先从这里看起\n`DispatcherServlet`的继承关系图\n ![dispatcherServlet继承图](http://cdn.xyz327.cn/images/post/spring/dispatcher-servlet.png)\n<!--more-->\n\n## 初始化\n\n### `DispatchServlet`中的`static`块\n\n在`static`块中加载了一个与`DispatcherServlet`同包下的名为`DispatcherServlet.properties`的配置文件，使用配置文件中的配置作为`DispatcherServlet`运行时的默认策略组件\n\n### init方法\n\n`DispatcherServlet`继承了`HttpServlet`,在web容器初始化后会调用`Servlet#init(ServletConfig)`方法进行初始化\n\n#### 初始化调用流程\n\n1. `javax.servlet.GenericServlet#init(javax.servlet.ServletConfig)`\n    将ServletConfig赋值给自身的config属性，使子类可以通过`javax.servlet.GenericServlet#getServletConfig()`获取\n2. `org.springframework.web.servlet.HttpServletBean#init()`\n    将配置信息设置到`DispatcherServlet`中\n    ```java\n    //获得web.xml中的contextConfigLocation配置属性，就是spring MVC的配置文件\n    PropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);\n    BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);\n    //获取服务器的各种信息\n    ResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());\n    bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment()));\n    //模板方法，可以在子类中调用(DispatcherServlet没有)，做一些初始化工作，bw代表DispatcherServelt\n    initBeanWrapper(bw);\n    //将配置的初始化值设置到DispatcherServlet中\n    bw.setPropertyValues(pvs, true);\n    ```\n3. `org.springframework.web.servlet.FrameworkServlet#initServletBean()`\n    初始化SpringMvc的Ioc容器\n4. `org.springframework.web.servlet.DispatcherServlet#onRefresh()`\n    初始化`DispatcherServlet`的各个组件\n    ```java\n    protected void initStrategies(ApplicationContext context) {\n        // 文件上传请求的解析器\n        initMultipartResolver(context);\n        // 本地化解析器\n        initLocaleResolver(context);\n        // 主题解析器\n        initThemeResolver(context);\n        // 通过HandlerMapping，将请求映射到处理器\n        initHandlerMappings(context);\n        // 通过HandlerAdapter支持多种类型的处理器\n        initHandlerAdapters(context);\n        // 如果执行过程中遇到异常，将交给HandlerExceptionResolver来解析\n        initHandlerExceptionResolvers(context);\n        // 直接解析请求到视图名\n        initRequestToViewNameTranslator(context);\n        // 通过viewResolver解析逻辑视图到具体视图实现\n        initViewResolvers(context);\n        // FlashMapManager请求重定向数据管理器\n        initFlashMapManager(context);\n    }\n    ```","source":"_posts/2018/3/springmvc学习.md","raw":"---\ntitle: springmvc学习\ndate: 2018-03-20 12:18:39\ntags: springmvc\ncategories: [springmvc]\nkeywords: spring springmvc\n---\n# SpringMvc初始化\n\nSpringmvc的入口是`DispatcherServlet`，先从这里看起\n`DispatcherServlet`的继承关系图\n ![dispatcherServlet继承图](http://cdn.xyz327.cn/images/post/spring/dispatcher-servlet.png)\n<!--more-->\n\n## 初始化\n\n### `DispatchServlet`中的`static`块\n\n在`static`块中加载了一个与`DispatcherServlet`同包下的名为`DispatcherServlet.properties`的配置文件，使用配置文件中的配置作为`DispatcherServlet`运行时的默认策略组件\n\n### init方法\n\n`DispatcherServlet`继承了`HttpServlet`,在web容器初始化后会调用`Servlet#init(ServletConfig)`方法进行初始化\n\n#### 初始化调用流程\n\n1. `javax.servlet.GenericServlet#init(javax.servlet.ServletConfig)`\n    将ServletConfig赋值给自身的config属性，使子类可以通过`javax.servlet.GenericServlet#getServletConfig()`获取\n2. `org.springframework.web.servlet.HttpServletBean#init()`\n    将配置信息设置到`DispatcherServlet`中\n    ```java\n    //获得web.xml中的contextConfigLocation配置属性，就是spring MVC的配置文件\n    PropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);\n    BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);\n    //获取服务器的各种信息\n    ResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());\n    bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment()));\n    //模板方法，可以在子类中调用(DispatcherServlet没有)，做一些初始化工作，bw代表DispatcherServelt\n    initBeanWrapper(bw);\n    //将配置的初始化值设置到DispatcherServlet中\n    bw.setPropertyValues(pvs, true);\n    ```\n3. `org.springframework.web.servlet.FrameworkServlet#initServletBean()`\n    初始化SpringMvc的Ioc容器\n4. `org.springframework.web.servlet.DispatcherServlet#onRefresh()`\n    初始化`DispatcherServlet`的各个组件\n    ```java\n    protected void initStrategies(ApplicationContext context) {\n        // 文件上传请求的解析器\n        initMultipartResolver(context);\n        // 本地化解析器\n        initLocaleResolver(context);\n        // 主题解析器\n        initThemeResolver(context);\n        // 通过HandlerMapping，将请求映射到处理器\n        initHandlerMappings(context);\n        // 通过HandlerAdapter支持多种类型的处理器\n        initHandlerAdapters(context);\n        // 如果执行过程中遇到异常，将交给HandlerExceptionResolver来解析\n        initHandlerExceptionResolvers(context);\n        // 直接解析请求到视图名\n        initRequestToViewNameTranslator(context);\n        // 通过viewResolver解析逻辑视图到具体视图实现\n        initViewResolvers(context);\n        // FlashMapManager请求重定向数据管理器\n        initFlashMapManager(context);\n    }\n    ```","slug":"2018-3-springmvc学习","published":1,"updated":"2023-12-19T02:25:24.535Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydr4002rfki44h5ygk2t","content":"<h1 id=\"SpringMvc初始化\"><a href=\"#SpringMvc初始化\" class=\"headerlink\" title=\"SpringMvc初始化\"></a>SpringMvc初始化</h1><p>Springmvc的入口是<code>DispatcherServlet</code>，先从这里看起<br><code>DispatcherServlet</code>的继承关系图<br> <img src=\"http://cdn.xyz327.cn/images/post/spring/dispatcher-servlet.png\" alt=\"dispatcherServlet继承图\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><h3 id=\"DispatchServlet中的static块\"><a href=\"#DispatchServlet中的static块\" class=\"headerlink\" title=\"DispatchServlet中的static块\"></a><code>DispatchServlet</code>中的<code>static</code>块</h3><p>在<code>static</code>块中加载了一个与<code>DispatcherServlet</code>同包下的名为<code>DispatcherServlet.properties</code>的配置文件，使用配置文件中的配置作为<code>DispatcherServlet</code>运行时的默认策略组件</p>\n<h3 id=\"init方法\"><a href=\"#init方法\" class=\"headerlink\" title=\"init方法\"></a>init方法</h3><p><code>DispatcherServlet</code>继承了<code>HttpServlet</code>,在web容器初始化后会调用<code>Servlet#init(ServletConfig)</code>方法进行初始化</p>\n<h4 id=\"初始化调用流程\"><a href=\"#初始化调用流程\" class=\"headerlink\" title=\"初始化调用流程\"></a>初始化调用流程</h4><ol>\n<li><code>javax.servlet.GenericServlet#init(javax.servlet.ServletConfig)</code><br> 将ServletConfig赋值给自身的config属性，使子类可以通过<code>javax.servlet.GenericServlet#getServletConfig()</code>获取</li>\n<li><code>org.springframework.web.servlet.HttpServletBean#init()</code><br> 将配置信息设置到<code>DispatcherServlet</code>中 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获得web.xml中的contextConfigLocation配置属性，就是spring MVC的配置文件</span></span><br><span class=\"line\"><span class=\"type\">PropertyValues</span> <span class=\"variable\">pvs</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletConfigPropertyValues</span>(getServletConfig(), <span class=\"built_in\">this</span>.requiredProperties);</span><br><span class=\"line\"><span class=\"type\">BeanWrapper</span> <span class=\"variable\">bw</span> <span class=\"operator\">=</span> PropertyAccessorFactory.forBeanPropertyAccess(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"><span class=\"comment\">//获取服务器的各种信息</span></span><br><span class=\"line\"><span class=\"type\">ResourceLoader</span> <span class=\"variable\">resourceLoader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletContextResourceLoader</span>(getServletContext());</span><br><span class=\"line\">bw.registerCustomEditor(Resource.class, <span class=\"keyword\">new</span> <span class=\"title class_\">ResourceEditor</span>(resourceLoader, getEnvironment()));</span><br><span class=\"line\"><span class=\"comment\">//模板方法，可以在子类中调用(DispatcherServlet没有)，做一些初始化工作，bw代表DispatcherServelt</span></span><br><span class=\"line\">initBeanWrapper(bw);</span><br><span class=\"line\"><span class=\"comment\">//将配置的初始化值设置到DispatcherServlet中</span></span><br><span class=\"line\">bw.setPropertyValues(pvs, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure></li>\n<li><code>org.springframework.web.servlet.FrameworkServlet#initServletBean()</code><br> 初始化SpringMvc的Ioc容器</li>\n<li><code>org.springframework.web.servlet.DispatcherServlet#onRefresh()</code><br> 初始化<code>DispatcherServlet</code>的各个组件 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initStrategies</span><span class=\"params\">(ApplicationContext context)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 文件上传请求的解析器</span></span><br><span class=\"line\">    initMultipartResolver(context);</span><br><span class=\"line\">    <span class=\"comment\">// 本地化解析器</span></span><br><span class=\"line\">    initLocaleResolver(context);</span><br><span class=\"line\">    <span class=\"comment\">// 主题解析器</span></span><br><span class=\"line\">    initThemeResolver(context);</span><br><span class=\"line\">    <span class=\"comment\">// 通过HandlerMapping，将请求映射到处理器</span></span><br><span class=\"line\">    initHandlerMappings(context);</span><br><span class=\"line\">    <span class=\"comment\">// 通过HandlerAdapter支持多种类型的处理器</span></span><br><span class=\"line\">    initHandlerAdapters(context);</span><br><span class=\"line\">    <span class=\"comment\">// 如果执行过程中遇到异常，将交给HandlerExceptionResolver来解析</span></span><br><span class=\"line\">    initHandlerExceptionResolvers(context);</span><br><span class=\"line\">    <span class=\"comment\">// 直接解析请求到视图名</span></span><br><span class=\"line\">    initRequestToViewNameTranslator(context);</span><br><span class=\"line\">    <span class=\"comment\">// 通过viewResolver解析逻辑视图到具体视图实现</span></span><br><span class=\"line\">    initViewResolvers(context);</span><br><span class=\"line\">    <span class=\"comment\">// FlashMapManager请求重定向数据管理器</span></span><br><span class=\"line\">    initFlashMapManager(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","length":1830,"excerpt":"<h1 id=\"SpringMvc初始化\"><a href=\"#SpringMvc初始化\" class=\"headerlink\" title=\"SpringMvc初始化\"></a>SpringMvc初始化</h1><p>Springmvc的入口是<code>DispatcherServlet</code>，先从这里看起<br><code>DispatcherServlet</code>的继承关系图<br> <img src=\"http://cdn.xyz327.cn/images/post/spring/dispatcher-servlet.png\" alt=\"dispatcherServlet继承图\"></p>","more":"<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><h3 id=\"DispatchServlet中的static块\"><a href=\"#DispatchServlet中的static块\" class=\"headerlink\" title=\"DispatchServlet中的static块\"></a><code>DispatchServlet</code>中的<code>static</code>块</h3><p>在<code>static</code>块中加载了一个与<code>DispatcherServlet</code>同包下的名为<code>DispatcherServlet.properties</code>的配置文件，使用配置文件中的配置作为<code>DispatcherServlet</code>运行时的默认策略组件</p>\n<h3 id=\"init方法\"><a href=\"#init方法\" class=\"headerlink\" title=\"init方法\"></a>init方法</h3><p><code>DispatcherServlet</code>继承了<code>HttpServlet</code>,在web容器初始化后会调用<code>Servlet#init(ServletConfig)</code>方法进行初始化</p>\n<h4 id=\"初始化调用流程\"><a href=\"#初始化调用流程\" class=\"headerlink\" title=\"初始化调用流程\"></a>初始化调用流程</h4><ol>\n<li><code>javax.servlet.GenericServlet#init(javax.servlet.ServletConfig)</code><br> 将ServletConfig赋值给自身的config属性，使子类可以通过<code>javax.servlet.GenericServlet#getServletConfig()</code>获取</li>\n<li><code>org.springframework.web.servlet.HttpServletBean#init()</code><br> 将配置信息设置到<code>DispatcherServlet</code>中 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获得web.xml中的contextConfigLocation配置属性，就是spring MVC的配置文件</span></span><br><span class=\"line\"><span class=\"type\">PropertyValues</span> <span class=\"variable\">pvs</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletConfigPropertyValues</span>(getServletConfig(), <span class=\"built_in\">this</span>.requiredProperties);</span><br><span class=\"line\"><span class=\"type\">BeanWrapper</span> <span class=\"variable\">bw</span> <span class=\"operator\">=</span> PropertyAccessorFactory.forBeanPropertyAccess(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"><span class=\"comment\">//获取服务器的各种信息</span></span><br><span class=\"line\"><span class=\"type\">ResourceLoader</span> <span class=\"variable\">resourceLoader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletContextResourceLoader</span>(getServletContext());</span><br><span class=\"line\">bw.registerCustomEditor(Resource.class, <span class=\"keyword\">new</span> <span class=\"title class_\">ResourceEditor</span>(resourceLoader, getEnvironment()));</span><br><span class=\"line\"><span class=\"comment\">//模板方法，可以在子类中调用(DispatcherServlet没有)，做一些初始化工作，bw代表DispatcherServelt</span></span><br><span class=\"line\">initBeanWrapper(bw);</span><br><span class=\"line\"><span class=\"comment\">//将配置的初始化值设置到DispatcherServlet中</span></span><br><span class=\"line\">bw.setPropertyValues(pvs, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure></li>\n<li><code>org.springframework.web.servlet.FrameworkServlet#initServletBean()</code><br> 初始化SpringMvc的Ioc容器</li>\n<li><code>org.springframework.web.servlet.DispatcherServlet#onRefresh()</code><br> 初始化<code>DispatcherServlet</code>的各个组件 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initStrategies</span><span class=\"params\">(ApplicationContext context)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 文件上传请求的解析器</span></span><br><span class=\"line\">    initMultipartResolver(context);</span><br><span class=\"line\">    <span class=\"comment\">// 本地化解析器</span></span><br><span class=\"line\">    initLocaleResolver(context);</span><br><span class=\"line\">    <span class=\"comment\">// 主题解析器</span></span><br><span class=\"line\">    initThemeResolver(context);</span><br><span class=\"line\">    <span class=\"comment\">// 通过HandlerMapping，将请求映射到处理器</span></span><br><span class=\"line\">    initHandlerMappings(context);</span><br><span class=\"line\">    <span class=\"comment\">// 通过HandlerAdapter支持多种类型的处理器</span></span><br><span class=\"line\">    initHandlerAdapters(context);</span><br><span class=\"line\">    <span class=\"comment\">// 如果执行过程中遇到异常，将交给HandlerExceptionResolver来解析</span></span><br><span class=\"line\">    initHandlerExceptionResolvers(context);</span><br><span class=\"line\">    <span class=\"comment\">// 直接解析请求到视图名</span></span><br><span class=\"line\">    initRequestToViewNameTranslator(context);</span><br><span class=\"line\">    <span class=\"comment\">// 通过viewResolver解析逻辑视图到具体视图实现</span></span><br><span class=\"line\">    initViewResolvers(context);</span><br><span class=\"line\">    <span class=\"comment\">// FlashMapManager请求重定向数据管理器</span></span><br><span class=\"line\">    initFlashMapManager(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>","popularPost_tmp_postPath":true,"eyeCatchImage":"http://cdn.xyz327.cn/images/post/spring/dispatcher-servlet.png","popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"springmvc学习","path":"2018/03/20/2018-3-springmvc学习/","eyeCatchImage":"http://cdn.xyz327.cn/images/post/spring/dispatcher-servlet.png","excerpt":"<h1 id=\"SpringMvc初始化\"><a href=\"#SpringMvc初始化\" class=\"headerlink\" title=\"SpringMvc初始化\"></a>SpringMvc初始化</h1><p>Springmvc的入口是<code>DispatcherServlet</code>，先从这里看起<br><code>DispatcherServlet</code>的继承关系图<br> <img src=\"http://cdn.xyz327.cn/images/post/spring/dispatcher-servlet.png\" alt=\"dispatcherServlet继承图\"></p>","date":{"_isAMomentObject":true,"_i":"2018-03-20T04:18:39.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2018-03-20T04:18:39.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"springmvc","tags":["springmvc"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"springmvc初始化MultipartResolver","date":"2018-04-07T01:47:24.000Z","keywords":"springmvc spring","_content":"\nspringmvc 在容器初始化后使用监听ContextRefreshedEvent事件来初始化`DispatcherServlet`中的各种属性\n`MultipartResolver`就是其中一个\n初始化`MultipartResolver`是从IOC容器里面获取一个名为`multipartResolver`的`MultipartResolver`的Bean\n\n`MultipartResolver`是用于处理HTTP上传文件的请求处理器\nspringmvc在处理文件上传时,使用`MultipartResolver`把`HttpServletRequest`解析包装成`MultipartHttpServletRequest`对象\n`MultipartHttpServletRequest`提供了获取`MultipartFile`的方法\n\n`MultipartHttpServletRequest`接口继承了`HttpServletRequest`\n`MultipartFile`提供了获取上传的文件相关属性以及文件流的方法\n在Controller中使用`MultipartHttpServletRequest`更方便的处理上传文件\n\n## MultipartResolver\n\n```java\npublic interface MultipartResolver {\n    /**\n     * 判断给定的请求是否包含 multipart 内容\n     * 通常是检查request的Content-Type是否是 \"multipart/form-data\" \n     * 实际还是依赖解析器自己的实现\n     */\n    boolean isMultipart(HttpServletRequest request);\n\n    /**\n     * 解析HTTP request 包含的文件和参数并把它们包装到 \n     * {@link org.springframework.web.multipart.MultipartHttpServletRequest}对象中\n     * 这个接口实现了{@link javax.servlet.http.HttpServletRequest}\n     */\n    MultipartHttpServletRequest resolveMultipart(HttpServletRequest request) throws MultipartException;\n\n    /**\n     * 清理资源，例如存储的上传文件\n     */\n    void cleanupMultipart(MultipartHttpServletRequest request);\n}\n```\nspringmvc为`MultipartResolver`提供了两种实现\n 1. `StandardServletMultipartResolver`\n    使用HTTPServletRequest自带的解析文件\n 2. `CommonsMultipartResolver`\n    使用apache commons-io 处理上传的文件\n![MultipartResolver实现类](http://cdn.xyz327.cn/images/post/springmvc/multipartResolver.png)\n\n## MultipartHttpServletRequest\n\n```java\npublic interface MultipartHttpServletRequest extends HttpServletRequest, MultipartRequest {\n\tHttpMethod getRequestMethod();\n\n\tHttpHeaders getRequestHeaders();\n\n\tHttpHeaders getMultipartHeaders(String paramOrFileName);\n}\n```\n```java\npublic interface MultipartRequest {\n\tIterator<String> getFileNames();\n\n\tMultipartFile getFile(String name);\n\n\tList<MultipartFile> getFiles(String name);\n\n\tMap<String, MultipartFile> getFileMap();\n\n\tMultiValueMap<String, MultipartFile> getMultiFileMap();\n\n\tString getMultipartContentType(String paramOrFileName);\n}\n```\n`MultipartHttpServletRequest`提供了对于上传文件的快捷访问的方法\n\nspringmvc对于`MultipartHttpServletRequest`同样提供了两种实现\n 1. `StandardMultipartHttpServletRequest`\n 2. `DefaultMultipartHttpServletRequest`\n![MultipartHttpServletRequest实现类](http://cdn.xyz327.cn/images/post/springmvc/multiparHttpServletRequest.png)\n\n## MultipartFile\n\n```java\npublic interface MultipartFile extends InputStreamSource {\n\n\t/**\n     * 返回参数中的文件名(不会为null或空)\n\t */\n\tString getName();\n\n\t/**\n\t * 返回客户端原来的文件名(没有文件时为空字符串，未定义或不可用时返回null) \n\t */\n\tString getOriginalFilename();\n\n\t/**\n\t * 返回Content-Type(没有文件时返回null)\n\t */\n\tString getContentType();\n\n\t/**\n\t * 是否上传了文件\n\t */\n\tboolean isEmpty();\n\n\t/**\n\t * 文件大小\n\t */\n\tlong getSize();\n\n\t/**\n\t * 文件的字节数组\n\t */\n\tbyte[] getBytes() throws IOException;\n\n\t/**\n\t * 文件流\n\t */\n\t@Override\n\tInputStream getInputStream() throws IOException;\n\n\t/**\n\t * 保存文件\n\t */\n\tvoid transferTo(File dest) throws IOException, IllegalStateException;\n\n```\n\nspringmvc同样提供了两种实现\n 1. `StandardMultipartFile`\n 2. `CommonsMultipartFile`\n\n ![MultipartFile实现类](http://cdn.xyz327.cn/images/post/springmvc/multipartFile.png)\n","source":"_posts/2018/4/springmvc初始化MultipartResolver.md","raw":"---\ntitle: springmvc初始化MultipartResolver\ndate: 2018-04-07 09:47:24\ntags: springmvc\ncategories: [springmvc]\nkeywords: springmvc spring\n---\n\nspringmvc 在容器初始化后使用监听ContextRefreshedEvent事件来初始化`DispatcherServlet`中的各种属性\n`MultipartResolver`就是其中一个\n初始化`MultipartResolver`是从IOC容器里面获取一个名为`multipartResolver`的`MultipartResolver`的Bean\n\n`MultipartResolver`是用于处理HTTP上传文件的请求处理器\nspringmvc在处理文件上传时,使用`MultipartResolver`把`HttpServletRequest`解析包装成`MultipartHttpServletRequest`对象\n`MultipartHttpServletRequest`提供了获取`MultipartFile`的方法\n\n`MultipartHttpServletRequest`接口继承了`HttpServletRequest`\n`MultipartFile`提供了获取上传的文件相关属性以及文件流的方法\n在Controller中使用`MultipartHttpServletRequest`更方便的处理上传文件\n\n## MultipartResolver\n\n```java\npublic interface MultipartResolver {\n    /**\n     * 判断给定的请求是否包含 multipart 内容\n     * 通常是检查request的Content-Type是否是 \"multipart/form-data\" \n     * 实际还是依赖解析器自己的实现\n     */\n    boolean isMultipart(HttpServletRequest request);\n\n    /**\n     * 解析HTTP request 包含的文件和参数并把它们包装到 \n     * {@link org.springframework.web.multipart.MultipartHttpServletRequest}对象中\n     * 这个接口实现了{@link javax.servlet.http.HttpServletRequest}\n     */\n    MultipartHttpServletRequest resolveMultipart(HttpServletRequest request) throws MultipartException;\n\n    /**\n     * 清理资源，例如存储的上传文件\n     */\n    void cleanupMultipart(MultipartHttpServletRequest request);\n}\n```\nspringmvc为`MultipartResolver`提供了两种实现\n 1. `StandardServletMultipartResolver`\n    使用HTTPServletRequest自带的解析文件\n 2. `CommonsMultipartResolver`\n    使用apache commons-io 处理上传的文件\n![MultipartResolver实现类](http://cdn.xyz327.cn/images/post/springmvc/multipartResolver.png)\n\n## MultipartHttpServletRequest\n\n```java\npublic interface MultipartHttpServletRequest extends HttpServletRequest, MultipartRequest {\n\tHttpMethod getRequestMethod();\n\n\tHttpHeaders getRequestHeaders();\n\n\tHttpHeaders getMultipartHeaders(String paramOrFileName);\n}\n```\n```java\npublic interface MultipartRequest {\n\tIterator<String> getFileNames();\n\n\tMultipartFile getFile(String name);\n\n\tList<MultipartFile> getFiles(String name);\n\n\tMap<String, MultipartFile> getFileMap();\n\n\tMultiValueMap<String, MultipartFile> getMultiFileMap();\n\n\tString getMultipartContentType(String paramOrFileName);\n}\n```\n`MultipartHttpServletRequest`提供了对于上传文件的快捷访问的方法\n\nspringmvc对于`MultipartHttpServletRequest`同样提供了两种实现\n 1. `StandardMultipartHttpServletRequest`\n 2. `DefaultMultipartHttpServletRequest`\n![MultipartHttpServletRequest实现类](http://cdn.xyz327.cn/images/post/springmvc/multiparHttpServletRequest.png)\n\n## MultipartFile\n\n```java\npublic interface MultipartFile extends InputStreamSource {\n\n\t/**\n     * 返回参数中的文件名(不会为null或空)\n\t */\n\tString getName();\n\n\t/**\n\t * 返回客户端原来的文件名(没有文件时为空字符串，未定义或不可用时返回null) \n\t */\n\tString getOriginalFilename();\n\n\t/**\n\t * 返回Content-Type(没有文件时返回null)\n\t */\n\tString getContentType();\n\n\t/**\n\t * 是否上传了文件\n\t */\n\tboolean isEmpty();\n\n\t/**\n\t * 文件大小\n\t */\n\tlong getSize();\n\n\t/**\n\t * 文件的字节数组\n\t */\n\tbyte[] getBytes() throws IOException;\n\n\t/**\n\t * 文件流\n\t */\n\t@Override\n\tInputStream getInputStream() throws IOException;\n\n\t/**\n\t * 保存文件\n\t */\n\tvoid transferTo(File dest) throws IOException, IllegalStateException;\n\n```\n\nspringmvc同样提供了两种实现\n 1. `StandardMultipartFile`\n 2. `CommonsMultipartFile`\n\n ![MultipartFile实现类](http://cdn.xyz327.cn/images/post/springmvc/multipartFile.png)\n","slug":"2018-4-springmvc初始化MultipartResolver","published":1,"updated":"2023-12-19T02:25:24.536Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydr5002vfki4e0hx8xki","content":"<p>springmvc 在容器初始化后使用监听ContextRefreshedEvent事件来初始化<code>DispatcherServlet</code>中的各种属性<br><code>MultipartResolver</code>就是其中一个<br>初始化<code>MultipartResolver</code>是从IOC容器里面获取一个名为<code>multipartResolver</code>的<code>MultipartResolver</code>的Bean</p>\n<p><code>MultipartResolver</code>是用于处理HTTP上传文件的请求处理器<br>springmvc在处理文件上传时,使用<code>MultipartResolver</code>把<code>HttpServletRequest</code>解析包装成<code>MultipartHttpServletRequest</code>对象<br><code>MultipartHttpServletRequest</code>提供了获取<code>MultipartFile</code>的方法</p>\n<p><code>MultipartHttpServletRequest</code>接口继承了<code>HttpServletRequest</code><br><code>MultipartFile</code>提供了获取上传的文件相关属性以及文件流的方法<br>在Controller中使用<code>MultipartHttpServletRequest</code>更方便的处理上传文件</p>\n<h2 id=\"MultipartResolver\"><a href=\"#MultipartResolver\" class=\"headerlink\" title=\"MultipartResolver\"></a>MultipartResolver</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MultipartResolver</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断给定的请求是否包含 multipart 内容</span></span><br><span class=\"line\"><span class=\"comment\">     * 通常是检查request的Content-Type是否是 &quot;multipart/form-data&quot; </span></span><br><span class=\"line\"><span class=\"comment\">     * 实际还是依赖解析器自己的实现</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isMultipart</span><span class=\"params\">(HttpServletRequest request)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析HTTP request 包含的文件和参数并把它们包装到 </span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> org.springframework.web.multipart.MultipartHttpServletRequest&#125;对象中</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个接口实现了&#123;<span class=\"doctag\">@link</span> javax.servlet.http.HttpServletRequest&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    MultipartHttpServletRequest <span class=\"title function_\">resolveMultipart</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> MultipartException;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 清理资源，例如存储的上传文件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">cleanupMultipart</span><span class=\"params\">(MultipartHttpServletRequest request)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>springmvc为<code>MultipartResolver</code>提供了两种实现</p>\n<ol>\n<li><code>StandardServletMultipartResolver</code><br>使用HTTPServletRequest自带的解析文件</li>\n<li><code>CommonsMultipartResolver</code><br>使用apache commons-io 处理上传的文件<br><img src=\"http://cdn.xyz327.cn/images/post/springmvc/multipartResolver.png\" alt=\"MultipartResolver实现类\"></li>\n</ol>\n<h2 id=\"MultipartHttpServletRequest\"><a href=\"#MultipartHttpServletRequest\" class=\"headerlink\" title=\"MultipartHttpServletRequest\"></a>MultipartHttpServletRequest</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MultipartHttpServletRequest</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServletRequest</span>, MultipartRequest &#123;</span><br><span class=\"line\">\tHttpMethod <span class=\"title function_\">getRequestMethod</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHttpHeaders <span class=\"title function_\">getRequestHeaders</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHttpHeaders <span class=\"title function_\">getMultipartHeaders</span><span class=\"params\">(String paramOrFileName)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MultipartRequest</span> &#123;</span><br><span class=\"line\">\tIterator&lt;String&gt; <span class=\"title function_\">getFileNames</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tMultipartFile <span class=\"title function_\">getFile</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tList&lt;MultipartFile&gt; <span class=\"title function_\">getFiles</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tMap&lt;String, MultipartFile&gt; <span class=\"title function_\">getFileMap</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tMultiValueMap&lt;String, MultipartFile&gt; <span class=\"title function_\">getMultiFileMap</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tString <span class=\"title function_\">getMultipartContentType</span><span class=\"params\">(String paramOrFileName)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>MultipartHttpServletRequest</code>提供了对于上传文件的快捷访问的方法</p>\n<p>springmvc对于<code>MultipartHttpServletRequest</code>同样提供了两种实现</p>\n<ol>\n<li><code>StandardMultipartHttpServletRequest</code></li>\n<li><code>DefaultMultipartHttpServletRequest</code><br><img src=\"http://cdn.xyz327.cn/images/post/springmvc/multiparHttpServletRequest.png\" alt=\"MultipartHttpServletRequest实现类\"></li>\n</ol>\n<h2 id=\"MultipartFile\"><a href=\"#MultipartFile\" class=\"headerlink\" title=\"MultipartFile\"></a>MultipartFile</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MultipartFile</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">InputStreamSource</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回参数中的文件名(不会为null或空)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tString <span class=\"title function_\">getName</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 返回客户端原来的文件名(没有文件时为空字符串，未定义或不可用时返回null) </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tString <span class=\"title function_\">getOriginalFilename</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 返回Content-Type(没有文件时返回null)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tString <span class=\"title function_\">getContentType</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 是否上传了文件</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 文件大小</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"title function_\">getSize</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 文件的字节数组</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">byte</span>[] getBytes() <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 文件流</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\tInputStream <span class=\"title function_\">getInputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 保存文件</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">transferTo</span><span class=\"params\">(File dest)</span> <span class=\"keyword\">throws</span> IOException, IllegalStateException;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>springmvc同样提供了两种实现</p>\n<ol>\n<li><code>StandardMultipartFile</code></li>\n<li><code>CommonsMultipartFile</code></li>\n</ol>\n<p> <img src=\"http://cdn.xyz327.cn/images/post/springmvc/multipartFile.png\" alt=\"MultipartFile实现类\"></p>\n","length":2562,"excerpt":"","more":"<p>springmvc 在容器初始化后使用监听ContextRefreshedEvent事件来初始化<code>DispatcherServlet</code>中的各种属性<br><code>MultipartResolver</code>就是其中一个<br>初始化<code>MultipartResolver</code>是从IOC容器里面获取一个名为<code>multipartResolver</code>的<code>MultipartResolver</code>的Bean</p>\n<p><code>MultipartResolver</code>是用于处理HTTP上传文件的请求处理器<br>springmvc在处理文件上传时,使用<code>MultipartResolver</code>把<code>HttpServletRequest</code>解析包装成<code>MultipartHttpServletRequest</code>对象<br><code>MultipartHttpServletRequest</code>提供了获取<code>MultipartFile</code>的方法</p>\n<p><code>MultipartHttpServletRequest</code>接口继承了<code>HttpServletRequest</code><br><code>MultipartFile</code>提供了获取上传的文件相关属性以及文件流的方法<br>在Controller中使用<code>MultipartHttpServletRequest</code>更方便的处理上传文件</p>\n<h2 id=\"MultipartResolver\"><a href=\"#MultipartResolver\" class=\"headerlink\" title=\"MultipartResolver\"></a>MultipartResolver</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MultipartResolver</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断给定的请求是否包含 multipart 内容</span></span><br><span class=\"line\"><span class=\"comment\">     * 通常是检查request的Content-Type是否是 &quot;multipart/form-data&quot; </span></span><br><span class=\"line\"><span class=\"comment\">     * 实际还是依赖解析器自己的实现</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isMultipart</span><span class=\"params\">(HttpServletRequest request)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析HTTP request 包含的文件和参数并把它们包装到 </span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> org.springframework.web.multipart.MultipartHttpServletRequest&#125;对象中</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个接口实现了&#123;<span class=\"doctag\">@link</span> javax.servlet.http.HttpServletRequest&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    MultipartHttpServletRequest <span class=\"title function_\">resolveMultipart</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> MultipartException;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 清理资源，例如存储的上传文件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">cleanupMultipart</span><span class=\"params\">(MultipartHttpServletRequest request)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>springmvc为<code>MultipartResolver</code>提供了两种实现</p>\n<ol>\n<li><code>StandardServletMultipartResolver</code><br>使用HTTPServletRequest自带的解析文件</li>\n<li><code>CommonsMultipartResolver</code><br>使用apache commons-io 处理上传的文件<br><img src=\"http://cdn.xyz327.cn/images/post/springmvc/multipartResolver.png\" alt=\"MultipartResolver实现类\"></li>\n</ol>\n<h2 id=\"MultipartHttpServletRequest\"><a href=\"#MultipartHttpServletRequest\" class=\"headerlink\" title=\"MultipartHttpServletRequest\"></a>MultipartHttpServletRequest</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MultipartHttpServletRequest</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServletRequest</span>, MultipartRequest &#123;</span><br><span class=\"line\">\tHttpMethod <span class=\"title function_\">getRequestMethod</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHttpHeaders <span class=\"title function_\">getRequestHeaders</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHttpHeaders <span class=\"title function_\">getMultipartHeaders</span><span class=\"params\">(String paramOrFileName)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MultipartRequest</span> &#123;</span><br><span class=\"line\">\tIterator&lt;String&gt; <span class=\"title function_\">getFileNames</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tMultipartFile <span class=\"title function_\">getFile</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tList&lt;MultipartFile&gt; <span class=\"title function_\">getFiles</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tMap&lt;String, MultipartFile&gt; <span class=\"title function_\">getFileMap</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tMultiValueMap&lt;String, MultipartFile&gt; <span class=\"title function_\">getMultiFileMap</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tString <span class=\"title function_\">getMultipartContentType</span><span class=\"params\">(String paramOrFileName)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>MultipartHttpServletRequest</code>提供了对于上传文件的快捷访问的方法</p>\n<p>springmvc对于<code>MultipartHttpServletRequest</code>同样提供了两种实现</p>\n<ol>\n<li><code>StandardMultipartHttpServletRequest</code></li>\n<li><code>DefaultMultipartHttpServletRequest</code><br><img src=\"http://cdn.xyz327.cn/images/post/springmvc/multiparHttpServletRequest.png\" alt=\"MultipartHttpServletRequest实现类\"></li>\n</ol>\n<h2 id=\"MultipartFile\"><a href=\"#MultipartFile\" class=\"headerlink\" title=\"MultipartFile\"></a>MultipartFile</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MultipartFile</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">InputStreamSource</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回参数中的文件名(不会为null或空)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tString <span class=\"title function_\">getName</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 返回客户端原来的文件名(没有文件时为空字符串，未定义或不可用时返回null) </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tString <span class=\"title function_\">getOriginalFilename</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 返回Content-Type(没有文件时返回null)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tString <span class=\"title function_\">getContentType</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 是否上传了文件</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 文件大小</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"title function_\">getSize</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 文件的字节数组</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">byte</span>[] getBytes() <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 文件流</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\tInputStream <span class=\"title function_\">getInputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 保存文件</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">transferTo</span><span class=\"params\">(File dest)</span> <span class=\"keyword\">throws</span> IOException, IllegalStateException;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>springmvc同样提供了两种实现</p>\n<ol>\n<li><code>StandardMultipartFile</code></li>\n<li><code>CommonsMultipartFile</code></li>\n</ol>\n<p> <img src=\"http://cdn.xyz327.cn/images/post/springmvc/multipartFile.png\" alt=\"MultipartFile实现类\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"http://cdn.xyz327.cn/images/post/springmvc/multipartResolver.png","popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 10:25:24 GMT+0800 (中国标准时间)","title":"springmvc初始化MultipartResolver","path":"2018/04/07/2018-4-springmvc初始化MultipartResolver/","eyeCatchImage":"http://cdn.xyz327.cn/images/post/springmvc/multipartResolver.png","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2018-04-07T01:47:24.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2018-04-07T01:47:24.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"springmvc","tags":["springmvc"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"leetcode-01-两数之和","keywords":"null","toc":false,"date":"2021-05-30T10:51:42.000Z","_content":"\n[1. 两数之和 - 力扣（LeetCode） (leetcode-cn.com)](https://leetcode-cn.com/problems/two-sum/)\n\n\n解题思路：\nx+y=target；\n\n解题1：\n\n用双重循环的方式\n\n```golang\nfunc twoSum(nums []int, target int) []int {\n  for i, x := range nums {\n    for j, y := range nums {\n      if i == j {\n        continue\n      }\n      if x + y == target {\n        return []int{x, y};\n      }\n    }\n  }\n  return nil\n}\n```\n\n解题2\n\n上面根据x查找y是使用暴力法遍历查找\n\n用 map 的方式优化根据 x 查找 y 的流程\n\n```golang\nfunc twoSum1(nums []int, target int) []int {\n\ttargetMap := map[int]int{}\n\tfor i, x := range nums {\n\t\tif _, ok := targetMap[target-x]; ok {\n\t\t\treturn []int{i, targetMap[target-x]}\n\t\t}\n\t\ttargetMap[x] = i\n\t}\n\treturn nil\n}\n```\n\n","source":"_posts/2021/05/leetcode-01-两数之和.md","raw":"---\ntitle: leetcode-01-两数之和\n\ntags:\n  - leetcode\ncategories:\n  - leetcode\n  - 算法\nkeywords: 'null'\ntoc: false\ndate: 2021-05-30 18:51:42\n---\n\n[1. 两数之和 - 力扣（LeetCode） (leetcode-cn.com)](https://leetcode-cn.com/problems/two-sum/)\n\n\n解题思路：\nx+y=target；\n\n解题1：\n\n用双重循环的方式\n\n```golang\nfunc twoSum(nums []int, target int) []int {\n  for i, x := range nums {\n    for j, y := range nums {\n      if i == j {\n        continue\n      }\n      if x + y == target {\n        return []int{x, y};\n      }\n    }\n  }\n  return nil\n}\n```\n\n解题2\n\n上面根据x查找y是使用暴力法遍历查找\n\n用 map 的方式优化根据 x 查找 y 的流程\n\n```golang\nfunc twoSum1(nums []int, target int) []int {\n\ttargetMap := map[int]int{}\n\tfor i, x := range nums {\n\t\tif _, ok := targetMap[target-x]; ok {\n\t\t\treturn []int{i, targetMap[target-x]}\n\t\t}\n\t\ttargetMap[x] = i\n\t}\n\treturn nil\n}\n```\n\n","slug":"leetcode-01-两数之和","published":1,"updated":"2023-12-19T09:19:23.184Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydr6002xfki4df00f274","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHdvLXN1bS8=\">1. 两数之和 - 力扣（LeetCode） (leetcode-cn.com)<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>解题思路：<br>x+y&#x3D;target；</p>\n<p>解题1：</p>\n<p>用双重循环的方式</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">twoSum</span><span class=\"params\">(nums []<span class=\"type\">int</span>, target <span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, x := <span class=\"keyword\">range</span> nums &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j, y := <span class=\"keyword\">range</span> nums &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> i == j &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> x + y == target &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []<span class=\"type\">int</span>&#123;x, y&#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解题2</p>\n<p>上面根据x查找y是使用暴力法遍历查找</p>\n<p>用 map 的方式优化根据 x 查找 y 的流程</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">twoSum1</span><span class=\"params\">(nums []<span class=\"type\">int</span>, target <span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\ttargetMap := <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, x := <span class=\"keyword\">range</span> nums &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, ok := targetMap[target-x]; ok &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> []<span class=\"type\">int</span>&#123;i, targetMap[target-x]&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttargetMap[x] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","length":550,"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/two-sum/\">1. 两数之和 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<p>解题思路：<br>x+y&#x3D;target；</p>\n<p>解题1：</p>\n<p>用双重循环的方式</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">twoSum</span><span class=\"params\">(nums []<span class=\"type\">int</span>, target <span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, x := <span class=\"keyword\">range</span> nums &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j, y := <span class=\"keyword\">range</span> nums &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> i == j &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> x + y == target &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []<span class=\"type\">int</span>&#123;x, y&#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解题2</p>\n<p>上面根据x查找y是使用暴力法遍历查找</p>\n<p>用 map 的方式优化根据 x 查找 y 的流程</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">twoSum1</span><span class=\"params\">(nums []<span class=\"type\">int</span>, target <span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\ttargetMap := <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, x := <span class=\"keyword\">range</span> nums &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, ok := targetMap[target-x]; ok &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> []<span class=\"type\">int</span>&#123;i, targetMap[target-x]&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttargetMap[x] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"leetcode-01-两数之和","path":"2021/05/30/leetcode-01-两数之和/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-05-30T10:51:42.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-05-30T10:51:42.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"leetcode > 算法","tags":["leetcode"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"leetcode-07-整数反转","keywords":"null","toc":false,"date":"2021-05-30T15:09:57.000Z","_content":"\n[7. 整数反转 - 力扣（LeetCode） (leetcode-cn.com)](https://leetcode-cn.com/problems/reverse-integer/)\n\n用以10取模的方式依次把x的最小位的数字取出，然后以*10的方式累加\n\n![1.jpg](https://cdn.xyz327.cn/leetcode-07-01.jpg)\n\n\n```golang\nfunc reverse(x int) int {\n\tres := 0\n\tfor x != 0 {\n\t\t// 判断数据是否溢出\n\t\tif x > 0 && res > (math.MaxInt32 - x % 10) / 10 {\n\t\t\treturn 0\n\t\t}\n\t\tif x < 0 && res < (math.MinInt32 - x % 10) / 10 {\n\t\t\treturn 0\n\t\t}\n\t\t// res * 10 + x 的最后一位数\n\t\tres = res * 10 + x % 10\n\t\tx = x / 10\n\t}\n\treturn res\n}\n```\n\n","source":"_posts/2021/05/leetcode-07-整数反转.md","raw":"---\ntitle: leetcode-07-整数反转\n\ntags:\n  - leetcode\ncategories:\n  - leetcode\n  - 算法\nkeywords: 'null'\ntoc: false\ndate: 2021-05-30 23:09:57\n---\n\n[7. 整数反转 - 力扣（LeetCode） (leetcode-cn.com)](https://leetcode-cn.com/problems/reverse-integer/)\n\n用以10取模的方式依次把x的最小位的数字取出，然后以*10的方式累加\n\n![1.jpg](https://cdn.xyz327.cn/leetcode-07-01.jpg)\n\n\n```golang\nfunc reverse(x int) int {\n\tres := 0\n\tfor x != 0 {\n\t\t// 判断数据是否溢出\n\t\tif x > 0 && res > (math.MaxInt32 - x % 10) / 10 {\n\t\t\treturn 0\n\t\t}\n\t\tif x < 0 && res < (math.MinInt32 - x % 10) / 10 {\n\t\t\treturn 0\n\t\t}\n\t\t// res * 10 + x 的最后一位数\n\t\tres = res * 10 + x % 10\n\t\tx = x / 10\n\t}\n\treturn res\n}\n```\n\n","slug":"leetcode-07-整数反转","published":1,"updated":"2023-12-19T09:19:23.185Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydr60030fki4h0e9e5ej","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmV2ZXJzZS1pbnRlZ2VyLw==\">7. 整数反转 - 力扣（LeetCode） (leetcode-cn.com)<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>用以10取模的方式依次把x的最小位的数字取出，然后以*10的方式累加</p>\n<p><img src=\"https://cdn.xyz327.cn/leetcode-07-01.jpg\" alt=\"1.jpg\"></p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">reverse</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tres := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断数据是否溢出</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span> &amp;&amp; res &gt; (math.MaxInt32 - x % <span class=\"number\">10</span>) / <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span> &amp;&amp; res &lt; (math.MinInt32 - x % <span class=\"number\">10</span>) / <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// res * 10 + x 的最后一位数</span></span><br><span class=\"line\">\t\tres = res * <span class=\"number\">10</span> + x % <span class=\"number\">10</span></span><br><span class=\"line\">\t\tx = x / <span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","length":340,"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/reverse-integer/\">7. 整数反转 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<p>用以10取模的方式依次把x的最小位的数字取出，然后以*10的方式累加</p>\n<p><img src=\"https://cdn.xyz327.cn/leetcode-07-01.jpg\" alt=\"1.jpg\"></p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">reverse</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tres := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断数据是否溢出</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span> &amp;&amp; res &gt; (math.MaxInt32 - x % <span class=\"number\">10</span>) / <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span> &amp;&amp; res &lt; (math.MinInt32 - x % <span class=\"number\">10</span>) / <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// res * 10 + x 的最后一位数</span></span><br><span class=\"line\">\t\tres = res * <span class=\"number\">10</span> + x % <span class=\"number\">10</span></span><br><span class=\"line\">\t\tx = x / <span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://cdn.xyz327.cn/leetcode-07-01.jpg","popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"leetcode-07-整数反转","path":"2021/05/30/leetcode-07-整数反转/","eyeCatchImage":"https://cdn.xyz327.cn/leetcode-07-01.jpg","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-05-30T15:09:57.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-05-30T15:09:57.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"leetcode > 算法","tags":["leetcode"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"spring @Bean 注解的用法","keywords":"null","toc":false,"date":"2021-06-17T15:48:47.000Z","_content":"\n最原始的spring配置都是使用xml文件来作为配置(像下面这样)，但是xml 写起来还是比较繁琐的\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"testBean\" class=\"cn.xz.spring.TestBean\"/>\n</beans>\n```\n\n所以在spring 3的时候引入了基于java注解的配置方式，让我们可以使用java类来配置spring的Bean\n\n> @Configuration @Bean @Lazy @DependsOn 等一系列注解\n\n所以上面的xml翻译成java配置的话就像下面这样\n\n```\n@Configuration\npublic static class BeanConfig {\n\n    @Bean\n    public TestBean testBean(){\n        return new TestBean();\n    }\n}\n```\n\n今天来说一下`@Bean`注解\n\n#### @Bean 使用\n\n1. `@Configuration` 标记的类\n\n> 参考[spring-boot中@Configuration是怎么实现@Bean方法注入的](/2021/06/03/spring-boot中@Configuration是怎么实现@Bean方法注入的/)\n\n2. `@Component`标记的类或普通java类中(称为`Lite Mode`)\n\n> 此时`@Bean`标记的方法将作为一个 `Factory Method`. 但是是不支持在`@Configuration`类中那样的内部`@Bean`方法调用的\n\n```\n@Component\n    public class BeanConfig {\n\n        @Bean\n        public TestBeanA testBeanA() {\n            return new TestBeanA();\n        }\n\n        @Bean\n        public TestBeanB testBeanB() {\n            // 在 @Component 类中这样是不支持的! \n            return new TestBeanB(testBeanA());\n        }\n    }\n```\n\n3. 当使用`@Bean`方法返回`org.springframework.beans.factory.config.BeanFactoryPostProcessor`时需要把方法标记为`static`\n\n> 由于`BeanFactoryPostProcessor`在spring的启动时机需要非常的早。所以可能会对当前`@Configuration`类中的`@Autowired`, `@Value`,`@PostConstruct` 等注解产生冲突。\n> 如果把返回`BeanFactoryPostProcessor`的`@Bean` 方法设为`static` 那么不需要实例化类就可以调用方法了。这样就能避免上面提到的冲突\n\n```\n@Configuration\n    public class BeanConfig {\n\n        @Bean\n        public static BeanFactoryPostProcessor testBeanFactoryPostProcessor() {\n            return new BeanFactoryPostProcessor() {\n                public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n                    \n                }\n            };\n        }\n    }\n```\n\n\n\n\n\n","source":"_posts/2021/06/spring-Bean-注解的用法.md","raw":"---\ntitle: spring @Bean 注解的用法\n\ntags:\n  - spring\ncategories:\n  - spring\nkeywords: 'null'\ntoc: false\ndate: 2021-06-17 23:48:47\n---\n\n最原始的spring配置都是使用xml文件来作为配置(像下面这样)，但是xml 写起来还是比较繁琐的\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"testBean\" class=\"cn.xz.spring.TestBean\"/>\n</beans>\n```\n\n所以在spring 3的时候引入了基于java注解的配置方式，让我们可以使用java类来配置spring的Bean\n\n> @Configuration @Bean @Lazy @DependsOn 等一系列注解\n\n所以上面的xml翻译成java配置的话就像下面这样\n\n```\n@Configuration\npublic static class BeanConfig {\n\n    @Bean\n    public TestBean testBean(){\n        return new TestBean();\n    }\n}\n```\n\n今天来说一下`@Bean`注解\n\n#### @Bean 使用\n\n1. `@Configuration` 标记的类\n\n> 参考[spring-boot中@Configuration是怎么实现@Bean方法注入的](/2021/06/03/spring-boot中@Configuration是怎么实现@Bean方法注入的/)\n\n2. `@Component`标记的类或普通java类中(称为`Lite Mode`)\n\n> 此时`@Bean`标记的方法将作为一个 `Factory Method`. 但是是不支持在`@Configuration`类中那样的内部`@Bean`方法调用的\n\n```\n@Component\n    public class BeanConfig {\n\n        @Bean\n        public TestBeanA testBeanA() {\n            return new TestBeanA();\n        }\n\n        @Bean\n        public TestBeanB testBeanB() {\n            // 在 @Component 类中这样是不支持的! \n            return new TestBeanB(testBeanA());\n        }\n    }\n```\n\n3. 当使用`@Bean`方法返回`org.springframework.beans.factory.config.BeanFactoryPostProcessor`时需要把方法标记为`static`\n\n> 由于`BeanFactoryPostProcessor`在spring的启动时机需要非常的早。所以可能会对当前`@Configuration`类中的`@Autowired`, `@Value`,`@PostConstruct` 等注解产生冲突。\n> 如果把返回`BeanFactoryPostProcessor`的`@Bean` 方法设为`static` 那么不需要实例化类就可以调用方法了。这样就能避免上面提到的冲突\n\n```\n@Configuration\n    public class BeanConfig {\n\n        @Bean\n        public static BeanFactoryPostProcessor testBeanFactoryPostProcessor() {\n            return new BeanFactoryPostProcessor() {\n                public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n                    \n                }\n            };\n        }\n    }\n```\n\n\n\n\n\n","slug":"spring-Bean-注解的用法","published":1,"updated":"2023-12-19T09:19:23.186Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydr70033fki43vcx98r8","content":"<p>最原始的spring配置都是使用xml文件来作为配置(像下面这样)，但是xml 写起来还是比较繁琐的</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;testBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;cn.xz.spring.TestBean&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>所以在spring 3的时候引入了基于java注解的配置方式，让我们可以使用java类来配置spring的Bean</p>\n<blockquote>\n<p>@Configuration @Bean @Lazy @DependsOn 等一系列注解</p>\n</blockquote>\n<p>所以上面的xml翻译成java配置的话就像下面这样</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title class_\"><span class=\"keyword\">class</span> <span class=\"title\">BeanConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TestBean testBean()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">TestBean</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>今天来说一下<code>@Bean</code>注解</p>\n<h4 id=\"Bean-使用\"><a href=\"#Bean-使用\" class=\"headerlink\" title=\"@Bean 使用\"></a>@Bean 使用</h4><ol>\n<li><code>@Configuration</code> 标记的类</li>\n</ol>\n<blockquote>\n<p>参考<a href=\"/2021/06/03/spring-boot%E4%B8%AD@Configuration%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0@Bean%E6%96%B9%E6%B3%95%E6%B3%A8%E5%85%A5%E7%9A%84/\">spring-boot中@Configuration是怎么实现@Bean方法注入的</a></p>\n</blockquote>\n<ol start=\"2\">\n<li><code>@Component</code>标记的类或普通java类中(称为<code>Lite Mode</code>)</li>\n</ol>\n<blockquote>\n<p>此时<code>@Bean</code>标记的方法将作为一个 <code>Factory Method</code>. 但是是不支持在<code>@Configuration</code>类中那样的内部<code>@Bean</code>方法调用的</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BeanConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title class_\">TestBeanA</span> <span class=\"title function_\">testBeanA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestBeanA</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title class_\">TestBeanB</span> <span class=\"title function_\">testBeanB</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在 @Component 类中这样是不支持的! </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestBeanB</span>(<span class=\"title function_\">testBeanA</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>当使用<code>@Bean</code>方法返回<code>org.springframework.beans.factory.config.BeanFactoryPostProcessor</code>时需要把方法标记为<code>static</code></li>\n</ol>\n<blockquote>\n<p>由于<code>BeanFactoryPostProcessor</code>在spring的启动时机需要非常的早。所以可能会对当前<code>@Configuration</code>类中的<code>@Autowired</code>, <code>@Value</code>,<code>@PostConstruct</code> 等注解产生冲突。<br>如果把返回<code>BeanFactoryPostProcessor</code>的<code>@Bean</code> 方法设为<code>static</code> 那么不需要实例化类就可以调用方法了。这样就能避免上面提到的冲突</p>\n</blockquote>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\">BeanFactoryPostProcessor <span class=\"title\">testBeanFactoryPostProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BeanFactoryPostProcessor() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","length":1709,"excerpt":"","more":"<p>最原始的spring配置都是使用xml文件来作为配置(像下面这样)，但是xml 写起来还是比较繁琐的</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;testBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;cn.xz.spring.TestBean&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>所以在spring 3的时候引入了基于java注解的配置方式，让我们可以使用java类来配置spring的Bean</p>\n<blockquote>\n<p>@Configuration @Bean @Lazy @DependsOn 等一系列注解</p>\n</blockquote>\n<p>所以上面的xml翻译成java配置的话就像下面这样</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title class_\"><span class=\"keyword\">class</span> <span class=\"title\">BeanConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TestBean testBean()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">TestBean</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>今天来说一下<code>@Bean</code>注解</p>\n<h4 id=\"Bean-使用\"><a href=\"#Bean-使用\" class=\"headerlink\" title=\"@Bean 使用\"></a>@Bean 使用</h4><ol>\n<li><code>@Configuration</code> 标记的类</li>\n</ol>\n<blockquote>\n<p>参考<a href=\"/2021/06/03/spring-boot%E4%B8%AD@Configuration%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0@Bean%E6%96%B9%E6%B3%95%E6%B3%A8%E5%85%A5%E7%9A%84/\">spring-boot中@Configuration是怎么实现@Bean方法注入的</a></p>\n</blockquote>\n<ol start=\"2\">\n<li><code>@Component</code>标记的类或普通java类中(称为<code>Lite Mode</code>)</li>\n</ol>\n<blockquote>\n<p>此时<code>@Bean</code>标记的方法将作为一个 <code>Factory Method</code>. 但是是不支持在<code>@Configuration</code>类中那样的内部<code>@Bean</code>方法调用的</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BeanConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title class_\">TestBeanA</span> <span class=\"title function_\">testBeanA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestBeanA</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title class_\">TestBeanB</span> <span class=\"title function_\">testBeanB</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在 @Component 类中这样是不支持的! </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestBeanB</span>(<span class=\"title function_\">testBeanA</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>当使用<code>@Bean</code>方法返回<code>org.springframework.beans.factory.config.BeanFactoryPostProcessor</code>时需要把方法标记为<code>static</code></li>\n</ol>\n<blockquote>\n<p>由于<code>BeanFactoryPostProcessor</code>在spring的启动时机需要非常的早。所以可能会对当前<code>@Configuration</code>类中的<code>@Autowired</code>, <code>@Value</code>,<code>@PostConstruct</code> 等注解产生冲突。<br>如果把返回<code>BeanFactoryPostProcessor</code>的<code>@Bean</code> 方法设为<code>static</code> 那么不需要实例化类就可以调用方法了。这样就能避免上面提到的冲突</p>\n</blockquote>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\">BeanFactoryPostProcessor <span class=\"title\">testBeanFactoryPostProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BeanFactoryPostProcessor() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"spring @Bean 注解的用法","path":"2021/06/17/spring-Bean-注解的用法/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-06-17T15:48:47.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-06-17T15:48:47.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"spring","tags":["spring"],"internalLinks":["2021/06/03/spring-boot%E4%B8%AD@Configuration%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0@Bean%E6%96%B9%E6%B3%95%E6%B3%A8%E5%85%A5%E7%9A%84/"],"keywords":[],"keywordsLength":0}},{"title":"spring-boot中@Configuration是怎么实现@Bean方法注入的","originContent":"","toc":false,"date":"2021-06-03T15:18:14.000Z","keywords":null,"_content":"\n> 其实这个是由spring-context实现的\n\n我们知道在spring中可以使用@Configuration注解标记的类来代替传统的xml配置，然后用@Bean注解标记方法代替`<bean>`标签\n\n在@Configuration注解标记的类中如果bean有依赖我们可以这样写\n\n```\n/**\n * @author xizhou\n * @date 2021/6/3 22:53\n */\n@Configuration\npublic class TestConfiguration {\n    \n    @Bean\n    public BeanA beanA(){\n        return new BeanA();\n    }\n\n\n    @Bean\n    public BeanB beanB(){\n        return new BeanB(beanA());\n    }\n}\n```\n\nBeanB 依赖BeanA，然后在上面的`beanB()`方法里面直接写调用 `beanA()`方法就行了.\n\n直观来看是不是觉得会调用`beanA()`方法去生成一个`BeanA`对象。但是如果是这样的话，就和上面的`beanA()`方法注入到springIOC容器的对象不是同一个了，这明显是不正确的。\n\n那或者应该是spring对这个`beanB()`方法里面的`beanA()`方法调用做了AOP处理，然后就可以和上面的`beanA()`方法获取到同一个对象\n\n但是我们想到在spring AOP中有个经典的this问题，上面这样不就是 AOP this问题吗？那spring是怎么实现代理的呢？\n![挠头.gif (240×240) (xyz327.cn)](http://cdn.xyz327.cn/%E6%8C%A0%E5%A4%B4.gif)\n\n答案就在`org.springframework.context.annotation.ConfigurationClassPostProcessor`类中\n\n我们直接看`org.springframework.context.annotation.ConfigurationClassPostProcessor#enhanceConfigurationClasses`方法\n对`@Configuration`标记的类有下面的操作\n\n```\nClass<?> configClass = beanDef.getBeanClass();\nClass<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader);\n\nbeanDef.setBeanClass(enhancedClass);\n```\n\n我们可以看到spring是对整个类做了一个AOP然后把代理后的类作为`BeanClass` 就这样在上面`beanB()`方法中调用`beanA()`方法其实是调用的经过代理够的`beanA()`方法.然后也就没有AOP this问题了\n\n![](http://cdn.xyz327.cn/%E5%A4%B4%E5%8F%91%E6%B6%88%E5%A4%B1.jpg)\n\n\n\n","source":"_posts/2021/06/spring-boot中-Configuration是怎么实现-Bean方法注入的.md","raw":"---\ntitle: spring-boot中@Configuration是怎么实现@Bean方法注入的\n\ntags: ['spring']\ncategories: ['spring']\noriginContent: ''\ntoc: false\ndate: 2021-06-03 23:18:14\nkeywords:\n---\n\n> 其实这个是由spring-context实现的\n\n我们知道在spring中可以使用@Configuration注解标记的类来代替传统的xml配置，然后用@Bean注解标记方法代替`<bean>`标签\n\n在@Configuration注解标记的类中如果bean有依赖我们可以这样写\n\n```\n/**\n * @author xizhou\n * @date 2021/6/3 22:53\n */\n@Configuration\npublic class TestConfiguration {\n    \n    @Bean\n    public BeanA beanA(){\n        return new BeanA();\n    }\n\n\n    @Bean\n    public BeanB beanB(){\n        return new BeanB(beanA());\n    }\n}\n```\n\nBeanB 依赖BeanA，然后在上面的`beanB()`方法里面直接写调用 `beanA()`方法就行了.\n\n直观来看是不是觉得会调用`beanA()`方法去生成一个`BeanA`对象。但是如果是这样的话，就和上面的`beanA()`方法注入到springIOC容器的对象不是同一个了，这明显是不正确的。\n\n那或者应该是spring对这个`beanB()`方法里面的`beanA()`方法调用做了AOP处理，然后就可以和上面的`beanA()`方法获取到同一个对象\n\n但是我们想到在spring AOP中有个经典的this问题，上面这样不就是 AOP this问题吗？那spring是怎么实现代理的呢？\n![挠头.gif (240×240) (xyz327.cn)](http://cdn.xyz327.cn/%E6%8C%A0%E5%A4%B4.gif)\n\n答案就在`org.springframework.context.annotation.ConfigurationClassPostProcessor`类中\n\n我们直接看`org.springframework.context.annotation.ConfigurationClassPostProcessor#enhanceConfigurationClasses`方法\n对`@Configuration`标记的类有下面的操作\n\n```\nClass<?> configClass = beanDef.getBeanClass();\nClass<?> enhancedClass = enhancer.enhance(configClass, this.beanClassLoader);\n\nbeanDef.setBeanClass(enhancedClass);\n```\n\n我们可以看到spring是对整个类做了一个AOP然后把代理后的类作为`BeanClass` 就这样在上面`beanB()`方法中调用`beanA()`方法其实是调用的经过代理够的`beanA()`方法.然后也就没有AOP this问题了\n\n![](http://cdn.xyz327.cn/%E5%A4%B4%E5%8F%91%E6%B6%88%E5%A4%B1.jpg)\n\n\n\n","slug":"spring-boot中-Configuration是怎么实现-Bean方法注入的","published":1,"updated":"2023-12-19T09:19:23.187Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydr80035fki4foxl1jlg","content":"<blockquote>\n<p>其实这个是由spring-context实现的</p>\n</blockquote>\n<p>我们知道在spring中可以使用@Configuration注解标记的类来代替传统的xml配置，然后用@Bean注解标记方法代替<code>&lt;bean&gt;</code>标签</p>\n<p>在@Configuration注解标记的类中如果bean有依赖我们可以这样写</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> <span class=\"variable\">xizhou</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/6/3 22:53</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestConfiguration</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title class_\">BeanA</span> <span class=\"title function_\">beanA</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanA</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title class_\">BeanB</span> <span class=\"title function_\">beanB</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanB</span>(<span class=\"title function_\">beanA</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>BeanB 依赖BeanA，然后在上面的<code>beanB()</code>方法里面直接写调用 <code>beanA()</code>方法就行了.</p>\n<p>直观来看是不是觉得会调用<code>beanA()</code>方法去生成一个<code>BeanA</code>对象。但是如果是这样的话，就和上面的<code>beanA()</code>方法注入到springIOC容器的对象不是同一个了，这明显是不正确的。</p>\n<p>那或者应该是spring对这个<code>beanB()</code>方法里面的<code>beanA()</code>方法调用做了AOP处理，然后就可以和上面的<code>beanA()</code>方法获取到同一个对象</p>\n<p>但是我们想到在spring AOP中有个经典的this问题，上面这样不就是 AOP this问题吗？那spring是怎么实现代理的呢？<br><img src=\"http://cdn.xyz327.cn/%E6%8C%A0%E5%A4%B4.gif\" alt=\"挠头.gif (240×240) (xyz327.cn)\"></p>\n<p>答案就在<code>org.springframework.context.annotation.ConfigurationClassPostProcessor</code>类中</p>\n<p>我们直接看<code>org.springframework.context.annotation.ConfigurationClassPostProcessor#enhanceConfigurationClasses</code>方法<br>对<code>@Configuration</code>标记的类有下面的操作</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Class</span>&lt;?&gt; configClass = beanDef.getBeanClass();</span><br><span class=\"line\"><span class=\"keyword\">Class</span>&lt;?&gt; enhancedClass = enhancer.enhance(configClass, <span class=\"keyword\">this</span>.beanClassLoader);</span><br><span class=\"line\"></span><br><span class=\"line\">beanDef.setBeanClass(enhancedClass);</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到spring是对整个类做了一个AOP然后把代理后的类作为<code>BeanClass</code> 就这样在上面<code>beanB()</code>方法中调用<code>beanA()</code>方法其实是调用的经过代理够的<code>beanA()</code>方法.然后也就没有AOP this问题了</p>\n<p><img src=\"http://cdn.xyz327.cn/%E5%A4%B4%E5%8F%91%E6%B6%88%E5%A4%B1.jpg\"></p>\n","length":1126,"excerpt":"","more":"<blockquote>\n<p>其实这个是由spring-context实现的</p>\n</blockquote>\n<p>我们知道在spring中可以使用@Configuration注解标记的类来代替传统的xml配置，然后用@Bean注解标记方法代替<code>&lt;bean&gt;</code>标签</p>\n<p>在@Configuration注解标记的类中如果bean有依赖我们可以这样写</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> <span class=\"variable\">xizhou</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/6/3 22:53</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestConfiguration</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title class_\">BeanA</span> <span class=\"title function_\">beanA</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanA</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title class_\">BeanB</span> <span class=\"title function_\">beanB</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanB</span>(<span class=\"title function_\">beanA</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>BeanB 依赖BeanA，然后在上面的<code>beanB()</code>方法里面直接写调用 <code>beanA()</code>方法就行了.</p>\n<p>直观来看是不是觉得会调用<code>beanA()</code>方法去生成一个<code>BeanA</code>对象。但是如果是这样的话，就和上面的<code>beanA()</code>方法注入到springIOC容器的对象不是同一个了，这明显是不正确的。</p>\n<p>那或者应该是spring对这个<code>beanB()</code>方法里面的<code>beanA()</code>方法调用做了AOP处理，然后就可以和上面的<code>beanA()</code>方法获取到同一个对象</p>\n<p>但是我们想到在spring AOP中有个经典的this问题，上面这样不就是 AOP this问题吗？那spring是怎么实现代理的呢？<br><img src=\"http://cdn.xyz327.cn/%E6%8C%A0%E5%A4%B4.gif\" alt=\"挠头.gif (240×240) (xyz327.cn)\"></p>\n<p>答案就在<code>org.springframework.context.annotation.ConfigurationClassPostProcessor</code>类中</p>\n<p>我们直接看<code>org.springframework.context.annotation.ConfigurationClassPostProcessor#enhanceConfigurationClasses</code>方法<br>对<code>@Configuration</code>标记的类有下面的操作</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Class</span>&lt;?&gt; configClass = beanDef.getBeanClass();</span><br><span class=\"line\"><span class=\"keyword\">Class</span>&lt;?&gt; enhancedClass = enhancer.enhance(configClass, <span class=\"keyword\">this</span>.beanClassLoader);</span><br><span class=\"line\"></span><br><span class=\"line\">beanDef.setBeanClass(enhancedClass);</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到spring是对整个类做了一个AOP然后把代理后的类作为<code>BeanClass</code> 就这样在上面<code>beanB()</code>方法中调用<code>beanA()</code>方法其实是调用的经过代理够的<code>beanA()</code>方法.然后也就没有AOP this问题了</p>\n<p><img src=\"http://cdn.xyz327.cn/%E5%A4%B4%E5%8F%91%E6%B6%88%E5%A4%B1.jpg\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"http://cdn.xyz327.cn/%E6%8C%A0%E5%A4%B4.gif","popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"spring-boot中@Configuration是怎么实现@Bean方法注入的","path":"2021/06/03/spring-boot中-Configuration是怎么实现-Bean方法注入的/","eyeCatchImage":"http://cdn.xyz327.cn/%E6%8C%A0%E5%A4%B4.gif","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-06-03T15:18:14.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-06-03T15:18:14.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"spring","tags":["spring"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"springIOC的refresh方法","keywords":"null","toc":false,"date":"2021-06-20T05:08:52.000Z","_content":"\n# _\n\n## refresh方法概览\n\n```java\npublic void refresh() throws BeansException, IllegalStateException {\n  synchronized (this.startupShutdownMonitor) {\n    StartupStep contextRefresh = this.applicationStartup.start(\"spring.context.refresh\");\n    // Prepare this context for refreshing.\n    prepareRefresh();\n    // Tell the subclass to refresh the internal bean factory.\n    ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n    // Prepare the bean factory for use in this context.\n    prepareBeanFactory(beanFactory);\n    try {\n      // Allows post-processing of the bean factory in context subclasses.\n      postProcessBeanFactory(beanFactory);\n      StartupStep beanPostProcess = this.applicationStartup.start(\"spring.context.beans.post-process\");\n      // Invoke factory processors registered as beans in the context.\n      invokeBeanFactoryPostProcessors(beanFactory);\n      // Register bean processors that intercept bean creation.\n      registerBeanPostProcessors(beanFactory);\n      beanPostProcess.end();\n      // Initialize message source for this context.\n      initMessageSource();\n      // Initialize event multicaster for this context.\n      initApplicationEventMulticaster();\n      // Initialize other special beans in specific context subclasses.\n      onRefresh();\n      // Check for listener beans and register them.\n      registerListeners();\n      // Instantiate all remaining (non-lazy-init) singletons.\n      finishBeanFactoryInitialization(beanFactory);\n      // Last step: publish corresponding event.\n      finishRefresh();\n    } catch (BeansException ex) {\n      // Destroy already created singletons to avoid dangling resources.\n      destroyBeans();\n      // Reset 'active' flag.\n      cancelRefresh(ex);\n      // Propagate exception to caller.\n      throw ex;\n    }  finally {\n      // Reset common introspection caches in Spring's core, since we\n      // might not ever need metadata for singleton beans anymore...\n      resetCommonCaches();\n      contextRefresh.end();\n    }\n  }\n}\n```\n\n<!-- more -->\n\n## refresh方法步骤说明\n\n### prepareRefresh\n\n主要是做一些初始化的工作.验证必要属性. 初始化`earlyApplicationListeners`\n\n### obtainFreshBeanFactory\n\n创建并获取 BeanFactory (是否可以重复调用refresh区分两种子类实现)\n\n### AbstractRefreshableApplicationContext\n\n> 主要是xml的实现\n\n1. FileSystemXmlApplicationContext\n2. ClassPathXmlApplicationContext\n\n#### GenericApplicationContext\n\n> 通用的实现\n\n1. GenericXmlApplicationContext\n2. StaticApplicationContext\n3. GenericGroovyApplicationContext\n4. AnnotationConfigApplicationContext\n\n### prepareBeanFactory\n\n对`BeanFactory`做一些默认的初始化工作（,）\n\n1. 设置classloader\n2. 基于`ApplicationContext`的一系列Aware接口的`BeanPostProcessor`\n3. 注册`ApplicationListener`接口的`BeanPostProcessor`\n4. 注册默认的Bean (Environment等)\n\n### postProcessBeanFactory\n\n> 默认为空，由子类去实现\n\n在SpringMVC 中\n\n1. 注册`ServeletContextAware`\n2. 注册`Request`，`Session`,`Application` 的`Scope`\n3. 注册`RequestObjectFactory`/`ResponseObjectFactory`/`SessionObjectFactory`/`WebRequestObjectFactory` 等工厂Bean，用来处理在`Controller` 中使用成员变量的方式注入`Request`/`Response`/`Session`/`WebRequest`等对象。具体使用可见下面\n   ```java\n   @RequestMapping\n   @Controller\n   public class TestController{\n     // 这里注入的对象是其实是一个代理了RequestObjectFactory的代理对象\n     // 在每次调用时都会使用RequestContextHolder从当前上下文中获取HttpServletRequest对象来进行真实的调用\n     @Autowired\n     private HttpServletRequest httpRequest;\n     @GetMapping(\"test\")\n     public String handle(){\n       HttpSession session = httpRequest.getSession();\n     }\n   }\n   ```\n\n### invokeBeanFactoryPostProcessors\n\n顾名思义 就是调用`BeanFactoryPostProcessor`的`postProcessBeanFactory`方法\n\n> 会优先执行实现了`PriorityOrdered`接口的，然后在执行实现了`Ordered`接口的，最后再执行其他的`BeanFactoryPostProcessor`\n\n### registerBeanPostProcessors\n\n同样看名字就能知道是注册`BeanPostProcessor`\n\n> 同样也遵循 `实现了PriorityOrdered` -> `实现了Ordered` -> `其他BeanPostProcessor`\n\n### initMessageSource\n\n一样，做`MessageSource` Bean的初始化\n\n### initApplicationEventMulticaster\n\n初始化`ApplicationEventMulticaster` 用来支持 ApplicationListener/ApplicationEvent 事件订阅与发布\n\n### onRefresh\n\n空实现，在SpringMVC中用来初始化 `ThemeSource`\n\n### registerListeners\n\n这一步自然就是把`ApplicationListener`注册到上面的`ApplicationEventMulticaster`中\n\n> 并不会初始化`ApplicationListener`对象,只是添加BeanName。为了能应用`BeanPostProcessor`初始化都在下一步去做\n\n### finishBeanFactoryInitialization\n\n1. 初始化`ConversionService`\n2. 增加默认的`StringValueResolver`用来解析注解value中的`${}`占位符.例如`@PathVariable(\"${name}\")`\n3. 初始化其他所有非Lazy的Bean （Bean的初始化）\n\n### finishRefresh\n\n1. 初始化`LifecycleProcessor`并调用`LifecycleProcessor.onRefresh()`\n2. 发布`ContextRefreshedEvent`事件\n\n## 其他\n\n### 关于`ApplicationEvent`\n\n在spring中有四个`ApplicationEvent`的子类（对应发出事件的方法）\n\n1. ContextRefreshedEvent -> refresh()\n2. ContextClosedEvent -> close()\n3. ContextStartedEvent -> start()\n4. ContextStoppedEvent -> stop()\n\n我们在启动/销毁spring容器是调用`ApplicationContext`的 `refresh`/`close`方法(对于spring容器启动/关闭,这两个方法就够了)\n\n但是为什么还要设计start/stop 两个事件呢? 而且spring默认启动时也不会调用对应的方法去触发这两个事件(除非手动调用ApplicationContext.start())\n\n对于`start`/`stop`两个事件。主要还是用于将其他组件的生命周期和Spring的生命周期做绑定（使用`SmartLifecycle`接口,`Lifecycle`接口只有在调用`ApplicationContext.start/stop`方法之后才会执行）\n\n```\npublic interface SmartLifecycle extends Lifecycle, Phased {\n        // 是否在spring启动时自动启动\n\tdefault boolean isAutoStartup() {\n\t\treturn true;\n\t}\n\n\tdefault void stop(Runnable callback) {\n\t\tstop();\n\t\tcallback.run();\n\t} \n        // 启动的阶段，类似order 数字越小越先执行\n\tdefault int getPhase() {\n\t\treturn DEFAULT_PHASE;\n\t}\n\n}\n```\n\n\n\n\n\n","source":"_posts/2021/06/springIOC的refresh方法.md","raw":"---\ntitle: springIOC的refresh方法\n\ntags:\n  - spring\ncategories:\n  - spring\nkeywords: 'null'\ntoc: false\ndate: 2021-06-20 13:08:52\n---\n\n# _\n\n## refresh方法概览\n\n```java\npublic void refresh() throws BeansException, IllegalStateException {\n  synchronized (this.startupShutdownMonitor) {\n    StartupStep contextRefresh = this.applicationStartup.start(\"spring.context.refresh\");\n    // Prepare this context for refreshing.\n    prepareRefresh();\n    // Tell the subclass to refresh the internal bean factory.\n    ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n    // Prepare the bean factory for use in this context.\n    prepareBeanFactory(beanFactory);\n    try {\n      // Allows post-processing of the bean factory in context subclasses.\n      postProcessBeanFactory(beanFactory);\n      StartupStep beanPostProcess = this.applicationStartup.start(\"spring.context.beans.post-process\");\n      // Invoke factory processors registered as beans in the context.\n      invokeBeanFactoryPostProcessors(beanFactory);\n      // Register bean processors that intercept bean creation.\n      registerBeanPostProcessors(beanFactory);\n      beanPostProcess.end();\n      // Initialize message source for this context.\n      initMessageSource();\n      // Initialize event multicaster for this context.\n      initApplicationEventMulticaster();\n      // Initialize other special beans in specific context subclasses.\n      onRefresh();\n      // Check for listener beans and register them.\n      registerListeners();\n      // Instantiate all remaining (non-lazy-init) singletons.\n      finishBeanFactoryInitialization(beanFactory);\n      // Last step: publish corresponding event.\n      finishRefresh();\n    } catch (BeansException ex) {\n      // Destroy already created singletons to avoid dangling resources.\n      destroyBeans();\n      // Reset 'active' flag.\n      cancelRefresh(ex);\n      // Propagate exception to caller.\n      throw ex;\n    }  finally {\n      // Reset common introspection caches in Spring's core, since we\n      // might not ever need metadata for singleton beans anymore...\n      resetCommonCaches();\n      contextRefresh.end();\n    }\n  }\n}\n```\n\n<!-- more -->\n\n## refresh方法步骤说明\n\n### prepareRefresh\n\n主要是做一些初始化的工作.验证必要属性. 初始化`earlyApplicationListeners`\n\n### obtainFreshBeanFactory\n\n创建并获取 BeanFactory (是否可以重复调用refresh区分两种子类实现)\n\n### AbstractRefreshableApplicationContext\n\n> 主要是xml的实现\n\n1. FileSystemXmlApplicationContext\n2. ClassPathXmlApplicationContext\n\n#### GenericApplicationContext\n\n> 通用的实现\n\n1. GenericXmlApplicationContext\n2. StaticApplicationContext\n3. GenericGroovyApplicationContext\n4. AnnotationConfigApplicationContext\n\n### prepareBeanFactory\n\n对`BeanFactory`做一些默认的初始化工作（,）\n\n1. 设置classloader\n2. 基于`ApplicationContext`的一系列Aware接口的`BeanPostProcessor`\n3. 注册`ApplicationListener`接口的`BeanPostProcessor`\n4. 注册默认的Bean (Environment等)\n\n### postProcessBeanFactory\n\n> 默认为空，由子类去实现\n\n在SpringMVC 中\n\n1. 注册`ServeletContextAware`\n2. 注册`Request`，`Session`,`Application` 的`Scope`\n3. 注册`RequestObjectFactory`/`ResponseObjectFactory`/`SessionObjectFactory`/`WebRequestObjectFactory` 等工厂Bean，用来处理在`Controller` 中使用成员变量的方式注入`Request`/`Response`/`Session`/`WebRequest`等对象。具体使用可见下面\n   ```java\n   @RequestMapping\n   @Controller\n   public class TestController{\n     // 这里注入的对象是其实是一个代理了RequestObjectFactory的代理对象\n     // 在每次调用时都会使用RequestContextHolder从当前上下文中获取HttpServletRequest对象来进行真实的调用\n     @Autowired\n     private HttpServletRequest httpRequest;\n     @GetMapping(\"test\")\n     public String handle(){\n       HttpSession session = httpRequest.getSession();\n     }\n   }\n   ```\n\n### invokeBeanFactoryPostProcessors\n\n顾名思义 就是调用`BeanFactoryPostProcessor`的`postProcessBeanFactory`方法\n\n> 会优先执行实现了`PriorityOrdered`接口的，然后在执行实现了`Ordered`接口的，最后再执行其他的`BeanFactoryPostProcessor`\n\n### registerBeanPostProcessors\n\n同样看名字就能知道是注册`BeanPostProcessor`\n\n> 同样也遵循 `实现了PriorityOrdered` -> `实现了Ordered` -> `其他BeanPostProcessor`\n\n### initMessageSource\n\n一样，做`MessageSource` Bean的初始化\n\n### initApplicationEventMulticaster\n\n初始化`ApplicationEventMulticaster` 用来支持 ApplicationListener/ApplicationEvent 事件订阅与发布\n\n### onRefresh\n\n空实现，在SpringMVC中用来初始化 `ThemeSource`\n\n### registerListeners\n\n这一步自然就是把`ApplicationListener`注册到上面的`ApplicationEventMulticaster`中\n\n> 并不会初始化`ApplicationListener`对象,只是添加BeanName。为了能应用`BeanPostProcessor`初始化都在下一步去做\n\n### finishBeanFactoryInitialization\n\n1. 初始化`ConversionService`\n2. 增加默认的`StringValueResolver`用来解析注解value中的`${}`占位符.例如`@PathVariable(\"${name}\")`\n3. 初始化其他所有非Lazy的Bean （Bean的初始化）\n\n### finishRefresh\n\n1. 初始化`LifecycleProcessor`并调用`LifecycleProcessor.onRefresh()`\n2. 发布`ContextRefreshedEvent`事件\n\n## 其他\n\n### 关于`ApplicationEvent`\n\n在spring中有四个`ApplicationEvent`的子类（对应发出事件的方法）\n\n1. ContextRefreshedEvent -> refresh()\n2. ContextClosedEvent -> close()\n3. ContextStartedEvent -> start()\n4. ContextStoppedEvent -> stop()\n\n我们在启动/销毁spring容器是调用`ApplicationContext`的 `refresh`/`close`方法(对于spring容器启动/关闭,这两个方法就够了)\n\n但是为什么还要设计start/stop 两个事件呢? 而且spring默认启动时也不会调用对应的方法去触发这两个事件(除非手动调用ApplicationContext.start())\n\n对于`start`/`stop`两个事件。主要还是用于将其他组件的生命周期和Spring的生命周期做绑定（使用`SmartLifecycle`接口,`Lifecycle`接口只有在调用`ApplicationContext.start/stop`方法之后才会执行）\n\n```\npublic interface SmartLifecycle extends Lifecycle, Phased {\n        // 是否在spring启动时自动启动\n\tdefault boolean isAutoStartup() {\n\t\treturn true;\n\t}\n\n\tdefault void stop(Runnable callback) {\n\t\tstop();\n\t\tcallback.run();\n\t} \n        // 启动的阶段，类似order 数字越小越先执行\n\tdefault int getPhase() {\n\t\treturn DEFAULT_PHASE;\n\t}\n\n}\n```\n\n\n\n\n\n","slug":"springIOC的refresh方法","published":1,"updated":"2023-12-19T09:19:23.188Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydr90039fki4ct2ugame","content":"<h1 id><a href=\"#\" class=\"headerlink\" title=\"_\"></a>_</h1><h2 id=\"refresh方法概览\"><a href=\"#refresh方法概览\" class=\"headerlink\" title=\"refresh方法概览\"></a>refresh方法概览</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException &#123;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.startupShutdownMonitor) &#123;</span><br><span class=\"line\">    <span class=\"type\">StartupStep</span> <span class=\"variable\">contextRefresh</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.applicationStartup.start(<span class=\"string\">&quot;spring.context.refresh&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Prepare this context for refreshing.</span></span><br><span class=\"line\">    prepareRefresh();</span><br><span class=\"line\">    <span class=\"comment\">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class=\"line\">    <span class=\"type\">ConfigurableListableBeanFactory</span> <span class=\"variable\">beanFactory</span> <span class=\"operator\">=</span> obtainFreshBeanFactory();</span><br><span class=\"line\">    <span class=\"comment\">// Prepare the bean factory for use in this context.</span></span><br><span class=\"line\">    prepareBeanFactory(beanFactory);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class=\"line\">      postProcessBeanFactory(beanFactory);</span><br><span class=\"line\">      <span class=\"type\">StartupStep</span> <span class=\"variable\">beanPostProcess</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.applicationStartup.start(<span class=\"string\">&quot;spring.context.beans.post-process&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// Invoke factory processors registered as beans in the context.</span></span><br><span class=\"line\">      invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\">      <span class=\"comment\">// Register bean processors that intercept bean creation.</span></span><br><span class=\"line\">      registerBeanPostProcessors(beanFactory);</span><br><span class=\"line\">      beanPostProcess.end();</span><br><span class=\"line\">      <span class=\"comment\">// Initialize message source for this context.</span></span><br><span class=\"line\">      initMessageSource();</span><br><span class=\"line\">      <span class=\"comment\">// Initialize event multicaster for this context.</span></span><br><span class=\"line\">      initApplicationEventMulticaster();</span><br><span class=\"line\">      <span class=\"comment\">// Initialize other special beans in specific context subclasses.</span></span><br><span class=\"line\">      onRefresh();</span><br><span class=\"line\">      <span class=\"comment\">// Check for listener beans and register them.</span></span><br><span class=\"line\">      registerListeners();</span><br><span class=\"line\">      <span class=\"comment\">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class=\"line\">      finishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\">      <span class=\"comment\">// Last step: publish corresponding event.</span></span><br><span class=\"line\">      finishRefresh();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class=\"line\">      destroyBeans();</span><br><span class=\"line\">      <span class=\"comment\">// Reset &#x27;active&#x27; flag.</span></span><br><span class=\"line\">      cancelRefresh(ex);</span><br><span class=\"line\">      <span class=\"comment\">// Propagate exception to caller.</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">    &#125;  <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class=\"line\">      <span class=\"comment\">// might not ever need metadata for singleton beans anymore...</span></span><br><span class=\"line\">      resetCommonCaches();</span><br><span class=\"line\">      contextRefresh.end();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"refresh方法步骤说明\"><a href=\"#refresh方法步骤说明\" class=\"headerlink\" title=\"refresh方法步骤说明\"></a>refresh方法步骤说明</h2><h3 id=\"prepareRefresh\"><a href=\"#prepareRefresh\" class=\"headerlink\" title=\"prepareRefresh\"></a>prepareRefresh</h3><p>主要是做一些初始化的工作.验证必要属性. 初始化<code>earlyApplicationListeners</code></p>\n<h3 id=\"obtainFreshBeanFactory\"><a href=\"#obtainFreshBeanFactory\" class=\"headerlink\" title=\"obtainFreshBeanFactory\"></a>obtainFreshBeanFactory</h3><p>创建并获取 BeanFactory (是否可以重复调用refresh区分两种子类实现)</p>\n<h3 id=\"AbstractRefreshableApplicationContext\"><a href=\"#AbstractRefreshableApplicationContext\" class=\"headerlink\" title=\"AbstractRefreshableApplicationContext\"></a>AbstractRefreshableApplicationContext</h3><blockquote>\n<p>主要是xml的实现</p>\n</blockquote>\n<ol>\n<li>FileSystemXmlApplicationContext</li>\n<li>ClassPathXmlApplicationContext</li>\n</ol>\n<h4 id=\"GenericApplicationContext\"><a href=\"#GenericApplicationContext\" class=\"headerlink\" title=\"GenericApplicationContext\"></a>GenericApplicationContext</h4><blockquote>\n<p>通用的实现</p>\n</blockquote>\n<ol>\n<li>GenericXmlApplicationContext</li>\n<li>StaticApplicationContext</li>\n<li>GenericGroovyApplicationContext</li>\n<li>AnnotationConfigApplicationContext</li>\n</ol>\n<h3 id=\"prepareBeanFactory\"><a href=\"#prepareBeanFactory\" class=\"headerlink\" title=\"prepareBeanFactory\"></a>prepareBeanFactory</h3><p>对<code>BeanFactory</code>做一些默认的初始化工作（,）</p>\n<ol>\n<li>设置classloader</li>\n<li>基于<code>ApplicationContext</code>的一系列Aware接口的<code>BeanPostProcessor</code></li>\n<li>注册<code>ApplicationListener</code>接口的<code>BeanPostProcessor</code></li>\n<li>注册默认的Bean (Environment等)</li>\n</ol>\n<h3 id=\"postProcessBeanFactory\"><a href=\"#postProcessBeanFactory\" class=\"headerlink\" title=\"postProcessBeanFactory\"></a>postProcessBeanFactory</h3><blockquote>\n<p>默认为空，由子类去实现</p>\n</blockquote>\n<p>在SpringMVC 中</p>\n<ol>\n<li>注册<code>ServeletContextAware</code></li>\n<li>注册<code>Request</code>，<code>Session</code>,<code>Application</code> 的<code>Scope</code></li>\n<li>注册<code>RequestObjectFactory</code>&#x2F;<code>ResponseObjectFactory</code>&#x2F;<code>SessionObjectFactory</code>&#x2F;<code>WebRequestObjectFactory</code> 等工厂Bean，用来处理在<code>Controller</code> 中使用成员变量的方式注入<code>Request</code>&#x2F;<code>Response</code>&#x2F;<code>Session</code>&#x2F;<code>WebRequest</code>等对象。具体使用可见下面<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里注入的对象是其实是一个代理了RequestObjectFactory的代理对象</span></span><br><span class=\"line\">  <span class=\"comment\">// 在每次调用时都会使用RequestContextHolder从当前上下文中获取HttpServletRequest对象来进行真实的调用</span></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> HttpServletRequest httpRequest;</span><br><span class=\"line\">  <span class=\"meta\">@GetMapping(&quot;test&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">handle</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">HttpSession</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> httpRequest.getSession();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"invokeBeanFactoryPostProcessors\"><a href=\"#invokeBeanFactoryPostProcessors\" class=\"headerlink\" title=\"invokeBeanFactoryPostProcessors\"></a>invokeBeanFactoryPostProcessors</h3><p>顾名思义 就是调用<code>BeanFactoryPostProcessor</code>的<code>postProcessBeanFactory</code>方法</p>\n<blockquote>\n<p>会优先执行实现了<code>PriorityOrdered</code>接口的，然后在执行实现了<code>Ordered</code>接口的，最后再执行其他的<code>BeanFactoryPostProcessor</code></p>\n</blockquote>\n<h3 id=\"registerBeanPostProcessors\"><a href=\"#registerBeanPostProcessors\" class=\"headerlink\" title=\"registerBeanPostProcessors\"></a>registerBeanPostProcessors</h3><p>同样看名字就能知道是注册<code>BeanPostProcessor</code></p>\n<blockquote>\n<p>同样也遵循 <code>实现了PriorityOrdered</code> -&gt; <code>实现了Ordered</code> -&gt; <code>其他BeanPostProcessor</code></p>\n</blockquote>\n<h3 id=\"initMessageSource\"><a href=\"#initMessageSource\" class=\"headerlink\" title=\"initMessageSource\"></a>initMessageSource</h3><p>一样，做<code>MessageSource</code> Bean的初始化</p>\n<h3 id=\"initApplicationEventMulticaster\"><a href=\"#initApplicationEventMulticaster\" class=\"headerlink\" title=\"initApplicationEventMulticaster\"></a>initApplicationEventMulticaster</h3><p>初始化<code>ApplicationEventMulticaster</code> 用来支持 ApplicationListener&#x2F;ApplicationEvent 事件订阅与发布</p>\n<h3 id=\"onRefresh\"><a href=\"#onRefresh\" class=\"headerlink\" title=\"onRefresh\"></a>onRefresh</h3><p>空实现，在SpringMVC中用来初始化 <code>ThemeSource</code></p>\n<h3 id=\"registerListeners\"><a href=\"#registerListeners\" class=\"headerlink\" title=\"registerListeners\"></a>registerListeners</h3><p>这一步自然就是把<code>ApplicationListener</code>注册到上面的<code>ApplicationEventMulticaster</code>中</p>\n<blockquote>\n<p>并不会初始化<code>ApplicationListener</code>对象,只是添加BeanName。为了能应用<code>BeanPostProcessor</code>初始化都在下一步去做</p>\n</blockquote>\n<h3 id=\"finishBeanFactoryInitialization\"><a href=\"#finishBeanFactoryInitialization\" class=\"headerlink\" title=\"finishBeanFactoryInitialization\"></a>finishBeanFactoryInitialization</h3><ol>\n<li>初始化<code>ConversionService</code></li>\n<li>增加默认的<code>StringValueResolver</code>用来解析注解value中的<code>$&#123;&#125;</code>占位符.例如<code>@PathVariable(&quot;$&#123;name&#125;&quot;)</code></li>\n<li>初始化其他所有非Lazy的Bean （Bean的初始化）</li>\n</ol>\n<h3 id=\"finishRefresh\"><a href=\"#finishRefresh\" class=\"headerlink\" title=\"finishRefresh\"></a>finishRefresh</h3><ol>\n<li>初始化<code>LifecycleProcessor</code>并调用<code>LifecycleProcessor.onRefresh()</code></li>\n<li>发布<code>ContextRefreshedEvent</code>事件</li>\n</ol>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"关于ApplicationEvent\"><a href=\"#关于ApplicationEvent\" class=\"headerlink\" title=\"关于ApplicationEvent\"></a>关于<code>ApplicationEvent</code></h3><p>在spring中有四个<code>ApplicationEvent</code>的子类（对应发出事件的方法）</p>\n<ol>\n<li>ContextRefreshedEvent -&gt; refresh()</li>\n<li>ContextClosedEvent -&gt; close()</li>\n<li>ContextStartedEvent -&gt; start()</li>\n<li>ContextStoppedEvent -&gt; stop()</li>\n</ol>\n<p>我们在启动&#x2F;销毁spring容器是调用<code>ApplicationContext</code>的 <code>refresh</code>&#x2F;<code>close</code>方法(对于spring容器启动&#x2F;关闭,这两个方法就够了)</p>\n<p>但是为什么还要设计start&#x2F;stop 两个事件呢? 而且spring默认启动时也不会调用对应的方法去触发这两个事件(除非手动调用ApplicationContext.start())</p>\n<p>对于<code>start</code>&#x2F;<code>stop</code>两个事件。主要还是用于将其他组件的生命周期和Spring的生命周期做绑定（使用<code>SmartLifecycle</code>接口,<code>Lifecycle</code>接口只有在调用<code>ApplicationContext.start/stop</code>方法之后才会执行）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SmartLifecycle</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Lifecycle</span>, <span class=\"title class_\">Phased</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 是否在spring启动时自动启动</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> <span class=\"built_in\">boolean</span> <span class=\"title function_\">isAutoStartup</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> <span class=\"built_in\">void</span> <span class=\"title function_\">stop</span>(<span class=\"params\">Runnable callback</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">stop</span>();</span><br><span class=\"line\">\t\tcallback.<span class=\"title function_\">run</span>();</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">        <span class=\"comment\">// 启动的阶段，类似order 数字越小越先执行</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> int <span class=\"title function_\">getPhase</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable constant_\">DEFAULT_PHASE</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","length":4666,"excerpt":"<h1 id><a href=\"#\" class=\"headerlink\" title=\"_\"></a>_</h1><h2 id=\"refresh方法概览\"><a href=\"#refresh方法概览\" class=\"headerlink\" title=\"refresh方法概览\"></a>refresh方法概览</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException &#123;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.startupShutdownMonitor) &#123;</span><br><span class=\"line\">    <span class=\"type\">StartupStep</span> <span class=\"variable\">contextRefresh</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.applicationStartup.start(<span class=\"string\">&quot;spring.context.refresh&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Prepare this context for refreshing.</span></span><br><span class=\"line\">    prepareRefresh();</span><br><span class=\"line\">    <span class=\"comment\">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class=\"line\">    <span class=\"type\">ConfigurableListableBeanFactory</span> <span class=\"variable\">beanFactory</span> <span class=\"operator\">=</span> obtainFreshBeanFactory();</span><br><span class=\"line\">    <span class=\"comment\">// Prepare the bean factory for use in this context.</span></span><br><span class=\"line\">    prepareBeanFactory(beanFactory);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class=\"line\">      postProcessBeanFactory(beanFactory);</span><br><span class=\"line\">      <span class=\"type\">StartupStep</span> <span class=\"variable\">beanPostProcess</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.applicationStartup.start(<span class=\"string\">&quot;spring.context.beans.post-process&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// Invoke factory processors registered as beans in the context.</span></span><br><span class=\"line\">      invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\">      <span class=\"comment\">// Register bean processors that intercept bean creation.</span></span><br><span class=\"line\">      registerBeanPostProcessors(beanFactory);</span><br><span class=\"line\">      beanPostProcess.end();</span><br><span class=\"line\">      <span class=\"comment\">// Initialize message source for this context.</span></span><br><span class=\"line\">      initMessageSource();</span><br><span class=\"line\">      <span class=\"comment\">// Initialize event multicaster for this context.</span></span><br><span class=\"line\">      initApplicationEventMulticaster();</span><br><span class=\"line\">      <span class=\"comment\">// Initialize other special beans in specific context subclasses.</span></span><br><span class=\"line\">      onRefresh();</span><br><span class=\"line\">      <span class=\"comment\">// Check for listener beans and register them.</span></span><br><span class=\"line\">      registerListeners();</span><br><span class=\"line\">      <span class=\"comment\">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class=\"line\">      finishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\">      <span class=\"comment\">// Last step: publish corresponding event.</span></span><br><span class=\"line\">      finishRefresh();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class=\"line\">      destroyBeans();</span><br><span class=\"line\">      <span class=\"comment\">// Reset &#x27;active&#x27; flag.</span></span><br><span class=\"line\">      cancelRefresh(ex);</span><br><span class=\"line\">      <span class=\"comment\">// Propagate exception to caller.</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">    &#125;  <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class=\"line\">      <span class=\"comment\">// might not ever need metadata for singleton beans anymore...</span></span><br><span class=\"line\">      resetCommonCaches();</span><br><span class=\"line\">      contextRefresh.end();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"refresh方法步骤说明\"><a href=\"#refresh方法步骤说明\" class=\"headerlink\" title=\"refresh方法步骤说明\"></a>refresh方法步骤说明</h2><h3 id=\"prepareRefresh\"><a href=\"#prepareRefresh\" class=\"headerlink\" title=\"prepareRefresh\"></a>prepareRefresh</h3><p>主要是做一些初始化的工作.验证必要属性. 初始化<code>earlyApplicationListeners</code></p>\n<h3 id=\"obtainFreshBeanFactory\"><a href=\"#obtainFreshBeanFactory\" class=\"headerlink\" title=\"obtainFreshBeanFactory\"></a>obtainFreshBeanFactory</h3><p>创建并获取 BeanFactory (是否可以重复调用refresh区分两种子类实现)</p>\n<h3 id=\"AbstractRefreshableApplicationContext\"><a href=\"#AbstractRefreshableApplicationContext\" class=\"headerlink\" title=\"AbstractRefreshableApplicationContext\"></a>AbstractRefreshableApplicationContext</h3><blockquote>\n<p>主要是xml的实现</p>\n</blockquote>\n<ol>\n<li>FileSystemXmlApplicationContext</li>\n<li>ClassPathXmlApplicationContext</li>\n</ol>\n<h4 id=\"GenericApplicationContext\"><a href=\"#GenericApplicationContext\" class=\"headerlink\" title=\"GenericApplicationContext\"></a>GenericApplicationContext</h4><blockquote>\n<p>通用的实现</p>\n</blockquote>\n<ol>\n<li>GenericXmlApplicationContext</li>\n<li>StaticApplicationContext</li>\n<li>GenericGroovyApplicationContext</li>\n<li>AnnotationConfigApplicationContext</li>\n</ol>\n<h3 id=\"prepareBeanFactory\"><a href=\"#prepareBeanFactory\" class=\"headerlink\" title=\"prepareBeanFactory\"></a>prepareBeanFactory</h3><p>对<code>BeanFactory</code>做一些默认的初始化工作（,）</p>\n<ol>\n<li>设置classloader</li>\n<li>基于<code>ApplicationContext</code>的一系列Aware接口的<code>BeanPostProcessor</code></li>\n<li>注册<code>ApplicationListener</code>接口的<code>BeanPostProcessor</code></li>\n<li>注册默认的Bean (Environment等)</li>\n</ol>\n<h3 id=\"postProcessBeanFactory\"><a href=\"#postProcessBeanFactory\" class=\"headerlink\" title=\"postProcessBeanFactory\"></a>postProcessBeanFactory</h3><blockquote>\n<p>默认为空，由子类去实现</p>\n</blockquote>\n<p>在SpringMVC 中</p>\n<ol>\n<li>注册<code>ServeletContextAware</code></li>\n<li>注册<code>Request</code>，<code>Session</code>,<code>Application</code> 的<code>Scope</code></li>\n<li>注册<code>RequestObjectFactory</code>&#x2F;<code>ResponseObjectFactory</code>&#x2F;<code>SessionObjectFactory</code>&#x2F;<code>WebRequestObjectFactory</code> 等工厂Bean，用来处理在<code>Controller</code> 中使用成员变量的方式注入<code>Request</code>&#x2F;<code>Response</code>&#x2F;<code>Session</code>&#x2F;<code>WebRequest</code>等对象。具体使用可见下面<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里注入的对象是其实是一个代理了RequestObjectFactory的代理对象</span></span><br><span class=\"line\">  <span class=\"comment\">// 在每次调用时都会使用RequestContextHolder从当前上下文中获取HttpServletRequest对象来进行真实的调用</span></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> HttpServletRequest httpRequest;</span><br><span class=\"line\">  <span class=\"meta\">@GetMapping(&quot;test&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">handle</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">HttpSession</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> httpRequest.getSession();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"invokeBeanFactoryPostProcessors\"><a href=\"#invokeBeanFactoryPostProcessors\" class=\"headerlink\" title=\"invokeBeanFactoryPostProcessors\"></a>invokeBeanFactoryPostProcessors</h3><p>顾名思义 就是调用<code>BeanFactoryPostProcessor</code>的<code>postProcessBeanFactory</code>方法</p>\n<blockquote>\n<p>会优先执行实现了<code>PriorityOrdered</code>接口的，然后在执行实现了<code>Ordered</code>接口的，最后再执行其他的<code>BeanFactoryPostProcessor</code></p>\n</blockquote>\n<h3 id=\"registerBeanPostProcessors\"><a href=\"#registerBeanPostProcessors\" class=\"headerlink\" title=\"registerBeanPostProcessors\"></a>registerBeanPostProcessors</h3><p>同样看名字就能知道是注册<code>BeanPostProcessor</code></p>\n<blockquote>\n<p>同样也遵循 <code>实现了PriorityOrdered</code> -&gt; <code>实现了Ordered</code> -&gt; <code>其他BeanPostProcessor</code></p>\n</blockquote>\n<h3 id=\"initMessageSource\"><a href=\"#initMessageSource\" class=\"headerlink\" title=\"initMessageSource\"></a>initMessageSource</h3><p>一样，做<code>MessageSource</code> Bean的初始化</p>\n<h3 id=\"initApplicationEventMulticaster\"><a href=\"#initApplicationEventMulticaster\" class=\"headerlink\" title=\"initApplicationEventMulticaster\"></a>initApplicationEventMulticaster</h3><p>初始化<code>ApplicationEventMulticaster</code> 用来支持 ApplicationListener&#x2F;ApplicationEvent 事件订阅与发布</p>\n<h3 id=\"onRefresh\"><a href=\"#onRefresh\" class=\"headerlink\" title=\"onRefresh\"></a>onRefresh</h3><p>空实现，在SpringMVC中用来初始化 <code>ThemeSource</code></p>\n<h3 id=\"registerListeners\"><a href=\"#registerListeners\" class=\"headerlink\" title=\"registerListeners\"></a>registerListeners</h3><p>这一步自然就是把<code>ApplicationListener</code>注册到上面的<code>ApplicationEventMulticaster</code>中</p>\n<blockquote>\n<p>并不会初始化<code>ApplicationListener</code>对象,只是添加BeanName。为了能应用<code>BeanPostProcessor</code>初始化都在下一步去做</p>\n</blockquote>\n<h3 id=\"finishBeanFactoryInitialization\"><a href=\"#finishBeanFactoryInitialization\" class=\"headerlink\" title=\"finishBeanFactoryInitialization\"></a>finishBeanFactoryInitialization</h3><ol>\n<li>初始化<code>ConversionService</code></li>\n<li>增加默认的<code>StringValueResolver</code>用来解析注解value中的<code>$&#123;&#125;</code>占位符.例如<code>@PathVariable(&quot;$&#123;name&#125;&quot;)</code></li>\n<li>初始化其他所有非Lazy的Bean （Bean的初始化）</li>\n</ol>\n<h3 id=\"finishRefresh\"><a href=\"#finishRefresh\" class=\"headerlink\" title=\"finishRefresh\"></a>finishRefresh</h3><ol>\n<li>初始化<code>LifecycleProcessor</code>并调用<code>LifecycleProcessor.onRefresh()</code></li>\n<li>发布<code>ContextRefreshedEvent</code>事件</li>\n</ol>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"关于ApplicationEvent\"><a href=\"#关于ApplicationEvent\" class=\"headerlink\" title=\"关于ApplicationEvent\"></a>关于<code>ApplicationEvent</code></h3><p>在spring中有四个<code>ApplicationEvent</code>的子类（对应发出事件的方法）</p>\n<ol>\n<li>ContextRefreshedEvent -&gt; refresh()</li>\n<li>ContextClosedEvent -&gt; close()</li>\n<li>ContextStartedEvent -&gt; start()</li>\n<li>ContextStoppedEvent -&gt; stop()</li>\n</ol>\n<p>我们在启动&#x2F;销毁spring容器是调用<code>ApplicationContext</code>的 <code>refresh</code>&#x2F;<code>close</code>方法(对于spring容器启动&#x2F;关闭,这两个方法就够了)</p>\n<p>但是为什么还要设计start&#x2F;stop 两个事件呢? 而且spring默认启动时也不会调用对应的方法去触发这两个事件(除非手动调用ApplicationContext.start())</p>\n<p>对于<code>start</code>&#x2F;<code>stop</code>两个事件。主要还是用于将其他组件的生命周期和Spring的生命周期做绑定（使用<code>SmartLifecycle</code>接口,<code>Lifecycle</code>接口只有在调用<code>ApplicationContext.start/stop</code>方法之后才会执行）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SmartLifecycle</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Lifecycle</span>, <span class=\"title class_\">Phased</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 是否在spring启动时自动启动</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> <span class=\"built_in\">boolean</span> <span class=\"title function_\">isAutoStartup</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> <span class=\"built_in\">void</span> <span class=\"title function_\">stop</span>(<span class=\"params\">Runnable callback</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">stop</span>();</span><br><span class=\"line\">\t\tcallback.<span class=\"title function_\">run</span>();</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">        <span class=\"comment\">// 启动的阶段，类似order 数字越小越先执行</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> int <span class=\"title function_\">getPhase</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable constant_\">DEFAULT_PHASE</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"springIOC的refresh方法","path":"2021/06/20/springIOC的refresh方法/","eyeCatchImage":null,"excerpt":"<h1 id><a href=\"#\" class=\"headerlink\" title=\"_\"></a>_</h1><h2 id=\"refresh方法概览\"><a href=\"#refresh方法概览\" class=\"headerlink\" title=\"refresh方法概览\"></a>refresh方法概览</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException &#123;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.startupShutdownMonitor) &#123;</span><br><span class=\"line\">    <span class=\"type\">StartupStep</span> <span class=\"variable\">contextRefresh</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.applicationStartup.start(<span class=\"string\">&quot;spring.context.refresh&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Prepare this context for refreshing.</span></span><br><span class=\"line\">    prepareRefresh();</span><br><span class=\"line\">    <span class=\"comment\">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class=\"line\">    <span class=\"type\">ConfigurableListableBeanFactory</span> <span class=\"variable\">beanFactory</span> <span class=\"operator\">=</span> obtainFreshBeanFactory();</span><br><span class=\"line\">    <span class=\"comment\">// Prepare the bean factory for use in this context.</span></span><br><span class=\"line\">    prepareBeanFactory(beanFactory);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class=\"line\">      postProcessBeanFactory(beanFactory);</span><br><span class=\"line\">      <span class=\"type\">StartupStep</span> <span class=\"variable\">beanPostProcess</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.applicationStartup.start(<span class=\"string\">&quot;spring.context.beans.post-process&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// Invoke factory processors registered as beans in the context.</span></span><br><span class=\"line\">      invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\">      <span class=\"comment\">// Register bean processors that intercept bean creation.</span></span><br><span class=\"line\">      registerBeanPostProcessors(beanFactory);</span><br><span class=\"line\">      beanPostProcess.end();</span><br><span class=\"line\">      <span class=\"comment\">// Initialize message source for this context.</span></span><br><span class=\"line\">      initMessageSource();</span><br><span class=\"line\">      <span class=\"comment\">// Initialize event multicaster for this context.</span></span><br><span class=\"line\">      initApplicationEventMulticaster();</span><br><span class=\"line\">      <span class=\"comment\">// Initialize other special beans in specific context subclasses.</span></span><br><span class=\"line\">      onRefresh();</span><br><span class=\"line\">      <span class=\"comment\">// Check for listener beans and register them.</span></span><br><span class=\"line\">      registerListeners();</span><br><span class=\"line\">      <span class=\"comment\">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class=\"line\">      finishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\">      <span class=\"comment\">// Last step: publish corresponding event.</span></span><br><span class=\"line\">      finishRefresh();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class=\"line\">      destroyBeans();</span><br><span class=\"line\">      <span class=\"comment\">// Reset &#x27;active&#x27; flag.</span></span><br><span class=\"line\">      cancelRefresh(ex);</span><br><span class=\"line\">      <span class=\"comment\">// Propagate exception to caller.</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">    &#125;  <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class=\"line\">      <span class=\"comment\">// might not ever need metadata for singleton beans anymore...</span></span><br><span class=\"line\">      resetCommonCaches();</span><br><span class=\"line\">      contextRefresh.end();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","date":{"_isAMomentObject":true,"_i":"2021-06-20T05:08:52.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-06-20T05:08:52.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"spring","tags":["spring"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"两个线程交替输出1-100的奇偶数","originContent":"","toc":false,"date":"2021-06-01T15:24:44.000Z","keywords":null,"_content":"\n> 两个线程循环输出1-100，一个输出奇数，一个输出偶数\n\n可以用`Condition`去实现这个功能。开启两个线程去获取同一个可重入锁.获取到锁之后打印当前的值，再使用`condition.signal()`唤醒另一个线程，然后自己`condition.await()`。最后释放锁。两个线程使用同样的代码。每次只有一个线程运行进行来实现交替输出\n\n直接上代码\n<!--more-->\n```\nimport org.jooq.lambda.Unchecked;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.RepeatedTest;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.ReentrantLock;\n\n/**\n * @author xyz327\n * @date 2021/5/30 16:13\n */\npublic class ConcurrentTest {\n\n    /**\n     * 两个线程循环输出1-100，一个输出奇数，一个输出偶数\n     */\n    @RepeatedTest(1000)\n    void eachExc() throws Exception {\n        ReentrantLock lock = new ReentrantLock();\n        Condition condition = lock.newCondition();\n        CountDownLatch countDownLatch = new CountDownLatch(2);\n        AtomicInteger count = new AtomicInteger(1);\n        List<Integer> resultA = new ArrayList<>();\n        List<Integer> resultB = new ArrayList<>();\n        new Thread(Unchecked.runnable(() -> {\n            while (true) {\n                lock.lock();\n                try {\n                    if (count.get() > 100) {\n                        countDownLatch.countDown();\n                        condition.signal();\n                        return;\n                    }\n                    int value = count.getAndIncrement();\n                    resultA.add(value);\n                    condition.signal();\n                    condition.await();\n                } finally {\n                    lock.unlock();\n                }\n            }\n        }), \"A\").start();\n        new Thread(Unchecked.runnable(() -> {\n            while (true) {\n                lock.lock();\n                try {\n                    if (count.get() > 100) {\n                        countDownLatch.countDown();\n                        condition.signal();\n                        return;\n                    }\n                    int value = count.getAndIncrement();\n                    resultB.add(value);\n                    condition.signal();\n                    condition.await();\n                } finally {\n                    lock.unlock();\n                }\n            }\n        }), \"B\").start();\n\n        countDownLatch.await();\n\n        System.out.println(resultA);\n        System.out.println(resultB);\n        // 校验结果是否正确\n        Assertions.assertEquals(resultA.size(), 50);\n        Assertions.assertEquals(resultB.size(), 50);\n        boolean isAOdd = resultA.get(0) % 2 != 0;\n        Assertions.assertAll(() -> {\n            for (Integer integer : resultA) {\n                boolean isOdd = integer % 2 != 0;\n                if(isAOdd && !isOdd){\n                    throw new IllegalArgumentException(\"A\");\n                }\n            }\n\n            for (Integer integer : resultB) {\n                boolean isOdd = integer % 2 != 0;\n                if(isAOdd && isOdd){\n                    throw new IllegalArgumentException(\"B\");\n                }\n            }\n        });\n    }\n}\n```\n\n","source":"_posts/2021/06/两个线程交替输出1-100的奇偶数.md","raw":"---\ntitle: 两个线程交替输出1-100的奇偶数\n\ntags:\n  - 多线程\ncategories:\n  - 面试题\noriginContent: ''\ntoc: false\ndate: 2021-06-01 23:24:44\nkeywords:\n---\n\n> 两个线程循环输出1-100，一个输出奇数，一个输出偶数\n\n可以用`Condition`去实现这个功能。开启两个线程去获取同一个可重入锁.获取到锁之后打印当前的值，再使用`condition.signal()`唤醒另一个线程，然后自己`condition.await()`。最后释放锁。两个线程使用同样的代码。每次只有一个线程运行进行来实现交替输出\n\n直接上代码\n<!--more-->\n```\nimport org.jooq.lambda.Unchecked;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.RepeatedTest;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.ReentrantLock;\n\n/**\n * @author xyz327\n * @date 2021/5/30 16:13\n */\npublic class ConcurrentTest {\n\n    /**\n     * 两个线程循环输出1-100，一个输出奇数，一个输出偶数\n     */\n    @RepeatedTest(1000)\n    void eachExc() throws Exception {\n        ReentrantLock lock = new ReentrantLock();\n        Condition condition = lock.newCondition();\n        CountDownLatch countDownLatch = new CountDownLatch(2);\n        AtomicInteger count = new AtomicInteger(1);\n        List<Integer> resultA = new ArrayList<>();\n        List<Integer> resultB = new ArrayList<>();\n        new Thread(Unchecked.runnable(() -> {\n            while (true) {\n                lock.lock();\n                try {\n                    if (count.get() > 100) {\n                        countDownLatch.countDown();\n                        condition.signal();\n                        return;\n                    }\n                    int value = count.getAndIncrement();\n                    resultA.add(value);\n                    condition.signal();\n                    condition.await();\n                } finally {\n                    lock.unlock();\n                }\n            }\n        }), \"A\").start();\n        new Thread(Unchecked.runnable(() -> {\n            while (true) {\n                lock.lock();\n                try {\n                    if (count.get() > 100) {\n                        countDownLatch.countDown();\n                        condition.signal();\n                        return;\n                    }\n                    int value = count.getAndIncrement();\n                    resultB.add(value);\n                    condition.signal();\n                    condition.await();\n                } finally {\n                    lock.unlock();\n                }\n            }\n        }), \"B\").start();\n\n        countDownLatch.await();\n\n        System.out.println(resultA);\n        System.out.println(resultB);\n        // 校验结果是否正确\n        Assertions.assertEquals(resultA.size(), 50);\n        Assertions.assertEquals(resultB.size(), 50);\n        boolean isAOdd = resultA.get(0) % 2 != 0;\n        Assertions.assertAll(() -> {\n            for (Integer integer : resultA) {\n                boolean isOdd = integer % 2 != 0;\n                if(isAOdd && !isOdd){\n                    throw new IllegalArgumentException(\"A\");\n                }\n            }\n\n            for (Integer integer : resultB) {\n                boolean isOdd = integer % 2 != 0;\n                if(isAOdd && isOdd){\n                    throw new IllegalArgumentException(\"B\");\n                }\n            }\n        });\n    }\n}\n```\n\n","slug":"两个线程交替输出1-100的奇偶数","published":1,"updated":"2023-12-19T09:19:23.191Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydr9003bfki4a3sn5t2z","content":"<blockquote>\n<p>两个线程循环输出1-100，一个输出奇数，一个输出偶数</p>\n</blockquote>\n<p>可以用<code>Condition</code>去实现这个功能。开启两个线程去获取同一个可重入锁.获取到锁之后打印当前的值，再使用<code>condition.signal()</code>唤醒另一个线程，然后自己<code>condition.await()</code>。最后释放锁。两个线程使用同样的代码。每次只有一个线程运行进行来实现交替输出</p>\n<p>直接上代码</p>\n<span id=\"more\"></span>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.jooq.lambda.Unchecked;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Assertions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.RepeatedTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @author xyz327</span></span><br><span class=\"line\"><span class=\"comment\"> * @date 2021/5/30 16:13</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public <span class=\"keyword\">class</span> <span class=\"title class_\">ConcurrentTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 两个线程循环输出1-100，一个输出奇数，一个输出偶数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @RepeatedTest(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"literal\">void</span> eachExc() throws Exception &#123;</span><br><span class=\"line\">        ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">        Condition condition = lock.newCondition();</span><br><span class=\"line\">        CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">2</span>);</span><br><span class=\"line\">        AtomicInteger count = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">1</span>);</span><br><span class=\"line\">        List&lt;Integer&gt; resultA = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        List&lt;Integer&gt; resultB = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread<span class=\"function\"><span class=\"params\">(Unchecked.runnable(() -&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                lock.lock();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"keyword\">try</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    <span class=\"keyword\">if</span> (count.get() &gt; <span class=\"number\">100</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        countDownLatch.countDown();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        condition.signal();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        <span class=\"keyword\">return</span>;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    int value = count.getAndIncrement();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    resultA.add(value);</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    condition.signal();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    condition.<span class=\"keyword\">await</span>();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                &#125; <span class=\"keyword\">finally</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    lock.unlock();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        &#125;), <span class=\"string\">&quot;A&quot;</span>)</span>.<span class=\"title\">start</span><span class=\"params\">()</span>;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">new</span> <span class=\"title\">Thread</span><span class=\"params\">(Unchecked.runnable(() -&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                lock.lock();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"keyword\">try</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    <span class=\"keyword\">if</span> (count.get() &gt; <span class=\"number\">100</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        countDownLatch.countDown();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        condition.signal();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        <span class=\"keyword\">return</span>;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    int value = count.getAndIncrement();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    resultB.add(value);</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    condition.signal();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    condition.<span class=\"keyword\">await</span>();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                &#125; <span class=\"keyword\">finally</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    lock.unlock();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        &#125;), <span class=\"string\">&quot;B&quot;</span>)</span>.<span class=\"title\">start</span><span class=\"params\">()</span>;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">countDownLatch</span>.<span class=\"title\">await</span><span class=\"params\">()</span>;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">System</span>.<span class=\"title\">out</span>.<span class=\"title\">println</span><span class=\"params\">(resultA)</span>;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">System</span>.<span class=\"title\">out</span>.<span class=\"title\">println</span><span class=\"params\">(resultB)</span>;</span></span><br><span class=\"line\"><span class=\"function\">        // 校验结果是否正确</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">Assertions</span>.<span class=\"title\">assertEquals</span><span class=\"params\">(resultA.size(), <span class=\"number\">50</span>)</span>;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">Assertions</span>.<span class=\"title\">assertEquals</span><span class=\"params\">(resultB.size(), <span class=\"number\">50</span>)</span>;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">boolean</span> <span class=\"title\">isAOdd</span> = <span class=\"title\">resultA</span>.<span class=\"title\">get</span><span class=\"params\">(<span class=\"number\">0</span>)</span> % 2 != 0;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">Assertions</span>.<span class=\"title\">assertAll</span><span class=\"params\">(() -&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">for</span> (Integer integer : resultA) &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                boolean isOdd = integer % <span class=\"number\">2</span> != <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"keyword\">if</span>(isAOdd &amp;&amp; !isOdd)&#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;A&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">for</span> (Integer integer : resultB) &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                boolean isOdd = integer % <span class=\"number\">2</span> != <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"keyword\">if</span>(isAOdd &amp;&amp; isOdd)&#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;B&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        &#125;)</span>;</span></span><br><span class=\"line\"><span class=\"function\">    &#125;</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n","length":2329,"excerpt":"<blockquote>\n<p>两个线程循环输出1-100，一个输出奇数，一个输出偶数</p>\n</blockquote>\n<p>可以用<code>Condition</code>去实现这个功能。开启两个线程去获取同一个可重入锁.获取到锁之后打印当前的值，再使用<code>condition.signal()</code>唤醒另一个线程，然后自己<code>condition.await()</code>。最后释放锁。两个线程使用同样的代码。每次只有一个线程运行进行来实现交替输出</p>\n<p>直接上代码</p>","more":"<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.jooq.lambda.Unchecked;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Assertions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.RepeatedTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @author xyz327</span></span><br><span class=\"line\"><span class=\"comment\"> * @date 2021/5/30 16:13</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public <span class=\"keyword\">class</span> <span class=\"title class_\">ConcurrentTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 两个线程循环输出1-100，一个输出奇数，一个输出偶数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @RepeatedTest(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"literal\">void</span> eachExc() throws Exception &#123;</span><br><span class=\"line\">        ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">        Condition condition = lock.newCondition();</span><br><span class=\"line\">        CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">2</span>);</span><br><span class=\"line\">        AtomicInteger count = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">1</span>);</span><br><span class=\"line\">        List&lt;Integer&gt; resultA = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        List&lt;Integer&gt; resultB = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread<span class=\"function\"><span class=\"params\">(Unchecked.runnable(() -&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                lock.lock();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"keyword\">try</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    <span class=\"keyword\">if</span> (count.get() &gt; <span class=\"number\">100</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        countDownLatch.countDown();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        condition.signal();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        <span class=\"keyword\">return</span>;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    int value = count.getAndIncrement();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    resultA.add(value);</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    condition.signal();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    condition.<span class=\"keyword\">await</span>();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                &#125; <span class=\"keyword\">finally</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    lock.unlock();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        &#125;), <span class=\"string\">&quot;A&quot;</span>)</span>.<span class=\"title\">start</span><span class=\"params\">()</span>;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">new</span> <span class=\"title\">Thread</span><span class=\"params\">(Unchecked.runnable(() -&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                lock.lock();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"keyword\">try</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    <span class=\"keyword\">if</span> (count.get() &gt; <span class=\"number\">100</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        countDownLatch.countDown();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        condition.signal();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        <span class=\"keyword\">return</span>;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    int value = count.getAndIncrement();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    resultB.add(value);</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    condition.signal();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    condition.<span class=\"keyword\">await</span>();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                &#125; <span class=\"keyword\">finally</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    lock.unlock();</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        &#125;), <span class=\"string\">&quot;B&quot;</span>)</span>.<span class=\"title\">start</span><span class=\"params\">()</span>;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">countDownLatch</span>.<span class=\"title\">await</span><span class=\"params\">()</span>;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">System</span>.<span class=\"title\">out</span>.<span class=\"title\">println</span><span class=\"params\">(resultA)</span>;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">System</span>.<span class=\"title\">out</span>.<span class=\"title\">println</span><span class=\"params\">(resultB)</span>;</span></span><br><span class=\"line\"><span class=\"function\">        // 校验结果是否正确</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">Assertions</span>.<span class=\"title\">assertEquals</span><span class=\"params\">(resultA.size(), <span class=\"number\">50</span>)</span>;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">Assertions</span>.<span class=\"title\">assertEquals</span><span class=\"params\">(resultB.size(), <span class=\"number\">50</span>)</span>;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">boolean</span> <span class=\"title\">isAOdd</span> = <span class=\"title\">resultA</span>.<span class=\"title\">get</span><span class=\"params\">(<span class=\"number\">0</span>)</span> % 2 != 0;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">Assertions</span>.<span class=\"title\">assertAll</span><span class=\"params\">(() -&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">for</span> (Integer integer : resultA) &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                boolean isOdd = integer % <span class=\"number\">2</span> != <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"keyword\">if</span>(isAOdd &amp;&amp; !isOdd)&#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;A&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">for</span> (Integer integer : resultB) &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                boolean isOdd = integer % <span class=\"number\">2</span> != <span class=\"number\">0</span>;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"keyword\">if</span>(isAOdd &amp;&amp; isOdd)&#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;B&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        &#125;)</span>;</span></span><br><span class=\"line\"><span class=\"function\">    &#125;</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"两个线程交替输出1-100的奇偶数","path":"2021/06/01/两个线程交替输出1-100的奇偶数/","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>两个线程循环输出1-100，一个输出奇数，一个输出偶数</p>\n</blockquote>\n<p>可以用<code>Condition</code>去实现这个功能。开启两个线程去获取同一个可重入锁.获取到锁之后打印当前的值，再使用<code>condition.signal()</code>唤醒另一个线程，然后自己<code>condition.await()</code>。最后释放锁。两个线程使用同样的代码。每次只有一个线程运行进行来实现交替输出</p>\n<p>直接上代码</p>","date":{"_isAMomentObject":true,"_i":"2021-06-01T15:24:44.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-06-01T15:24:44.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"面试题","tags":["多线程"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Git Commit规范","keywords":"git,git commit","toc":true,"date":"2020-02-28T04:21:49.000Z","_content":"\n## Git Commit 规范说明\n> 规范化的commit信息可以方便每次release发版时自动生成对应的changelog\n\n\n#### 自动生成CHANGELOG信息\n\n可以使用[standard-version](https://github.com/conventional-changelog/standard-version)  \n基于nodejs的规范化工具\n\n在每次发版之前在项目跟目录下执行，就会自动生成changelog信息\n```bash\nnpx standard-version\n```\n\n#### commit信息规范 \n[commit 格式说明](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)\n[commit约定格式标准](https://www.conventionalcommits.org/)\n\ncommit 的格式包含 Header、Body、Footer 三个部分(其中，Header 是必须，Body 和 Footer 可以省略。)，\n形如：\n```code\n<type>(<scope>): <subject>\n<BLANK LINE> //空行\n<body>\n<BLANK LINE> //空行\n<footer>\n```\n最简单的格式如下\n```\n<type>: <subject>\n```\n\n### Header \n> Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。\n\n1. type用于说明 commit 的类别，只允许使用下面几个标识。\n2. scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\n3. subject是 commit 目的的简短描述，不超过50个字符。\n\n#### 合法的 type 标识：\n\n|类型(type)|描述|\n|---|---|\n|feat|新功能|\n|fix|修补bug|\n|chore| 不修改src或者test的其余修改，例如构建过程或辅助工具的变动|\n|docs|文档|\n|style| 不影响代码含义的改动，例如格式化,去掉空格、改变缩进、增删分号|\n|refactor| 重构|\n|perf|提高性能的改动|\n|test| 添加测试或者修改现有测试|\n|revert| 执行git revert打印的message|\n\n示例：\n\n```\nfeat: 🎸 添加注册功能；\n```\n\n### Body（可省略）\n\n> Body 部分是对本次 commit 的详细描述，可以分成多行。\n\n> 应该说明代码变动的动机，以及与以前行为的对比。\n\n### Footer（可省略）\n\n> Footer 部分只用于两种情况。BREAKING CHANGE(不兼容的改变) 和 Closes (关闭的Issue)\n\n一个完整的gitcommit规范示例：\n\n```\nfeat: 测试commit规范\n\n这是commit的详细信息\n\nBREAKING CHANGE: 不兼容的改变\n\nCloses #1\n```\n\n\n## 安装git commit工具：\n\n> 使用 [cz-cli](https://github.com/commitizen/cz-cli) 规范commit格式，使用 [commitlint](https://conventional-changelog.github.io/commitlint) 检查commit是否符合规则\n\n### 全局配置\n1. 全局安装 commitizen\n  ```shell\n  npm install -g commitizen\n  ```\n2. 全局安装 cz-conventional-changelog\n  ```bash\n  npm install -g cz-conventional-changelog\n  ```\n3. 在用户目录下配置 commitizen\n  ```bash\n  # windows cmd下无法执行,可以手动去 C:\\Users\\{User}\\ (User为你电脑用户名)目录下新建 .czrc 文件\n  echo '{ \"path\": \"cz-conventional-changelog\" }' > ~/.czrc\n  ```\n### 项目配置\n\n> 在全局配置的第3步中的`.czrc`文件放到项目下就可以了\n\n\n### 使用 git cz 命令进行提交代码\n\n以后提交代码都使用 `git cz` 替代 `git commit`，使 commit 内容符合规定的格式。\n\n若还是用 `git commit` ，则需要使得 commit 内容符合规定的格式。\n\n```bash\ngit cz\n```\n\n## IDEA安装[Git Commit Template](https://plugins.jetbrains.com/plugin/9861-git-commit-template)插件 \n在IDEA的 settings->plugins 中安装 Git Commit Template 插件\n在提交代码时使用插件格式化commit信息\n\n![idea-commit-1](idea-commit-1.png)\n![idea-commit-2](idea-commit-2.png)\n\n\n## 检查git commit信息是否符合规范\n//TODO","source":"_posts/2020/02/Git-Commit规范.md","raw":"---\ntitle: Git Commit规范\n\ntags:\n  - git\ncategories:\n  - git\nkeywords: 'git,git commit'\ntoc: true\ndate: 2020-02-28 12:21:49\n---\n\n## Git Commit 规范说明\n> 规范化的commit信息可以方便每次release发版时自动生成对应的changelog\n\n\n#### 自动生成CHANGELOG信息\n\n可以使用[standard-version](https://github.com/conventional-changelog/standard-version)  \n基于nodejs的规范化工具\n\n在每次发版之前在项目跟目录下执行，就会自动生成changelog信息\n```bash\nnpx standard-version\n```\n\n#### commit信息规范 \n[commit 格式说明](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)\n[commit约定格式标准](https://www.conventionalcommits.org/)\n\ncommit 的格式包含 Header、Body、Footer 三个部分(其中，Header 是必须，Body 和 Footer 可以省略。)，\n形如：\n```code\n<type>(<scope>): <subject>\n<BLANK LINE> //空行\n<body>\n<BLANK LINE> //空行\n<footer>\n```\n最简单的格式如下\n```\n<type>: <subject>\n```\n\n### Header \n> Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。\n\n1. type用于说明 commit 的类别，只允许使用下面几个标识。\n2. scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\n3. subject是 commit 目的的简短描述，不超过50个字符。\n\n#### 合法的 type 标识：\n\n|类型(type)|描述|\n|---|---|\n|feat|新功能|\n|fix|修补bug|\n|chore| 不修改src或者test的其余修改，例如构建过程或辅助工具的变动|\n|docs|文档|\n|style| 不影响代码含义的改动，例如格式化,去掉空格、改变缩进、增删分号|\n|refactor| 重构|\n|perf|提高性能的改动|\n|test| 添加测试或者修改现有测试|\n|revert| 执行git revert打印的message|\n\n示例：\n\n```\nfeat: 🎸 添加注册功能；\n```\n\n### Body（可省略）\n\n> Body 部分是对本次 commit 的详细描述，可以分成多行。\n\n> 应该说明代码变动的动机，以及与以前行为的对比。\n\n### Footer（可省略）\n\n> Footer 部分只用于两种情况。BREAKING CHANGE(不兼容的改变) 和 Closes (关闭的Issue)\n\n一个完整的gitcommit规范示例：\n\n```\nfeat: 测试commit规范\n\n这是commit的详细信息\n\nBREAKING CHANGE: 不兼容的改变\n\nCloses #1\n```\n\n\n## 安装git commit工具：\n\n> 使用 [cz-cli](https://github.com/commitizen/cz-cli) 规范commit格式，使用 [commitlint](https://conventional-changelog.github.io/commitlint) 检查commit是否符合规则\n\n### 全局配置\n1. 全局安装 commitizen\n  ```shell\n  npm install -g commitizen\n  ```\n2. 全局安装 cz-conventional-changelog\n  ```bash\n  npm install -g cz-conventional-changelog\n  ```\n3. 在用户目录下配置 commitizen\n  ```bash\n  # windows cmd下无法执行,可以手动去 C:\\Users\\{User}\\ (User为你电脑用户名)目录下新建 .czrc 文件\n  echo '{ \"path\": \"cz-conventional-changelog\" }' > ~/.czrc\n  ```\n### 项目配置\n\n> 在全局配置的第3步中的`.czrc`文件放到项目下就可以了\n\n\n### 使用 git cz 命令进行提交代码\n\n以后提交代码都使用 `git cz` 替代 `git commit`，使 commit 内容符合规定的格式。\n\n若还是用 `git commit` ，则需要使得 commit 内容符合规定的格式。\n\n```bash\ngit cz\n```\n\n## IDEA安装[Git Commit Template](https://plugins.jetbrains.com/plugin/9861-git-commit-template)插件 \n在IDEA的 settings->plugins 中安装 Git Commit Template 插件\n在提交代码时使用插件格式化commit信息\n\n![idea-commit-1](idea-commit-1.png)\n![idea-commit-2](idea-commit-2.png)\n\n\n## 检查git commit信息是否符合规范\n//TODO","slug":"Git-Commit规范","published":1,"updated":"2023-12-19T09:19:23.176Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydra003ffki4fwdu0163","content":"<h2 id=\"Git-Commit-规范说明\"><a href=\"#Git-Commit-规范说明\" class=\"headerlink\" title=\"Git Commit 规范说明\"></a>Git Commit 规范说明</h2><blockquote>\n<p>规范化的commit信息可以方便每次release发版时自动生成对应的changelog</p>\n</blockquote>\n<h4 id=\"自动生成CHANGELOG信息\"><a href=\"#自动生成CHANGELOG信息\" class=\"headerlink\" title=\"自动生成CHANGELOG信息\"></a>自动生成CHANGELOG信息</h4><p>可以使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvbnZlbnRpb25hbC1jaGFuZ2Vsb2cvc3RhbmRhcmQtdmVyc2lvbg==\">standard-version<i class=\"fa fa-external-link-alt\"></i></span><br>基于nodejs的规范化工具</p>\n<p>在每次发版之前在项目跟目录下执行，就会自动生成changelog信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx standard-version</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"commit信息规范\"><a href=\"#commit信息规范\" class=\"headerlink\" title=\"commit信息规范\"></a>commit信息规范</h4><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTYvMDEvY29tbWl0X21lc3NhZ2VfY2hhbmdlX2xvZy5odG1s\">commit 格式说明<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY29udmVudGlvbmFsY29tbWl0cy5vcmcv\">commit约定格式标准<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>commit 的格式包含 Header、Body、Footer 三个部分(其中，Header 是必须，Body 和 Footer 可以省略。)，<br>形如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class=\"line\">&lt;BLANK LINE&gt; //空行</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;BLANK LINE&gt; //空行</span><br><span class=\"line\">&lt;footer&gt;</span><br></pre></td></tr></table></figure>\n<p>最简单的格式如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>: <span class=\"tag\">&lt;<span class=\"name\">subject</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h3><blockquote>\n<p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</p>\n</blockquote>\n<ol>\n<li>type用于说明 commit 的类别，只允许使用下面几个标识。</li>\n<li>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</li>\n<li>subject是 commit 目的的简短描述，不超过50个字符。</li>\n</ol>\n<h4 id=\"合法的-type-标识：\"><a href=\"#合法的-type-标识：\" class=\"headerlink\" title=\"合法的 type 标识：\"></a>合法的 type 标识：</h4><table>\n<thead>\n<tr>\n<th>类型(type)</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>feat</td>\n<td>新功能</td>\n</tr>\n<tr>\n<td>fix</td>\n<td>修补bug</td>\n</tr>\n<tr>\n<td>chore</td>\n<td>不修改src或者test的其余修改，例如构建过程或辅助工具的变动</td>\n</tr>\n<tr>\n<td>docs</td>\n<td>文档</td>\n</tr>\n<tr>\n<td>style</td>\n<td>不影响代码含义的改动，例如格式化,去掉空格、改变缩进、增删分号</td>\n</tr>\n<tr>\n<td>refactor</td>\n<td>重构</td>\n</tr>\n<tr>\n<td>perf</td>\n<td>提高性能的改动</td>\n</tr>\n<tr>\n<td>test</td>\n<td>添加测试或者修改现有测试</td>\n</tr>\n<tr>\n<td>revert</td>\n<td>执行git revert打印的message</td>\n</tr>\n</tbody></table>\n<p>示例：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">feat:</span> 🎸 添加注册功能；</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Body（可省略）\"><a href=\"#Body（可省略）\" class=\"headerlink\" title=\"Body（可省略）\"></a>Body（可省略）</h3><blockquote>\n<p>Body 部分是对本次 commit 的详细描述，可以分成多行。</p>\n</blockquote>\n<blockquote>\n<p>应该说明代码变动的动机，以及与以前行为的对比。</p>\n</blockquote>\n<h3 id=\"Footer（可省略）\"><a href=\"#Footer（可省略）\" class=\"headerlink\" title=\"Footer（可省略）\"></a>Footer（可省略）</h3><blockquote>\n<p>Footer 部分只用于两种情况。BREAKING CHANGE(不兼容的改变) 和 Closes (关闭的Issue)</p>\n</blockquote>\n<p>一个完整的gitcommit规范示例：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">feat:</span> 测试commit规范</span><br><span class=\"line\"></span><br><span class=\"line\">这是commit的详细信息</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BREAKING </span>CHANGE: 不兼容的改变</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Closes </span><span class=\"comment\">#1</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"安装git-commit工具：\"><a href=\"#安装git-commit工具：\" class=\"headerlink\" title=\"安装git commit工具：\"></a>安装git commit工具：</h2><blockquote>\n<p>使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvbW1pdGl6ZW4vY3otY2xp\">cz-cli<i class=\"fa fa-external-link-alt\"></i></span> 规范commit格式，使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb252ZW50aW9uYWwtY2hhbmdlbG9nLmdpdGh1Yi5pby9jb21taXRsaW50\">commitlint<i class=\"fa fa-external-link-alt\"></i></span> 检查commit是否符合规则</p>\n</blockquote>\n<h3 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h3><ol>\n<li>全局安装 commitizen  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g commitizen</span><br></pre></td></tr></table></figure></li>\n<li>全局安装 cz-conventional-changelog  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cz-conventional-changelog</span><br></pre></td></tr></table></figure></li>\n<li>在用户目录下配置 commitizen  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># windows cmd下无法执行,可以手动去 C:\\Users\\&#123;User&#125;\\ (User为你电脑用户名)目录下新建 .czrc 文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27;</span> &gt; ~/.czrc</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h3><blockquote>\n<p>在全局配置的第3步中的<code>.czrc</code>文件放到项目下就可以了</p>\n</blockquote>\n<h3 id=\"使用-git-cz-命令进行提交代码\"><a href=\"#使用-git-cz-命令进行提交代码\" class=\"headerlink\" title=\"使用 git cz 命令进行提交代码\"></a>使用 git cz 命令进行提交代码</h3><p>以后提交代码都使用 <code>git cz</code> 替代 <code>git commit</code>，使 commit 内容符合规定的格式。</p>\n<p>若还是用 <code>git commit</code> ，则需要使得 commit 内容符合规定的格式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cz</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"IDEA安装Git-Commit-Template插件\"><a href=\"#IDEA安装Git-Commit-Template插件\" class=\"headerlink\" title=\"IDEA安装Git Commit Template插件\"></a>IDEA安装<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wbHVnaW5zLmpldGJyYWlucy5jb20vcGx1Z2luLzk4NjEtZ2l0LWNvbW1pdC10ZW1wbGF0ZQ==\">Git Commit Template<i class=\"fa fa-external-link-alt\"></i></span>插件</h2><p>在IDEA的 settings-&gt;plugins 中安装 Git Commit Template 插件<br>在提交代码时使用插件格式化commit信息</p>\n<p><img src=\"/.cn//idea-commit-1.png\" alt=\"idea-commit-1\"><br><img src=\"/.cn//idea-commit-2.png\" alt=\"idea-commit-2\"></p>\n<h2 id=\"检查git-commit信息是否符合规范\"><a href=\"#检查git-commit信息是否符合规范\" class=\"headerlink\" title=\"检查git commit信息是否符合规范\"></a>检查git commit信息是否符合规范</h2><p>&#x2F;&#x2F;TODO</p>\n","length":1595,"excerpt":"","more":"<h2 id=\"Git-Commit-规范说明\"><a href=\"#Git-Commit-规范说明\" class=\"headerlink\" title=\"Git Commit 规范说明\"></a>Git Commit 规范说明</h2><blockquote>\n<p>规范化的commit信息可以方便每次release发版时自动生成对应的changelog</p>\n</blockquote>\n<h4 id=\"自动生成CHANGELOG信息\"><a href=\"#自动生成CHANGELOG信息\" class=\"headerlink\" title=\"自动生成CHANGELOG信息\"></a>自动生成CHANGELOG信息</h4><p>可以使用<a href=\"https://github.com/conventional-changelog/standard-version\">standard-version</a><br>基于nodejs的规范化工具</p>\n<p>在每次发版之前在项目跟目录下执行，就会自动生成changelog信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx standard-version</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"commit信息规范\"><a href=\"#commit信息规范\" class=\"headerlink\" title=\"commit信息规范\"></a>commit信息规范</h4><p><a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\">commit 格式说明</a><br><a href=\"https://www.conventionalcommits.org/\">commit约定格式标准</a></p>\n<p>commit 的格式包含 Header、Body、Footer 三个部分(其中，Header 是必须，Body 和 Footer 可以省略。)，<br>形如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class=\"line\">&lt;BLANK LINE&gt; //空行</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;BLANK LINE&gt; //空行</span><br><span class=\"line\">&lt;footer&gt;</span><br></pre></td></tr></table></figure>\n<p>最简单的格式如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>: <span class=\"tag\">&lt;<span class=\"name\">subject</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h3><blockquote>\n<p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</p>\n</blockquote>\n<ol>\n<li>type用于说明 commit 的类别，只允许使用下面几个标识。</li>\n<li>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</li>\n<li>subject是 commit 目的的简短描述，不超过50个字符。</li>\n</ol>\n<h4 id=\"合法的-type-标识：\"><a href=\"#合法的-type-标识：\" class=\"headerlink\" title=\"合法的 type 标识：\"></a>合法的 type 标识：</h4><table>\n<thead>\n<tr>\n<th>类型(type)</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>feat</td>\n<td>新功能</td>\n</tr>\n<tr>\n<td>fix</td>\n<td>修补bug</td>\n</tr>\n<tr>\n<td>chore</td>\n<td>不修改src或者test的其余修改，例如构建过程或辅助工具的变动</td>\n</tr>\n<tr>\n<td>docs</td>\n<td>文档</td>\n</tr>\n<tr>\n<td>style</td>\n<td>不影响代码含义的改动，例如格式化,去掉空格、改变缩进、增删分号</td>\n</tr>\n<tr>\n<td>refactor</td>\n<td>重构</td>\n</tr>\n<tr>\n<td>perf</td>\n<td>提高性能的改动</td>\n</tr>\n<tr>\n<td>test</td>\n<td>添加测试或者修改现有测试</td>\n</tr>\n<tr>\n<td>revert</td>\n<td>执行git revert打印的message</td>\n</tr>\n</tbody></table>\n<p>示例：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">feat:</span> 🎸 添加注册功能；</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Body（可省略）\"><a href=\"#Body（可省略）\" class=\"headerlink\" title=\"Body（可省略）\"></a>Body（可省略）</h3><blockquote>\n<p>Body 部分是对本次 commit 的详细描述，可以分成多行。</p>\n</blockquote>\n<blockquote>\n<p>应该说明代码变动的动机，以及与以前行为的对比。</p>\n</blockquote>\n<h3 id=\"Footer（可省略）\"><a href=\"#Footer（可省略）\" class=\"headerlink\" title=\"Footer（可省略）\"></a>Footer（可省略）</h3><blockquote>\n<p>Footer 部分只用于两种情况。BREAKING CHANGE(不兼容的改变) 和 Closes (关闭的Issue)</p>\n</blockquote>\n<p>一个完整的gitcommit规范示例：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">feat:</span> 测试commit规范</span><br><span class=\"line\"></span><br><span class=\"line\">这是commit的详细信息</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BREAKING </span>CHANGE: 不兼容的改变</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Closes </span><span class=\"comment\">#1</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"安装git-commit工具：\"><a href=\"#安装git-commit工具：\" class=\"headerlink\" title=\"安装git commit工具：\"></a>安装git commit工具：</h2><blockquote>\n<p>使用 <a href=\"https://github.com/commitizen/cz-cli\">cz-cli</a> 规范commit格式，使用 <a href=\"https://conventional-changelog.github.io/commitlint\">commitlint</a> 检查commit是否符合规则</p>\n</blockquote>\n<h3 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h3><ol>\n<li>全局安装 commitizen  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g commitizen</span><br></pre></td></tr></table></figure></li>\n<li>全局安装 cz-conventional-changelog  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cz-conventional-changelog</span><br></pre></td></tr></table></figure></li>\n<li>在用户目录下配置 commitizen  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># windows cmd下无法执行,可以手动去 C:\\Users\\&#123;User&#125;\\ (User为你电脑用户名)目录下新建 .czrc 文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27;</span> &gt; ~/.czrc</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h3><blockquote>\n<p>在全局配置的第3步中的<code>.czrc</code>文件放到项目下就可以了</p>\n</blockquote>\n<h3 id=\"使用-git-cz-命令进行提交代码\"><a href=\"#使用-git-cz-命令进行提交代码\" class=\"headerlink\" title=\"使用 git cz 命令进行提交代码\"></a>使用 git cz 命令进行提交代码</h3><p>以后提交代码都使用 <code>git cz</code> 替代 <code>git commit</code>，使 commit 内容符合规定的格式。</p>\n<p>若还是用 <code>git commit</code> ，则需要使得 commit 内容符合规定的格式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cz</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"IDEA安装Git-Commit-Template插件\"><a href=\"#IDEA安装Git-Commit-Template插件\" class=\"headerlink\" title=\"IDEA安装Git Commit Template插件\"></a>IDEA安装<a href=\"https://plugins.jetbrains.com/plugin/9861-git-commit-template\">Git Commit Template</a>插件</h2><p>在IDEA的 settings-&gt;plugins 中安装 Git Commit Template 插件<br>在提交代码时使用插件格式化commit信息</p>\n<p><img src=\"/.cn//idea-commit-1.png\" alt=\"idea-commit-1\"><br><img src=\"/.cn//idea-commit-2.png\" alt=\"idea-commit-2\"></p>\n<h2 id=\"检查git-commit信息是否符合规范\"><a href=\"#检查git-commit信息是否符合规范\" class=\"headerlink\" title=\"检查git commit信息是否符合规范\"></a>检查git commit信息是否符合规范</h2><p>&#x2F;&#x2F;TODO</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/.cn//idea-commit-1.png","popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"Git Commit规范","path":"2020/02/28/Git-Commit规范/","eyeCatchImage":"/.cn//idea-commit-1.png","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2020-02-28T04:21:49.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-02-28T04:21:49.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"git","tags":["git"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Electron常见问题","originContent":"## npm install时卡在node install.js\n\n[https://github.com/cnpm/cnpmjs.org/issues/1530#issuecomment-561081645](https://github.com/cnpm/cnpmjs.org/issues/1530#issuecomment-561081645)","toc":true,"date":"2020-03-07T08:22:27.000Z","keywords":null,"_content":"\n## npm install时卡在node install.js\n\n[https://github.com/cnpm/cnpmjs.org/issues/1530#issuecomment-561081645](https://github.com/cnpm/cnpmjs.org/issues/1530#issuecomment-561081645)","source":"_posts/2020/03/Electron常见问题.md","raw":"---\ntitle: Electron常见问题\n\ntags:\n  - node\n  - electron\ncategories:\n  - electron\noriginContent: >-\n  ## npm install时卡在node install.js\n\n\n  [https://github.com/cnpm/cnpmjs.org/issues/1530#issuecomment-561081645](https://github.com/cnpm/cnpmjs.org/issues/1530#issuecomment-561081645)\ntoc: true\ndate: 2020-03-07 16:22:27\nkeywords:\n---\n\n## npm install时卡在node install.js\n\n[https://github.com/cnpm/cnpmjs.org/issues/1530#issuecomment-561081645](https://github.com/cnpm/cnpmjs.org/issues/1530#issuecomment-561081645)","slug":"Electron常见问题","published":1,"updated":"2023-12-19T09:19:23.179Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydrb003gfki43qkg7s8s","content":"<h2 id=\"npm-install时卡在node-install-js\"><a href=\"#npm-install时卡在node-install-js\" class=\"headerlink\" title=\"npm install时卡在node install.js\"></a>npm install时卡在node install.js</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NucG0vY25wbWpzLm9yZy9pc3N1ZXMvMTUzMCNpc3N1ZWNvbW1lbnQtNTYxMDgxNjQ1\">https://github.com/cnpm/cnpmjs.org/issues/1530#issuecomment-561081645<i class=\"fa fa-external-link-alt\"></i></span></p>\n","length":96,"excerpt":"","more":"<h2 id=\"npm-install时卡在node-install-js\"><a href=\"#npm-install时卡在node-install-js\" class=\"headerlink\" title=\"npm install时卡在node install.js\"></a>npm install时卡在node install.js</h2><p><a href=\"https://github.com/cnpm/cnpmjs.org/issues/1530#issuecomment-561081645\">https://github.com/cnpm/cnpmjs.org/issues/1530#issuecomment-561081645</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"Electron常见问题","path":"2020/03/07/Electron常见问题/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2020-03-07T08:22:27.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-03-07T08:22:27.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"electron","tags":["node","electron"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"排序算法","date":"2020-03-22T09:18:45.000Z","keywords":null,"_content":"\n# 排序算法\n\n## 选择排序\n\n> 不断的选择剩余元素中的最小值\n\n 1. 找到最小的元素并和集合第一个元素交换\n 2. 在剩下的元素中找到最小的元素并和集合第二个元素交换\n 3. 重复步骤直至将整个集合排序\n\n## 直接插入排序\n\n> 基本思想：每一步将一个待排序的数据插入到前面已经排好序的有序序列中，直到插完所有元素为止。\n\n1. 从数组取一个元素作为有序数组的第一个元素\n2. 从剩余数组中取出一个数和有序数组比较并插入到正确的位置\n3. 重复第二步直至数据完全排序\n\n## 希尔排序\n\n> 分治的插入排序\n\n> 希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。\n\n在此我们选择增量gap=length/2，缩小增量继续以gap = gap/2的方式，这种增量选择我们可以用一个序列来表示，{n/2,(n/2)/2...1}，称为增量序列。希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的\n\n```java\npackage sortdemo;\n\nimport java.util.Arrays;\n\n/**\n * \n */\npublic class ShellSort {\n    public static void main(String []args){\n        int []arr ={1,4,2,7,9,8,3,6};\n        sort(arr);\n        System.out.println(Arrays.toString(arr));\n        int []arr1 ={1,4,2,7,9,8,3,6};\n        sort1(arr1);\n        System.out.println(Arrays.toString(arr1));\n    }\n\n    /**\n     * 希尔排序 针对有序序列在插入时采用交换法\n     * @param arr\n     */\n    public static void sort(int []arr){\n        //增量gap，并逐步缩小增量\n       for(int gap=arr.length/2;gap>0;gap/=2){\n           //从第gap个元素，逐个对其所在组进行直接插入排序操作\n           for(int i=gap;i<arr.length;i++){\n               int j = i;\n               while(j-gap>=0 && arr[j]<arr[j-gap]){\n                   //插入排序采用交换法\n                   swap(arr,j,j-gap);\n                   j-=gap;\n               }\n           }\n       }\n    }\n\n    /**\n     * 希尔排序 针对有序序列在插入时采用移动法。\n     * @param arr\n     */\n    public static void sort1(int []arr){\n        //增量gap，并逐步缩小增量\n        for(int gap=arr.length/2;gap>0;gap/=2){\n            //从第gap个元素，逐个对其所在组进行直接插入排序操作\n            for(int i=gap;i<arr.length;i++){\n                int j = i;\n                int temp = arr[j];\n                if(arr[j]<arr[j-gap]){\n                    while(j-gap>=0 && temp<arr[j-gap]){\n                        //移动法\n                        arr[j] = arr[j-gap];\n                        j-=gap;\n                    }\n                    arr[j] = temp;\n                }\n            }\n        }\n    }\n    /**\n     * 交换数组元素\n     * @param arr\n     * @param a\n     * @param b\n     */\n    public static void swap(int []arr,int a,int b){\n        arr[a] = arr[a]+arr[b];\n        arr[b] = arr[a]-arr[b];\n        arr[a] = arr[a]-arr[b];\n    }\n}\n```\n\n\n\n\n\n\n## 归并排序 \n\n归并排序的时间复杂度是O(N*lgN)\n\n归并排序是稳定的算法，它满足稳定算法的定义。\n算法稳定性 -- 假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！\n\n> 归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。归并排序是一种稳定的排序方法。\n\n1. 从下往上的归并排序：将待排序的数列分成若干个长度为1的子数列，然后将这些数列两两合并；得到若干个长度为2的有序数列，再将这些数列两两合并；得到若干个长度为4的有序数列，再将它们两两合并；直接合并成一个数列为止。这样就得到了我们想要的排序结果。(参考下面的图片)\n\n2. 从上往下的归并排序：它与\"从下往上\"在排序上是反方向的。它基本包括3步：\n① 分解 -- 将当前区间一分为二，即求分裂点 mid = (low + high)/2;\n② 求解 -- 递归地对两个子区间a[low...mid] 和 a[mid+1...high]进行归并排序。递归的终结条件是子区间长度为1。\n③ 合并 -- 将已排序的两个子区间a[low...mid]和 a[mid+1...high]归并为一个有序的区间a[low...high]。\n\n## 快速排序\n\n（1）在数据集之中，选择一个元素作为\"基准\"（pivot）。\n\n（2）所有小于\"基准\"的元素，都移到\"基准\"的左边；所有大于\"基准\"的元素，都移到\"基准\"的右边。\n\n（3）对\"基准\"左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。","source":"_posts/2020/03/排序算法.md","raw":"---\ntitle: 排序算法\n\ndate: 2020-03-22 17:18:45\ntags: [排序]\ncategories: [算法,排序]\nkeywords:\n---\n\n# 排序算法\n\n## 选择排序\n\n> 不断的选择剩余元素中的最小值\n\n 1. 找到最小的元素并和集合第一个元素交换\n 2. 在剩下的元素中找到最小的元素并和集合第二个元素交换\n 3. 重复步骤直至将整个集合排序\n\n## 直接插入排序\n\n> 基本思想：每一步将一个待排序的数据插入到前面已经排好序的有序序列中，直到插完所有元素为止。\n\n1. 从数组取一个元素作为有序数组的第一个元素\n2. 从剩余数组中取出一个数和有序数组比较并插入到正确的位置\n3. 重复第二步直至数据完全排序\n\n## 希尔排序\n\n> 分治的插入排序\n\n> 希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。\n\n在此我们选择增量gap=length/2，缩小增量继续以gap = gap/2的方式，这种增量选择我们可以用一个序列来表示，{n/2,(n/2)/2...1}，称为增量序列。希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的\n\n```java\npackage sortdemo;\n\nimport java.util.Arrays;\n\n/**\n * \n */\npublic class ShellSort {\n    public static void main(String []args){\n        int []arr ={1,4,2,7,9,8,3,6};\n        sort(arr);\n        System.out.println(Arrays.toString(arr));\n        int []arr1 ={1,4,2,7,9,8,3,6};\n        sort1(arr1);\n        System.out.println(Arrays.toString(arr1));\n    }\n\n    /**\n     * 希尔排序 针对有序序列在插入时采用交换法\n     * @param arr\n     */\n    public static void sort(int []arr){\n        //增量gap，并逐步缩小增量\n       for(int gap=arr.length/2;gap>0;gap/=2){\n           //从第gap个元素，逐个对其所在组进行直接插入排序操作\n           for(int i=gap;i<arr.length;i++){\n               int j = i;\n               while(j-gap>=0 && arr[j]<arr[j-gap]){\n                   //插入排序采用交换法\n                   swap(arr,j,j-gap);\n                   j-=gap;\n               }\n           }\n       }\n    }\n\n    /**\n     * 希尔排序 针对有序序列在插入时采用移动法。\n     * @param arr\n     */\n    public static void sort1(int []arr){\n        //增量gap，并逐步缩小增量\n        for(int gap=arr.length/2;gap>0;gap/=2){\n            //从第gap个元素，逐个对其所在组进行直接插入排序操作\n            for(int i=gap;i<arr.length;i++){\n                int j = i;\n                int temp = arr[j];\n                if(arr[j]<arr[j-gap]){\n                    while(j-gap>=0 && temp<arr[j-gap]){\n                        //移动法\n                        arr[j] = arr[j-gap];\n                        j-=gap;\n                    }\n                    arr[j] = temp;\n                }\n            }\n        }\n    }\n    /**\n     * 交换数组元素\n     * @param arr\n     * @param a\n     * @param b\n     */\n    public static void swap(int []arr,int a,int b){\n        arr[a] = arr[a]+arr[b];\n        arr[b] = arr[a]-arr[b];\n        arr[a] = arr[a]-arr[b];\n    }\n}\n```\n\n\n\n\n\n\n## 归并排序 \n\n归并排序的时间复杂度是O(N*lgN)\n\n归并排序是稳定的算法，它满足稳定算法的定义。\n算法稳定性 -- 假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！\n\n> 归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。归并排序是一种稳定的排序方法。\n\n1. 从下往上的归并排序：将待排序的数列分成若干个长度为1的子数列，然后将这些数列两两合并；得到若干个长度为2的有序数列，再将这些数列两两合并；得到若干个长度为4的有序数列，再将它们两两合并；直接合并成一个数列为止。这样就得到了我们想要的排序结果。(参考下面的图片)\n\n2. 从上往下的归并排序：它与\"从下往上\"在排序上是反方向的。它基本包括3步：\n① 分解 -- 将当前区间一分为二，即求分裂点 mid = (low + high)/2;\n② 求解 -- 递归地对两个子区间a[low...mid] 和 a[mid+1...high]进行归并排序。递归的终结条件是子区间长度为1。\n③ 合并 -- 将已排序的两个子区间a[low...mid]和 a[mid+1...high]归并为一个有序的区间a[low...high]。\n\n## 快速排序\n\n（1）在数据集之中，选择一个元素作为\"基准\"（pivot）。\n\n（2）所有小于\"基准\"的元素，都移到\"基准\"的左边；所有大于\"基准\"的元素，都移到\"基准\"的右边。\n\n（3）对\"基准\"左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。","slug":"排序算法","published":1,"updated":"2023-12-19T09:19:23.180Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydrc003lfki478fp0uz3","content":"<h1 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h1><h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><blockquote>\n<p>不断的选择剩余元素中的最小值</p>\n</blockquote>\n<ol>\n<li>找到最小的元素并和集合第一个元素交换</li>\n<li>在剩下的元素中找到最小的元素并和集合第二个元素交换</li>\n<li>重复步骤直至将整个集合排序</li>\n</ol>\n<h2 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h2><blockquote>\n<p>基本思想：每一步将一个待排序的数据插入到前面已经排好序的有序序列中，直到插完所有元素为止。</p>\n</blockquote>\n<ol>\n<li>从数组取一个元素作为有序数组的第一个元素</li>\n<li>从剩余数组中取出一个数和有序数组比较并插入到正确的位置</li>\n<li>重复第二步直至数据完全排序</li>\n</ol>\n<h2 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h2><blockquote>\n<p>分治的插入排序</p>\n</blockquote>\n<blockquote>\n<p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p>\n</blockquote>\n<p>在此我们选择增量gap&#x3D;length&#x2F;2，缩小增量继续以gap &#x3D; gap&#x2F;2的方式，这种增量选择我们可以用一个序列来表示，{n&#x2F;2,(n&#x2F;2)&#x2F;2…1}，称为增量序列。希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> sortdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ShellSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String []args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> []arr =&#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">        <span class=\"type\">int</span> []arr1 =&#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        sort1(arr1);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 希尔排序 针对有序序列在插入时采用交换法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(<span class=\"type\">int</span> []arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//增量gap，并逐步缩小增量</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"type\">int</span> gap=arr.length/<span class=\"number\">2</span>;gap&gt;<span class=\"number\">0</span>;gap/=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">           <span class=\"comment\">//从第gap个元素，逐个对其所在组进行直接插入排序操作</span></span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=gap;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">               <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">               <span class=\"keyword\">while</span>(j-gap&gt;=<span class=\"number\">0</span> &amp;&amp; arr[j]&lt;arr[j-gap])&#123;</span><br><span class=\"line\">                   <span class=\"comment\">//插入排序采用交换法</span></span><br><span class=\"line\">                   swap(arr,j,j-gap);</span><br><span class=\"line\">                   j-=gap;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 希尔排序 针对有序序列在插入时采用移动法。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort1</span><span class=\"params\">(<span class=\"type\">int</span> []arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//增量gap，并逐步缩小增量</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> gap=arr.length/<span class=\"number\">2</span>;gap&gt;<span class=\"number\">0</span>;gap/=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//从第gap个元素，逐个对其所在组进行直接插入排序操作</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=gap;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(arr[j]&lt;arr[j-gap])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(j-gap&gt;=<span class=\"number\">0</span> &amp;&amp; temp&lt;arr[j-gap])&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//移动法</span></span><br><span class=\"line\">                        arr[j] = arr[j-gap];</span><br><span class=\"line\">                        j-=gap;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    arr[j] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 交换数组元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> b</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> []arr,<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span>&#123;</span><br><span class=\"line\">        arr[a] = arr[a]+arr[b];</span><br><span class=\"line\">        arr[b] = arr[a]-arr[b];</span><br><span class=\"line\">        arr[a] = arr[a]-arr[b];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p>归并排序的时间复杂度是O(N*lgN)</p>\n<p>归并排序是稳定的算法，它满足稳定算法的定义。<br>算法稳定性 – 假设在数列中存在a[i]&#x3D;a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！</p>\n<blockquote>\n<p>归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。归并排序是一种稳定的排序方法。</p>\n</blockquote>\n<ol>\n<li><p>从下往上的归并排序：将待排序的数列分成若干个长度为1的子数列，然后将这些数列两两合并；得到若干个长度为2的有序数列，再将这些数列两两合并；得到若干个长度为4的有序数列，再将它们两两合并；直接合并成一个数列为止。这样就得到了我们想要的排序结果。(参考下面的图片)</p>\n</li>\n<li><p>从上往下的归并排序：它与”从下往上”在排序上是反方向的。它基本包括3步：<br>① 分解 – 将当前区间一分为二，即求分裂点 mid &#x3D; (low + high)&#x2F;2;<br>② 求解 – 递归地对两个子区间a[low…mid] 和 a[mid+1…high]进行归并排序。递归的终结条件是子区间长度为1。<br>③ 合并 – 将已排序的两个子区间a[low…mid]和 a[mid+1…high]归并为一个有序的区间a[low…high]。</p>\n</li>\n</ol>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p>（1）在数据集之中，选择一个元素作为”基准”（pivot）。</p>\n<p>（2）所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。</p>\n<p>（3）对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</p>\n","length":2497,"excerpt":"","more":"<h1 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h1><h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><blockquote>\n<p>不断的选择剩余元素中的最小值</p>\n</blockquote>\n<ol>\n<li>找到最小的元素并和集合第一个元素交换</li>\n<li>在剩下的元素中找到最小的元素并和集合第二个元素交换</li>\n<li>重复步骤直至将整个集合排序</li>\n</ol>\n<h2 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h2><blockquote>\n<p>基本思想：每一步将一个待排序的数据插入到前面已经排好序的有序序列中，直到插完所有元素为止。</p>\n</blockquote>\n<ol>\n<li>从数组取一个元素作为有序数组的第一个元素</li>\n<li>从剩余数组中取出一个数和有序数组比较并插入到正确的位置</li>\n<li>重复第二步直至数据完全排序</li>\n</ol>\n<h2 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h2><blockquote>\n<p>分治的插入排序</p>\n</blockquote>\n<blockquote>\n<p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p>\n</blockquote>\n<p>在此我们选择增量gap&#x3D;length&#x2F;2，缩小增量继续以gap &#x3D; gap&#x2F;2的方式，这种增量选择我们可以用一个序列来表示，{n&#x2F;2,(n&#x2F;2)&#x2F;2…1}，称为增量序列。希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> sortdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ShellSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String []args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> []arr =&#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">        <span class=\"type\">int</span> []arr1 =&#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        sort1(arr1);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 希尔排序 针对有序序列在插入时采用交换法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(<span class=\"type\">int</span> []arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//增量gap，并逐步缩小增量</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"type\">int</span> gap=arr.length/<span class=\"number\">2</span>;gap&gt;<span class=\"number\">0</span>;gap/=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">           <span class=\"comment\">//从第gap个元素，逐个对其所在组进行直接插入排序操作</span></span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=gap;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">               <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">               <span class=\"keyword\">while</span>(j-gap&gt;=<span class=\"number\">0</span> &amp;&amp; arr[j]&lt;arr[j-gap])&#123;</span><br><span class=\"line\">                   <span class=\"comment\">//插入排序采用交换法</span></span><br><span class=\"line\">                   swap(arr,j,j-gap);</span><br><span class=\"line\">                   j-=gap;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 希尔排序 针对有序序列在插入时采用移动法。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort1</span><span class=\"params\">(<span class=\"type\">int</span> []arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//增量gap，并逐步缩小增量</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> gap=arr.length/<span class=\"number\">2</span>;gap&gt;<span class=\"number\">0</span>;gap/=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//从第gap个元素，逐个对其所在组进行直接插入排序操作</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=gap;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(arr[j]&lt;arr[j-gap])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(j-gap&gt;=<span class=\"number\">0</span> &amp;&amp; temp&lt;arr[j-gap])&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//移动法</span></span><br><span class=\"line\">                        arr[j] = arr[j-gap];</span><br><span class=\"line\">                        j-=gap;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    arr[j] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 交换数组元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> b</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> []arr,<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span>&#123;</span><br><span class=\"line\">        arr[a] = arr[a]+arr[b];</span><br><span class=\"line\">        arr[b] = arr[a]-arr[b];</span><br><span class=\"line\">        arr[a] = arr[a]-arr[b];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p>归并排序的时间复杂度是O(N*lgN)</p>\n<p>归并排序是稳定的算法，它满足稳定算法的定义。<br>算法稳定性 – 假设在数列中存在a[i]&#x3D;a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！</p>\n<blockquote>\n<p>归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。归并排序是一种稳定的排序方法。</p>\n</blockquote>\n<ol>\n<li><p>从下往上的归并排序：将待排序的数列分成若干个长度为1的子数列，然后将这些数列两两合并；得到若干个长度为2的有序数列，再将这些数列两两合并；得到若干个长度为4的有序数列，再将它们两两合并；直接合并成一个数列为止。这样就得到了我们想要的排序结果。(参考下面的图片)</p>\n</li>\n<li><p>从上往下的归并排序：它与”从下往上”在排序上是反方向的。它基本包括3步：<br>① 分解 – 将当前区间一分为二，即求分裂点 mid &#x3D; (low + high)&#x2F;2;<br>② 求解 – 递归地对两个子区间a[low…mid] 和 a[mid+1…high]进行归并排序。递归的终结条件是子区间长度为1。<br>③ 合并 – 将已排序的两个子区间a[low…mid]和 a[mid+1…high]归并为一个有序的区间a[low…high]。</p>\n</li>\n</ol>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p>（1）在数据集之中，选择一个元素作为”基准”（pivot）。</p>\n<p>（2）所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。</p>\n<p>（3）对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"排序算法","path":"2020/03/22/排序算法/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2020-03-22T09:18:45.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-03-22T09:18:45.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"算法 > 排序","tags":["排序"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"给Junit4增加Benchmark(基准测试)","keywords":"junit,benchmark","toc":true,"date":"2020-03-06T13:04:18.000Z","_content":"\n# [Benchmark(基准测试)](https://en.wikipedia.org/wiki/Benchmark_(computing))\n> 对于程序性能的一种测试方法\n\nJava官方对于benchmark有一个工具[JMH](http://openjdk.java.net/projects/code-tools/jmh/)\n\n## 使用[Junit-Benchmark](http://labs.carrotsearch.com/junit-benchmarks-tutorial.html)给Junit4添加benchmark\n> \n\n在spring-boot中编写对比List的add方法性能的测试用例如下\n\n```java\n@Slf4j\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = SpringBootTestApplication.class)\npublic class ListInsertTest {\n        private List<Long> arrayList;\n\tprivate List<Long> linkedList;\n\tprivate long dataSize = 10000;\n\t/**\n\t * 每次执行 @{@link Test} 方法之前执行\n\t * @throws Exception\n\t */\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tarrayList = new ArrayList<>(10240);\n\t\tlinkedList = new LinkedList<>();\n\t\tlog.info(\"setup\");\n\t}\n\n\t@Test\n\tpublic void testArrayListAdd() {\n\t\tlong start = System.currentTimeMillis();\n\t\tLongStream.range(0, dataSize).boxed().forEach(arrayList::add);\n\t\tlong costTime = System.currentTimeMillis() - start;\n\t\tlog.info(\"arrayList add [{}] data, cost time:[{}]ms\", dataSize, costTime);\n\t}\n\n\t@Test\n\tpublic void testLinkedListAdd() {\n\t\tlong start = System.currentTimeMillis();\n\t\tLongStream.range(0, dataSize).boxed().forEach(linkedList::add);\n\t\tlong costTime = System.currentTimeMillis() - start;\n\t\tlog.info(\"linkedList add [{}] data, cost time:[{}]ms\", dataSize, costTime);\n\t}\t\n}\n```\n执行后输出\n\n```code\n21:36:18.747 [main] INFO com.xyz327.test.ListAddTest - setup\n21:36:18.812 [main] INFO com.xyz327.test.ListAddTest - linkedList add [10000] data, cost time:[62]ms\n21:36:18.815 [main] INFO com.xyz327.test.ListAddTest - setup\n21:36:18.818 [main] INFO com.xyz327.test.ListAddTest - arrayList add [10000] data, cost time:[3]ms\n```\n\n可以看到一个基础的数据对比。但是做性能测试是需要做多次取一个平均值才能更有说服力的。这里就需要`benchmark`，可以使用 `junit-benchmark` 给junit4代码加上 `benchmark`\n\n1. 给项目添加`junit-benchmark`依赖\n    ```xml\n       <dependency>\n            <groupId>com.carrotsearch</groupId>\n            <artifactId>junit-benchmarks</artifactId>\n            <version>0.7.2</version>\n            <scope>test</scope>\n        </dependency>\n    ```\n\n2. 给junit代码添加benchmark相关注解\n    ```java\n\t@Slf4j\n\t@BenchmarkOptions(benchmarkRounds = REPEAT_TIMES, callgc = false, warmupRounds = WARM_UP_ROUNDS)\n\t@BenchmarkMethodChart(filePrefix = \"测试List新增数据,重复\" + InvStockDetailBatchInsertTest.REPEAT_TIMES + \"次,预热\"+WARM_UP_ROUNDS+\"次结果\")\n\tpublic class ListAddTest extends AbstractBenchmark {\n\t\t/**\n\t \t* 预热次数\n\t\t */\n\t\tpublic static final int WARM_UP_ROUNDS = 2;\n\t\t/**\n\t\t * 循环次数\n\t\t */\n\t\tpublic static final int REPEAT_TIMES = 10;\n\t\tprivate List<Long> arrayList;\n\t\tprivate List<Long> linkedList;\n\t\tprivate long dataSize = 10000;\n\n\n\t\t/**\n\t\t * 每次执行 @{@link Test} 方法之前执行\n\t\t * @throws Exception\n\t\t */\n\t\t@Before\n\t\tpublic void setUp() throws Exception {\n\t\t\tarrayList = new ArrayList<>(10240);\n\t\t\tlinkedList = new LinkedList<>();\n\t\t}\n\n\t\t@Test\n\t\tpublic void testArrayListAdd() {\n\t\t\tLongStream.range(0, dataSize).boxed().forEach(arrayList::add);\n\t\t}\n\n\t\t@Test\n\t\tpublic void testLinkedListAdd() {\n\t\t\tLongStream.range(0, dataSize).boxed().forEach(linkedList::add);\n\t\t}\n\t}\n\n    ```\n\n3. 运行可以在控制台看到相关打印(时间单位: 秒)\n     ```code\n\tListAddTest.testLinkedListAdd: [measured 10 out of 12 rounds, threads: 1 (sequential)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 0.07, time.warmup: 0.06, time.bench: 0.01\n\tListAddTest.testArrayListAdd: [measured 10 out of 12 rounds, threads: 1 (sequential)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 0.01, time.warmup: 0.00, time.bench: 0.01\n    ```\n\n4. 进一步,给结果添加chart图表显示, 在代码中添加\n    ```java\n\t@Slf4j\n\t@BenchmarkOptions(benchmarkRounds = REPEAT_TIMES, callgc = false, warmupRounds = WARM_UP_ROUNDS)\n\t@BenchmarkMethodChart(filePrefix = \"测试List新增数据,重复\" + InvStockDetailBatchInsertTest.REPEAT_TIMES + \"次,预热\"+WARM_UP_ROUNDS+\"次结果\")\n\tpublic class ListAddTest extends AbstractBenchmark {\n\t\t/**\n\t \t* 预热次数\n\t \t*/\n\t\tpublic static final int WARM_UP_ROUNDS = 2;\n\t\t/**\n\t\t * 循环次数\n\t\t */\n\t\tpublic static final int REPEAT_TIMES = 10;\n\t\tprivate List<Long> arrayList;\n\t\tprivate List<Long> linkedList;\n\t\tprivate long dataSize = 10000;\n\n\t\t@BeforeClass\n\t\tpublic static void beforeClass() throws Exception {\n\t\t\t// 设置结果写入文件\n\t\t\t// 设置把结果输出到 console和 h2 中\n\t\t\tSystem.setProperty(CONSUMERS_PROPERTY, String.join(\",\", ConsumerName.CONSOLE.name(), ConsumerName.H2.name()));\n\t\t\t// 设置结果图标html文件保存的位置\n\t\t\tSystem.setProperty(CHARTS_DIR_PROPERTY, \"benchmarks/list\");\n\t\t\t// 设置db文件保存位置\n\t\t\tSystem.setProperty(DB_FILE_PROPERTY, \"benchmarks/data/H2-list-add\");\n\t\t\t// 自定义key\n\t\t\tSystem.setProperty(CUSTOMKEY_PROPERTY, System.getProperty(\"java.version\"));\n\t\t}\n\n\t\t/**\n\t\t * 每次执行 @{@link Test} 方法之前执行\n\t\t * @throws Exception\n\t\t */\n\t\t@Before\n\t\tpublic void setUp() throws Exception {\n\t\t\tarrayList = new ArrayList<>(10240);\n\t\t\tlinkedList = new LinkedList<>();\n\t\t}\n\n\t\t@Test\n\t\tpublic void testArrayListAdd() {\n\t\t\tLongStream.range(0, dataSize).boxed().forEach(arrayList::add);\n\t\t}\n\n\t\t@Test\n\t\tpublic void testLinkedListAdd() {\n\t\t\tLongStream.range(0, dataSize).boxed().forEach(linkedList::add);\n\t\t}\n\t}\n    ```\n\n5. 在运行程序后在对应的目录下就可以看到对应的html文件,浏览器打开html就是本次benchmark的结果展示，如下图\n   ![image.png](http://cdn.xyz327.cn/Fmpp9Uq136kSEfzhAcwq3klmXDpL)","source":"_posts/2020/03/给Junit4增加Benchmark-基准测试.md","raw":"---\ntitle: 给Junit4增加Benchmark(基准测试)\n\ntags:\n  - java\n  - junit\ncategories:\n  - java\n  - junit\nkeywords: 'junit,benchmark'\ntoc: true\ndate: 2020-03-06 21:04:18\n---\n\n# [Benchmark(基准测试)](https://en.wikipedia.org/wiki/Benchmark_(computing))\n> 对于程序性能的一种测试方法\n\nJava官方对于benchmark有一个工具[JMH](http://openjdk.java.net/projects/code-tools/jmh/)\n\n## 使用[Junit-Benchmark](http://labs.carrotsearch.com/junit-benchmarks-tutorial.html)给Junit4添加benchmark\n> \n\n在spring-boot中编写对比List的add方法性能的测试用例如下\n\n```java\n@Slf4j\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = SpringBootTestApplication.class)\npublic class ListInsertTest {\n        private List<Long> arrayList;\n\tprivate List<Long> linkedList;\n\tprivate long dataSize = 10000;\n\t/**\n\t * 每次执行 @{@link Test} 方法之前执行\n\t * @throws Exception\n\t */\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tarrayList = new ArrayList<>(10240);\n\t\tlinkedList = new LinkedList<>();\n\t\tlog.info(\"setup\");\n\t}\n\n\t@Test\n\tpublic void testArrayListAdd() {\n\t\tlong start = System.currentTimeMillis();\n\t\tLongStream.range(0, dataSize).boxed().forEach(arrayList::add);\n\t\tlong costTime = System.currentTimeMillis() - start;\n\t\tlog.info(\"arrayList add [{}] data, cost time:[{}]ms\", dataSize, costTime);\n\t}\n\n\t@Test\n\tpublic void testLinkedListAdd() {\n\t\tlong start = System.currentTimeMillis();\n\t\tLongStream.range(0, dataSize).boxed().forEach(linkedList::add);\n\t\tlong costTime = System.currentTimeMillis() - start;\n\t\tlog.info(\"linkedList add [{}] data, cost time:[{}]ms\", dataSize, costTime);\n\t}\t\n}\n```\n执行后输出\n\n```code\n21:36:18.747 [main] INFO com.xyz327.test.ListAddTest - setup\n21:36:18.812 [main] INFO com.xyz327.test.ListAddTest - linkedList add [10000] data, cost time:[62]ms\n21:36:18.815 [main] INFO com.xyz327.test.ListAddTest - setup\n21:36:18.818 [main] INFO com.xyz327.test.ListAddTest - arrayList add [10000] data, cost time:[3]ms\n```\n\n可以看到一个基础的数据对比。但是做性能测试是需要做多次取一个平均值才能更有说服力的。这里就需要`benchmark`，可以使用 `junit-benchmark` 给junit4代码加上 `benchmark`\n\n1. 给项目添加`junit-benchmark`依赖\n    ```xml\n       <dependency>\n            <groupId>com.carrotsearch</groupId>\n            <artifactId>junit-benchmarks</artifactId>\n            <version>0.7.2</version>\n            <scope>test</scope>\n        </dependency>\n    ```\n\n2. 给junit代码添加benchmark相关注解\n    ```java\n\t@Slf4j\n\t@BenchmarkOptions(benchmarkRounds = REPEAT_TIMES, callgc = false, warmupRounds = WARM_UP_ROUNDS)\n\t@BenchmarkMethodChart(filePrefix = \"测试List新增数据,重复\" + InvStockDetailBatchInsertTest.REPEAT_TIMES + \"次,预热\"+WARM_UP_ROUNDS+\"次结果\")\n\tpublic class ListAddTest extends AbstractBenchmark {\n\t\t/**\n\t \t* 预热次数\n\t\t */\n\t\tpublic static final int WARM_UP_ROUNDS = 2;\n\t\t/**\n\t\t * 循环次数\n\t\t */\n\t\tpublic static final int REPEAT_TIMES = 10;\n\t\tprivate List<Long> arrayList;\n\t\tprivate List<Long> linkedList;\n\t\tprivate long dataSize = 10000;\n\n\n\t\t/**\n\t\t * 每次执行 @{@link Test} 方法之前执行\n\t\t * @throws Exception\n\t\t */\n\t\t@Before\n\t\tpublic void setUp() throws Exception {\n\t\t\tarrayList = new ArrayList<>(10240);\n\t\t\tlinkedList = new LinkedList<>();\n\t\t}\n\n\t\t@Test\n\t\tpublic void testArrayListAdd() {\n\t\t\tLongStream.range(0, dataSize).boxed().forEach(arrayList::add);\n\t\t}\n\n\t\t@Test\n\t\tpublic void testLinkedListAdd() {\n\t\t\tLongStream.range(0, dataSize).boxed().forEach(linkedList::add);\n\t\t}\n\t}\n\n    ```\n\n3. 运行可以在控制台看到相关打印(时间单位: 秒)\n     ```code\n\tListAddTest.testLinkedListAdd: [measured 10 out of 12 rounds, threads: 1 (sequential)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 0.07, time.warmup: 0.06, time.bench: 0.01\n\tListAddTest.testArrayListAdd: [measured 10 out of 12 rounds, threads: 1 (sequential)]\n \tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 0.01, time.warmup: 0.00, time.bench: 0.01\n    ```\n\n4. 进一步,给结果添加chart图表显示, 在代码中添加\n    ```java\n\t@Slf4j\n\t@BenchmarkOptions(benchmarkRounds = REPEAT_TIMES, callgc = false, warmupRounds = WARM_UP_ROUNDS)\n\t@BenchmarkMethodChart(filePrefix = \"测试List新增数据,重复\" + InvStockDetailBatchInsertTest.REPEAT_TIMES + \"次,预热\"+WARM_UP_ROUNDS+\"次结果\")\n\tpublic class ListAddTest extends AbstractBenchmark {\n\t\t/**\n\t \t* 预热次数\n\t \t*/\n\t\tpublic static final int WARM_UP_ROUNDS = 2;\n\t\t/**\n\t\t * 循环次数\n\t\t */\n\t\tpublic static final int REPEAT_TIMES = 10;\n\t\tprivate List<Long> arrayList;\n\t\tprivate List<Long> linkedList;\n\t\tprivate long dataSize = 10000;\n\n\t\t@BeforeClass\n\t\tpublic static void beforeClass() throws Exception {\n\t\t\t// 设置结果写入文件\n\t\t\t// 设置把结果输出到 console和 h2 中\n\t\t\tSystem.setProperty(CONSUMERS_PROPERTY, String.join(\",\", ConsumerName.CONSOLE.name(), ConsumerName.H2.name()));\n\t\t\t// 设置结果图标html文件保存的位置\n\t\t\tSystem.setProperty(CHARTS_DIR_PROPERTY, \"benchmarks/list\");\n\t\t\t// 设置db文件保存位置\n\t\t\tSystem.setProperty(DB_FILE_PROPERTY, \"benchmarks/data/H2-list-add\");\n\t\t\t// 自定义key\n\t\t\tSystem.setProperty(CUSTOMKEY_PROPERTY, System.getProperty(\"java.version\"));\n\t\t}\n\n\t\t/**\n\t\t * 每次执行 @{@link Test} 方法之前执行\n\t\t * @throws Exception\n\t\t */\n\t\t@Before\n\t\tpublic void setUp() throws Exception {\n\t\t\tarrayList = new ArrayList<>(10240);\n\t\t\tlinkedList = new LinkedList<>();\n\t\t}\n\n\t\t@Test\n\t\tpublic void testArrayListAdd() {\n\t\t\tLongStream.range(0, dataSize).boxed().forEach(arrayList::add);\n\t\t}\n\n\t\t@Test\n\t\tpublic void testLinkedListAdd() {\n\t\t\tLongStream.range(0, dataSize).boxed().forEach(linkedList::add);\n\t\t}\n\t}\n    ```\n\n5. 在运行程序后在对应的目录下就可以看到对应的html文件,浏览器打开html就是本次benchmark的结果展示，如下图\n   ![image.png](http://cdn.xyz327.cn/Fmpp9Uq136kSEfzhAcwq3klmXDpL)","slug":"给Junit4增加Benchmark-基准测试","published":1,"updated":"2023-12-19T09:19:23.181Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydrc003nfki41qjegpuw","content":"<h1 id=\"Benchmark-基准测试\"><a href=\"#Benchmark-基准测试\" class=\"headerlink\" title=\"Benchmark(基准测试)\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmVuY2htYXJrXyhjb21wdXRpbmcp\">Benchmark(基准测试)<i class=\"fa fa-external-link-alt\"></i></span></h1><blockquote>\n<p>对于程序性能的一种测试方法</p>\n</blockquote>\n<p>Java官方对于benchmark有一个工具<span class=\"exturl\" data-url=\"aHR0cDovL29wZW5qZGsuamF2YS5uZXQvcHJvamVjdHMvY29kZS10b29scy9qbWgv\">JMH<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"使用Junit-Benchmark给Junit4添加benchmark\"><a href=\"#使用Junit-Benchmark给Junit4添加benchmark\" class=\"headerlink\" title=\"使用Junit-Benchmark给Junit4添加benchmark\"></a>使用<span class=\"exturl\" data-url=\"aHR0cDovL2xhYnMuY2Fycm90c2VhcmNoLmNvbS9qdW5pdC1iZW5jaG1hcmtzLXR1dG9yaWFsLmh0bWw=\">Junit-Benchmark<i class=\"fa fa-external-link-alt\"></i></span>给Junit4添加benchmark</h2><blockquote>\n</blockquote>\n<p>在spring-boot中编写对比List的add方法性能的测试用例如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(classes = SpringBootTestApplication.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListInsertTest</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;Long&gt; arrayList;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Long&gt; linkedList;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">long</span> <span class=\"variable\">dataSize</span> <span class=\"operator\">=</span> <span class=\"number\">10000</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 每次执行 @&#123;<span class=\"doctag\">@link</span> Test&#125; 方法之前执行</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Before</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\tarrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(<span class=\"number\">10240</span>);</span><br><span class=\"line\">\t\tlinkedList = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;setup&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testArrayListAdd</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">\t\tLongStream.range(<span class=\"number\">0</span>, dataSize).boxed().forEach(arrayList::add);</span><br><span class=\"line\">\t\t<span class=\"type\">long</span> <span class=\"variable\">costTime</span> <span class=\"operator\">=</span> System.currentTimeMillis() - start;</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;arrayList add [&#123;&#125;] data, cost time:[&#123;&#125;]ms&quot;</span>, dataSize, costTime);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testLinkedListAdd</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">\t\tLongStream.range(<span class=\"number\">0</span>, dataSize).boxed().forEach(linkedList::add);</span><br><span class=\"line\">\t\t<span class=\"type\">long</span> <span class=\"variable\">costTime</span> <span class=\"operator\">=</span> System.currentTimeMillis() - start;</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;linkedList add [&#123;&#125;] data, cost time:[&#123;&#125;]ms&quot;</span>, dataSize, costTime);</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行后输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">21:36:18.747 [main] INFO com.xyz327.test.ListAddTest - setup</span><br><span class=\"line\">21:36:18.812 [main] INFO com.xyz327.test.ListAddTest - linkedList add [10000] data, cost time:[62]ms</span><br><span class=\"line\">21:36:18.815 [main] INFO com.xyz327.test.ListAddTest - setup</span><br><span class=\"line\">21:36:18.818 [main] INFO com.xyz327.test.ListAddTest - arrayList add [10000] data, cost time:[3]ms</span><br></pre></td></tr></table></figure>\n\n<p>可以看到一个基础的数据对比。但是做性能测试是需要做多次取一个平均值才能更有说服力的。这里就需要<code>benchmark</code>，可以使用 <code>junit-benchmark</code> 给junit4代码加上 <code>benchmark</code></p>\n<ol>\n<li><p>给项目添加<code>junit-benchmark</code>依赖</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.carrotsearch<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-benchmarks<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.7.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>给junit代码添加benchmark相关注解</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@BenchmarkOptions(benchmarkRounds = REPEAT_TIMES, callgc = false, warmupRounds = WARM_UP_ROUNDS)</span></span><br><span class=\"line\"><span class=\"meta\">@BenchmarkMethodChart(filePrefix = &quot;测试List新增数据,重复&quot; + InvStockDetailBatchInsertTest.REPEAT_TIMES + &quot;次,预热&quot;+WARM_UP_ROUNDS+&quot;次结果&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListAddTest</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractBenchmark</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> \t* 预热次数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">WARM_UP_ROUNDS</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 循环次数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">REPEAT_TIMES</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Long&gt; arrayList;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Long&gt; linkedList;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">long</span> <span class=\"variable\">dataSize</span> <span class=\"operator\">=</span> <span class=\"number\">10000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 每次执行 @&#123;<span class=\"doctag\">@link</span> Test&#125; 方法之前执行</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Before</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\tarrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(<span class=\"number\">10240</span>);</span><br><span class=\"line\">\t\tlinkedList = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testArrayListAdd</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tLongStream.range(<span class=\"number\">0</span>, dataSize).boxed().forEach(arrayList::add);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testLinkedListAdd</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tLongStream.range(<span class=\"number\">0</span>, dataSize).boxed().forEach(linkedList::add);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行可以在控制台看到相关打印(时间单位: 秒)</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListAddTest.testLinkedListAdd: [measured 10 out of 12 rounds, threads: 1 (sequential)]</span><br><span class=\"line\">\tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 0.07, time.warmup: 0.06, time.bench: 0.01</span><br><span class=\"line\">ListAddTest.testArrayListAdd: [measured 10 out of 12 rounds, threads: 1 (sequential)]</span><br><span class=\"line\">\tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 0.01, time.warmup: 0.00, time.bench: 0.01</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进一步,给结果添加chart图表显示, 在代码中添加</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@BenchmarkOptions(benchmarkRounds = REPEAT_TIMES, callgc = false, warmupRounds = WARM_UP_ROUNDS)</span></span><br><span class=\"line\"><span class=\"meta\">@BenchmarkMethodChart(filePrefix = &quot;测试List新增数据,重复&quot; + InvStockDetailBatchInsertTest.REPEAT_TIMES + &quot;次,预热&quot;+WARM_UP_ROUNDS+&quot;次结果&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListAddTest</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractBenchmark</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> \t* 预热次数</span></span><br><span class=\"line\"><span class=\"comment\"> \t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">WARM_UP_ROUNDS</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 循环次数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">REPEAT_TIMES</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Long&gt; arrayList;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Long&gt; linkedList;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">long</span> <span class=\"variable\">dataSize</span> <span class=\"operator\">=</span> <span class=\"number\">10000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@BeforeClass</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeClass</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置结果写入文件</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置把结果输出到 console和 h2 中</span></span><br><span class=\"line\">\t\tSystem.setProperty(CONSUMERS_PROPERTY, String.join(<span class=\"string\">&quot;,&quot;</span>, ConsumerName.CONSOLE.name(), ConsumerName.H2.name()));</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置结果图标html文件保存的位置</span></span><br><span class=\"line\">\t\tSystem.setProperty(CHARTS_DIR_PROPERTY, <span class=\"string\">&quot;benchmarks/list&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置db文件保存位置</span></span><br><span class=\"line\">\t\tSystem.setProperty(DB_FILE_PROPERTY, <span class=\"string\">&quot;benchmarks/data/H2-list-add&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 自定义key</span></span><br><span class=\"line\">\t\tSystem.setProperty(CUSTOMKEY_PROPERTY, System.getProperty(<span class=\"string\">&quot;java.version&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 每次执行 @&#123;<span class=\"doctag\">@link</span> Test&#125; 方法之前执行</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Before</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\tarrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(<span class=\"number\">10240</span>);</span><br><span class=\"line\">\t\tlinkedList = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testArrayListAdd</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tLongStream.range(<span class=\"number\">0</span>, dataSize).boxed().forEach(arrayList::add);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testLinkedListAdd</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tLongStream.range(<span class=\"number\">0</span>, dataSize).boxed().forEach(linkedList::add);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在运行程序后在对应的目录下就可以看到对应的html文件,浏览器打开html就是本次benchmark的结果展示，如下图<br><img src=\"http://cdn.xyz327.cn/Fmpp9Uq136kSEfzhAcwq3klmXDpL\" alt=\"image.png\"></p>\n</li>\n</ol>\n","length":4774,"excerpt":"","more":"<h1 id=\"Benchmark-基准测试\"><a href=\"#Benchmark-基准测试\" class=\"headerlink\" title=\"Benchmark(基准测试)\"></a><a href=\"https://en.wikipedia.org/wiki/Benchmark_(computing)\">Benchmark(基准测试)</a></h1><blockquote>\n<p>对于程序性能的一种测试方法</p>\n</blockquote>\n<p>Java官方对于benchmark有一个工具<a href=\"http://openjdk.java.net/projects/code-tools/jmh/\">JMH</a></p>\n<h2 id=\"使用Junit-Benchmark给Junit4添加benchmark\"><a href=\"#使用Junit-Benchmark给Junit4添加benchmark\" class=\"headerlink\" title=\"使用Junit-Benchmark给Junit4添加benchmark\"></a>使用<a href=\"http://labs.carrotsearch.com/junit-benchmarks-tutorial.html\">Junit-Benchmark</a>给Junit4添加benchmark</h2><blockquote>\n</blockquote>\n<p>在spring-boot中编写对比List的add方法性能的测试用例如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(classes = SpringBootTestApplication.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListInsertTest</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;Long&gt; arrayList;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Long&gt; linkedList;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">long</span> <span class=\"variable\">dataSize</span> <span class=\"operator\">=</span> <span class=\"number\">10000</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 每次执行 @&#123;<span class=\"doctag\">@link</span> Test&#125; 方法之前执行</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Before</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\tarrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(<span class=\"number\">10240</span>);</span><br><span class=\"line\">\t\tlinkedList = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;setup&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testArrayListAdd</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">\t\tLongStream.range(<span class=\"number\">0</span>, dataSize).boxed().forEach(arrayList::add);</span><br><span class=\"line\">\t\t<span class=\"type\">long</span> <span class=\"variable\">costTime</span> <span class=\"operator\">=</span> System.currentTimeMillis() - start;</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;arrayList add [&#123;&#125;] data, cost time:[&#123;&#125;]ms&quot;</span>, dataSize, costTime);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testLinkedListAdd</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">\t\tLongStream.range(<span class=\"number\">0</span>, dataSize).boxed().forEach(linkedList::add);</span><br><span class=\"line\">\t\t<span class=\"type\">long</span> <span class=\"variable\">costTime</span> <span class=\"operator\">=</span> System.currentTimeMillis() - start;</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;linkedList add [&#123;&#125;] data, cost time:[&#123;&#125;]ms&quot;</span>, dataSize, costTime);</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行后输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">21:36:18.747 [main] INFO com.xyz327.test.ListAddTest - setup</span><br><span class=\"line\">21:36:18.812 [main] INFO com.xyz327.test.ListAddTest - linkedList add [10000] data, cost time:[62]ms</span><br><span class=\"line\">21:36:18.815 [main] INFO com.xyz327.test.ListAddTest - setup</span><br><span class=\"line\">21:36:18.818 [main] INFO com.xyz327.test.ListAddTest - arrayList add [10000] data, cost time:[3]ms</span><br></pre></td></tr></table></figure>\n\n<p>可以看到一个基础的数据对比。但是做性能测试是需要做多次取一个平均值才能更有说服力的。这里就需要<code>benchmark</code>，可以使用 <code>junit-benchmark</code> 给junit4代码加上 <code>benchmark</code></p>\n<ol>\n<li><p>给项目添加<code>junit-benchmark</code>依赖</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.carrotsearch<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-benchmarks<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.7.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>给junit代码添加benchmark相关注解</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@BenchmarkOptions(benchmarkRounds = REPEAT_TIMES, callgc = false, warmupRounds = WARM_UP_ROUNDS)</span></span><br><span class=\"line\"><span class=\"meta\">@BenchmarkMethodChart(filePrefix = &quot;测试List新增数据,重复&quot; + InvStockDetailBatchInsertTest.REPEAT_TIMES + &quot;次,预热&quot;+WARM_UP_ROUNDS+&quot;次结果&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListAddTest</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractBenchmark</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> \t* 预热次数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">WARM_UP_ROUNDS</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 循环次数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">REPEAT_TIMES</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Long&gt; arrayList;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Long&gt; linkedList;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">long</span> <span class=\"variable\">dataSize</span> <span class=\"operator\">=</span> <span class=\"number\">10000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 每次执行 @&#123;<span class=\"doctag\">@link</span> Test&#125; 方法之前执行</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Before</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\tarrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(<span class=\"number\">10240</span>);</span><br><span class=\"line\">\t\tlinkedList = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testArrayListAdd</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tLongStream.range(<span class=\"number\">0</span>, dataSize).boxed().forEach(arrayList::add);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testLinkedListAdd</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tLongStream.range(<span class=\"number\">0</span>, dataSize).boxed().forEach(linkedList::add);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行可以在控制台看到相关打印(时间单位: 秒)</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListAddTest.testLinkedListAdd: [measured 10 out of 12 rounds, threads: 1 (sequential)]</span><br><span class=\"line\">\tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 0.07, time.warmup: 0.06, time.bench: 0.01</span><br><span class=\"line\">ListAddTest.testArrayListAdd: [measured 10 out of 12 rounds, threads: 1 (sequential)]</span><br><span class=\"line\">\tround: 0.00 [+- 0.00], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 0.01, time.warmup: 0.00, time.bench: 0.01</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进一步,给结果添加chart图表显示, 在代码中添加</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@BenchmarkOptions(benchmarkRounds = REPEAT_TIMES, callgc = false, warmupRounds = WARM_UP_ROUNDS)</span></span><br><span class=\"line\"><span class=\"meta\">@BenchmarkMethodChart(filePrefix = &quot;测试List新增数据,重复&quot; + InvStockDetailBatchInsertTest.REPEAT_TIMES + &quot;次,预热&quot;+WARM_UP_ROUNDS+&quot;次结果&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListAddTest</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractBenchmark</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> \t* 预热次数</span></span><br><span class=\"line\"><span class=\"comment\"> \t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">WARM_UP_ROUNDS</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 循环次数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">REPEAT_TIMES</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Long&gt; arrayList;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Long&gt; linkedList;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">long</span> <span class=\"variable\">dataSize</span> <span class=\"operator\">=</span> <span class=\"number\">10000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@BeforeClass</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeClass</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置结果写入文件</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置把结果输出到 console和 h2 中</span></span><br><span class=\"line\">\t\tSystem.setProperty(CONSUMERS_PROPERTY, String.join(<span class=\"string\">&quot;,&quot;</span>, ConsumerName.CONSOLE.name(), ConsumerName.H2.name()));</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置结果图标html文件保存的位置</span></span><br><span class=\"line\">\t\tSystem.setProperty(CHARTS_DIR_PROPERTY, <span class=\"string\">&quot;benchmarks/list&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置db文件保存位置</span></span><br><span class=\"line\">\t\tSystem.setProperty(DB_FILE_PROPERTY, <span class=\"string\">&quot;benchmarks/data/H2-list-add&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 自定义key</span></span><br><span class=\"line\">\t\tSystem.setProperty(CUSTOMKEY_PROPERTY, System.getProperty(<span class=\"string\">&quot;java.version&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 每次执行 @&#123;<span class=\"doctag\">@link</span> Test&#125; 方法之前执行</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Before</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\tarrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(<span class=\"number\">10240</span>);</span><br><span class=\"line\">\t\tlinkedList = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testArrayListAdd</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tLongStream.range(<span class=\"number\">0</span>, dataSize).boxed().forEach(arrayList::add);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testLinkedListAdd</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tLongStream.range(<span class=\"number\">0</span>, dataSize).boxed().forEach(linkedList::add);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在运行程序后在对应的目录下就可以看到对应的html文件,浏览器打开html就是本次benchmark的结果展示，如下图<br><img src=\"http://cdn.xyz327.cn/Fmpp9Uq136kSEfzhAcwq3klmXDpL\" alt=\"image.png\"></p>\n</li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"http://cdn.xyz327.cn/Fmpp9Uq136kSEfzhAcwq3klmXDpL","popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"给Junit4增加Benchmark(基准测试)","path":"2020/03/06/给Junit4增加Benchmark-基准测试/","eyeCatchImage":"http://cdn.xyz327.cn/Fmpp9Uq136kSEfzhAcwq3klmXDpL","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2020-03-06T13:04:18.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-03-06T13:04:18.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"java > junit","tags":["java","junit"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"git-workflow之gitflow说明","keywords":"git","toc":true,"date":"2020-02-26T08:16:34.000Z","_content":"\ngitflow规定一个项目有\n两个长期存在的分支 **master**, **develop** \n三种临时分支 **feature** ,**hotfix**, **release**  \nps:还可能会有 **bugfix**分支 bugfix 属于一种特殊的 feature 分支\n\n## Git Flow常用的分支\n\n### Production 分支\n\n也就是我们经常使用的Master分支，这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改,每次提交都需要打上对应的**tag**\n\n### Develop 分支\n\n这个分支是我们是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支\n\n![o_git-workflow-release-cycle-1historical.png](o_git-workflow-release-cycle-1historical.png)\n\n### Feature 分支\n\n这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release\nFeature分支做完后，必须合并回Develop分支, 合并完分支后一般会删点这个Feature分支，但是我们也可以保留\n\n![o_git-workflow-release-cycle-2feature.png](o_git-workflow-release-cycle-2feature.png)\n\n### Release分支\n\nRelease分支基于Develop分支创建，打完Release分支后，我们可以在这个Release分支上测试，修改Bug等。同时，其它开发人员可以基于开发新的Feature (记住：**一旦打了Release分支之后不要从Develop分支上合并新的改动到Release分支**)\n\n发布Release分支时，合并Release到Master和Develop， 同时在Master分支上打个Tag记住Release版本号，然后可以删除Release分支了。\n\n![o_git-workflow-release-cycle-3release.png](o_git-workflow-release-cycle-3release.png)\n\n### Hotfix分支\n\n当我们在Production发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，同时在Master上打一个tag,所以Hotfix的改动会进入下一个Release\n\n![o_git-workflow-release-cycle-4maintenance.png](o_git-workflow-release-cycle-4maintenance.png)\n\n\n\n","source":"_posts/2020/02/git-workflow之gitflow说明.md","raw":"---\ntitle: git-workflow之gitflow说明\n\ntags:\n  - git\n  - git-flow\ncategories:\n  - git\nkeywords: git\ntoc: true\ndate: 2020-02-26 16:16:34\n---\n\ngitflow规定一个项目有\n两个长期存在的分支 **master**, **develop** \n三种临时分支 **feature** ,**hotfix**, **release**  \nps:还可能会有 **bugfix**分支 bugfix 属于一种特殊的 feature 分支\n\n## Git Flow常用的分支\n\n### Production 分支\n\n也就是我们经常使用的Master分支，这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改,每次提交都需要打上对应的**tag**\n\n### Develop 分支\n\n这个分支是我们是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支\n\n![o_git-workflow-release-cycle-1historical.png](o_git-workflow-release-cycle-1historical.png)\n\n### Feature 分支\n\n这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release\nFeature分支做完后，必须合并回Develop分支, 合并完分支后一般会删点这个Feature分支，但是我们也可以保留\n\n![o_git-workflow-release-cycle-2feature.png](o_git-workflow-release-cycle-2feature.png)\n\n### Release分支\n\nRelease分支基于Develop分支创建，打完Release分支后，我们可以在这个Release分支上测试，修改Bug等。同时，其它开发人员可以基于开发新的Feature (记住：**一旦打了Release分支之后不要从Develop分支上合并新的改动到Release分支**)\n\n发布Release分支时，合并Release到Master和Develop， 同时在Master分支上打个Tag记住Release版本号，然后可以删除Release分支了。\n\n![o_git-workflow-release-cycle-3release.png](o_git-workflow-release-cycle-3release.png)\n\n### Hotfix分支\n\n当我们在Production发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，同时在Master上打一个tag,所以Hotfix的改动会进入下一个Release\n\n![o_git-workflow-release-cycle-4maintenance.png](o_git-workflow-release-cycle-4maintenance.png)\n\n\n\n","slug":"git-workflow之gitflow说明","published":1,"updated":"2023-12-19T09:19:23.178Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydrd003qfki40t5g5c1l","content":"<p>gitflow规定一个项目有<br>两个长期存在的分支 <strong>master</strong>, <strong>develop</strong><br>三种临时分支 <strong>feature</strong> ,<strong>hotfix</strong>, <strong>release</strong><br>ps:还可能会有 <strong>bugfix</strong>分支 bugfix 属于一种特殊的 feature 分支</p>\n<h2 id=\"Git-Flow常用的分支\"><a href=\"#Git-Flow常用的分支\" class=\"headerlink\" title=\"Git Flow常用的分支\"></a>Git Flow常用的分支</h2><h3 id=\"Production-分支\"><a href=\"#Production-分支\" class=\"headerlink\" title=\"Production 分支\"></a>Production 分支</h3><p>也就是我们经常使用的Master分支，这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改,每次提交都需要打上对应的<strong>tag</strong></p>\n<h3 id=\"Develop-分支\"><a href=\"#Develop-分支\" class=\"headerlink\" title=\"Develop 分支\"></a>Develop 分支</h3><p>这个分支是我们是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支</p>\n<p><img src=\"/.cn//o_git-workflow-release-cycle-1historical.png\" alt=\"o_git-workflow-release-cycle-1historical.png\"></p>\n<h3 id=\"Feature-分支\"><a href=\"#Feature-分支\" class=\"headerlink\" title=\"Feature 分支\"></a>Feature 分支</h3><p>这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release<br>Feature分支做完后，必须合并回Develop分支, 合并完分支后一般会删点这个Feature分支，但是我们也可以保留</p>\n<p><img src=\"/.cn//o_git-workflow-release-cycle-2feature.png\" alt=\"o_git-workflow-release-cycle-2feature.png\"></p>\n<h3 id=\"Release分支\"><a href=\"#Release分支\" class=\"headerlink\" title=\"Release分支\"></a>Release分支</h3><p>Release分支基于Develop分支创建，打完Release分支后，我们可以在这个Release分支上测试，修改Bug等。同时，其它开发人员可以基于开发新的Feature (记住：<strong>一旦打了Release分支之后不要从Develop分支上合并新的改动到Release分支</strong>)</p>\n<p>发布Release分支时，合并Release到Master和Develop， 同时在Master分支上打个Tag记住Release版本号，然后可以删除Release分支了。</p>\n<p><img src=\"/.cn//o_git-workflow-release-cycle-3release.png\" alt=\"o_git-workflow-release-cycle-3release.png\"></p>\n<h3 id=\"Hotfix分支\"><a href=\"#Hotfix分支\" class=\"headerlink\" title=\"Hotfix分支\"></a>Hotfix分支</h3><p>当我们在Production发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，同时在Master上打一个tag,所以Hotfix的改动会进入下一个Release</p>\n<p><img src=\"/.cn//o_git-workflow-release-cycle-4maintenance.png\" alt=\"o_git-workflow-release-cycle-4maintenance.png\"></p>\n","length":758,"excerpt":"","more":"<p>gitflow规定一个项目有<br>两个长期存在的分支 <strong>master</strong>, <strong>develop</strong><br>三种临时分支 <strong>feature</strong> ,<strong>hotfix</strong>, <strong>release</strong><br>ps:还可能会有 <strong>bugfix</strong>分支 bugfix 属于一种特殊的 feature 分支</p>\n<h2 id=\"Git-Flow常用的分支\"><a href=\"#Git-Flow常用的分支\" class=\"headerlink\" title=\"Git Flow常用的分支\"></a>Git Flow常用的分支</h2><h3 id=\"Production-分支\"><a href=\"#Production-分支\" class=\"headerlink\" title=\"Production 分支\"></a>Production 分支</h3><p>也就是我们经常使用的Master分支，这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改,每次提交都需要打上对应的<strong>tag</strong></p>\n<h3 id=\"Develop-分支\"><a href=\"#Develop-分支\" class=\"headerlink\" title=\"Develop 分支\"></a>Develop 分支</h3><p>这个分支是我们是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支</p>\n<p><img src=\"/.cn//o_git-workflow-release-cycle-1historical.png\" alt=\"o_git-workflow-release-cycle-1historical.png\"></p>\n<h3 id=\"Feature-分支\"><a href=\"#Feature-分支\" class=\"headerlink\" title=\"Feature 分支\"></a>Feature 分支</h3><p>这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release<br>Feature分支做完后，必须合并回Develop分支, 合并完分支后一般会删点这个Feature分支，但是我们也可以保留</p>\n<p><img src=\"/.cn//o_git-workflow-release-cycle-2feature.png\" alt=\"o_git-workflow-release-cycle-2feature.png\"></p>\n<h3 id=\"Release分支\"><a href=\"#Release分支\" class=\"headerlink\" title=\"Release分支\"></a>Release分支</h3><p>Release分支基于Develop分支创建，打完Release分支后，我们可以在这个Release分支上测试，修改Bug等。同时，其它开发人员可以基于开发新的Feature (记住：<strong>一旦打了Release分支之后不要从Develop分支上合并新的改动到Release分支</strong>)</p>\n<p>发布Release分支时，合并Release到Master和Develop， 同时在Master分支上打个Tag记住Release版本号，然后可以删除Release分支了。</p>\n<p><img src=\"/.cn//o_git-workflow-release-cycle-3release.png\" alt=\"o_git-workflow-release-cycle-3release.png\"></p>\n<h3 id=\"Hotfix分支\"><a href=\"#Hotfix分支\" class=\"headerlink\" title=\"Hotfix分支\"></a>Hotfix分支</h3><p>当我们在Production发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，同时在Master上打一个tag,所以Hotfix的改动会进入下一个Release</p>\n<p><img src=\"/.cn//o_git-workflow-release-cycle-4maintenance.png\" alt=\"o_git-workflow-release-cycle-4maintenance.png\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/.cn//o_git-workflow-release-cycle-1historical.png","popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"git-workflow之gitflow说明","path":"2020/02/26/git-workflow之gitflow说明/","eyeCatchImage":"/.cn//o_git-workflow-release-cycle-1historical.png","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2020-02-26T08:16:34.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-02-26T08:16:34.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"git","tags":["git","git-flow"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"git-workflow之gitflow的工具","keywords":"git,git-flow","toc":true,"date":"2020-02-26T08:51:01.000Z","_content":"\ngitflow 只是一套规范在使用时也无非是使用git的命令来完成gitflow定义的分支事情,但是使用原始的git命令行太麻烦也容易出错,于是就有了gitflow的工具\n\n## gitflow命令行工具\n为git命令行添加gitflow的动作命令.简化使用的难度\n\n### 安装\n详细信息参考[官方文档](https://github.com/petervanderdoes/gitflow-avh/wiki/Installation)\n1. Liunx （Debian）\n```bash\n# Ubuntu 18.04\napt-get install git-flow\n```\n2. windows\n- git-for-windows  \n  2.6.4 以上就内置了\n- 在cygwin中安装\n  ```bash\n  // 在git-bash中执行\n  wget -q -O gitflow-installer.sh --no-check-certificate \n  https://raw.githubusercontent.com/petervanderdoes/gitflow/develop/contrib/gitflow- \n  installer.sh\n  ```\n  ```bash\n  # 如果提示没有权限 先授权\n  # chmod +x gitflow-installer.sh\n  # state 可选值为  stable / develop \n  ./gitflow-installer.sh install <state>\n  ```\n3. MacOS\n```bash\nbrew install git-flow-avh\n```\n### 使用\ngit-flow 提供 init,featrue,hotfix,release等命令\n![o_gitflowcommands.png](http://cdn.xyz327.cn/FkR25jMEhRbiRlOiUvwuqPnfJW8t)\n\n#### 初始化\n```bash\ngit flow init\n```\n#### feature\n[官方文档](https://github.com/petervanderdoes/gitflow-avh/wiki/Reference:-git-flow-feature)\n- 开始一个feature `git flow feature start feature-name`\n- 发布一个feature `git flow feature publish feature-name` (push到远程仓库)\n- 切换到一个feature `git flow feature checkout feature-name`\n- 获取一个feature `git flow feature pull origin feature-name` (从远程仓库获取)\n- 完成一个feature `git flow feature finish feature-name`\n- 删除一个feature `git flow feature delete feature-name`\n\n#### release\n[官方文档](https://github.com/petervanderdoes/gitflow-avh/wiki/Reference:-git-flow-release)\n- 开始一个release `git flow release start release-name`\n- 发布一个release `git flow release publish release-name`\n- 完成一个release `git flow release finsh release-name`\n- 删除一个release `git flow release delete release-name`\n\n#### hotfix\n [官方文档](https://github.com/petervanderdoes/gitflow-avh/wiki/Reference:-git-flow-hotfix)\n- 开始一个bugfix `git flow hotfix start hotfix-name`\n- 完成一个bugfix `git flow gotfix finish hotfix-name`\n\n#### bugfix\n [官方文档](https://github.com/petervanderdoes/gitflow-avh/wiki/Reference:-git-flow-bugfix)\n> bugfix就是一种特殊的feature\n- 开始一个bugfix `git flow bugfix start bugfix-name`\n- 完成一个bugfix `git flow bugfix finish bugfix-name`\n\n### IDEA gitflow可视化插件\n如果觉得命令太繁琐就可以使用IDEA的gitflow可视化插件\n> gitflow可视化插件是依赖gitflow命令行的\n\n[插件地址](https://plugins.jetbrains.com/plugin/7315-git-flow-integration)\n\n在 settings -> plugins 中搜索 `git-flow-integration` 进行安装\n\n安装完成后在IDEA右下角就会出现这个插件了\n![ideagitflow1.png](http://cdn.xyz327.cn/Fiv__uKhBee2R4nOtQUnrctZZku4)","source":"_posts/2020/02/git-workflow之gitflow的工具.md","raw":"---\ntitle: git-workflow之gitflow的工具\n\ntags:\n  - git\n  - git-flow\ncategories:\n  - git\nkeywords: 'git,git-flow'\ntoc: true\ndate: 2020-02-26 16:51:01\n---\n\ngitflow 只是一套规范在使用时也无非是使用git的命令来完成gitflow定义的分支事情,但是使用原始的git命令行太麻烦也容易出错,于是就有了gitflow的工具\n\n## gitflow命令行工具\n为git命令行添加gitflow的动作命令.简化使用的难度\n\n### 安装\n详细信息参考[官方文档](https://github.com/petervanderdoes/gitflow-avh/wiki/Installation)\n1. Liunx （Debian）\n```bash\n# Ubuntu 18.04\napt-get install git-flow\n```\n2. windows\n- git-for-windows  \n  2.6.4 以上就内置了\n- 在cygwin中安装\n  ```bash\n  // 在git-bash中执行\n  wget -q -O gitflow-installer.sh --no-check-certificate \n  https://raw.githubusercontent.com/petervanderdoes/gitflow/develop/contrib/gitflow- \n  installer.sh\n  ```\n  ```bash\n  # 如果提示没有权限 先授权\n  # chmod +x gitflow-installer.sh\n  # state 可选值为  stable / develop \n  ./gitflow-installer.sh install <state>\n  ```\n3. MacOS\n```bash\nbrew install git-flow-avh\n```\n### 使用\ngit-flow 提供 init,featrue,hotfix,release等命令\n![o_gitflowcommands.png](http://cdn.xyz327.cn/FkR25jMEhRbiRlOiUvwuqPnfJW8t)\n\n#### 初始化\n```bash\ngit flow init\n```\n#### feature\n[官方文档](https://github.com/petervanderdoes/gitflow-avh/wiki/Reference:-git-flow-feature)\n- 开始一个feature `git flow feature start feature-name`\n- 发布一个feature `git flow feature publish feature-name` (push到远程仓库)\n- 切换到一个feature `git flow feature checkout feature-name`\n- 获取一个feature `git flow feature pull origin feature-name` (从远程仓库获取)\n- 完成一个feature `git flow feature finish feature-name`\n- 删除一个feature `git flow feature delete feature-name`\n\n#### release\n[官方文档](https://github.com/petervanderdoes/gitflow-avh/wiki/Reference:-git-flow-release)\n- 开始一个release `git flow release start release-name`\n- 发布一个release `git flow release publish release-name`\n- 完成一个release `git flow release finsh release-name`\n- 删除一个release `git flow release delete release-name`\n\n#### hotfix\n [官方文档](https://github.com/petervanderdoes/gitflow-avh/wiki/Reference:-git-flow-hotfix)\n- 开始一个bugfix `git flow hotfix start hotfix-name`\n- 完成一个bugfix `git flow gotfix finish hotfix-name`\n\n#### bugfix\n [官方文档](https://github.com/petervanderdoes/gitflow-avh/wiki/Reference:-git-flow-bugfix)\n> bugfix就是一种特殊的feature\n- 开始一个bugfix `git flow bugfix start bugfix-name`\n- 完成一个bugfix `git flow bugfix finish bugfix-name`\n\n### IDEA gitflow可视化插件\n如果觉得命令太繁琐就可以使用IDEA的gitflow可视化插件\n> gitflow可视化插件是依赖gitflow命令行的\n\n[插件地址](https://plugins.jetbrains.com/plugin/7315-git-flow-integration)\n\n在 settings -> plugins 中搜索 `git-flow-integration` 进行安装\n\n安装完成后在IDEA右下角就会出现这个插件了\n![ideagitflow1.png](http://cdn.xyz327.cn/Fiv__uKhBee2R4nOtQUnrctZZku4)","slug":"git-workflow之gitflow的工具","published":1,"updated":"2023-12-19T09:19:23.177Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydre003tfki4ekd3hlle","content":"<p>gitflow 只是一套规范在使用时也无非是使用git的命令来完成gitflow定义的分支事情,但是使用原始的git命令行太麻烦也容易出错,于是就有了gitflow的工具</p>\n<h2 id=\"gitflow命令行工具\"><a href=\"#gitflow命令行工具\" class=\"headerlink\" title=\"gitflow命令行工具\"></a>gitflow命令行工具</h2><p>为git命令行添加gitflow的动作命令.简化使用的难度</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>详细信息参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3BldGVydmFuZGVyZG9lcy9naXRmbG93LWF2aC93aWtpL0luc3RhbGxhdGlvbg==\">官方文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n<ol>\n<li>Liunx （Debian）<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Ubuntu 18.04</span></span><br><span class=\"line\">apt-get install git-flow</span><br></pre></td></tr></table></figure></li>\n<li>windows</li>\n</ol>\n<ul>\n<li>git-for-windows<br>2.6.4 以上就内置了</li>\n<li>在cygwin中安装<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在git-bash中执行</span><br><span class=\"line\">wget -q -O gitflow-installer.sh --no-check-certificate </span><br><span class=\"line\">https://raw.githubusercontent.com/petervanderdoes/gitflow/develop/contrib/gitflow- </span><br><span class=\"line\">installer.sh</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果提示没有权限 先授权</span></span><br><span class=\"line\"><span class=\"comment\"># chmod +x gitflow-installer.sh</span></span><br><span class=\"line\"><span class=\"comment\"># state 可选值为  stable / develop </span></span><br><span class=\"line\">./gitflow-installer.sh install &lt;state&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>MacOS<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install git-flow-avh</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>git-flow 提供 init,featrue,hotfix,release等命令<br><img src=\"http://cdn.xyz327.cn/FkR25jMEhRbiRlOiUvwuqPnfJW8t\" alt=\"o_gitflowcommands.png\"></p>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git flow init</span><br></pre></td></tr></table></figure>\n<h4 id=\"feature\"><a href=\"#feature\" class=\"headerlink\" title=\"feature\"></a>feature</h4><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3BldGVydmFuZGVyZG9lcy9naXRmbG93LWF2aC93aWtpL1JlZmVyZW5jZTotZ2l0LWZsb3ctZmVhdHVyZQ==\">官方文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n<ul>\n<li>开始一个feature <code>git flow feature start feature-name</code></li>\n<li>发布一个feature <code>git flow feature publish feature-name</code> (push到远程仓库)</li>\n<li>切换到一个feature <code>git flow feature checkout feature-name</code></li>\n<li>获取一个feature <code>git flow feature pull origin feature-name</code> (从远程仓库获取)</li>\n<li>完成一个feature <code>git flow feature finish feature-name</code></li>\n<li>删除一个feature <code>git flow feature delete feature-name</code></li>\n</ul>\n<h4 id=\"release\"><a href=\"#release\" class=\"headerlink\" title=\"release\"></a>release</h4><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3BldGVydmFuZGVyZG9lcy9naXRmbG93LWF2aC93aWtpL1JlZmVyZW5jZTotZ2l0LWZsb3ctcmVsZWFzZQ==\">官方文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n<ul>\n<li>开始一个release <code>git flow release start release-name</code></li>\n<li>发布一个release <code>git flow release publish release-name</code></li>\n<li>完成一个release <code>git flow release finsh release-name</code></li>\n<li>删除一个release <code>git flow release delete release-name</code></li>\n</ul>\n<h4 id=\"hotfix\"><a href=\"#hotfix\" class=\"headerlink\" title=\"hotfix\"></a>hotfix</h4><p> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3BldGVydmFuZGVyZG9lcy9naXRmbG93LWF2aC93aWtpL1JlZmVyZW5jZTotZ2l0LWZsb3ctaG90Zml4\">官方文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n<ul>\n<li>开始一个bugfix <code>git flow hotfix start hotfix-name</code></li>\n<li>完成一个bugfix <code>git flow gotfix finish hotfix-name</code></li>\n</ul>\n<h4 id=\"bugfix\"><a href=\"#bugfix\" class=\"headerlink\" title=\"bugfix\"></a>bugfix</h4><p> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3BldGVydmFuZGVyZG9lcy9naXRmbG93LWF2aC93aWtpL1JlZmVyZW5jZTotZ2l0LWZsb3ctYnVnZml4\">官方文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n<blockquote>\n<p>bugfix就是一种特殊的feature</p>\n</blockquote>\n<ul>\n<li>开始一个bugfix <code>git flow bugfix start bugfix-name</code></li>\n<li>完成一个bugfix <code>git flow bugfix finish bugfix-name</code></li>\n</ul>\n<h3 id=\"IDEA-gitflow可视化插件\"><a href=\"#IDEA-gitflow可视化插件\" class=\"headerlink\" title=\"IDEA gitflow可视化插件\"></a>IDEA gitflow可视化插件</h3><p>如果觉得命令太繁琐就可以使用IDEA的gitflow可视化插件</p>\n<blockquote>\n<p>gitflow可视化插件是依赖gitflow命令行的</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wbHVnaW5zLmpldGJyYWlucy5jb20vcGx1Z2luLzczMTUtZ2l0LWZsb3ctaW50ZWdyYXRpb24=\">插件地址<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>在 settings -&gt; plugins 中搜索 <code>git-flow-integration</code> 进行安装</p>\n<p>安装完成后在IDEA右下角就会出现这个插件了<br><img src=\"http://cdn.xyz327.cn/Fiv__uKhBee2R4nOtQUnrctZZku4\" alt=\"ideagitflow1.png\"></p>\n","length":1410,"excerpt":"","more":"<p>gitflow 只是一套规范在使用时也无非是使用git的命令来完成gitflow定义的分支事情,但是使用原始的git命令行太麻烦也容易出错,于是就有了gitflow的工具</p>\n<h2 id=\"gitflow命令行工具\"><a href=\"#gitflow命令行工具\" class=\"headerlink\" title=\"gitflow命令行工具\"></a>gitflow命令行工具</h2><p>为git命令行添加gitflow的动作命令.简化使用的难度</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>详细信息参考<a href=\"https://github.com/petervanderdoes/gitflow-avh/wiki/Installation\">官方文档</a></p>\n<ol>\n<li>Liunx （Debian）<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Ubuntu 18.04</span></span><br><span class=\"line\">apt-get install git-flow</span><br></pre></td></tr></table></figure></li>\n<li>windows</li>\n</ol>\n<ul>\n<li>git-for-windows<br>2.6.4 以上就内置了</li>\n<li>在cygwin中安装<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在git-bash中执行</span><br><span class=\"line\">wget -q -O gitflow-installer.sh --no-check-certificate </span><br><span class=\"line\">https://raw.githubusercontent.com/petervanderdoes/gitflow/develop/contrib/gitflow- </span><br><span class=\"line\">installer.sh</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果提示没有权限 先授权</span></span><br><span class=\"line\"><span class=\"comment\"># chmod +x gitflow-installer.sh</span></span><br><span class=\"line\"><span class=\"comment\"># state 可选值为  stable / develop </span></span><br><span class=\"line\">./gitflow-installer.sh install &lt;state&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>MacOS<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install git-flow-avh</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>git-flow 提供 init,featrue,hotfix,release等命令<br><img src=\"http://cdn.xyz327.cn/FkR25jMEhRbiRlOiUvwuqPnfJW8t\" alt=\"o_gitflowcommands.png\"></p>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git flow init</span><br></pre></td></tr></table></figure>\n<h4 id=\"feature\"><a href=\"#feature\" class=\"headerlink\" title=\"feature\"></a>feature</h4><p><a href=\"https://github.com/petervanderdoes/gitflow-avh/wiki/Reference:-git-flow-feature\">官方文档</a></p>\n<ul>\n<li>开始一个feature <code>git flow feature start feature-name</code></li>\n<li>发布一个feature <code>git flow feature publish feature-name</code> (push到远程仓库)</li>\n<li>切换到一个feature <code>git flow feature checkout feature-name</code></li>\n<li>获取一个feature <code>git flow feature pull origin feature-name</code> (从远程仓库获取)</li>\n<li>完成一个feature <code>git flow feature finish feature-name</code></li>\n<li>删除一个feature <code>git flow feature delete feature-name</code></li>\n</ul>\n<h4 id=\"release\"><a href=\"#release\" class=\"headerlink\" title=\"release\"></a>release</h4><p><a href=\"https://github.com/petervanderdoes/gitflow-avh/wiki/Reference:-git-flow-release\">官方文档</a></p>\n<ul>\n<li>开始一个release <code>git flow release start release-name</code></li>\n<li>发布一个release <code>git flow release publish release-name</code></li>\n<li>完成一个release <code>git flow release finsh release-name</code></li>\n<li>删除一个release <code>git flow release delete release-name</code></li>\n</ul>\n<h4 id=\"hotfix\"><a href=\"#hotfix\" class=\"headerlink\" title=\"hotfix\"></a>hotfix</h4><p> <a href=\"https://github.com/petervanderdoes/gitflow-avh/wiki/Reference:-git-flow-hotfix\">官方文档</a></p>\n<ul>\n<li>开始一个bugfix <code>git flow hotfix start hotfix-name</code></li>\n<li>完成一个bugfix <code>git flow gotfix finish hotfix-name</code></li>\n</ul>\n<h4 id=\"bugfix\"><a href=\"#bugfix\" class=\"headerlink\" title=\"bugfix\"></a>bugfix</h4><p> <a href=\"https://github.com/petervanderdoes/gitflow-avh/wiki/Reference:-git-flow-bugfix\">官方文档</a></p>\n<blockquote>\n<p>bugfix就是一种特殊的feature</p>\n</blockquote>\n<ul>\n<li>开始一个bugfix <code>git flow bugfix start bugfix-name</code></li>\n<li>完成一个bugfix <code>git flow bugfix finish bugfix-name</code></li>\n</ul>\n<h3 id=\"IDEA-gitflow可视化插件\"><a href=\"#IDEA-gitflow可视化插件\" class=\"headerlink\" title=\"IDEA gitflow可视化插件\"></a>IDEA gitflow可视化插件</h3><p>如果觉得命令太繁琐就可以使用IDEA的gitflow可视化插件</p>\n<blockquote>\n<p>gitflow可视化插件是依赖gitflow命令行的</p>\n</blockquote>\n<p><a href=\"https://plugins.jetbrains.com/plugin/7315-git-flow-integration\">插件地址</a></p>\n<p>在 settings -&gt; plugins 中搜索 <code>git-flow-integration</code> 进行安装</p>\n<p>安装完成后在IDEA右下角就会出现这个插件了<br><img src=\"http://cdn.xyz327.cn/Fiv__uKhBee2R4nOtQUnrctZZku4\" alt=\"ideagitflow1.png\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"http://cdn.xyz327.cn/FkR25jMEhRbiRlOiUvwuqPnfJW8t","popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"git-workflow之gitflow的工具","path":"2020/02/26/git-workflow之gitflow的工具/","eyeCatchImage":"http://cdn.xyz327.cn/FkR25jMEhRbiRlOiUvwuqPnfJW8t","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2020-02-26T08:51:01.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-02-26T08:51:01.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"git","tags":["git","git-flow"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Jira/Bitbucket/Confluence使用CAS完成SSO","date":"2020-04-29T13:35:29.000Z","keywords":["Jira","SSO","CAS","Bitbucket","Confluence"],"_content":"\n## [Jira/Bitbucket/Confluence](https://www.atlassian.com/software)\n\n项目代码托管，协作，问题追踪三件套。这三个软件同时使用时可以将用户统一托管给`Jira`管理.  \n但是一般公司会有自己的账户体系并且使用了 `CAS` 作为统一登录管理.\n这个时候就可以将这三个系统的登录以及用户管理交由`CAS`来完成\n\n## [CAS](https://apereo.github.io/cas)\n\n由耶鲁大学开源的一套单点登录系统  \n基于`SAML`协议来做SSO认证. CAS 可以支持多种认证协议.只需要做下简单的配置就行\n\n<!--more-->\n\n## 开始配置(以Jira为例)\n\n> 假设jira的url为 http://jira.xyz327.cn\n> CAS的url为 http://cas.xyz327.cn\n\n### 配置CAS支持SAML协议\n\nCAS 支持 `SAML` 具体请参考[官方文档](https://apereo.github.io/cas/5.3.x/installation/Configuring-SAML2-Authentication.html)\n\n#### 增加SAML协议相关依赖\n\n给CAS添加saml相关依赖\n\n```xml\n<!--saml 协议-->\n<dependency>\n    <groupId>org.apereo.cas</groupId>\n    <artifactId>cas-server-support-saml-idp-metadata-rest</artifactId>\n    <version>${cas.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.apereo.cas</groupId>\n    <artifactId>cas-server-support-saml-idp</artifactId>\n    <version>${cas.version}</version>\n</dependency>\n```\n#### 给CAS增加IDP的描述文件\n\nSAML默认配置是在 `/etc/cas/saml` 目录下,也可以使用 来手动指定 SAML配置目录\n在spring-boot配置文件中增加以下配置\n\n```yml\ncas:\n  authn:\n    saml-idp:\n      metadata:\n        location: saml\n      entity-id: http://cas.xyz327.cn/idp\n      scope: http://cas.xyz327.cn\n      response:\n        credential-type: x509\n      attribute-query-profile-enabled: true\n  server:\n    prefix: http://cas.xyz327.cn\n```\n\n> 此时访问 http://cas.xyz327.cn/idp/metadata 就可以看到`CAS`作为`SAML`的`Identity Provider`的metaData信息\n\n### 配置Jira\n\n#### 给Jira安装SSO插件\n\n插件管理里面搜索`SAML Single Sign On`  \n[SAML Single Sign On (SSO) Jira SAML SSO](https://marketplace.atlassian.com/apps/1212130/saml-single-sign-on-sso-jira-saml-sso?hosting=server&tab=overview)  \n其他两个系统的插件也叫这个名字\n\n#### 配置SSO插件信息\n\n1. 点击页面左边菜单的`SAML Single Sign On`\n2. 在弹出框中`Idp Type`选择 `Other SAML Identity Provider`, `Name`和`Description`按自己需求填写.点击下一步\n3. 显示Jira作为`SP(Service Provide)`的相关配置,记录好`Metadata URL`的地址.在这里应该是`http://jira.xyz327.cn/plugins/servlet/samlsso/metadata`。点击下一步\n4. 下拉选择`I have a metadata URL`，然后填入配置`CAS`的地址`http://cas.xyz327.cn/idp/metadata`,点击`Accpet all`，点击`import`,点击下一步\n5. 选择匹配`Jira`userId的属性.使用默认的，点击下一步\n6. 选择同步用户到jira的方式,我这边选择`Update Form SAML-Attributes`,从登陆用户的信息中创建用户\n7. 勾选`create New User`和`Update non-SAML Provisioned Users`,`Directory for New Users`一栏选择`Jira Internal Directory`, `Full Name Attribute`输入`{username}`,`Email Attribute`输入`{email}`.下拉到`Group Settings`->`User Groups` 点击`Add one` 输入`jira-software-users`.  点击下一步\n8. 点击`Skip test & configure manually`\n9. 点击`Redirection`并勾选上`Enable SSO Redirect`\n10. 点击右上角的`Save Settings`\n\n### 给CAS添加 Jira 服务\n\n```json\n{\n    \"@class\": \"org.apereo.cas.support.saml.services.SamlRegisteredService\",\n    \"serviceId\": \"http://jira\\\\.xyz327\\\\.cn.*\",\n    \"name\": \"JIRASAMLService\",\n    \"id\": 3,\n    \"evaluationOrder\": 10,\n    \"metadataLocation\": \"http://jira.xyz327.cn/plugins/servlet/samlsso/metadata\",\n    \"attributeReleasePolicy\": {\n        \"@class\": \"org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy\",\n        \"allowedAttributes\": [\n            \"username\",\n            \"email\"\n        ]\n    }\n}\n```\n\n### 完成配置\n\n此时访问 http://jira.xyz327.cn 就会自动跳转到 http://cas.xyz327.cn   \n完成登陆后，如果是第一次登陆就会自动创建用户\n\n### 后记\n> 对于Bitbucket 在`Directory for New Users`无法选择`Jira Internal Directory`.多以对于Bitbucket 可以选择不同用户信息.这样就会导致如果用户第一次登陆是登陆bitbucket的话那就会出现找不到用户的错误。可以在PageTemplate里面增加错误提示要求用户第一次登陆时需要先登录Jira/Confluence\n\n贴一个错误的 errorPageTemplate\n```\n<html>\n <head>\n  <title>SAML Single Sign On failed</title>\n  $webResourceManager.requireResource(\"$pluginproperties.pluginkey:resources\")\n  <meta name=\"decorator\" content=\"atl.general\">\n </head>\n  <body class=\"aui-page-focused aui-page-medium\" >\n   <div class=\"aui-page-panel\">\n    <div class=\"aui-page-panel-inner\">\n     <section class=\"aui-page-panel-content\">\n      <h1>SAML Single Sign On failed</h1>\n      <div>Please contact your administrator       #if($tracker) and provide the tracker-id <b>$tracker</b> #end      or log in at the <a href=\"$loginurl\">login page</a>.</div>\n      #if($userid)\n       <div class=\"aui-message error\">$userid could not be authorized. This userid is unknown or the user does not have sufficient permissions.</div>\n      #end\n      #if($message)\n       <div class=\"aui-message error\">$message</div>\n       <!-- 这里提示用户需要先登录jira -->\n       <div class=\"aui-message error\">如果提示找不到用户请先登录<a href=\"http://jira.xyz327.cn/\"><b>jira</b></a></div>\n      #end\n      #if($stacktrace)\n      <a id=\"show-stacktrace-trigger\" data-replace-text=\"Hide Stack Trace\" class=\"aui-expander-trigger button\" aria-controls=\"stacktrace\">Show Stack Trace</a>\n      <div class=\"aui-expander-content\" id=\"stacktrace\">$stacktrace</div>\n      #end\n     </section>\n    </div>\n   </div>\n </body>\n</html>\n```","source":"_posts/2020/04/Jira-Bitbucket-Confluence使用CAS完成SSO.md","raw":"---\ntitle: Jira/Bitbucket/Confluence使用CAS完成SSO\n\ndate: 2020-04-29 21:35:29\ntags:\ncategories:\nkeywords: [Jira,SSO,CAS,Bitbucket,Confluence]\n---\n\n## [Jira/Bitbucket/Confluence](https://www.atlassian.com/software)\n\n项目代码托管，协作，问题追踪三件套。这三个软件同时使用时可以将用户统一托管给`Jira`管理.  \n但是一般公司会有自己的账户体系并且使用了 `CAS` 作为统一登录管理.\n这个时候就可以将这三个系统的登录以及用户管理交由`CAS`来完成\n\n## [CAS](https://apereo.github.io/cas)\n\n由耶鲁大学开源的一套单点登录系统  \n基于`SAML`协议来做SSO认证. CAS 可以支持多种认证协议.只需要做下简单的配置就行\n\n<!--more-->\n\n## 开始配置(以Jira为例)\n\n> 假设jira的url为 http://jira.xyz327.cn\n> CAS的url为 http://cas.xyz327.cn\n\n### 配置CAS支持SAML协议\n\nCAS 支持 `SAML` 具体请参考[官方文档](https://apereo.github.io/cas/5.3.x/installation/Configuring-SAML2-Authentication.html)\n\n#### 增加SAML协议相关依赖\n\n给CAS添加saml相关依赖\n\n```xml\n<!--saml 协议-->\n<dependency>\n    <groupId>org.apereo.cas</groupId>\n    <artifactId>cas-server-support-saml-idp-metadata-rest</artifactId>\n    <version>${cas.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.apereo.cas</groupId>\n    <artifactId>cas-server-support-saml-idp</artifactId>\n    <version>${cas.version}</version>\n</dependency>\n```\n#### 给CAS增加IDP的描述文件\n\nSAML默认配置是在 `/etc/cas/saml` 目录下,也可以使用 来手动指定 SAML配置目录\n在spring-boot配置文件中增加以下配置\n\n```yml\ncas:\n  authn:\n    saml-idp:\n      metadata:\n        location: saml\n      entity-id: http://cas.xyz327.cn/idp\n      scope: http://cas.xyz327.cn\n      response:\n        credential-type: x509\n      attribute-query-profile-enabled: true\n  server:\n    prefix: http://cas.xyz327.cn\n```\n\n> 此时访问 http://cas.xyz327.cn/idp/metadata 就可以看到`CAS`作为`SAML`的`Identity Provider`的metaData信息\n\n### 配置Jira\n\n#### 给Jira安装SSO插件\n\n插件管理里面搜索`SAML Single Sign On`  \n[SAML Single Sign On (SSO) Jira SAML SSO](https://marketplace.atlassian.com/apps/1212130/saml-single-sign-on-sso-jira-saml-sso?hosting=server&tab=overview)  \n其他两个系统的插件也叫这个名字\n\n#### 配置SSO插件信息\n\n1. 点击页面左边菜单的`SAML Single Sign On`\n2. 在弹出框中`Idp Type`选择 `Other SAML Identity Provider`, `Name`和`Description`按自己需求填写.点击下一步\n3. 显示Jira作为`SP(Service Provide)`的相关配置,记录好`Metadata URL`的地址.在这里应该是`http://jira.xyz327.cn/plugins/servlet/samlsso/metadata`。点击下一步\n4. 下拉选择`I have a metadata URL`，然后填入配置`CAS`的地址`http://cas.xyz327.cn/idp/metadata`,点击`Accpet all`，点击`import`,点击下一步\n5. 选择匹配`Jira`userId的属性.使用默认的，点击下一步\n6. 选择同步用户到jira的方式,我这边选择`Update Form SAML-Attributes`,从登陆用户的信息中创建用户\n7. 勾选`create New User`和`Update non-SAML Provisioned Users`,`Directory for New Users`一栏选择`Jira Internal Directory`, `Full Name Attribute`输入`{username}`,`Email Attribute`输入`{email}`.下拉到`Group Settings`->`User Groups` 点击`Add one` 输入`jira-software-users`.  点击下一步\n8. 点击`Skip test & configure manually`\n9. 点击`Redirection`并勾选上`Enable SSO Redirect`\n10. 点击右上角的`Save Settings`\n\n### 给CAS添加 Jira 服务\n\n```json\n{\n    \"@class\": \"org.apereo.cas.support.saml.services.SamlRegisteredService\",\n    \"serviceId\": \"http://jira\\\\.xyz327\\\\.cn.*\",\n    \"name\": \"JIRASAMLService\",\n    \"id\": 3,\n    \"evaluationOrder\": 10,\n    \"metadataLocation\": \"http://jira.xyz327.cn/plugins/servlet/samlsso/metadata\",\n    \"attributeReleasePolicy\": {\n        \"@class\": \"org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy\",\n        \"allowedAttributes\": [\n            \"username\",\n            \"email\"\n        ]\n    }\n}\n```\n\n### 完成配置\n\n此时访问 http://jira.xyz327.cn 就会自动跳转到 http://cas.xyz327.cn   \n完成登陆后，如果是第一次登陆就会自动创建用户\n\n### 后记\n> 对于Bitbucket 在`Directory for New Users`无法选择`Jira Internal Directory`.多以对于Bitbucket 可以选择不同用户信息.这样就会导致如果用户第一次登陆是登陆bitbucket的话那就会出现找不到用户的错误。可以在PageTemplate里面增加错误提示要求用户第一次登陆时需要先登录Jira/Confluence\n\n贴一个错误的 errorPageTemplate\n```\n<html>\n <head>\n  <title>SAML Single Sign On failed</title>\n  $webResourceManager.requireResource(\"$pluginproperties.pluginkey:resources\")\n  <meta name=\"decorator\" content=\"atl.general\">\n </head>\n  <body class=\"aui-page-focused aui-page-medium\" >\n   <div class=\"aui-page-panel\">\n    <div class=\"aui-page-panel-inner\">\n     <section class=\"aui-page-panel-content\">\n      <h1>SAML Single Sign On failed</h1>\n      <div>Please contact your administrator       #if($tracker) and provide the tracker-id <b>$tracker</b> #end      or log in at the <a href=\"$loginurl\">login page</a>.</div>\n      #if($userid)\n       <div class=\"aui-message error\">$userid could not be authorized. This userid is unknown or the user does not have sufficient permissions.</div>\n      #end\n      #if($message)\n       <div class=\"aui-message error\">$message</div>\n       <!-- 这里提示用户需要先登录jira -->\n       <div class=\"aui-message error\">如果提示找不到用户请先登录<a href=\"http://jira.xyz327.cn/\"><b>jira</b></a></div>\n      #end\n      #if($stacktrace)\n      <a id=\"show-stacktrace-trigger\" data-replace-text=\"Hide Stack Trace\" class=\"aui-expander-trigger button\" aria-controls=\"stacktrace\">Show Stack Trace</a>\n      <div class=\"aui-expander-content\" id=\"stacktrace\">$stacktrace</div>\n      #end\n     </section>\n    </div>\n   </div>\n </body>\n</html>\n```","slug":"Jira-Bitbucket-Confluence使用CAS完成SSO","published":1,"updated":"2023-12-19T09:19:23.182Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydrf003vfki4c6jc28bs","content":"<h2 id=\"Jira-Bitbucket-Confluence\"><a href=\"#Jira-Bitbucket-Confluence\" class=\"headerlink\" title=\"Jira&#x2F;Bitbucket&#x2F;Confluence\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXRsYXNzaWFuLmNvbS9zb2Z0d2FyZQ==\">Jira&#x2F;Bitbucket&#x2F;Confluence<i class=\"fa fa-external-link-alt\"></i></span></h2><p>项目代码托管，协作，问题追踪三件套。这三个软件同时使用时可以将用户统一托管给<code>Jira</code>管理.<br>但是一般公司会有自己的账户体系并且使用了 <code>CAS</code> 作为统一登录管理.<br>这个时候就可以将这三个系统的登录以及用户管理交由<code>CAS</code>来完成</p>\n<h2 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcGVyZW8uZ2l0aHViLmlvL2Nhcw==\">CAS<i class=\"fa fa-external-link-alt\"></i></span></h2><p>由耶鲁大学开源的一套单点登录系统<br>基于<code>SAML</code>协议来做SSO认证. CAS 可以支持多种认证协议.只需要做下简单的配置就行</p>\n<span id=\"more\"></span>\n\n<h2 id=\"开始配置-以Jira为例\"><a href=\"#开始配置-以Jira为例\" class=\"headerlink\" title=\"开始配置(以Jira为例)\"></a>开始配置(以Jira为例)</h2><blockquote>\n<p>假设jira的url为 <span class=\"exturl\" data-url=\"aHR0cDovL2ppcmEueHl6MzI3LmNuLw==\">http://jira.xyz327.cn<i class=\"fa fa-external-link-alt\"></i></span><br>CAS的url为 <span class=\"exturl\" data-url=\"aHR0cDovL2Nhcy54eXozMjcuY24v\">http://cas.xyz327.cn<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h3 id=\"配置CAS支持SAML协议\"><a href=\"#配置CAS支持SAML协议\" class=\"headerlink\" title=\"配置CAS支持SAML协议\"></a>配置CAS支持SAML协议</h3><p>CAS 支持 <code>SAML</code> 具体请参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcGVyZW8uZ2l0aHViLmlvL2Nhcy81LjMueC9pbnN0YWxsYXRpb24vQ29uZmlndXJpbmctU0FNTDItQXV0aGVudGljYXRpb24uaHRtbA==\">官方文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"增加SAML协议相关依赖\"><a href=\"#增加SAML协议相关依赖\" class=\"headerlink\" title=\"增加SAML协议相关依赖\"></a>增加SAML协议相关依赖</h4><p>给CAS添加saml相关依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--saml 协议--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apereo.cas<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cas-server-support-saml-idp-metadata-rest<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;cas.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apereo.cas<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cas-server-support-saml-idp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;cas.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"给CAS增加IDP的描述文件\"><a href=\"#给CAS增加IDP的描述文件\" class=\"headerlink\" title=\"给CAS增加IDP的描述文件\"></a>给CAS增加IDP的描述文件</h4><p>SAML默认配置是在 <code>/etc/cas/saml</code> 目录下,也可以使用 来手动指定 SAML配置目录<br>在spring-boot配置文件中增加以下配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cas:</span></span><br><span class=\"line\">  <span class=\"attr\">authn:</span></span><br><span class=\"line\">    <span class=\"attr\">saml-idp:</span></span><br><span class=\"line\">      <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">location:</span> <span class=\"string\">saml</span></span><br><span class=\"line\">      <span class=\"attr\">entity-id:</span> <span class=\"string\">http://cas.xyz327.cn/idp</span></span><br><span class=\"line\">      <span class=\"attr\">scope:</span> <span class=\"string\">http://cas.xyz327.cn</span></span><br><span class=\"line\">      <span class=\"attr\">response:</span></span><br><span class=\"line\">        <span class=\"attr\">credential-type:</span> <span class=\"string\">x509</span></span><br><span class=\"line\">      <span class=\"attr\">attribute-query-profile-enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">prefix:</span> <span class=\"string\">http://cas.xyz327.cn</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此时访问 <span class=\"exturl\" data-url=\"aHR0cDovL2Nhcy54eXozMjcuY24vaWRwL21ldGFkYXRh\">http://cas.xyz327.cn/idp/metadata<i class=\"fa fa-external-link-alt\"></i></span> 就可以看到<code>CAS</code>作为<code>SAML</code>的<code>Identity Provider</code>的metaData信息</p>\n</blockquote>\n<h3 id=\"配置Jira\"><a href=\"#配置Jira\" class=\"headerlink\" title=\"配置Jira\"></a>配置Jira</h3><h4 id=\"给Jira安装SSO插件\"><a href=\"#给Jira安装SSO插件\" class=\"headerlink\" title=\"给Jira安装SSO插件\"></a>给Jira安装SSO插件</h4><p>插件管理里面搜索<code>SAML Single Sign On</code><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYXJrZXRwbGFjZS5hdGxhc3NpYW4uY29tL2FwcHMvMTIxMjEzMC9zYW1sLXNpbmdsZS1zaWduLW9uLXNzby1qaXJhLXNhbWwtc3NvP2hvc3Rpbmc9c2VydmVyJnRhYj1vdmVydmlldw==\">SAML Single Sign On (SSO) Jira SAML SSO<i class=\"fa fa-external-link-alt\"></i></span><br>其他两个系统的插件也叫这个名字</p>\n<h4 id=\"配置SSO插件信息\"><a href=\"#配置SSO插件信息\" class=\"headerlink\" title=\"配置SSO插件信息\"></a>配置SSO插件信息</h4><ol>\n<li>点击页面左边菜单的<code>SAML Single Sign On</code></li>\n<li>在弹出框中<code>Idp Type</code>选择 <code>Other SAML Identity Provider</code>, <code>Name</code>和<code>Description</code>按自己需求填写.点击下一步</li>\n<li>显示Jira作为<code>SP(Service Provide)</code>的相关配置,记录好<code>Metadata URL</code>的地址.在这里应该是<code>http://jira.xyz327.cn/plugins/servlet/samlsso/metadata</code>。点击下一步</li>\n<li>下拉选择<code>I have a metadata URL</code>，然后填入配置<code>CAS</code>的地址<code>http://cas.xyz327.cn/idp/metadata</code>,点击<code>Accpet all</code>，点击<code>import</code>,点击下一步</li>\n<li>选择匹配<code>Jira</code>userId的属性.使用默认的，点击下一步</li>\n<li>选择同步用户到jira的方式,我这边选择<code>Update Form SAML-Attributes</code>,从登陆用户的信息中创建用户</li>\n<li>勾选<code>create New User</code>和<code>Update non-SAML Provisioned Users</code>,<code>Directory for New Users</code>一栏选择<code>Jira Internal Directory</code>, <code>Full Name Attribute</code>输入<code>&#123;username&#125;</code>,<code>Email Attribute</code>输入<code>&#123;email&#125;</code>.下拉到<code>Group Settings</code>-&gt;<code>User Groups</code> 点击<code>Add one</code> 输入<code>jira-software-users</code>.  点击下一步</li>\n<li>点击<code>Skip test &amp; configure manually</code></li>\n<li>点击<code>Redirection</code>并勾选上<code>Enable SSO Redirect</code></li>\n<li>点击右上角的<code>Save Settings</code></li>\n</ol>\n<h3 id=\"给CAS添加-Jira-服务\"><a href=\"#给CAS添加-Jira-服务\" class=\"headerlink\" title=\"给CAS添加 Jira 服务\"></a>给CAS添加 Jira 服务</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;org.apereo.cas.support.saml.services.SamlRegisteredService&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;serviceId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://jira\\\\.xyz327\\\\.cn.*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;JIRASAMLService&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;evaluationOrder&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;metadataLocation&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://jira.xyz327.cn/plugins/servlet/samlsso/metadata&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;attributeReleasePolicy&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;allowedAttributes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"string\">&quot;username&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"string\">&quot;email&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"完成配置\"><a href=\"#完成配置\" class=\"headerlink\" title=\"完成配置\"></a>完成配置</h3><p>此时访问 <span class=\"exturl\" data-url=\"aHR0cDovL2ppcmEueHl6MzI3LmNuLw==\">http://jira.xyz327.cn<i class=\"fa fa-external-link-alt\"></i></span> 就会自动跳转到 <span class=\"exturl\" data-url=\"aHR0cDovL2Nhcy54eXozMjcuY24v\">http://cas.xyz327.cn<i class=\"fa fa-external-link-alt\"></i></span><br>完成登陆后，如果是第一次登陆就会自动创建用户</p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><blockquote>\n<p>对于Bitbucket 在<code>Directory for New Users</code>无法选择<code>Jira Internal Directory</code>.多以对于Bitbucket 可以选择不同用户信息.这样就会导致如果用户第一次登陆是登陆bitbucket的话那就会出现找不到用户的错误。可以在PageTemplate里面增加错误提示要求用户第一次登陆时需要先登录Jira&#x2F;Confluence</p>\n</blockquote>\n<p>贴一个错误的 errorPageTemplate</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>SAML Single Sign On failed<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  $webResourceManager.requireResource(&quot;$pluginproperties.pluginkey:resources&quot;)</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;decorator&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;atl.general&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-page-focused aui-page-medium&quot;</span> &gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-page-panel&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-page-panel-inner&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-page-panel-content&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>SAML Single Sign On failed<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Please contact your administrator       #if($tracker) and provide the tracker-id <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>$tracker<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span> #end      or log in at the <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;$loginurl&quot;</span>&gt;</span>login page<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      #if($userid)</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-message error&quot;</span>&gt;</span>$userid could not be authorized. This userid is unknown or the user does not have sufficient permissions.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      #end</span><br><span class=\"line\">      #if($message)</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-message error&quot;</span>&gt;</span>$message<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!-- 这里提示用户需要先登录jira --&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-message error&quot;</span>&gt;</span>如果提示找不到用户请先登录<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://jira.xyz327.cn/&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>jira<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      #end</span><br><span class=\"line\">      #if($stacktrace)</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;show-stacktrace-trigger&quot;</span> <span class=\"attr\">data-replace-text</span>=<span class=\"string\">&quot;Hide Stack Trace&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-expander-trigger button&quot;</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">&quot;stacktrace&quot;</span>&gt;</span>Show Stack Trace<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-expander-content&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;stacktrace&quot;</span>&gt;</span>$stacktrace<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      #end</span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","length":4373,"excerpt":"<h2 id=\"Jira-Bitbucket-Confluence\"><a href=\"#Jira-Bitbucket-Confluence\" class=\"headerlink\" title=\"Jira&#x2F;Bitbucket&#x2F;Confluence\"></a><a href=\"https://www.atlassian.com/software\">Jira&#x2F;Bitbucket&#x2F;Confluence</a></h2><p>项目代码托管，协作，问题追踪三件套。这三个软件同时使用时可以将用户统一托管给<code>Jira</code>管理.<br>但是一般公司会有自己的账户体系并且使用了 <code>CAS</code> 作为统一登录管理.<br>这个时候就可以将这三个系统的登录以及用户管理交由<code>CAS</code>来完成</p>\n<h2 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a><a href=\"https://apereo.github.io/cas\">CAS</a></h2><p>由耶鲁大学开源的一套单点登录系统<br>基于<code>SAML</code>协议来做SSO认证. CAS 可以支持多种认证协议.只需要做下简单的配置就行</p>","more":"<h2 id=\"开始配置-以Jira为例\"><a href=\"#开始配置-以Jira为例\" class=\"headerlink\" title=\"开始配置(以Jira为例)\"></a>开始配置(以Jira为例)</h2><blockquote>\n<p>假设jira的url为 <a href=\"http://jira.xyz327.cn/\">http://jira.xyz327.cn</a><br>CAS的url为 <a href=\"http://cas.xyz327.cn/\">http://cas.xyz327.cn</a></p>\n</blockquote>\n<h3 id=\"配置CAS支持SAML协议\"><a href=\"#配置CAS支持SAML协议\" class=\"headerlink\" title=\"配置CAS支持SAML协议\"></a>配置CAS支持SAML协议</h3><p>CAS 支持 <code>SAML</code> 具体请参考<a href=\"https://apereo.github.io/cas/5.3.x/installation/Configuring-SAML2-Authentication.html\">官方文档</a></p>\n<h4 id=\"增加SAML协议相关依赖\"><a href=\"#增加SAML协议相关依赖\" class=\"headerlink\" title=\"增加SAML协议相关依赖\"></a>增加SAML协议相关依赖</h4><p>给CAS添加saml相关依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--saml 协议--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apereo.cas<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cas-server-support-saml-idp-metadata-rest<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;cas.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apereo.cas<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cas-server-support-saml-idp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;cas.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"给CAS增加IDP的描述文件\"><a href=\"#给CAS增加IDP的描述文件\" class=\"headerlink\" title=\"给CAS增加IDP的描述文件\"></a>给CAS增加IDP的描述文件</h4><p>SAML默认配置是在 <code>/etc/cas/saml</code> 目录下,也可以使用 来手动指定 SAML配置目录<br>在spring-boot配置文件中增加以下配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cas:</span></span><br><span class=\"line\">  <span class=\"attr\">authn:</span></span><br><span class=\"line\">    <span class=\"attr\">saml-idp:</span></span><br><span class=\"line\">      <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">location:</span> <span class=\"string\">saml</span></span><br><span class=\"line\">      <span class=\"attr\">entity-id:</span> <span class=\"string\">http://cas.xyz327.cn/idp</span></span><br><span class=\"line\">      <span class=\"attr\">scope:</span> <span class=\"string\">http://cas.xyz327.cn</span></span><br><span class=\"line\">      <span class=\"attr\">response:</span></span><br><span class=\"line\">        <span class=\"attr\">credential-type:</span> <span class=\"string\">x509</span></span><br><span class=\"line\">      <span class=\"attr\">attribute-query-profile-enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">prefix:</span> <span class=\"string\">http://cas.xyz327.cn</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此时访问 <a href=\"http://cas.xyz327.cn/idp/metadata\">http://cas.xyz327.cn/idp/metadata</a> 就可以看到<code>CAS</code>作为<code>SAML</code>的<code>Identity Provider</code>的metaData信息</p>\n</blockquote>\n<h3 id=\"配置Jira\"><a href=\"#配置Jira\" class=\"headerlink\" title=\"配置Jira\"></a>配置Jira</h3><h4 id=\"给Jira安装SSO插件\"><a href=\"#给Jira安装SSO插件\" class=\"headerlink\" title=\"给Jira安装SSO插件\"></a>给Jira安装SSO插件</h4><p>插件管理里面搜索<code>SAML Single Sign On</code><br><a href=\"https://marketplace.atlassian.com/apps/1212130/saml-single-sign-on-sso-jira-saml-sso?hosting=server&tab=overview\">SAML Single Sign On (SSO) Jira SAML SSO</a><br>其他两个系统的插件也叫这个名字</p>\n<h4 id=\"配置SSO插件信息\"><a href=\"#配置SSO插件信息\" class=\"headerlink\" title=\"配置SSO插件信息\"></a>配置SSO插件信息</h4><ol>\n<li>点击页面左边菜单的<code>SAML Single Sign On</code></li>\n<li>在弹出框中<code>Idp Type</code>选择 <code>Other SAML Identity Provider</code>, <code>Name</code>和<code>Description</code>按自己需求填写.点击下一步</li>\n<li>显示Jira作为<code>SP(Service Provide)</code>的相关配置,记录好<code>Metadata URL</code>的地址.在这里应该是<code>http://jira.xyz327.cn/plugins/servlet/samlsso/metadata</code>。点击下一步</li>\n<li>下拉选择<code>I have a metadata URL</code>，然后填入配置<code>CAS</code>的地址<code>http://cas.xyz327.cn/idp/metadata</code>,点击<code>Accpet all</code>，点击<code>import</code>,点击下一步</li>\n<li>选择匹配<code>Jira</code>userId的属性.使用默认的，点击下一步</li>\n<li>选择同步用户到jira的方式,我这边选择<code>Update Form SAML-Attributes</code>,从登陆用户的信息中创建用户</li>\n<li>勾选<code>create New User</code>和<code>Update non-SAML Provisioned Users</code>,<code>Directory for New Users</code>一栏选择<code>Jira Internal Directory</code>, <code>Full Name Attribute</code>输入<code>&#123;username&#125;</code>,<code>Email Attribute</code>输入<code>&#123;email&#125;</code>.下拉到<code>Group Settings</code>-&gt;<code>User Groups</code> 点击<code>Add one</code> 输入<code>jira-software-users</code>.  点击下一步</li>\n<li>点击<code>Skip test &amp; configure manually</code></li>\n<li>点击<code>Redirection</code>并勾选上<code>Enable SSO Redirect</code></li>\n<li>点击右上角的<code>Save Settings</code></li>\n</ol>\n<h3 id=\"给CAS添加-Jira-服务\"><a href=\"#给CAS添加-Jira-服务\" class=\"headerlink\" title=\"给CAS添加 Jira 服务\"></a>给CAS添加 Jira 服务</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;org.apereo.cas.support.saml.services.SamlRegisteredService&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;serviceId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://jira\\\\.xyz327\\\\.cn.*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;JIRASAMLService&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;evaluationOrder&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;metadataLocation&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://jira.xyz327.cn/plugins/servlet/samlsso/metadata&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;attributeReleasePolicy&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;allowedAttributes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"string\">&quot;username&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"string\">&quot;email&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"完成配置\"><a href=\"#完成配置\" class=\"headerlink\" title=\"完成配置\"></a>完成配置</h3><p>此时访问 <a href=\"http://jira.xyz327.cn/\">http://jira.xyz327.cn</a> 就会自动跳转到 <a href=\"http://cas.xyz327.cn/\">http://cas.xyz327.cn</a><br>完成登陆后，如果是第一次登陆就会自动创建用户</p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><blockquote>\n<p>对于Bitbucket 在<code>Directory for New Users</code>无法选择<code>Jira Internal Directory</code>.多以对于Bitbucket 可以选择不同用户信息.这样就会导致如果用户第一次登陆是登陆bitbucket的话那就会出现找不到用户的错误。可以在PageTemplate里面增加错误提示要求用户第一次登陆时需要先登录Jira&#x2F;Confluence</p>\n</blockquote>\n<p>贴一个错误的 errorPageTemplate</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>SAML Single Sign On failed<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  $webResourceManager.requireResource(&quot;$pluginproperties.pluginkey:resources&quot;)</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;decorator&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;atl.general&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-page-focused aui-page-medium&quot;</span> &gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-page-panel&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-page-panel-inner&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-page-panel-content&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>SAML Single Sign On failed<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Please contact your administrator       #if($tracker) and provide the tracker-id <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>$tracker<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span> #end      or log in at the <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;$loginurl&quot;</span>&gt;</span>login page<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      #if($userid)</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-message error&quot;</span>&gt;</span>$userid could not be authorized. This userid is unknown or the user does not have sufficient permissions.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      #end</span><br><span class=\"line\">      #if($message)</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-message error&quot;</span>&gt;</span>$message<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!-- 这里提示用户需要先登录jira --&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-message error&quot;</span>&gt;</span>如果提示找不到用户请先登录<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://jira.xyz327.cn/&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>jira<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      #end</span><br><span class=\"line\">      #if($stacktrace)</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;show-stacktrace-trigger&quot;</span> <span class=\"attr\">data-replace-text</span>=<span class=\"string\">&quot;Hide Stack Trace&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-expander-trigger button&quot;</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">&quot;stacktrace&quot;</span>&gt;</span>Show Stack Trace<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aui-expander-content&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;stacktrace&quot;</span>&gt;</span>$stacktrace<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      #end</span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"Jira/Bitbucket/Confluence使用CAS完成SSO","path":"2020/04/29/Jira-Bitbucket-Confluence使用CAS完成SSO/","eyeCatchImage":null,"excerpt":"<h2 id=\"Jira-Bitbucket-Confluence\"><a href=\"#Jira-Bitbucket-Confluence\" class=\"headerlink\" title=\"Jira&#x2F;Bitbucket&#x2F;Confluence\"></a><a href=\"https://www.atlassian.com/software\">Jira&#x2F;Bitbucket&#x2F;Confluence</a></h2><p>项目代码托管，协作，问题追踪三件套。这三个软件同时使用时可以将用户统一托管给<code>Jira</code>管理.<br>但是一般公司会有自己的账户体系并且使用了 <code>CAS</code> 作为统一登录管理.<br>这个时候就可以将这三个系统的登录以及用户管理交由<code>CAS</code>来完成</p>\n<h2 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a><a href=\"https://apereo.github.io/cas\">CAS</a></h2><p>由耶鲁大学开源的一套单点登录系统<br>基于<code>SAML</code>协议来做SSO认证. CAS 可以支持多种认证协议.只需要做下简单的配置就行</p>","date":{"_isAMomentObject":true,"_i":"2020-04-29T13:35:29.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-04-29T13:35:29.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Fastjson反序列化使用new ParameterizedTypeImpl导致内存泄漏","originContent":"","toc":true,"date":"2020-08-23T08:42:45.000Z","keywords":null,"_content":"\n## 问题起因\n\n在公司接口使用了统一的数据返回格式\n\n```\n{\n  \"code\":0,\n  \"msg\": \"\",\n  \"data\": ...\n}\n```\n\n但是在实现接口 sdk 时只需要 data 类型就够了。\n```java\npublic interface TestApi{\n    \n    @GetMapping(\"status\")\n    public Boolean getStatus();\n}\n```\n\n所以在反序列化时使用了 fastjson 通过 ParameterizedTypeImpl 来实现.\n\n### 以下是测试 OOM 的代码\n\n```java\n    @Test\n    @SneakyThrows\n    public void fastjsonParseParameterizedTypeMemTest() {\n        String jsonString = JSONObject.toJSONString(ApiResult.success(true));\n        FastJsonConfig fastJsonConfig = new FastJsonConfig();\n        for (;;){\n            ParameterizedTypeImpl type = new ParameterizedTypeImpl(new Type[]{Boolean.class}, null, ApiResult.class);\n            JSON.parseObject(jsonString,\n                type,\n                fastJsonConfig.getParserConfig(),\n                fastJsonConfig.getParseProcess(),\n                JSON.DEFAULT_PARSER_FEATURE,\n                fastJsonConfig.getFeatures());\n\n              int size = ParserConfig.global.getDeserializers().size();\n            log.info(\"deserializers size: {}\", size);\n        }\n    }\n```\n\n在 fastjson 的实现中或通过类型去获取对应的`ObjectDeserializer`对象来实现反序列化，并且会使用 `type: ObjectDeserializer` 这样的键值对缓存起来. 但是 fastjson 的这个缓存实现的 key 判断使用了 `System.identityHashCode`. 这个方法判断对象是否相等就想到与使用`==` 来判断. 由于我们每次反序列化时都是 new 一个新对象，从而导致每次判断都不相等. 在上面的测试中就会发现 deserializers 的大小越来越大。最终导致 OOM。\n\n## 解决方案\n\n在查看 fastjson 的releasenote 后发现 fastjson 在 1.2.73 版本修复了这个问题。\n\n> 但是 ParameterizedTypeImpl 必须要使用`com.alibaba.fastjson.util.ParameterizedTypeImpl` 或者其子类\n\n所以对于这个问题我们只需要\n\n1. 升级 fastjson 版本 >= 1.2.73\n2. 使用`com.alibaba.fastjson.util.ParameterizedTypeImpl`\n\n","source":"_posts/2020/08/Fastjson反序列化使用new-ParameterizedTypeImpl导致内存泄漏.md","raw":"---\ntitle: Fastjson反序列化使用new ParameterizedTypeImpl导致内存泄漏\n\ntags:\n  - java\n  - fastjson\ncategories:\n  - java\n  - fastjson\noriginContent: ''\ntoc: true\ndate: 2020-08-23 16:42:45\nkeywords:\n---\n\n## 问题起因\n\n在公司接口使用了统一的数据返回格式\n\n```\n{\n  \"code\":0,\n  \"msg\": \"\",\n  \"data\": ...\n}\n```\n\n但是在实现接口 sdk 时只需要 data 类型就够了。\n```java\npublic interface TestApi{\n    \n    @GetMapping(\"status\")\n    public Boolean getStatus();\n}\n```\n\n所以在反序列化时使用了 fastjson 通过 ParameterizedTypeImpl 来实现.\n\n### 以下是测试 OOM 的代码\n\n```java\n    @Test\n    @SneakyThrows\n    public void fastjsonParseParameterizedTypeMemTest() {\n        String jsonString = JSONObject.toJSONString(ApiResult.success(true));\n        FastJsonConfig fastJsonConfig = new FastJsonConfig();\n        for (;;){\n            ParameterizedTypeImpl type = new ParameterizedTypeImpl(new Type[]{Boolean.class}, null, ApiResult.class);\n            JSON.parseObject(jsonString,\n                type,\n                fastJsonConfig.getParserConfig(),\n                fastJsonConfig.getParseProcess(),\n                JSON.DEFAULT_PARSER_FEATURE,\n                fastJsonConfig.getFeatures());\n\n              int size = ParserConfig.global.getDeserializers().size();\n            log.info(\"deserializers size: {}\", size);\n        }\n    }\n```\n\n在 fastjson 的实现中或通过类型去获取对应的`ObjectDeserializer`对象来实现反序列化，并且会使用 `type: ObjectDeserializer` 这样的键值对缓存起来. 但是 fastjson 的这个缓存实现的 key 判断使用了 `System.identityHashCode`. 这个方法判断对象是否相等就想到与使用`==` 来判断. 由于我们每次反序列化时都是 new 一个新对象，从而导致每次判断都不相等. 在上面的测试中就会发现 deserializers 的大小越来越大。最终导致 OOM。\n\n## 解决方案\n\n在查看 fastjson 的releasenote 后发现 fastjson 在 1.2.73 版本修复了这个问题。\n\n> 但是 ParameterizedTypeImpl 必须要使用`com.alibaba.fastjson.util.ParameterizedTypeImpl` 或者其子类\n\n所以对于这个问题我们只需要\n\n1. 升级 fastjson 版本 >= 1.2.73\n2. 使用`com.alibaba.fastjson.util.ParameterizedTypeImpl`\n\n","slug":"Fastjson反序列化使用new-ParameterizedTypeImpl导致内存泄漏","published":1,"updated":"2023-12-19T09:19:23.183Z","comments":1,"layout":"post","photos":[],"_id":"clqc6ydrg003zfki4ejb0ax0m","content":"<h2 id=\"问题起因\"><a href=\"#问题起因\" class=\"headerlink\" title=\"问题起因\"></a>问题起因</h2><p>在公司接口使用了统一的数据返回格式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;<span class=\"selector-tag\">code</span>&quot;:<span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;data&quot;</span>: ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是在实现接口 sdk 时只需要 data 类型就够了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">TestApi</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;status&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">getStatus</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以在反序列化时使用了 fastjson 通过 ParameterizedTypeImpl 来实现.</p>\n<h3 id=\"以下是测试-OOM-的代码\"><a href=\"#以下是测试-OOM-的代码\" class=\"headerlink\" title=\"以下是测试 OOM 的代码\"></a>以下是测试 OOM 的代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"meta\">@SneakyThrows</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fastjsonParseParameterizedTypeMemTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> JSONObject.toJSONString(ApiResult.success(<span class=\"literal\">true</span>));</span><br><span class=\"line\">    <span class=\"type\">FastJsonConfig</span> <span class=\"variable\">fastJsonConfig</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FastJsonConfig</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;)&#123;</span><br><span class=\"line\">        <span class=\"type\">ParameterizedTypeImpl</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ParameterizedTypeImpl</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Type</span>[]&#123;Boolean.class&#125;, <span class=\"literal\">null</span>, ApiResult.class);</span><br><span class=\"line\">        JSON.parseObject(jsonString,</span><br><span class=\"line\">            type,</span><br><span class=\"line\">            fastJsonConfig.getParserConfig(),</span><br><span class=\"line\">            fastJsonConfig.getParseProcess(),</span><br><span class=\"line\">            JSON.DEFAULT_PARSER_FEATURE,</span><br><span class=\"line\">            fastJsonConfig.getFeatures());</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> ParserConfig.global.getDeserializers().size();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;deserializers size: &#123;&#125;&quot;</span>, size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 fastjson 的实现中或通过类型去获取对应的<code>ObjectDeserializer</code>对象来实现反序列化，并且会使用 <code>type: ObjectDeserializer</code> 这样的键值对缓存起来. 但是 fastjson 的这个缓存实现的 key 判断使用了 <code>System.identityHashCode</code>. 这个方法判断对象是否相等就想到与使用<code>==</code> 来判断. 由于我们每次反序列化时都是 new 一个新对象，从而导致每次判断都不相等. 在上面的测试中就会发现 deserializers 的大小越来越大。最终导致 OOM。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>在查看 fastjson 的releasenote 后发现 fastjson 在 1.2.73 版本修复了这个问题。</p>\n<blockquote>\n<p>但是 ParameterizedTypeImpl 必须要使用<code>com.alibaba.fastjson.util.ParameterizedTypeImpl</code> 或者其子类</p>\n</blockquote>\n<p>所以对于这个问题我们只需要</p>\n<ol>\n<li>升级 fastjson 版本 &gt;&#x3D; 1.2.73</li>\n<li>使用<code>com.alibaba.fastjson.util.ParameterizedTypeImpl</code></li>\n</ol>\n","length":1364,"excerpt":"","more":"<h2 id=\"问题起因\"><a href=\"#问题起因\" class=\"headerlink\" title=\"问题起因\"></a>问题起因</h2><p>在公司接口使用了统一的数据返回格式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;<span class=\"selector-tag\">code</span>&quot;:<span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;data&quot;</span>: ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是在实现接口 sdk 时只需要 data 类型就够了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">TestApi</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;status&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">getStatus</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以在反序列化时使用了 fastjson 通过 ParameterizedTypeImpl 来实现.</p>\n<h3 id=\"以下是测试-OOM-的代码\"><a href=\"#以下是测试-OOM-的代码\" class=\"headerlink\" title=\"以下是测试 OOM 的代码\"></a>以下是测试 OOM 的代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"meta\">@SneakyThrows</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fastjsonParseParameterizedTypeMemTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> JSONObject.toJSONString(ApiResult.success(<span class=\"literal\">true</span>));</span><br><span class=\"line\">    <span class=\"type\">FastJsonConfig</span> <span class=\"variable\">fastJsonConfig</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FastJsonConfig</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;)&#123;</span><br><span class=\"line\">        <span class=\"type\">ParameterizedTypeImpl</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ParameterizedTypeImpl</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Type</span>[]&#123;Boolean.class&#125;, <span class=\"literal\">null</span>, ApiResult.class);</span><br><span class=\"line\">        JSON.parseObject(jsonString,</span><br><span class=\"line\">            type,</span><br><span class=\"line\">            fastJsonConfig.getParserConfig(),</span><br><span class=\"line\">            fastJsonConfig.getParseProcess(),</span><br><span class=\"line\">            JSON.DEFAULT_PARSER_FEATURE,</span><br><span class=\"line\">            fastJsonConfig.getFeatures());</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> ParserConfig.global.getDeserializers().size();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;deserializers size: &#123;&#125;&quot;</span>, size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 fastjson 的实现中或通过类型去获取对应的<code>ObjectDeserializer</code>对象来实现反序列化，并且会使用 <code>type: ObjectDeserializer</code> 这样的键值对缓存起来. 但是 fastjson 的这个缓存实现的 key 判断使用了 <code>System.identityHashCode</code>. 这个方法判断对象是否相等就想到与使用<code>==</code> 来判断. 由于我们每次反序列化时都是 new 一个新对象，从而导致每次判断都不相等. 在上面的测试中就会发现 deserializers 的大小越来越大。最终导致 OOM。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>在查看 fastjson 的releasenote 后发现 fastjson 在 1.2.73 版本修复了这个问题。</p>\n<blockquote>\n<p>但是 ParameterizedTypeImpl 必须要使用<code>com.alibaba.fastjson.util.ParameterizedTypeImpl</code> 或者其子类</p>\n</blockquote>\n<p>所以对于这个问题我们只需要</p>\n<ol>\n<li>升级 fastjson 版本 &gt;&#x3D; 1.2.73</li>\n<li>使用<code>com.alibaba.fastjson.util.ParameterizedTypeImpl</code></li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 19 2023 17:19:23 GMT+0800 (中国标准时间)","title":"Fastjson反序列化使用new ParameterizedTypeImpl导致内存泄漏","path":"2020/08/23/Fastjson反序列化使用new-ParameterizedTypeImpl导致内存泄漏/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2020-08-23T08:42:45.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-08-23T08:42:45.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"java > fastjson","tags":["java","fastjson"],"internalLinks":[],"keywords":[],"keywordsLength":0}}],"PostAsset":[{"_id":"source/_posts/2019/01/sentinel相关概念/令牌桶.png","post":"clqc6ydr0002ffki4ec9q2uit","slug":"令牌桶.png","modified":1,"renderable":0},{"_id":"source/_posts/2019/01/sentinel相关概念/漏桶.png","post":"clqc6ydr0002ffki4ec9q2uit","slug":"漏桶.png","modified":1,"renderable":0},{"_id":"source/_posts/2019/01/sentinel相关概念/集群限流-嵌入模式.png","post":"clqc6ydr0002ffki4ec9q2uit","slug":"集群限流-嵌入模式.png","modified":1,"renderable":0},{"_id":"source/_posts/2019/01/sentinel相关概念/集群限流-独立模式.png","post":"clqc6ydr0002ffki4ec9q2uit","slug":"集群限流-独立模式.png","modified":1,"renderable":0},{"_id":"source/_posts/2019/09/spring-message/spring-message-1.png","post":"clqc6ydr1002jfki42s1i33i4","slug":"spring-message-1.png","modified":1,"renderable":0},{"_id":"source/_posts/2019/09/spring-message/spring-message-2.png","post":"clqc6ydr1002jfki42s1i33i4","slug":"spring-message-2.png","modified":1,"renderable":0},{"_id":"source/_posts/2019/09/spring-message/spring-messaging-2.png","post":"clqc6ydr1002jfki42s1i33i4","slug":"spring-messaging-2.png","modified":1,"renderable":0},{"_id":"source/_posts/2018/12/sentinel学习笔记-1/主要特性.png","post":"clqc6ydr3002pfki47urybgyw","slug":"主要特性.png","modified":1,"renderable":0},{"_id":"source/_posts/2020/02/Git-Commit规范/idea-commit-1.png","post":"clqc6ydra003ffki4fwdu0163","slug":"idea-commit-1.png","modified":1,"renderable":0},{"_id":"source/_posts/2020/02/Git-Commit规范/idea-commit-2.png","post":"clqc6ydra003ffki4fwdu0163","slug":"idea-commit-2.png","modified":1,"renderable":0},{"_id":"source/_posts/2020/02/git-workflow之gitflow说明/o_git-workflow-release-cycle-1historical.png","post":"clqc6ydrd003qfki40t5g5c1l","slug":"o_git-workflow-release-cycle-1historical.png","modified":1,"renderable":0},{"_id":"source/_posts/2020/02/git-workflow之gitflow说明/o_git-workflow-release-cycle-2feature.png","post":"clqc6ydrd003qfki40t5g5c1l","slug":"o_git-workflow-release-cycle-2feature.png","modified":1,"renderable":0},{"_id":"source/_posts/2020/02/git-workflow之gitflow说明/o_git-workflow-release-cycle-3release.png","post":"clqc6ydrd003qfki40t5g5c1l","slug":"o_git-workflow-release-cycle-3release.png","modified":1,"renderable":0},{"_id":"source/_posts/2020/02/git-workflow之gitflow说明/o_git-workflow-release-cycle-4maintenance.png","post":"clqc6ydrd003qfki40t5g5c1l","slug":"o_git-workflow-release-cycle-4maintenance.png","modified":1,"renderable":0},{"_id":"source/_posts/2020/02/git-workflow之gitflow的工具/idea-gitflow-1.png","post":"clqc6ydre003tfki4ekd3hlle","slug":"idea-gitflow-1.png","modified":1,"renderable":0}],"PostCategory":[{"post_id":"clqc6ydq00002fki45lcw1u1g","category_id":"clqc6ydq40005fki49kyhavjb","_id":"clqc6ydqd000jfki419em9nun"},{"post_id":"clqc6ydq30004fki40tc4g26i","category_id":"clqc6ydqa000dfki4dsg9eido","_id":"clqc6ydqg000qfki46san61uv"},{"post_id":"clqc6ydq60008fki49ico1sea","category_id":"clqc6ydqd000kfki45jfj8zyu","_id":"clqc6ydqk000zfki40ers15o1"},{"post_id":"clqc6ydq8000afki4f8mee7pt","category_id":"clqc6ydqd000kfki45jfj8zyu","_id":"clqc6ydqm0015fki42uxp7ohh"},{"post_id":"clqc6ydqa000cfki44os29nex","category_id":"clqc6ydqk000yfki4ftuh5lbz","_id":"clqc6ydqp001bfki46jgx0wsw"},{"post_id":"clqc6ydqo001afki4ho7461kc","category_id":"clqc6ydqm0016fki400hp1cac","_id":"clqc6ydqr001ifki494bz9q0l"},{"post_id":"clqc6ydqd000ifki4dhdp9sey","category_id":"clqc6ydqm0016fki400hp1cac","_id":"clqc6ydqs001mfki4ez2rgm7f"},{"post_id":"clqc6ydqp001cfki43wnd9s6q","category_id":"clqc6ydqm0016fki400hp1cac","_id":"clqc6ydqt001pfki45ubo6pjv"},{"post_id":"clqc6ydqq001gfki4fxiugk1d","category_id":"clqc6ydqm0016fki400hp1cac","_id":"clqc6ydqu001tfki410f98ay4"},{"post_id":"clqc6ydqf000pfki46azb0d8y","category_id":"clqc6ydqq001dfki4896bheqb","_id":"clqc6ydqv001wfki49in06vmk"},{"post_id":"clqc6ydqs001lfki4a6apbamv","category_id":"clqc6ydqm0016fki400hp1cac","_id":"clqc6ydqw0020fki45z8q4urz"},{"post_id":"clqc6ydqi000ufki4agficwtt","category_id":"clqc6ydqm0016fki400hp1cac","_id":"clqc6ydqx0023fki46j5z5n2v"},{"post_id":"clqc6ydqj000wfki4c3drf7p3","category_id":"clqc6ydqm0016fki400hp1cac","_id":"clqc6ydqy0027fki4hw9xc7ny"},{"post_id":"clqc6ydqk0011fki442sqf8gr","category_id":"clqc6ydqm0016fki400hp1cac","_id":"clqc6ydqz002bfki407up7qcb"},{"post_id":"clqc6ydql0013fki4euby6n5v","category_id":"clqc6ydqm0016fki400hp1cac","_id":"clqc6ydr1002hfki48bn3dyeo"},{"post_id":"clqc6ydqm0017fki42sczbe50","category_id":"clqc6ydqm0016fki400hp1cac","_id":"clqc6ydr2002mfki4f2tuc9z2"},{"post_id":"clqc6ydqr001hfki47kz08zg6","category_id":"clqc6ydr1002gfki4710b32lq","_id":"clqc6ydr4002sfki47p60gqch"},{"post_id":"clqc6ydqt001ofki45x830sy4","category_id":"clqc6ydr3002nfki437kf85qv","_id":"clqc6ydr6002yfki46q0abg6m"},{"post_id":"clqc6ydqu001sfki49c9w88gp","category_id":"clqc6ydr4002tfki4bekk0f7u","_id":"clqc6ydr80036fki4ayzp5im7"},{"post_id":"clqc6ydqv001vfki47rtr6nv9","category_id":"clqc6ydr70031fki44qxtgit3","_id":"clqc6ydra003cfki42pab4q47"},{"post_id":"clqc6ydqw001zfki47mne3nud","category_id":"clqc6ydr80037fki4h7shbfyf","_id":"clqc6ydrb003ifki4en2b8ih0"},{"post_id":"clqc6ydra003ffki4fwdu0163","category_id":"clqc6ydqa000dfki4dsg9eido","_id":"clqc6ydrd003ofki4ghlw5hzf"},{"post_id":"clqc6ydqx0022fki4g5ppdvtb","category_id":"clqc6ydra003dfki4g8j22cw1","_id":"clqc6ydre003rfki4c3uhbhmr"},{"post_id":"clqc6ydqy0026fki45rfw637f","category_id":"clqc6ydrc003kfki44rv3drek","_id":"clqc6ydrf003wfki4hci77ic1"},{"post_id":"clqc6ydrd003qfki40t5g5c1l","category_id":"clqc6ydqa000dfki4dsg9eido","_id":"clqc6ydrg0040fki4amlf1oa8"},{"post_id":"clqc6ydre003tfki4ekd3hlle","category_id":"clqc6ydqa000dfki4dsg9eido","_id":"clqc6ydrh0043fki40nr77byj"},{"post_id":"clqc6ydqz0029fki4c9wqfvur","category_id":"clqc6ydre003sfki44y85ds3u","_id":"clqc6ydrh0045fki44mqzf5jy"},{"post_id":"clqc6ydr0002dfki43q36hkid","category_id":"clqc6ydra003dfki4g8j22cw1","_id":"clqc6ydri0048fki4een2hd4z"},{"post_id":"clqc6ydr0002ffki4ec9q2uit","category_id":"clqc6ydre003sfki44y85ds3u","_id":"clqc6ydri004cfki4d9sm7cfp"},{"post_id":"clqc6ydr1002jfki42s1i33i4","category_id":"clqc6ydra003dfki4g8j22cw1","_id":"clqc6ydrj004gfki4cqzaarmc"},{"post_id":"clqc6ydr3002pfki47urybgyw","category_id":"clqc6ydre003sfki44y85ds3u","_id":"clqc6ydrj004jfki4fki0fcvc"},{"post_id":"clqc6ydr4002rfki44h5ygk2t","category_id":"clqc6ydrj004ffki45hfdfzeo","_id":"clqc6ydrk004ofki4gwtpbv0n"},{"post_id":"clqc6ydr5002vfki4e0hx8xki","category_id":"clqc6ydrj004ffki45hfdfzeo","_id":"clqc6ydrk004rfki4f99x4mcu"},{"post_id":"clqc6ydr70033fki43vcx98r8","category_id":"clqc6ydra003dfki4g8j22cw1","_id":"clqc6ydrm0052fki41wfr9k8k"},{"post_id":"clqc6ydr80035fki4foxl1jlg","category_id":"clqc6ydra003dfki4g8j22cw1","_id":"clqc6ydrn0056fki4ardf5b3j"},{"post_id":"clqc6ydr90039fki4ct2ugame","category_id":"clqc6ydra003dfki4g8j22cw1","_id":"clqc6ydrn0059fki44j7q9aat"},{"post_id":"clqc6ydr9003bfki4a3sn5t2z","category_id":"clqc6ydrm0055fki44pde5207","_id":"clqc6ydro005dfki4c9ha7wox"},{"post_id":"clqc6ydrb003gfki43qkg7s8s","category_id":"clqc6ydrn005afki46uhggorc","_id":"clqc6ydro005hfki49bti8y9c"},{"post_id":"clqc6ydrc003nfki41qjegpuw","category_id":"clqc6ydqm0016fki400hp1cac","_id":"clqc6ydrp005ofki45dn96o3m"},{"post_id":"clqc6ydrc003nfki41qjegpuw","category_id":"clqc6ydro005ifki46240a9uz","_id":"clqc6ydrq005sfki48vgdefl1"},{"post_id":"clqc6ydrg003zfki4ejb0ax0m","category_id":"clqc6ydqm0016fki400hp1cac","_id":"clqc6ydrs005tfki411k2fgxq"},{"post_id":"clqc6ydrg003zfki4ejb0ax0m","category_id":"clqc6ydrp005mfki4196zdszf","_id":"clqc6ydrt005wfki4bc1v072x"},{"post_id":"clqc6ydr6002xfki4df00f274","category_id":"clqc6ydrk004nfki49z8v4a3b","_id":"clqc6ydrt005yfki44cx53c55"},{"post_id":"clqc6ydr6002xfki4df00f274","category_id":"clqc6ydrp005qfki4h7sj99cw","_id":"clqc6ydru0061fki4bwfn9his"},{"post_id":"clqc6ydr60030fki4h0e9e5ej","category_id":"clqc6ydrk004nfki49z8v4a3b","_id":"clqc6ydru0063fki4d8kp96ih"},{"post_id":"clqc6ydr60030fki4h0e9e5ej","category_id":"clqc6ydrp005qfki4h7sj99cw","_id":"clqc6ydru0065fki45q8hg0mk"},{"post_id":"clqc6ydrc003lfki478fp0uz3","category_id":"clqc6ydro005efki4dvcyejnn","_id":"clqc6ydru0067fki46s6m5xou"},{"post_id":"clqc6ydrc003lfki478fp0uz3","category_id":"clqc6ydrt005xfki487v69bg8","_id":"clqc6ydru0069fki4b3yag4qj"}],"PostTag":[{"post_id":"clqc6ydq00002fki45lcw1u1g","tag_id":"clqc6ydq50006fki4hmz12ex2","_id":"clqc6ydqj000vfki4ho0pgslo"},{"post_id":"clqc6ydq00002fki45lcw1u1g","tag_id":"clqc6ydqa000efki4btqqfkpc","_id":"clqc6ydqk000xfki43yp7g53w"},{"post_id":"clqc6ydq00002fki45lcw1u1g","tag_id":"clqc6ydqd000lfki41rsxbssc","_id":"clqc6ydql0012fki4fdh6476u"},{"post_id":"clqc6ydq30004fki40tc4g26i","tag_id":"clqc6ydqg000sfki41235813e","_id":"clqc6ydqm0014fki4hvd2go51"},{"post_id":"clqc6ydq60008fki49ico1sea","tag_id":"clqc6ydqk0010fki48cq85vlh","_id":"clqc6ydqo0019fki44f34dr06"},{"post_id":"clqc6ydq8000afki4f8mee7pt","tag_id":"clqc6ydqk0010fki48cq85vlh","_id":"clqc6ydqq001ffki43r0m3que"},{"post_id":"clqc6ydqa000cfki44os29nex","tag_id":"clqc6ydqq001efki403276jg7","_id":"clqc6ydqs001nfki40vxhcxs0"},{"post_id":"clqc6ydqb000gfki404bvc238","tag_id":"clqc6ydqs001kfki4he3a0ja0","_id":"clqc6ydqu001ufki4fmy1gm1q"},{"post_id":"clqc6ydqd000ifki4dhdp9sey","tag_id":"clqc6ydqt001rfki4cbmh995x","_id":"clqc6ydqw0021fki4cp2b88ms"},{"post_id":"clqc6ydqi000ufki4agficwtt","tag_id":"clqc6ydqt001rfki4cbmh995x","_id":"clqc6ydqz0028fki42y7kagqo"},{"post_id":"clqc6ydqj000wfki4c3drf7p3","tag_id":"clqc6ydqt001rfki4cbmh995x","_id":"clqc6ydr0002efki49w5aaidc"},{"post_id":"clqc6ydqk0011fki442sqf8gr","tag_id":"clqc6ydqt001rfki4cbmh995x","_id":"clqc6ydr2002kfki4a1kb6i47"},{"post_id":"clqc6ydql0013fki4euby6n5v","tag_id":"clqc6ydqt001rfki4cbmh995x","_id":"clqc6ydr3002qfki41uf70k8s"},{"post_id":"clqc6ydqm0017fki42sczbe50","tag_id":"clqc6ydqt001rfki4cbmh995x","_id":"clqc6ydr5002wfki4akh05oln"},{"post_id":"clqc6ydqo001afki4ho7461kc","tag_id":"clqc6ydqt001rfki4cbmh995x","_id":"clqc6ydr70032fki47oxn36b7"},{"post_id":"clqc6ydqp001cfki43wnd9s6q","tag_id":"clqc6ydqt001rfki4cbmh995x","_id":"clqc6ydr90038fki429ge7p9f"},{"post_id":"clqc6ydqq001gfki4fxiugk1d","tag_id":"clqc6ydqt001rfki4cbmh995x","_id":"clqc6ydra003efki485267pmj"},{"post_id":"clqc6ydra003ffki4fwdu0163","tag_id":"clqc6ydqg000sfki41235813e","_id":"clqc6ydrc003jfki4gjzp40co"},{"post_id":"clqc6ydqr001hfki47kz08zg6","tag_id":"clqc6ydr9003afki4buj04cdu","_id":"clqc6ydrc003mfki4336gaxxf"},{"post_id":"clqc6ydqs001lfki4a6apbamv","tag_id":"clqc6ydrb003hfki41nwx8g96","_id":"clqc6ydrg003yfki48p8901w6"},{"post_id":"clqc6ydqs001lfki4a6apbamv","tag_id":"clqc6ydrd003pfki40xcf4i9k","_id":"clqc6ydrg0041fki47qfw3vyp"},{"post_id":"clqc6ydqt001ofki45x830sy4","tag_id":"clqc6ydrf003ufki4cfxm8w6w","_id":"clqc6ydri0049fki4gtxhcktn"},{"post_id":"clqc6ydqt001ofki45x830sy4","tag_id":"clqc6ydrh0042fki4bp35dnh6","_id":"clqc6ydri004afki49vdw0sxw"},{"post_id":"clqc6ydqu001sfki49c9w88gp","tag_id":"clqc6ydrh0046fki441s26n0d","_id":"clqc6ydrj004efki46phi8idn"},{"post_id":"clqc6ydqw001zfki47mne3nud","tag_id":"clqc6ydri004dfki41eh2196f","_id":"clqc6ydrj004ifki4c1397qf2"},{"post_id":"clqc6ydqz0029fki4c9wqfvur","tag_id":"clqc6ydrj004hfki44c8p1azj","_id":"clqc6ydrk004mfki4gfco6q6b"},{"post_id":"clqc6ydr0002ffki4ec9q2uit","tag_id":"clqc6ydrj004hfki44c8p1azj","_id":"clqc6ydrk004qfki42wh78vlw"},{"post_id":"clqc6ydr1002jfki42s1i33i4","tag_id":"clqc6ydrk004pfki47lbu2d1z","_id":"clqc6ydrl004ufki4bkrcgv2l"},{"post_id":"clqc6ydr3002pfki47urybgyw","tag_id":"clqc6ydrj004hfki44c8p1azj","_id":"clqc6ydrl004xfki47f48f5jc"},{"post_id":"clqc6ydr4002rfki44h5ygk2t","tag_id":"clqc6ydrl004wfki4erpc5v50","_id":"clqc6ydrm0050fki4fm6f7yeg"},{"post_id":"clqc6ydr5002vfki4e0hx8xki","tag_id":"clqc6ydrl004wfki4erpc5v50","_id":"clqc6ydrm0054fki4dp6ietsk"},{"post_id":"clqc6ydr6002xfki4df00f274","tag_id":"clqc6ydrm0053fki4200ghner","_id":"clqc6ydrn0058fki4dm9x3vcz"},{"post_id":"clqc6ydr60030fki4h0e9e5ej","tag_id":"clqc6ydrm0053fki4200ghner","_id":"clqc6ydro005cfki443f15nsl"},{"post_id":"clqc6ydr70033fki43vcx98r8","tag_id":"clqc6ydrk004pfki47lbu2d1z","_id":"clqc6ydro005gfki4ci8j01c4"},{"post_id":"clqc6ydr80035fki4foxl1jlg","tag_id":"clqc6ydrk004pfki47lbu2d1z","_id":"clqc6ydrp005kfki4ac4nhdjt"},{"post_id":"clqc6ydr90039fki4ct2ugame","tag_id":"clqc6ydrk004pfki47lbu2d1z","_id":"clqc6ydrp005nfki44zxr622r"},{"post_id":"clqc6ydr9003bfki4a3sn5t2z","tag_id":"clqc6ydrp005lfki47d2r0xul","_id":"clqc6ydrq005rfki4evx3g0kx"},{"post_id":"clqc6ydrb003gfki43qkg7s8s","tag_id":"clqc6ydrp005pfki40mifhane","_id":"clqc6ydru0060fki4ggj31xtz"},{"post_id":"clqc6ydrb003gfki43qkg7s8s","tag_id":"clqc6ydrs005ufki41aezc57p","_id":"clqc6ydru0062fki4gdvx34c6"},{"post_id":"clqc6ydrc003lfki478fp0uz3","tag_id":"clqc6ydrt005zfki41rnke9fg","_id":"clqc6ydru0066fki4g40v5272"},{"post_id":"clqc6ydrc003nfki41qjegpuw","tag_id":"clqc6ydrd003pfki40xcf4i9k","_id":"clqc6ydrv006bfki4ghdt0oiw"},{"post_id":"clqc6ydrc003nfki41qjegpuw","tag_id":"clqc6ydru0068fki4fodx9vgc","_id":"clqc6ydrv006cfki4066h8s48"},{"post_id":"clqc6ydrd003qfki40t5g5c1l","tag_id":"clqc6ydqg000sfki41235813e","_id":"clqc6ydrv006efki41uveeglv"},{"post_id":"clqc6ydrd003qfki40t5g5c1l","tag_id":"clqc6ydru006afki44ynk3vd1","_id":"clqc6ydrv006ffki4abma0lpb"},{"post_id":"clqc6ydre003tfki4ekd3hlle","tag_id":"clqc6ydqg000sfki41235813e","_id":"clqc6ydrw006hfki48wpt8z3h"},{"post_id":"clqc6ydre003tfki4ekd3hlle","tag_id":"clqc6ydru006afki44ynk3vd1","_id":"clqc6ydrw006ifki41b8f50ek"},{"post_id":"clqc6ydrg003zfki4ejb0ax0m","tag_id":"clqc6ydrd003pfki40xcf4i9k","_id":"clqc6ydrw006jfki4fjqd50mc"},{"post_id":"clqc6ydrg003zfki4ejb0ax0m","tag_id":"clqc6ydrv006gfki4havpafzn","_id":"clqc6ydrw006kfki4cw8ta420"}],"Tag":[{"name":"hexo","_id":"clqc6ydq50006fki4hmz12ex2"},{"name":"theme","_id":"clqc6ydqa000efki4btqqfkpc"},{"name":"NexT","_id":"clqc6ydqd000lfki41rsxbssc"},{"name":"git","_id":"clqc6ydqg000sfki41235813e"},{"name":"loopback","_id":"clqc6ydqk0010fki48cq85vlh"},{"name":"mysql","_id":"clqc6ydqq001efki403276jg7"},{"name":"spring-boot","_id":"clqc6ydqs001kfki4he3a0ja0"},{"name":"effective java","_id":"clqc6ydqt001rfki4cbmh995x"},{"name":"maven","_id":"clqc6ydr9003afki4buj04cdu"},{"name":"jdk","_id":"clqc6ydrb003hfki41nwx8g96"},{"name":"java","_id":"clqc6ydrd003pfki40xcf4i9k"},{"name":"spring cloud","_id":"clqc6ydrf003ufki4cfxm8w6w"},{"name":"zuul","_id":"clqc6ydrh0042fki4bp35dnh6"},{"name":"test karma jamine","_id":"clqc6ydrh0046fki441s26n0d"},{"name":"springboot","_id":"clqc6ydri004dfki41eh2196f"},{"name":"sentinel","_id":"clqc6ydrj004hfki44c8p1azj"},{"name":"spring","_id":"clqc6ydrk004pfki47lbu2d1z"},{"name":"springmvc","_id":"clqc6ydrl004wfki4erpc5v50"},{"name":"leetcode","_id":"clqc6ydrm0053fki4200ghner"},{"name":"多线程","_id":"clqc6ydrp005lfki47d2r0xul"},{"name":"node","_id":"clqc6ydrp005pfki40mifhane"},{"name":"electron","_id":"clqc6ydrs005ufki41aezc57p"},{"name":"排序","_id":"clqc6ydrt005zfki41rnke9fg"},{"name":"junit","_id":"clqc6ydru0068fki4fodx9vgc"},{"name":"git-flow","_id":"clqc6ydru006afki44ynk3vd1"},{"name":"fastjson","_id":"clqc6ydrv006gfki4havpafzn"}]}}