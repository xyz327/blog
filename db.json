{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/images/avatar/avatar_1.jpg","path":"images/avatar/avatar_1.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/comment/youyan.js","path":"js/src/comment/youyan.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"8958b09c91ad4249c507089a85259cb7b323c4c8","modified":1488812667888},{"_id":"source/baidu_verify_LjhEXUygCP.html","hash":"a2b8b5ff61caebec7239e9f29d2a14f07c299bc3","modified":1492910355899},{"_id":"source/favicon.ico","hash":"f52ddbc2d8d943cfcbb532d5f4bec8d8a4c4b95f","modified":1492849221911},{"_id":"source/googlecc4a5534aecf666a.html","hash":"b50d73a3da29bffa5f120bc1ec9ff60fe071c7e1","modified":1488812667896},{"_id":"source/robots.txt","hash":"0385fc657415aaea98074023ec9a86cd51b5ea79","modified":1488812667896},{"_id":"source/service-worker.js","hash":"c368ce331bd93406555f812851be67cadfcc3f77","modified":1492849221921},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1488812667896},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1488812667896},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1488812667896},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1488812667904},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1488812667904},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1488812667896},{"_id":"themes/next/_config.yml","hash":"e65e67253ead3f0c7df018f7760f99162dc9a25f","modified":1510152844459},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1488812667904},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1488812667904},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1488812667904},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1488812667904},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1488812667956},{"_id":"source/css/style.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812667896},{"_id":"source/_posts/ArrayList与LinkedList的区别.md","hash":"fdc069b90793dc867eedc72aedb26c7d02ad8667","modified":1522756626181},{"_id":"source/_posts/DIY-hexo-theme-next.md","hash":"2559fb610ec7d330a3d751578ada8be0dea9c4e3","modified":1496470457869},{"_id":"source/_posts/Spring动态新增删除Bean.md","hash":"c0dfbff0ff5cf7747c296665ee60c3be64dcf7d9","modified":1522756626182},{"_id":"source/_posts/deepin添加开机启动脚本.md","hash":"2bf731fd352b6d4860de3f39ee6adf9c10fb37c6","modified":1509630555120},{"_id":"source/_posts/effective-java-一.md","hash":"ae30b004caf2777d981b23ec93adb4f0d2574647","modified":1488812667888},{"_id":"source/_posts/effective-java-七.md","hash":"eda4645cfa597855c00bb71f2debff92142a6a0b","modified":1510325054671},{"_id":"source/_posts/effective-java-三.md","hash":"353302868bce8cefa3cd9620cb5cbe2c57509e7e","modified":1510146137567},{"_id":"source/_posts/effective-java-九.md","hash":"04f54cb20d3d5ebc3709331e98f61a6d3f492e99","modified":1511962287318},{"_id":"source/_posts/effective-java-二.md","hash":"0cd78fe3cc9d4a8c2aa155ad4b765792033fe0b5","modified":1509973290557},{"_id":"source/_posts/effective-java-五.md","hash":"5efbe336a4c665e715d913808eb89c67bad29e74","modified":1510319284633},{"_id":"source/_posts/effective-java-八.md","hash":"b4dc99a98a3bf742d5f151756f0c05aeedff4c84","modified":1510456311235},{"_id":"source/_posts/effective-java-六.md","hash":"6ea85549bd25e0289b8221ac5c4717d5faf797e3","modified":1510322141759},{"_id":"source/_posts/effective-java-四.md","hash":"76c1349a1b2c75a60ac537f2f08868c43e9d1fe4","modified":1510152550753},{"_id":"source/_posts/git.md","hash":"e2abe9fbe4352dbe9d3dbea6f8fd20f004d99eec","modified":1488812667888},{"_id":"source/_posts/hello-world.md","hash":"977e579429ea4b5f4ab0a58ea55a18935cfd1c24","modified":1488812667888},{"_id":"source/_posts/karma-jasmine-build-an-automated-test-environment.md","hash":"6fe032674a02e0c5c30af43cb1e2d51ef8baa792","modified":1488812667896},{"_id":"source/_posts/loopback-one.md","hash":"d0a2f46b2925ecb6605c992c73ba1153886f4322","modified":1493043901284},{"_id":"source/_posts/loopback-two.md","hash":"2c1937898e8d3443bf7d5f758966a2e02b7e73a3","modified":1488812667896},{"_id":"source/_posts/maven-release版本管理插件.md","hash":"e6bfae3c07683f938d09069a45c3a7e57ffd8ae3","modified":1522756626195},{"_id":"source/_posts/mysql-record.md","hash":"8d9b13d24032ef66875b6665bc9ff944756ef627","modified":1492849221910},{"_id":"source/_posts/spring-boot-slf4j.md","hash":"c085776b2f2a22cc00143b20d43273462c9522fb","modified":1488812667896},{"_id":"source/_posts/springboot-fileupdat- in-Filter-can't-get.md","hash":"8b692ee880e286dcd5994d9e973f9901b3e29f1a","modified":1492849221910},{"_id":"source/_posts/springmvc初始化MultipartResolver.md","hash":"c37a8a947e1cbb04ec2a6ce701cf6d0f3e5b7004","modified":1523070777170},{"_id":"source/_posts/springmvc学习.md","hash":"49f0667dcb00f5a4b5e2dd36b990978409aea5e0","modified":1523065674337},{"_id":"source/_posts/spring一些用法小结.md","hash":"cdff14d8bc1f3db94db0a205b77b1b291e54be39","modified":1509630555144},{"_id":"source/_posts/zuul入门.md","hash":"baccd232ac40cc1f675c9ba62d4627ebf05c6284","modified":1509768113887},{"_id":"source/_posts/windows-use-oh-my-zsh.md","hash":"99d309d0352f3d1b343917b7798d2daba59acde8","modified":1492914602875},{"_id":"source/about/index.md","hash":"3c0f59a085c95a8f587680985f94f61853cd7804","modified":1488812667896},{"_id":"source/_posts/基于spring的类扫描器.md","hash":"855b570c0cbcae7f4ad5c5cbfc5b369c3e6eabc9","modified":1509630555145},{"_id":"source/_posts/自定义lopback的Appender时设置枚举属性.md","hash":"c5c9c6222b700fe07da7f062acfc408610c094e0","modified":1495465122805},{"_id":"source/categories/index.md","hash":"52e94fa498eab4193d653a3266707518882ca258","modified":1488812667896},{"_id":"source/photos/index.md","hash":"1dc4a8bd4e4ccb95dca1d2939084804ab0471f4f","modified":1492849221921},{"_id":"source/tags/index.md","hash":"53c9abbdc7f7fc6beace0de457804487d0473572","modified":1488812667896},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1488812667904},{"_id":"themes/next/languages/default.yml","hash":"fe00529a94bb2550194a31d178f5810b45014ab6","modified":1488812667904},{"_id":"themes/next/languages/en.yml","hash":"d02acdce503c86fbb01920ad22d31ec56fc285f1","modified":1488812667904},{"_id":"themes/next/languages/fr-FR.yml","hash":"91cf55b9d75879e72c8008d2659fe2ea993a4cca","modified":1488812667904},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1488812667904},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1488812667912},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1488812667912},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1488812667912},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1488812667912},{"_id":"themes/next/languages/ru.yml","hash":"402e676252ab1fc4522257a578738cb9536eb077","modified":1488812667912},{"_id":"themes/next/languages/zh-CN.yml","hash":"dbc9e7671ca5f9f82de4a5ee446f245b8ebaf551","modified":1492849221923},{"_id":"themes/next/languages/zh-Hans.yml","hash":"09626c89d34c0bcc9db0c96a17bde1a207948b1d","modified":1509630555148},{"_id":"themes/next/languages/zh-hk.yml","hash":"a59f3f3114f5eb4d170a76da4359307e8f5159a7","modified":1488812667912},{"_id":"themes/next/languages/zh-tw.yml","hash":"18da1324d2212faca9a6e5e6ce98b419c86d4b0c","modified":1488812667912},{"_id":"themes/next/layout/_layout.swig","hash":"b4ef30f7da073bf2a9052186f76e0e080de1c794","modified":1488812667912},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1488812667954},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1488812667954},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1488812667954},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1488812667955},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1488812667955},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1488812667956},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1488812667955},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1488812667956},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1488812668057},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1488812668057},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1488812668057},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812668005},{"_id":"source/images/avatar/avatar_1.jpg","hash":"0709fea9b505f14a24610765014507ef8c690741","modified":1488812667896},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1488812667912},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1488812667912},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1488812667912},{"_id":"themes/next/layout/_macro/post.swig","hash":"abfc88f34f2c0ae52229c4ffa577b00ad7cecdc6","modified":1488812667912},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1488812667912},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1488812667920},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"262ff6586650cde3cfc4cb4533233cfe8dd6662f","modified":1488812667920},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7f4e1fdb3d851866b391adc870479805c302fd8b","modified":1509768113887},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1488812667920},{"_id":"themes/next/layout/_partials/footer.swig","hash":"791934fb1a9ffec14694e1aab9d879c8677a092e","modified":1509630555149},{"_id":"themes/next/layout/_partials/head.swig","hash":"6e8a90ecd9661efe3515dd4f8f983660580420f9","modified":1488812667920},{"_id":"themes/next/layout/_partials/header.swig","hash":"d9b10a92fdccd57a0c0d6773831f9c1b0f1bb449","modified":1488812667920},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1488812667920},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1488812667920},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1488812667920},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1488812667928},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1488812667928},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"de152d8718a7a742becc776087563ecca7675959","modified":1488812667928},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e9beddda9758d8739c41fc8c67b2e72fc29c1244","modified":1496465978719},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1488812667957},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1488812667957},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1488812667957},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1488812667967},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1488812668005},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1488812668005},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1488812668005},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1488812668013},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1488812668013},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1488812668013},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1488812668013},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1488812668013},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1488812668013},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1488812668013},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488812668013},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488812668013},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1488812668013},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1488812668013},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1488812668013},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812667945},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812667945},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812667989},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812667989},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812667997},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812668005},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488812668005},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1488812667912},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1488812667912},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"0f2e3dcebccff311bee42bd07e31d490f18e5d02","modified":1522756626215},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1488812667920},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1488812667920},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1488812667920},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1488812667920},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1488812667920},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1488812667920},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1488812667920},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1488812667920},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1488812667944},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1488812667946},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"188423f7df0eb8c99a03cb6741384415651c4665","modified":1488812667946},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"d72603a03c1015cc7b2336c5d32cddd0ac7f4f98","modified":1509768113887},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"d446354a556fa43248cecdae22e4d54ced6b8cd4","modified":1488812667952},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1488812667951},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1488812667952},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1488812667952},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1488812667953},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1488812667989},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1488812667997},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1488812667997},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1488812668005},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"d7826b48a20162835450495db534d353ac52e476","modified":1488812668005},{"_id":"themes/next/source/css/_variables/base.styl","hash":"4c4298a7011841d9ee2aec5bd192df5730b08517","modified":1488812668005},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1488812668013},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1488812668013},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1488812668013},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1488812668013},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1488812668013},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1488812668013},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1488812668021},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1488812668021},{"_id":"themes/next/source/js/src/utils.js","hash":"2cffd45d678567d694af32998eccf1b1275b4965","modified":1488812668021},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1488812668029},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1488812668029},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1488812668029},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1488812668029},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1488812668029},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1488812668037},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1488812668029},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1488812668037},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1488812668037},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1488812668049},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1488812668050},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1488812668051},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1488812668052},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1488812668051},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1488812668055},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1488812668053},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1488812668052},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1488812668055},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1488812668057},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1488812668057},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1488812668057},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1488812668050},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1488812667947},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1488812667947},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1488812667948},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1488812667948},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1488812667948},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1488812667950},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1488812667949},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1488812667949},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"be859b88638b286e66e6842efeb9970b28a9d5f6","modified":1488812667951},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1488812667951},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"dc2030e97bea81d5579cc0211267a9293fdced16","modified":1496417425572},{"_id":"themes/next/layout/_scripts/third-party/comments/uyan.swig","hash":"5d14a84efc93fd1291be69a0a813d45714860623","modified":1509976066458},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1488812667969},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1488812667969},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1488812667970},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1488812667970},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1488812667981},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1488812667989},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1488812667989},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1488812667989},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1488812667989},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1488812667989},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1488812667989},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1488812668005},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1488812668005},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1488812668005},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1488812668005},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"338e9475519ce72af29a1bc05610f9f486e0f1c2","modified":1488812668005},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1488812668005},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1488812668005},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1488812668005},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1488812668005},{"_id":"themes/next/source/js/src/comment/youyan.js","hash":"b9afae8a2cdaedd8b133e71a3b2398a55cf13b8b","modified":1509975907683},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"284d25722f693f512e7102ac16d58e20a4d4be9f","modified":1509630555149},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488812668021},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488812668021},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488812668021},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488812668021},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488812668021},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488812668021},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1488812668029},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1488812668029},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1488812668029},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1488812668029},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1488812668029},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1488812668037},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1488812668037},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1488812668037},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1488812668054},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1488812668054},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1488812668037},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1488812668037},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1488812668048},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1488812668048},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1488812668057},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1488812667971},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1488812667971},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1488812667972},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1488812667971},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1488812667972},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"cd2def16d31feb234be27dcdce2a919f70cc6919","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"74e9989a10fc682388cbd25ff7df0d7d4025fb8c","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"e2066dd20747e3125c969ef8459d0015fa5233a2","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1488812667973},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1488812667981},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1488812667989},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1488812667989},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1488812667989},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1488812667989},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4f1e9d96940aa3e42d58fb63a26d4fa260323b0d","modified":1488812667989},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1488812667997},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1488812668005},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488812668021},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1488812668029},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1488812668029},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1488812668029},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1488812668029},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1488812668029},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1488812668047},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1488812668021},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1488812668037}],"Category":[{"name":"java","_id":"cjfot0s31000864bf6ycnrpg1"},{"name":"hexo","_id":"cjfot0s37000g64bfvkal5abz"},{"name":"linux","_id":"cjfot0s3h000s64bfpakm0hgq"},{"name":"git","_id":"cjfot0s3q001d64bfs5cpuq8p"},{"name":"test","_id":"cjfot0s3v001n64bfo9n2gzpz"},{"name":"loopback","_id":"cjfot0s40001u64bf2r4w1g31"},{"name":"maven","_id":"cjfot0s46002664bf7y1cb29k"},{"name":"springboot","_id":"cjfot0s49002c64bffu54jjj9"},{"name":"mysql","_id":"cjfot0s4c002i64bf2iewzsor"},{"name":"springmvc","_id":"cjfot0s4d002m64bf53vimrmw"},{"name":"spring","_id":"cjfot0s4g002u64bf5mth1gya"},{"name":"spring cloud","_id":"cjfot0s4h002y64bf2c6g1bn0"},{"name":"other","_id":"cjfot0s4i003264bfnfjfn9lb"},{"name":"logback","_id":"cjfot0s4l003a64bfe30dto3k"}],"Data":[],"Page":[{"title":"404","date":"2016-11-29T10:36:34.000Z","comments":0,"_content":"404\n","source":"404.md","raw":"---\ntitle: 404\ndate: 2016-11-29 18:36:34\ncomments: false\n---\n404\n","updated":"2017-03-06T15:04:27.888Z","path":"404.html","layout":"page","_id":"cjfot0s1d000064bfs6l46nfq","content":"<p>404</p>\n","excerpt":"","more":"<p>404</p>\n"},{"_content":"LjhEXUygCP","source":"baidu_verify_LjhEXUygCP.html","raw":"LjhEXUygCP","date":"2017-04-23T01:19:15.899Z","updated":"2017-04-23T01:19:15.899Z","path":"baidu_verify_LjhEXUygCP.html","title":"","comments":1,"layout":"page","_id":"cjfot0s1f000164bfhev73j2g","content":"LjhEXUygCP","excerpt":"","more":"LjhEXUygCP"},{"layout":"false","_content":"google-site-verification: googlecc4a5534aecf666a.html\n","source":"googlecc4a5534aecf666a.html","raw":"---\nlayout: false\n---\ngoogle-site-verification: googlecc4a5534aecf666a.html\n","date":"2017-03-06T15:04:27.896Z","updated":"2017-03-06T15:04:27.896Z","path":"googlecc4a5534aecf666a.html","title":"","comments":1,"_id":"cjfot0s1g000264bfzy4tjne4","content":"google-site-verification: googlecc4a5534aecf666a.html\n","excerpt":"","more":"google-site-verification: googlecc4a5534aecf666a.html\n"},{"_content":"\nvar cacheName = 'xyz32-service-worker-v0.1';\nvar filesToCache = [\n    'https://blog.xyz327.cn/',\n    'https://blog.xyz327.cn/js/src/utils.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/motion.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/affix.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/schemes/pisces.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/bootstrap.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/hook-duoshuo.js?v=5.1.0',\n    'https://blog.xyz327.cn/images/avatar/avatar_1.jpg',\n    'https://blog.xyz327.cn/css/style.css?v=5.1.0',\n    'https://blog.xyz327.cn/css/main.css?v=5.1.0',\n\n    'https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css',\n    'https://fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext',\n    'https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css',\n    'https://cdn.bootcss.com/jquery/2.1.3/jquery.min.js',\n    'https://cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js',\n    'https://cdn.bootcss.com/jquery_lazyload/1.9.7/jquery.lazyload.min.js',\n    'https://cdn.bootcss.com/velocity/1.2.1/velocity.min.js',\n    'https://cdn.bootcss.com/velocity/1.2.1/velocity.ui.min.js',\n    'https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.pack.js',\n    'https://cdn.bootcss.com/UAParser.js/0.7.9/ua-parser.min.js',\n    'https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js',\n    'https://fonts.gstatic.com/s/lato/v13/1YwB1sO8YE1Lyjf12WNiUA.woff2',\n    'https://cdn.bootcss.com/font-awesome/4.7.0/fonts/fontawesome-webfont.woff2?v=4.7.0',\n    'https://fonts.gstatic.com/s/lato/v13/H2DMvhDLycM56KNuAtbJYA.woff2',\n    'https://fonts.gstatic.com/s/lato/v13/PLygLKRVCQnA5fhu3qk5fQ.woff2'\n];\n\nself.addEventListener('install', function(e) {\n  console.log('[ServiceWorker] Install');\n  e.waitUntil(\n    caches.open(cacheName).then(function(cache) {\n      console.log('[ServiceWorker] Caching app shell');\n      return cache.addAll(filesToCache);\n    })\n  );\n});\n\nself.addEventListener('activate', function(e) {\n  console.log('[ServiceWorker] Activate');\n  e.waitUntil(\n    caches.keys().then(function(keyList) {\n      return Promise.all(keyList.map(function(key) {\n        console.log('[ServiceWorker] Removing old cache', key);\n        if (key !== cacheName) {\n          return caches.delete(key);\n        }\n      }));\n    })\n  );\n});\n\nself.addEventListener('fetch', function(e) {\n  console.log('[Service Worker] Fetch', e.request.url);\n\n//  var allDataUrl = extendDataUrl.concat(filesToCache);\n  var url = e.request.url//.split('?')[0];\n  var excludeUrls = ['https://hm.baidu.com','https://sp0.baidu.com', 'chrome-extension']\n  for (var index in excludeUrls) {\n    if (excludeUrls.hasOwnProperty(index)) {\n      var element = excludeUrls[index];\n      if(url.indexOf(url) === 0){\n        //不做处理\n        //e.respondWith(fetch(e.request));\n        return;\n      }\n    }\n  }\n  if(e.request.method === 'GET'){\n    e.respondWith(\n      caches.match(e.request).then(function(response) {\n        return response || fetch(e.request).then(function (response) {\n          return caches.open(cacheName).then(function(cache){\n            cache.put(e.request.url, response.clone());\n            console.log('[ServiceWorker] Fetched&Cached Data');\n            return response;\n          })\n        });\n      })\n    );\n    /*e.respondWith(fetch(e.request).then(function (response) {\n      return caches.open(cacheName).then(function(cache){\n        cache.put(e.request.url, response.clone());\n        console.log('[ServiceWorker] Fetched&Cached Data');\n        return response;\n      })\n    }));*/\n  } else {\n    e.respondWith(fetch(e.request));\n  }\n\n});\n","source":"service-worker.js","raw":"\nvar cacheName = 'xyz32-service-worker-v0.1';\nvar filesToCache = [\n    'https://blog.xyz327.cn/',\n    'https://blog.xyz327.cn/js/src/utils.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/motion.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/affix.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/schemes/pisces.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/bootstrap.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/hook-duoshuo.js?v=5.1.0',\n    'https://blog.xyz327.cn/images/avatar/avatar_1.jpg',\n    'https://blog.xyz327.cn/css/style.css?v=5.1.0',\n    'https://blog.xyz327.cn/css/main.css?v=5.1.0',\n\n    'https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css',\n    'https://fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext',\n    'https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css',\n    'https://cdn.bootcss.com/jquery/2.1.3/jquery.min.js',\n    'https://cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js',\n    'https://cdn.bootcss.com/jquery_lazyload/1.9.7/jquery.lazyload.min.js',\n    'https://cdn.bootcss.com/velocity/1.2.1/velocity.min.js',\n    'https://cdn.bootcss.com/velocity/1.2.1/velocity.ui.min.js',\n    'https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.pack.js',\n    'https://cdn.bootcss.com/UAParser.js/0.7.9/ua-parser.min.js',\n    'https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js',\n    'https://fonts.gstatic.com/s/lato/v13/1YwB1sO8YE1Lyjf12WNiUA.woff2',\n    'https://cdn.bootcss.com/font-awesome/4.7.0/fonts/fontawesome-webfont.woff2?v=4.7.0',\n    'https://fonts.gstatic.com/s/lato/v13/H2DMvhDLycM56KNuAtbJYA.woff2',\n    'https://fonts.gstatic.com/s/lato/v13/PLygLKRVCQnA5fhu3qk5fQ.woff2'\n];\n\nself.addEventListener('install', function(e) {\n  console.log('[ServiceWorker] Install');\n  e.waitUntil(\n    caches.open(cacheName).then(function(cache) {\n      console.log('[ServiceWorker] Caching app shell');\n      return cache.addAll(filesToCache);\n    })\n  );\n});\n\nself.addEventListener('activate', function(e) {\n  console.log('[ServiceWorker] Activate');\n  e.waitUntil(\n    caches.keys().then(function(keyList) {\n      return Promise.all(keyList.map(function(key) {\n        console.log('[ServiceWorker] Removing old cache', key);\n        if (key !== cacheName) {\n          return caches.delete(key);\n        }\n      }));\n    })\n  );\n});\n\nself.addEventListener('fetch', function(e) {\n  console.log('[Service Worker] Fetch', e.request.url);\n\n//  var allDataUrl = extendDataUrl.concat(filesToCache);\n  var url = e.request.url//.split('?')[0];\n  var excludeUrls = ['https://hm.baidu.com','https://sp0.baidu.com', 'chrome-extension']\n  for (var index in excludeUrls) {\n    if (excludeUrls.hasOwnProperty(index)) {\n      var element = excludeUrls[index];\n      if(url.indexOf(url) === 0){\n        //不做处理\n        //e.respondWith(fetch(e.request));\n        return;\n      }\n    }\n  }\n  if(e.request.method === 'GET'){\n    e.respondWith(\n      caches.match(e.request).then(function(response) {\n        return response || fetch(e.request).then(function (response) {\n          return caches.open(cacheName).then(function(cache){\n            cache.put(e.request.url, response.clone());\n            console.log('[ServiceWorker] Fetched&Cached Data');\n            return response;\n          })\n        });\n      })\n    );\n    /*e.respondWith(fetch(e.request).then(function (response) {\n      return caches.open(cacheName).then(function(cache){\n        cache.put(e.request.url, response.clone());\n        console.log('[ServiceWorker] Fetched&Cached Data');\n        return response;\n      })\n    }));*/\n  } else {\n    e.respondWith(fetch(e.request));\n  }\n\n});\n","date":"2017-04-22T08:20:21.921Z","updated":"2017-04-22T08:20:21.921Z","path":"service-worker.js","layout":"false","title":"","comments":1,"_id":"cjfot0s1g000364bf7j4hqufp","content":"\nvar cacheName = 'xyz32-service-worker-v0.1';\nvar filesToCache = [\n    'https://blog.xyz327.cn/',\n    'https://blog.xyz327.cn/js/src/utils.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/motion.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/affix.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/schemes/pisces.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/bootstrap.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/hook-duoshuo.js?v=5.1.0',\n    'https://blog.xyz327.cn/images/avatar/avatar_1.jpg',\n    'https://blog.xyz327.cn/css/style.css?v=5.1.0',\n    'https://blog.xyz327.cn/css/main.css?v=5.1.0',\n\n    'https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css',\n    'https://fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext',\n    'https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css',\n    'https://cdn.bootcss.com/jquery/2.1.3/jquery.min.js',\n    'https://cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js',\n    'https://cdn.bootcss.com/jquery_lazyload/1.9.7/jquery.lazyload.min.js',\n    'https://cdn.bootcss.com/velocity/1.2.1/velocity.min.js',\n    'https://cdn.bootcss.com/velocity/1.2.1/velocity.ui.min.js',\n    'https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.pack.js',\n    'https://cdn.bootcss.com/UAParser.js/0.7.9/ua-parser.min.js',\n    'https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js',\n    'https://fonts.gstatic.com/s/lato/v13/1YwB1sO8YE1Lyjf12WNiUA.woff2',\n    'https://cdn.bootcss.com/font-awesome/4.7.0/fonts/fontawesome-webfont.woff2?v=4.7.0',\n    'https://fonts.gstatic.com/s/lato/v13/H2DMvhDLycM56KNuAtbJYA.woff2',\n    'https://fonts.gstatic.com/s/lato/v13/PLygLKRVCQnA5fhu3qk5fQ.woff2'\n];\n\nself.addEventListener('install', function(e) {\n  console.log('[ServiceWorker] Install');\n  e.waitUntil(\n    caches.open(cacheName).then(function(cache) {\n      console.log('[ServiceWorker] Caching app shell');\n      return cache.addAll(filesToCache);\n    })\n  );\n});\n\nself.addEventListener('activate', function(e) {\n  console.log('[ServiceWorker] Activate');\n  e.waitUntil(\n    caches.keys().then(function(keyList) {\n      return Promise.all(keyList.map(function(key) {\n        console.log('[ServiceWorker] Removing old cache', key);\n        if (key !== cacheName) {\n          return caches.delete(key);\n        }\n      }));\n    })\n  );\n});\n\nself.addEventListener('fetch', function(e) {\n  console.log('[Service Worker] Fetch', e.request.url);\n\n//  var allDataUrl = extendDataUrl.concat(filesToCache);\n  var url = e.request.url//.split('?')[0];\n  var excludeUrls = ['https://hm.baidu.com','https://sp0.baidu.com', 'chrome-extension']\n  for (var index in excludeUrls) {\n    if (excludeUrls.hasOwnProperty(index)) {\n      var element = excludeUrls[index];\n      if(url.indexOf(url) === 0){\n        //不做处理\n        //e.respondWith(fetch(e.request));\n        return;\n      }\n    }\n  }\n  if(e.request.method === 'GET'){\n    e.respondWith(\n      caches.match(e.request).then(function(response) {\n        return response || fetch(e.request).then(function (response) {\n          return caches.open(cacheName).then(function(cache){\n            cache.put(e.request.url, response.clone());\n            console.log('[ServiceWorker] Fetched&Cached Data');\n            return response;\n          })\n        });\n      })\n    );\n    /*e.respondWith(fetch(e.request).then(function (response) {\n      return caches.open(cacheName).then(function(cache){\n        cache.put(e.request.url, response.clone());\n        console.log('[ServiceWorker] Fetched&Cached Data');\n        return response;\n      })\n    }));*/\n  } else {\n    e.respondWith(fetch(e.request));\n  }\n\n});\n","excerpt":"","more":"\nvar cacheName = 'xyz32-service-worker-v0.1';\nvar filesToCache = [\n    'https://blog.xyz327.cn/',\n    'https://blog.xyz327.cn/js/src/utils.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/motion.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/affix.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/schemes/pisces.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/bootstrap.js?v=5.1.0',\n    'https://blog.xyz327.cn/js/src/hook-duoshuo.js?v=5.1.0',\n    'https://blog.xyz327.cn/images/avatar/avatar_1.jpg',\n    'https://blog.xyz327.cn/css/style.css?v=5.1.0',\n    'https://blog.xyz327.cn/css/main.css?v=5.1.0',\n\n    'https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css',\n    'https://fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext',\n    'https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css',\n    'https://cdn.bootcss.com/jquery/2.1.3/jquery.min.js',\n    'https://cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js',\n    'https://cdn.bootcss.com/jquery_lazyload/1.9.7/jquery.lazyload.min.js',\n    'https://cdn.bootcss.com/velocity/1.2.1/velocity.min.js',\n    'https://cdn.bootcss.com/velocity/1.2.1/velocity.ui.min.js',\n    'https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.pack.js',\n    'https://cdn.bootcss.com/UAParser.js/0.7.9/ua-parser.min.js',\n    'https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js',\n    'https://fonts.gstatic.com/s/lato/v13/1YwB1sO8YE1Lyjf12WNiUA.woff2',\n    'https://cdn.bootcss.com/font-awesome/4.7.0/fonts/fontawesome-webfont.woff2?v=4.7.0',\n    'https://fonts.gstatic.com/s/lato/v13/H2DMvhDLycM56KNuAtbJYA.woff2',\n    'https://fonts.gstatic.com/s/lato/v13/PLygLKRVCQnA5fhu3qk5fQ.woff2'\n];\n\nself.addEventListener('install', function(e) {\n  console.log('[ServiceWorker] Install');\n  e.waitUntil(\n    caches.open(cacheName).then(function(cache) {\n      console.log('[ServiceWorker] Caching app shell');\n      return cache.addAll(filesToCache);\n    })\n  );\n});\n\nself.addEventListener('activate', function(e) {\n  console.log('[ServiceWorker] Activate');\n  e.waitUntil(\n    caches.keys().then(function(keyList) {\n      return Promise.all(keyList.map(function(key) {\n        console.log('[ServiceWorker] Removing old cache', key);\n        if (key !== cacheName) {\n          return caches.delete(key);\n        }\n      }));\n    })\n  );\n});\n\nself.addEventListener('fetch', function(e) {\n  console.log('[Service Worker] Fetch', e.request.url);\n\n//  var allDataUrl = extendDataUrl.concat(filesToCache);\n  var url = e.request.url//.split('?')[0];\n  var excludeUrls = ['https://hm.baidu.com','https://sp0.baidu.com', 'chrome-extension']\n  for (var index in excludeUrls) {\n    if (excludeUrls.hasOwnProperty(index)) {\n      var element = excludeUrls[index];\n      if(url.indexOf(url) === 0){\n        //不做处理\n        //e.respondWith(fetch(e.request));\n        return;\n      }\n    }\n  }\n  if(e.request.method === 'GET'){\n    e.respondWith(\n      caches.match(e.request).then(function(response) {\n        return response || fetch(e.request).then(function (response) {\n          return caches.open(cacheName).then(function(cache){\n            cache.put(e.request.url, response.clone());\n            console.log('[ServiceWorker] Fetched&Cached Data');\n            return response;\n          })\n        });\n      })\n    );\n    /*e.respondWith(fetch(e.request).then(function (response) {\n      return caches.open(cacheName).then(function(cache){\n        cache.put(e.request.url, response.clone());\n        console.log('[ServiceWorker] Fetched&Cached Data');\n        return response;\n      })\n    }));*/\n  } else {\n    e.respondWith(fetch(e.request));\n  }\n\n});\n"},{"_content":"","source":"css/style.css","raw":"","date":"2017-03-06T15:04:27.896Z","updated":"2017-03-06T15:04:27.896Z","path":"css/style.css","layout":"false","title":"","comments":1,"_id":"cjfot0s2t000464bffz3lg6l2","content":"","excerpt":"","more":""},{"title":"about","date":"2016-11-29T10:36:34.000Z","comments":0,"_content":"about\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-11-29 18:36:34\ncomments: false\n---\nabout\n","updated":"2017-03-06T15:04:27.896Z","path":"about/index.html","layout":"page","_id":"cjfot0s2x000664bf83ng5qsp","content":"<p>about</p>\n","excerpt":"","more":"<p>about</p>\n"},{"title":"categories","date":"2016-11-29T08:22:40.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-29 16:22:40\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-03-06T15:04:27.896Z","path":"categories/index.html","layout":"page","_id":"cjfot0s33000a64bfpkbpgrbh","content":"","excerpt":"","more":""},{"title":"photos","date":"2016-11-29T08:21:34.000Z","type":"photos","comments":0,"_content":"aadas","source":"photos/index.md","raw":"---\ntitle: photos\ndate: 2016-11-29 16:21:34\ntype: photos\ncomments: false\n---\naadas","updated":"2017-04-22T08:20:21.921Z","path":"photos/index.html","layout":"page","_id":"cjfot0s35000c64bf7qljdgfx","content":"<p>aadas</p>\n","excerpt":"","more":"<p>aadas</p>\n"},{"title":"tags","date":"2016-11-29T08:21:34.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-29 16:21:34\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-03-06T15:04:27.896Z","path":"tags/index.html","layout":"page","_id":"cjfot0s36000e64bflw6zsxhs","content":"","excerpt":"","more":""}],"Post":[{"title":"ArrayList与LinkedList的区别","date":"2017-12-05T03:58:10.000Z","keywords":"java","_content":"### java中`ArrayList`和`LinkedList`的区别\n\n1. <font style=\"color:green\">`ArrayList`是实现了基于动态数组的数据结构，`LinkedList`基于链表的数据结构。</font>\n1. 对于随机访问`get`和`set`，`ArrayList`觉得优于`LinkedList`，因为`LinkedList`要移动指针。\n1. 对于新增和删除操作`add`和`remove`，`LinedList`比较占优势，因为`ArrayList`要移动数据。\n\n### `ArrayList`使用动态数组存储数据，\n\n使用无参构造函数时默认大小是`10`，初始化时动态数组是个空数组`{}`\n\n当数组容量不够时会扩容，扩容方式是 `newCapacity=oldCapacity+(oldCapacity>>1)`, 当前数组大小*1.5\n所以当插入数据量比较大时可能会浪费一部分空间，在可以确定数据量大小时给定初始化容量大小可以提高效率\n在空间分配完毕后可以使用`trimToSize`去除掉多余的空间\n\n### `LinkedList`使用链表存储数据，\n\n内部使用一个`Node`的结构， 存储数据和前后节点信息\n\n```java\nprivate static class Node<E> {\n    E item;\n    Node<E> next;\n    Node<E> prev;\n\n    Node(Node<E> prev, E element, Node<E> next) {\n        this.item = element;\n        this.next = next;\n        this.prev = prev;\n    }\n}\n```\n\n### 总结 \n\n`ArrayList`和`LinkedList`在性能上各有优缺点，都有各自所适用的地方，总的说来可以描述如下： \n\n1．对`ArrayList`和`LinkedList`而言，在列表末尾增加一个元素所花的开销都是固定的。\n  1.1 对`ArrayList`而言，主要是在内部数组中增加一项，指向所添加的元素，偶尔可能会导致对数组重新进行分配；\n  1.2 而对`LinkedList`而言，这个开销是统一的，分配一个内部`Node`对象。\n\n2．在`ArrayList`的中间插入或删除一个元素意味着这个列表中剩余的元素都会被移动；而在`LinkedList`的中间插入或删除一个元素的开销是固定的。\n\n3．`LinkedList`不支持高效的随机元素访问。\n\n4．`ArrayList`的空间浪费主要体现在在list列表的结尾预留一定的容量空间，而`LinkedList`的空间花费则体现在它的每一个元素都需要消耗相当的空间\n\n可以这样说：\n\n<font style=\"color:green\">当操作是在一列数据的后面添加数据而不是在前面或中间,并且需要随机地访问其中的元素时,使用`ArrayList`会提供比较好的性能；</font><br/>\n\n<font style=\"color:green\">当你的操作是在一列数据的前面或中间添加或删除数据,并且按照顺序访问其中的元素时,就应该使用`LinkedList`了。</font>","source":"_posts/ArrayList与LinkedList的区别.md","raw":"---\ntitle: ArrayList与LinkedList的区别\ndate: 2017-12-05 11:58:10\ntags: [jdk, java]\ncategories: java\nkeywords: java\n---\n### java中`ArrayList`和`LinkedList`的区别\n\n1. <font style=\"color:green\">`ArrayList`是实现了基于动态数组的数据结构，`LinkedList`基于链表的数据结构。</font>\n1. 对于随机访问`get`和`set`，`ArrayList`觉得优于`LinkedList`，因为`LinkedList`要移动指针。\n1. 对于新增和删除操作`add`和`remove`，`LinedList`比较占优势，因为`ArrayList`要移动数据。\n\n### `ArrayList`使用动态数组存储数据，\n\n使用无参构造函数时默认大小是`10`，初始化时动态数组是个空数组`{}`\n\n当数组容量不够时会扩容，扩容方式是 `newCapacity=oldCapacity+(oldCapacity>>1)`, 当前数组大小*1.5\n所以当插入数据量比较大时可能会浪费一部分空间，在可以确定数据量大小时给定初始化容量大小可以提高效率\n在空间分配完毕后可以使用`trimToSize`去除掉多余的空间\n\n### `LinkedList`使用链表存储数据，\n\n内部使用一个`Node`的结构， 存储数据和前后节点信息\n\n```java\nprivate static class Node<E> {\n    E item;\n    Node<E> next;\n    Node<E> prev;\n\n    Node(Node<E> prev, E element, Node<E> next) {\n        this.item = element;\n        this.next = next;\n        this.prev = prev;\n    }\n}\n```\n\n### 总结 \n\n`ArrayList`和`LinkedList`在性能上各有优缺点，都有各自所适用的地方，总的说来可以描述如下： \n\n1．对`ArrayList`和`LinkedList`而言，在列表末尾增加一个元素所花的开销都是固定的。\n  1.1 对`ArrayList`而言，主要是在内部数组中增加一项，指向所添加的元素，偶尔可能会导致对数组重新进行分配；\n  1.2 而对`LinkedList`而言，这个开销是统一的，分配一个内部`Node`对象。\n\n2．在`ArrayList`的中间插入或删除一个元素意味着这个列表中剩余的元素都会被移动；而在`LinkedList`的中间插入或删除一个元素的开销是固定的。\n\n3．`LinkedList`不支持高效的随机元素访问。\n\n4．`ArrayList`的空间浪费主要体现在在list列表的结尾预留一定的容量空间，而`LinkedList`的空间花费则体现在它的每一个元素都需要消耗相当的空间\n\n可以这样说：\n\n<font style=\"color:green\">当操作是在一列数据的后面添加数据而不是在前面或中间,并且需要随机地访问其中的元素时,使用`ArrayList`会提供比较好的性能；</font><br/>\n\n<font style=\"color:green\">当你的操作是在一列数据的前面或中间添加或删除数据,并且按照顺序访问其中的元素时,就应该使用`LinkedList`了。</font>","slug":"ArrayList与LinkedList的区别","published":1,"updated":"2018-04-03T11:57:06.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s2u000564bfdvjxnk2p","content":"<h3 id=\"java中ArrayList和LinkedList的区别\"><a href=\"#java中ArrayList和LinkedList的区别\" class=\"headerlink\" title=\"java中ArrayList和LinkedList的区别\"></a>java中<code>ArrayList</code>和<code>LinkedList</code>的区别</h3><ol>\n<li><font style=\"color:green\"><code>ArrayList</code>是实现了基于动态数组的数据结构，<code>LinkedList</code>基于链表的数据结构。</font></li>\n<li>对于随机访问<code>get</code>和<code>set</code>，<code>ArrayList</code>觉得优于<code>LinkedList</code>，因为<code>LinkedList</code>要移动指针。</li>\n<li>对于新增和删除操作<code>add</code>和<code>remove</code>，<code>LinedList</code>比较占优势，因为<code>ArrayList</code>要移动数据。</li>\n</ol>\n<h3 id=\"ArrayList使用动态数组存储数据，\"><a href=\"#ArrayList使用动态数组存储数据，\" class=\"headerlink\" title=\"ArrayList使用动态数组存储数据，\"></a><code>ArrayList</code>使用动态数组存储数据，</h3><p>使用无参构造函数时默认大小是<code>10</code>，初始化时动态数组是个空数组<code>{}</code></p>\n<p>当数组容量不够时会扩容，扩容方式是 <code>newCapacity=oldCapacity+(oldCapacity&gt;&gt;1)</code>, 当前数组大小*1.5<br>所以当插入数据量比较大时可能会浪费一部分空间，在可以确定数据量大小时给定初始化容量大小可以提高效率<br>在空间分配完毕后可以使用<code>trimToSize</code>去除掉多余的空间</p>\n<h3 id=\"LinkedList使用链表存储数据，\"><a href=\"#LinkedList使用链表存储数据，\" class=\"headerlink\" title=\"LinkedList使用链表存储数据，\"></a><code>LinkedList</code>使用链表存储数据，</h3><p>内部使用一个<code>Node</code>的结构， 存储数据和前后节点信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">    E item;</div><div class=\"line\">    Node&lt;E&gt; next;</div><div class=\"line\">    Node&lt;E&gt; prev;</div><div class=\"line\"></div><div class=\"line\">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.item = element;</div><div class=\"line\">        <span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">        <span class=\"keyword\">this</span>.prev = prev;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>ArrayList</code>和<code>LinkedList</code>在性能上各有优缺点，都有各自所适用的地方，总的说来可以描述如下： </p>\n<p>1．对<code>ArrayList</code>和<code>LinkedList</code>而言，在列表末尾增加一个元素所花的开销都是固定的。<br>  1.1 对<code>ArrayList</code>而言，主要是在内部数组中增加一项，指向所添加的元素，偶尔可能会导致对数组重新进行分配；<br>  1.2 而对<code>LinkedList</code>而言，这个开销是统一的，分配一个内部<code>Node</code>对象。</p>\n<p>2．在<code>ArrayList</code>的中间插入或删除一个元素意味着这个列表中剩余的元素都会被移动；而在<code>LinkedList</code>的中间插入或删除一个元素的开销是固定的。</p>\n<p>3．<code>LinkedList</code>不支持高效的随机元素访问。</p>\n<p>4．<code>ArrayList</code>的空间浪费主要体现在在list列表的结尾预留一定的容量空间，而<code>LinkedList</code>的空间花费则体现在它的每一个元素都需要消耗相当的空间</p>\n<p>可以这样说：</p>\n<font style=\"color:green\">当操作是在一列数据的后面添加数据而不是在前面或中间,并且需要随机地访问其中的元素时,使用<code>ArrayList</code>会提供比较好的性能；</font><br><br><br><font style=\"color:green\">当你的操作是在一列数据的前面或中间添加或删除数据,并且按照顺序访问其中的元素时,就应该使用<code>LinkedList</code>了。</font>","excerpt":"","more":"<h3 id=\"java中ArrayList和LinkedList的区别\"><a href=\"#java中ArrayList和LinkedList的区别\" class=\"headerlink\" title=\"java中ArrayList和LinkedList的区别\"></a>java中<code>ArrayList</code>和<code>LinkedList</code>的区别</h3><ol>\n<li><font style=\"color:green\"><code>ArrayList</code>是实现了基于动态数组的数据结构，<code>LinkedList</code>基于链表的数据结构。</font></li>\n<li>对于随机访问<code>get</code>和<code>set</code>，<code>ArrayList</code>觉得优于<code>LinkedList</code>，因为<code>LinkedList</code>要移动指针。</li>\n<li>对于新增和删除操作<code>add</code>和<code>remove</code>，<code>LinedList</code>比较占优势，因为<code>ArrayList</code>要移动数据。</li>\n</ol>\n<h3 id=\"ArrayList使用动态数组存储数据，\"><a href=\"#ArrayList使用动态数组存储数据，\" class=\"headerlink\" title=\"ArrayList使用动态数组存储数据，\"></a><code>ArrayList</code>使用动态数组存储数据，</h3><p>使用无参构造函数时默认大小是<code>10</code>，初始化时动态数组是个空数组<code>{}</code></p>\n<p>当数组容量不够时会扩容，扩容方式是 <code>newCapacity=oldCapacity+(oldCapacity&gt;&gt;1)</code>, 当前数组大小*1.5<br>所以当插入数据量比较大时可能会浪费一部分空间，在可以确定数据量大小时给定初始化容量大小可以提高效率<br>在空间分配完毕后可以使用<code>trimToSize</code>去除掉多余的空间</p>\n<h3 id=\"LinkedList使用链表存储数据，\"><a href=\"#LinkedList使用链表存储数据，\" class=\"headerlink\" title=\"LinkedList使用链表存储数据，\"></a><code>LinkedList</code>使用链表存储数据，</h3><p>内部使用一个<code>Node</code>的结构， 存储数据和前后节点信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">    E item;</div><div class=\"line\">    Node&lt;E&gt; next;</div><div class=\"line\">    Node&lt;E&gt; prev;</div><div class=\"line\"></div><div class=\"line\">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.item = element;</div><div class=\"line\">        <span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">        <span class=\"keyword\">this</span>.prev = prev;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>ArrayList</code>和<code>LinkedList</code>在性能上各有优缺点，都有各自所适用的地方，总的说来可以描述如下： </p>\n<p>1．对<code>ArrayList</code>和<code>LinkedList</code>而言，在列表末尾增加一个元素所花的开销都是固定的。<br>  1.1 对<code>ArrayList</code>而言，主要是在内部数组中增加一项，指向所添加的元素，偶尔可能会导致对数组重新进行分配；<br>  1.2 而对<code>LinkedList</code>而言，这个开销是统一的，分配一个内部<code>Node</code>对象。</p>\n<p>2．在<code>ArrayList</code>的中间插入或删除一个元素意味着这个列表中剩余的元素都会被移动；而在<code>LinkedList</code>的中间插入或删除一个元素的开销是固定的。</p>\n<p>3．<code>LinkedList</code>不支持高效的随机元素访问。</p>\n<p>4．<code>ArrayList</code>的空间浪费主要体现在在list列表的结尾预留一定的容量空间，而<code>LinkedList</code>的空间花费则体现在它的每一个元素都需要消耗相当的空间</p>\n<p>可以这样说：</p>\n<font style=\"color:green\">当操作是在一列数据的后面添加数据而不是在前面或中间,并且需要随机地访问其中的元素时,使用<code>ArrayList</code>会提供比较好的性能；</font><br/><br><br><font style=\"color:green\">当你的操作是在一列数据的前面或中间添加或删除数据,并且按照顺序访问其中的元素时,就应该使用<code>LinkedList</code>了。</font>"},{"title":"折腾hexo的主题--NexT","date":"2016-11-29T15:11:04.000Z","_content":"**针对NexT.Pisces**\n ## 固定边侧栏\n 修改\n >theme/next/source/js/src/schemes/pisces.js\n\n ```javascript\n $(document).ready(function () {\n   var $headerInner = $('.header-inner');\n   var $sidebar = $('#sidebar');\n   $sidebar.show();\n   // 固定顶部黑条\n   $('.headband').css({'position':'fixed', top:0,width:'100%',zIndex:1});\n   $headerInner.css({top:0})\n   var affix = function() {\n     var sidebarTop = $headerInner.height() + 10;\n     $('#sidebar').css({ 'margin-top': sidebarTop }).affix();\n     if (document.body.clientWidth < 975) {\n       $headerInner.css({position: 'static'})\n     } else {\n       $headerInner.css({position: 'fixed'})\n     }\n   };\n   affix()\n   $(window).on('resize', function(){\n        affix()\n   });\n });\n ```\n## 修改文章页面滚动站点信息栏会覆盖菜单栏\n>theme/next/source/js/src/util.js\n\n把 needAffix方法修改为始终返回false\n```javascript\n    needAffix = function () {\n      return false;//this.isPisces();\n    }\n```\n\n~~修改后会影响搜索弹出框,下次解决...~~\n## 修改搜索弹出框会被遮住\n>theme/next/layout/_script/third-party/localsearch.swig\n\n```javascript\n//在首行添加\n$('.popup').appendTo($('body'));\n//并注释\n// $('.popup').detach().appendTo('.header-inner');\n```\n~~## 修改静态js等文件使用七牛~~\n~~> stheme/next/lauout/_script/commons.swig~~\n~~> theme/next/lauout/_partials/head.swig~~\n~~> theme/next/lauout/_script/bootstrap.swig~~\n~~> theme/next/lauout/_script/schemes/pisces.swig~~\n\n```ejsfont\n//在循环添加script之前添加\nurl_for()改为\n(config.qiniu.siteUrlPrefix || url_for())+'/'+theme.js\n```\n ~~在项目_config.yaml 中的七牛下添加siteUrlPrefix（这样会影响https）~~\ndone！\n","source":"_posts/DIY-hexo-theme-next.md","raw":"---\ntitle: 折腾hexo的主题--NexT\ndate: 2016-11-29 23:11:04\ntags: [hexo, theme, NexT]\ncategories: hexo\n---\n**针对NexT.Pisces**\n ## 固定边侧栏\n 修改\n >theme/next/source/js/src/schemes/pisces.js\n\n ```javascript\n $(document).ready(function () {\n   var $headerInner = $('.header-inner');\n   var $sidebar = $('#sidebar');\n   $sidebar.show();\n   // 固定顶部黑条\n   $('.headband').css({'position':'fixed', top:0,width:'100%',zIndex:1});\n   $headerInner.css({top:0})\n   var affix = function() {\n     var sidebarTop = $headerInner.height() + 10;\n     $('#sidebar').css({ 'margin-top': sidebarTop }).affix();\n     if (document.body.clientWidth < 975) {\n       $headerInner.css({position: 'static'})\n     } else {\n       $headerInner.css({position: 'fixed'})\n     }\n   };\n   affix()\n   $(window).on('resize', function(){\n        affix()\n   });\n });\n ```\n## 修改文章页面滚动站点信息栏会覆盖菜单栏\n>theme/next/source/js/src/util.js\n\n把 needAffix方法修改为始终返回false\n```javascript\n    needAffix = function () {\n      return false;//this.isPisces();\n    }\n```\n\n~~修改后会影响搜索弹出框,下次解决...~~\n## 修改搜索弹出框会被遮住\n>theme/next/layout/_script/third-party/localsearch.swig\n\n```javascript\n//在首行添加\n$('.popup').appendTo($('body'));\n//并注释\n// $('.popup').detach().appendTo('.header-inner');\n```\n~~## 修改静态js等文件使用七牛~~\n~~> stheme/next/lauout/_script/commons.swig~~\n~~> theme/next/lauout/_partials/head.swig~~\n~~> theme/next/lauout/_script/bootstrap.swig~~\n~~> theme/next/lauout/_script/schemes/pisces.swig~~\n\n```ejsfont\n//在循环添加script之前添加\nurl_for()改为\n(config.qiniu.siteUrlPrefix || url_for())+'/'+theme.js\n```\n ~~在项目_config.yaml 中的七牛下添加siteUrlPrefix（这样会影响https）~~\ndone！\n","slug":"DIY-hexo-theme-next","published":1,"updated":"2017-06-03T06:14:17.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s2y000764bftp4b63iy","content":"<p><strong>针对NexT.Pisces</strong></p>\n<h2 id=\"固定边侧栏\"><a href=\"#固定边侧栏\" class=\"headerlink\" title=\"固定边侧栏\"></a>固定边侧栏</h2><p> 修改</p>\n<blockquote>\n<p>theme/next/source/js/src/schemes/pisces.js</p>\n</blockquote>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> $headerInner = $(<span class=\"string\">'.header-inner'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $sidebar = $(<span class=\"string\">'#sidebar'</span>);</div><div class=\"line\">  $sidebar.show();</div><div class=\"line\">  <span class=\"comment\">// 固定顶部黑条</span></div><div class=\"line\">  $(<span class=\"string\">'.headband'</span>).css(&#123;<span class=\"string\">'position'</span>:<span class=\"string\">'fixed'</span>, <span class=\"attr\">top</span>:<span class=\"number\">0</span>,<span class=\"attr\">width</span>:<span class=\"string\">'100%'</span>,<span class=\"attr\">zIndex</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\">  $headerInner.css(&#123;<span class=\"attr\">top</span>:<span class=\"number\">0</span>&#125;)</div><div class=\"line\">  <span class=\"keyword\">var</span> affix = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sidebarTop = $headerInner.height() + <span class=\"number\">10</span>;</div><div class=\"line\">    $(<span class=\"string\">'#sidebar'</span>).css(&#123; <span class=\"string\">'margin-top'</span>: sidebarTop &#125;).affix();</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.body.clientWidth &lt; <span class=\"number\">975</span>) &#123;</div><div class=\"line\">      $headerInner.css(&#123;<span class=\"attr\">position</span>: <span class=\"string\">'static'</span>&#125;)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      $headerInner.css(&#123;<span class=\"attr\">position</span>: <span class=\"string\">'fixed'</span>&#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  affix()</div><div class=\"line\">  $(<span class=\"built_in\">window</span>).on(<span class=\"string\">'resize'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       affix()</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"修改文章页面滚动站点信息栏会覆盖菜单栏\"><a href=\"#修改文章页面滚动站点信息栏会覆盖菜单栏\" class=\"headerlink\" title=\"修改文章页面滚动站点信息栏会覆盖菜单栏\"></a>修改文章页面滚动站点信息栏会覆盖菜单栏</h2><blockquote>\n<p>theme/next/source/js/src/util.js</p>\n</blockquote>\n<p>把 needAffix方法修改为始终返回false<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">needAffix = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//this.isPisces();</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><del>修改后会影响搜索弹出框,下次解决…</del></p>\n<h2 id=\"修改搜索弹出框会被遮住\"><a href=\"#修改搜索弹出框会被遮住\" class=\"headerlink\" title=\"修改搜索弹出框会被遮住\"></a>修改搜索弹出框会被遮住</h2><blockquote>\n<p>theme/next/layout/_script/third-party/localsearch.swig</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//在首行添加</span></div><div class=\"line\">$(<span class=\"string\">'.popup'</span>).appendTo($(<span class=\"string\">'body'</span>));</div><div class=\"line\"><span class=\"comment\">//并注释</span></div><div class=\"line\"><span class=\"comment\">// $('.popup').detach().appendTo('.header-inner');</span></div></pre></td></tr></table></figure>\n<p><del>## 修改静态js等文件使用七牛</del><br><del>&gt; stheme/next/lauout/_script/commons.swig</del><br><del>&gt; theme/next/lauout/_partials/head.swig</del><br><del>&gt; theme/next/lauout/_script/bootstrap.swig</del><br><del>&gt; theme/next/lauout/_script/schemes/pisces.swig</del></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//在循环添加script之前添加</div><div class=\"line\">url_for()改为</div><div class=\"line\">(config.qiniu.siteUrlPrefix || url_for())+&apos;/&apos;+theme.js</div></pre></td></tr></table></figure>\n<p> <del>在项目_config.yaml 中的七牛下添加siteUrlPrefix（这样会影响https）</del><br>done！</p>\n","excerpt":"","more":"<p><strong>针对NexT.Pisces</strong></p>\n<h2 id=\"固定边侧栏\"><a href=\"#固定边侧栏\" class=\"headerlink\" title=\"固定边侧栏\"></a>固定边侧栏</h2><p> 修改</p>\n<blockquote>\n<p>theme/next/source/js/src/schemes/pisces.js</p>\n</blockquote>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> $headerInner = $(<span class=\"string\">'.header-inner'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $sidebar = $(<span class=\"string\">'#sidebar'</span>);</div><div class=\"line\">  $sidebar.show();</div><div class=\"line\">  <span class=\"comment\">// 固定顶部黑条</span></div><div class=\"line\">  $(<span class=\"string\">'.headband'</span>).css(&#123;<span class=\"string\">'position'</span>:<span class=\"string\">'fixed'</span>, <span class=\"attr\">top</span>:<span class=\"number\">0</span>,<span class=\"attr\">width</span>:<span class=\"string\">'100%'</span>,<span class=\"attr\">zIndex</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\">  $headerInner.css(&#123;<span class=\"attr\">top</span>:<span class=\"number\">0</span>&#125;)</div><div class=\"line\">  <span class=\"keyword\">var</span> affix = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sidebarTop = $headerInner.height() + <span class=\"number\">10</span>;</div><div class=\"line\">    $(<span class=\"string\">'#sidebar'</span>).css(&#123; <span class=\"string\">'margin-top'</span>: sidebarTop &#125;).affix();</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.body.clientWidth &lt; <span class=\"number\">975</span>) &#123;</div><div class=\"line\">      $headerInner.css(&#123;<span class=\"attr\">position</span>: <span class=\"string\">'static'</span>&#125;)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      $headerInner.css(&#123;<span class=\"attr\">position</span>: <span class=\"string\">'fixed'</span>&#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  affix()</div><div class=\"line\">  $(<span class=\"built_in\">window</span>).on(<span class=\"string\">'resize'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       affix()</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"修改文章页面滚动站点信息栏会覆盖菜单栏\"><a href=\"#修改文章页面滚动站点信息栏会覆盖菜单栏\" class=\"headerlink\" title=\"修改文章页面滚动站点信息栏会覆盖菜单栏\"></a>修改文章页面滚动站点信息栏会覆盖菜单栏</h2><blockquote>\n<p>theme/next/source/js/src/util.js</p>\n</blockquote>\n<p>把 needAffix方法修改为始终返回false<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">needAffix = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//this.isPisces();</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><del>修改后会影响搜索弹出框,下次解决…</del></p>\n<h2 id=\"修改搜索弹出框会被遮住\"><a href=\"#修改搜索弹出框会被遮住\" class=\"headerlink\" title=\"修改搜索弹出框会被遮住\"></a>修改搜索弹出框会被遮住</h2><blockquote>\n<p>theme/next/layout/_script/third-party/localsearch.swig</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//在首行添加</span></div><div class=\"line\">$(<span class=\"string\">'.popup'</span>).appendTo($(<span class=\"string\">'body'</span>));</div><div class=\"line\"><span class=\"comment\">//并注释</span></div><div class=\"line\"><span class=\"comment\">// $('.popup').detach().appendTo('.header-inner');</span></div></pre></td></tr></table></figure>\n<p><del>## 修改静态js等文件使用七牛</del><br><del>&gt; stheme/next/lauout/_script/commons.swig</del><br><del>&gt; theme/next/lauout/_partials/head.swig</del><br><del>&gt; theme/next/lauout/_script/bootstrap.swig</del><br><del>&gt; theme/next/lauout/_script/schemes/pisces.swig</del></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//在循环添加script之前添加</div><div class=\"line\">url_for()改为</div><div class=\"line\">(config.qiniu.siteUrlPrefix || url_for())+&apos;/&apos;+theme.js</div></pre></td></tr></table></figure>\n<p> <del>在项目_config.yaml 中的七牛下添加siteUrlPrefix（这样会影响https）</del><br>done！</p>\n"},{"title":"effective java(一)","date":"2016-03-14T13:52:18.000Z","_content":"## 考虑使用静态工厂方法代替构造器\n\n\n### 静态工厂方法相比构造器的<font color=\"red\">优势</font>：\n1. 它们有名称_。根据方法名字可以清楚的知道可以获得什么样子的对象\n2. 不必再每次调用的时候都创建一个新对象。\n3. 它们可以返回原返回类型的任何子类型的对象。    \n4. 在创建参数化类型实例的时候，它们是代码变得更加简洁    \n<!-- more -->\n```java\n         //Service provider framework sketch(描述)\n\n         //Service interface\n         public interface Service{\n            ...//service specific methods\n         }\n\n         //Service provider interface\n         public interface Provider{\n            public Service newService();\n         }\n\n         //noninstantiable(不可实例化的) class for service registration and success\n         public class Services{\n            //prevents instantiation (阻止实例化)\n            private Services{\n\n            }\n            //maps service name for services\n            private static final Map<String, Provider> providers =\n                new ConcurrentHashMap<String, Provider>();\n            //\n            public static final String DEFAULT_PROVIDER_NAME = \"<def>\";\n            //provider registration API\n            public static void registerDefaultProvider(Provider p){\n                registerProvider(DEFAULT_PROVIDER_NAME, p);\n            }\n            public static void registerProvider(String name, Provider p){\n                providers.put(name, p);\n            }\n\n            //Services access API\n            public static Service newInstance(){\n                return newInstance(DEFAULT_PROVIDER_NAME);\n            }\n            public static Service newInstance(String name){\n                Provider p = providers.get(name);\n                if(p == null){\n                    throw new IllegalArgumentException(\n                        \"No provider register with name :\" + name);\n                }\n                return p;\n            }\n         }\n\n```\n\n### 静态工厂方法的主要<font color=\"red\">缺点</font>:\n1. _类如果不含公有的或者受保护的构造器，就不能被子类化_\n2. _它们其他的静态方法实际上没有任何区别_\n    下面是静态工厂方法的一些惯用名称\n```java\n        valueOf  —————— 不太严格的讲，改方法返回的实例与它的参数具有相同的值。这样的静态工厂方法实际上是类型转换方法\n\n        of —————— valueOf 的一种更为简洁的替代，在EnummSet中使用并流行起来\n\n        getInstance —————— 返回的实例通过方法的参数描述的，但是不能够说与参数具有同样的值，对于singleton来说，该方法没有参数并返回唯一实例\n\n        newInstance —————— 与getInstance一样，但是newInstance能确保返回的每个实例都与其他实例不同\n\n        getType —————— 与getInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型\n\n        newType —————— 像newInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型\n\n```\n\n## 遇到多个构造器参数时考虑使用构建器\n\n```java\n\n    //Builder pattern\n    public class NutritionFacts{\n        private final int servingSize;\n        private final int servings;\n        private final int calories;\n        private final int fat;\n        private final int sodium;\n        private final int carbohydrate;\n\n        public static calss Builder{\n            //Required parameter\n            private final int servingSize;\n            private final int servings;\n\n            //optional parameter -- initialized to default value\n            private int calories = 0;\n            private int fat = 0;\n            private int carbohydrate = 0;\n            private int sodium = 0;\n\n            public Builder(int servingSize, int servings){\n                this.servingSize = servingSize;\n                this.servings = servings;\n            }\n            public Builder calories(int calories){\n                this.calories = calories;\n                return this;\n            }\n            public Builder fat(int fat){\n                this.fat = fat;\n                return this;\n            }\n            public Builder carbohydrate(int carbohydrate){\n                this.carbohydrate = carbohydrate;\n                return this;\n            }\n            public Builder sodium(int sodium){\n                this.sodium = sodium;\n                return this;\n            }\n\n            public NutritionFacts build(){\n                return this;\n            }\n        }\n        private NutritionFacts(Builder builder){\n            servingSize = builder.servingSize;\n            servings = builder.servings;\n            calories = builder.calories;\n            fat = build.fat;\n            sodium = build.sodium;\n            carbohydrate = build.carbohydrate;\n        }\n    }\n\n    //Test\n    NutritionFacts cocaCola = new NutritionFacts.Builder(240, 2).calories(2)\n                                .fat(2).carbohydrate(2).sodium(0).build();\n```\n","source":"_posts/effective-java-一.md","raw":"---\ntitle: effective java(一)\ndate: 2016-03-14 21:52:18\ntags: effective java\ncategories: java\n---\n## 考虑使用静态工厂方法代替构造器\n\n\n### 静态工厂方法相比构造器的<font color=\"red\">优势</font>：\n1. 它们有名称_。根据方法名字可以清楚的知道可以获得什么样子的对象\n2. 不必再每次调用的时候都创建一个新对象。\n3. 它们可以返回原返回类型的任何子类型的对象。    \n4. 在创建参数化类型实例的时候，它们是代码变得更加简洁    \n<!-- more -->\n```java\n         //Service provider framework sketch(描述)\n\n         //Service interface\n         public interface Service{\n            ...//service specific methods\n         }\n\n         //Service provider interface\n         public interface Provider{\n            public Service newService();\n         }\n\n         //noninstantiable(不可实例化的) class for service registration and success\n         public class Services{\n            //prevents instantiation (阻止实例化)\n            private Services{\n\n            }\n            //maps service name for services\n            private static final Map<String, Provider> providers =\n                new ConcurrentHashMap<String, Provider>();\n            //\n            public static final String DEFAULT_PROVIDER_NAME = \"<def>\";\n            //provider registration API\n            public static void registerDefaultProvider(Provider p){\n                registerProvider(DEFAULT_PROVIDER_NAME, p);\n            }\n            public static void registerProvider(String name, Provider p){\n                providers.put(name, p);\n            }\n\n            //Services access API\n            public static Service newInstance(){\n                return newInstance(DEFAULT_PROVIDER_NAME);\n            }\n            public static Service newInstance(String name){\n                Provider p = providers.get(name);\n                if(p == null){\n                    throw new IllegalArgumentException(\n                        \"No provider register with name :\" + name);\n                }\n                return p;\n            }\n         }\n\n```\n\n### 静态工厂方法的主要<font color=\"red\">缺点</font>:\n1. _类如果不含公有的或者受保护的构造器，就不能被子类化_\n2. _它们其他的静态方法实际上没有任何区别_\n    下面是静态工厂方法的一些惯用名称\n```java\n        valueOf  —————— 不太严格的讲，改方法返回的实例与它的参数具有相同的值。这样的静态工厂方法实际上是类型转换方法\n\n        of —————— valueOf 的一种更为简洁的替代，在EnummSet中使用并流行起来\n\n        getInstance —————— 返回的实例通过方法的参数描述的，但是不能够说与参数具有同样的值，对于singleton来说，该方法没有参数并返回唯一实例\n\n        newInstance —————— 与getInstance一样，但是newInstance能确保返回的每个实例都与其他实例不同\n\n        getType —————— 与getInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型\n\n        newType —————— 像newInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型\n\n```\n\n## 遇到多个构造器参数时考虑使用构建器\n\n```java\n\n    //Builder pattern\n    public class NutritionFacts{\n        private final int servingSize;\n        private final int servings;\n        private final int calories;\n        private final int fat;\n        private final int sodium;\n        private final int carbohydrate;\n\n        public static calss Builder{\n            //Required parameter\n            private final int servingSize;\n            private final int servings;\n\n            //optional parameter -- initialized to default value\n            private int calories = 0;\n            private int fat = 0;\n            private int carbohydrate = 0;\n            private int sodium = 0;\n\n            public Builder(int servingSize, int servings){\n                this.servingSize = servingSize;\n                this.servings = servings;\n            }\n            public Builder calories(int calories){\n                this.calories = calories;\n                return this;\n            }\n            public Builder fat(int fat){\n                this.fat = fat;\n                return this;\n            }\n            public Builder carbohydrate(int carbohydrate){\n                this.carbohydrate = carbohydrate;\n                return this;\n            }\n            public Builder sodium(int sodium){\n                this.sodium = sodium;\n                return this;\n            }\n\n            public NutritionFacts build(){\n                return this;\n            }\n        }\n        private NutritionFacts(Builder builder){\n            servingSize = builder.servingSize;\n            servings = builder.servings;\n            calories = builder.calories;\n            fat = build.fat;\n            sodium = build.sodium;\n            carbohydrate = build.carbohydrate;\n        }\n    }\n\n    //Test\n    NutritionFacts cocaCola = new NutritionFacts.Builder(240, 2).calories(2)\n                                .fat(2).carbohydrate(2).sodium(0).build();\n```\n","slug":"effective-java-一","published":1,"updated":"2017-03-06T15:04:27.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s34000b64bflhb8zltg","content":"<h2 id=\"考虑使用静态工厂方法代替构造器\"><a href=\"#考虑使用静态工厂方法代替构造器\" class=\"headerlink\" title=\"考虑使用静态工厂方法代替构造器\"></a>考虑使用静态工厂方法代替构造器</h2><h3 id=\"静态工厂方法相比构造器的优势：\"><a href=\"#静态工厂方法相比构造器的优势：\" class=\"headerlink\" title=\"静态工厂方法相比构造器的优势：\"></a>静态工厂方法相比构造器的<font color=\"red\">优势</font>：</h3><ol>\n<li>它们有名称_。根据方法名字可以清楚的知道可以获得什么样子的对象</li>\n<li>不必再每次调用的时候都创建一个新对象。</li>\n<li>它们可以返回原返回类型的任何子类型的对象。    </li>\n<li>在创建参数化类型实例的时候，它们是代码变得更加简洁    <a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Service provider framework sketch(描述)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Service interface</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Service</span></span>&#123;</div><div class=\"line\">   ...<span class=\"comment\">//service specific methods</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Service provider interface</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Provider</span></span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Service <span class=\"title\">newService</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//noninstantiable(不可实例化的) class for service registration and success</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Services</span></span>&#123;</div><div class=\"line\">   <span class=\"comment\">//prevents instantiation (阻止实例化)</span></div><div class=\"line\">   <span class=\"keyword\">private</span> Services&#123;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"comment\">//maps service name for services</span></div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, Provider&gt; providers =</div><div class=\"line\">       <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, Provider&gt;();</div><div class=\"line\">   <span class=\"comment\">//</span></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_PROVIDER_NAME = <span class=\"string\">\"&lt;def&gt;\"</span>;</div><div class=\"line\">   <span class=\"comment\">//provider registration API</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">registerDefaultProvider</span><span class=\"params\">(Provider p)</span></span>&#123;</div><div class=\"line\">       registerProvider(DEFAULT_PROVIDER_NAME, p);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">registerProvider</span><span class=\"params\">(String name, Provider p)</span></span>&#123;</div><div class=\"line\">       providers.put(name, p);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//Services access API</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Service <span class=\"title\">newInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> newInstance(DEFAULT_PROVIDER_NAME);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Service <span class=\"title\">newInstance</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">       Provider p = providers.get(name);</div><div class=\"line\">       <span class=\"keyword\">if</span>(p == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</div><div class=\"line\">               <span class=\"string\">\"No provider register with name :\"</span> + name);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> p;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"静态工厂方法的主要缺点\"><a href=\"#静态工厂方法的主要缺点\" class=\"headerlink\" title=\"静态工厂方法的主要缺点:\"></a>静态工厂方法的主要<font color=\"red\">缺点</font>:</h3><ol>\n<li><em>类如果不含公有的或者受保护的构造器，就不能被子类化</em></li>\n<li><em>它们其他的静态方法实际上没有任何区别</em><br> 下面是静态工厂方法的一些惯用名称<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">valueOf  —————— 不太严格的讲，改方法返回的实例与它的参数具有相同的值。这样的静态工厂方法实际上是类型转换方法</div><div class=\"line\"></div><div class=\"line\">of —————— valueOf 的一种更为简洁的替代，在EnummSet中使用并流行起来</div><div class=\"line\"></div><div class=\"line\">getInstance —————— 返回的实例通过方法的参数描述的，但是不能够说与参数具有同样的值，对于singleton来说，该方法没有参数并返回唯一实例</div><div class=\"line\"></div><div class=\"line\">newInstance —————— 与getInstance一样，但是newInstance能确保返回的每个实例都与其他实例不同</div><div class=\"line\"></div><div class=\"line\">getType —————— 与getInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型</div><div class=\"line\"></div><div class=\"line\">newType —————— 像newInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"遇到多个构造器参数时考虑使用构建器\"><a href=\"#遇到多个构造器参数时考虑使用构建器\" class=\"headerlink\" title=\"遇到多个构造器参数时考虑使用构建器\"></a>遇到多个构造器参数时考虑使用构建器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Builder pattern</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NutritionFacts</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servingSize;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servings;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> calories;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> fat;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> sodium;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> carbohydrate;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> calss Builder&#123;</div><div class=\"line\">        <span class=\"comment\">//Required parameter</span></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servingSize;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servings;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//optional parameter -- initialized to default value</span></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> calories = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> fat = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> carbohydrate = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sodium = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">(<span class=\"keyword\">int</span> servingSize, <span class=\"keyword\">int</span> servings)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.servingSize = servingSize;</div><div class=\"line\">            <span class=\"keyword\">this</span>.servings = servings;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">calories</span><span class=\"params\">(<span class=\"keyword\">int</span> calories)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.calories = calories;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">fat</span><span class=\"params\">(<span class=\"keyword\">int</span> fat)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.fat = fat;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">carbohydrate</span><span class=\"params\">(<span class=\"keyword\">int</span> carbohydrate)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.carbohydrate = carbohydrate;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">sodium</span><span class=\"params\">(<span class=\"keyword\">int</span> sodium)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.sodium = sodium;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> NutritionFacts <span class=\"title\">build</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">NutritionFacts</span><span class=\"params\">(Builder builder)</span></span>&#123;</div><div class=\"line\">        servingSize = builder.servingSize;</div><div class=\"line\">        servings = builder.servings;</div><div class=\"line\">        calories = builder.calories;</div><div class=\"line\">        fat = build.fat;</div><div class=\"line\">        sodium = build.sodium;</div><div class=\"line\">        carbohydrate = build.carbohydrate;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Test</span></div><div class=\"line\">NutritionFacts cocaCola = <span class=\"keyword\">new</span> NutritionFacts.Builder(<span class=\"number\">240</span>, <span class=\"number\">2</span>).calories(<span class=\"number\">2</span>)</div><div class=\"line\">                            .fat(<span class=\"number\">2</span>).carbohydrate(<span class=\"number\">2</span>).sodium(<span class=\"number\">0</span>).build();</div></pre></td></tr></table></figure>\n","excerpt":"<h2 id=\"考虑使用静态工厂方法代替构造器\"><a href=\"#考虑使用静态工厂方法代替构造器\" class=\"headerlink\" title=\"考虑使用静态工厂方法代替构造器\"></a>考虑使用静态工厂方法代替构造器</h2><h3 id=\"静态工厂方法相比构造器的优势：\"><a href=\"#静态工厂方法相比构造器的优势：\" class=\"headerlink\" title=\"静态工厂方法相比构造器的优势：\"></a>静态工厂方法相比构造器的<font color=\"red\">优势</font>：</h3><ol>\n<li>它们有名称_。根据方法名字可以清楚的知道可以获得什么样子的对象</li>\n<li>不必再每次调用的时候都创建一个新对象。</li>\n<li>它们可以返回原返回类型的任何子类型的对象。    </li>\n<li>在创建参数化类型实例的时候，它们是代码变得更加简洁","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Service provider framework sketch(描述)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Service interface</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Service</span></span>&#123;</div><div class=\"line\">   ...<span class=\"comment\">//service specific methods</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Service provider interface</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Provider</span></span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Service <span class=\"title\">newService</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//noninstantiable(不可实例化的) class for service registration and success</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Services</span></span>&#123;</div><div class=\"line\">   <span class=\"comment\">//prevents instantiation (阻止实例化)</span></div><div class=\"line\">   <span class=\"keyword\">private</span> Services&#123;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"comment\">//maps service name for services</span></div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, Provider&gt; providers =</div><div class=\"line\">       <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, Provider&gt;();</div><div class=\"line\">   <span class=\"comment\">//</span></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_PROVIDER_NAME = <span class=\"string\">\"&lt;def&gt;\"</span>;</div><div class=\"line\">   <span class=\"comment\">//provider registration API</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">registerDefaultProvider</span><span class=\"params\">(Provider p)</span></span>&#123;</div><div class=\"line\">       registerProvider(DEFAULT_PROVIDER_NAME, p);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">registerProvider</span><span class=\"params\">(String name, Provider p)</span></span>&#123;</div><div class=\"line\">       providers.put(name, p);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//Services access API</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Service <span class=\"title\">newInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> newInstance(DEFAULT_PROVIDER_NAME);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Service <span class=\"title\">newInstance</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">       Provider p = providers.get(name);</div><div class=\"line\">       <span class=\"keyword\">if</span>(p == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</div><div class=\"line\">               <span class=\"string\">\"No provider register with name :\"</span> + name);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> p;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"静态工厂方法的主要缺点\"><a href=\"#静态工厂方法的主要缺点\" class=\"headerlink\" title=\"静态工厂方法的主要缺点:\"></a>静态工厂方法的主要<font color=\"red\">缺点</font>:</h3><ol>\n<li><em>类如果不含公有的或者受保护的构造器，就不能被子类化</em></li>\n<li><em>它们其他的静态方法实际上没有任何区别</em><br> 下面是静态工厂方法的一些惯用名称<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">valueOf  —————— 不太严格的讲，改方法返回的实例与它的参数具有相同的值。这样的静态工厂方法实际上是类型转换方法</div><div class=\"line\"></div><div class=\"line\">of —————— valueOf 的一种更为简洁的替代，在EnummSet中使用并流行起来</div><div class=\"line\"></div><div class=\"line\">getInstance —————— 返回的实例通过方法的参数描述的，但是不能够说与参数具有同样的值，对于singleton来说，该方法没有参数并返回唯一实例</div><div class=\"line\"></div><div class=\"line\">newInstance —————— 与getInstance一样，但是newInstance能确保返回的每个实例都与其他实例不同</div><div class=\"line\"></div><div class=\"line\">getType —————— 与getInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型</div><div class=\"line\"></div><div class=\"line\">newType —————— 像newInstance一样，但是在工厂方法处于不同类中的时候使用，Type表示工厂方法所返回的对象类型</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"遇到多个构造器参数时考虑使用构建器\"><a href=\"#遇到多个构造器参数时考虑使用构建器\" class=\"headerlink\" title=\"遇到多个构造器参数时考虑使用构建器\"></a>遇到多个构造器参数时考虑使用构建器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Builder pattern</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NutritionFacts</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servingSize;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servings;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> calories;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> fat;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> sodium;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> carbohydrate;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> calss Builder&#123;</div><div class=\"line\">        <span class=\"comment\">//Required parameter</span></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servingSize;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> servings;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//optional parameter -- initialized to default value</span></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> calories = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> fat = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> carbohydrate = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sodium = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">(<span class=\"keyword\">int</span> servingSize, <span class=\"keyword\">int</span> servings)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.servingSize = servingSize;</div><div class=\"line\">            <span class=\"keyword\">this</span>.servings = servings;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">calories</span><span class=\"params\">(<span class=\"keyword\">int</span> calories)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.calories = calories;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">fat</span><span class=\"params\">(<span class=\"keyword\">int</span> fat)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.fat = fat;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">carbohydrate</span><span class=\"params\">(<span class=\"keyword\">int</span> carbohydrate)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.carbohydrate = carbohydrate;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">sodium</span><span class=\"params\">(<span class=\"keyword\">int</span> sodium)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.sodium = sodium;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> NutritionFacts <span class=\"title\">build</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">NutritionFacts</span><span class=\"params\">(Builder builder)</span></span>&#123;</div><div class=\"line\">        servingSize = builder.servingSize;</div><div class=\"line\">        servings = builder.servings;</div><div class=\"line\">        calories = builder.calories;</div><div class=\"line\">        fat = build.fat;</div><div class=\"line\">        sodium = build.sodium;</div><div class=\"line\">        carbohydrate = build.carbohydrate;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Test</span></div><div class=\"line\">NutritionFacts cocaCola = <span class=\"keyword\">new</span> NutritionFacts.Builder(<span class=\"number\">240</span>, <span class=\"number\">2</span>).calories(<span class=\"number\">2</span>)</div><div class=\"line\">                            .fat(<span class=\"number\">2</span>).carbohydrate(<span class=\"number\">2</span>).sodium(<span class=\"number\">0</span>).build();</div></pre></td></tr></table></figure>"},{"title":"deepin添加开机启动脚本","date":"2017-10-31T07:24:23.000Z","keywords":null,"_content":"\n公司服务器ip网段与电脑网段不同。于是要通过配置路由去访问。\n\n每次开机都要重新执行一遍添加路由的脚本，\n\n```bash\nsudo route add -net 192.168.103.0/24 gw 192.168.8.118\n```\n\n于是就把脚本放入开机启动自动执行\n\n\n只需要在 `/etc/init.d/`文件夹下新建一个文件 \n\n*** 添加执行权限 ***\n*** 在文件开头添加 ***\n\n``` bash\n#!/bin/bash\n\n### BEGIN INIT INFO\n# Provides:          kiway.cn\n# Required-Start:    $local_fs $network\n# Required-Stop:     $local_fs\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: static route service\n# Description:       static route daemon\n### END INIT INFO\n\n```\n*** 消除执行时的警告 ***\n","source":"_posts/deepin添加开机启动脚本.md","raw":"---\ntitle: deepin添加开机启动脚本\ndate: 2017-10-31 15:24:23\ntags: \ncategories: [linux]\nkeywords: \n---\n\n公司服务器ip网段与电脑网段不同。于是要通过配置路由去访问。\n\n每次开机都要重新执行一遍添加路由的脚本，\n\n```bash\nsudo route add -net 192.168.103.0/24 gw 192.168.8.118\n```\n\n于是就把脚本放入开机启动自动执行\n\n\n只需要在 `/etc/init.d/`文件夹下新建一个文件 \n\n*** 添加执行权限 ***\n*** 在文件开头添加 ***\n\n``` bash\n#!/bin/bash\n\n### BEGIN INIT INFO\n# Provides:          kiway.cn\n# Required-Start:    $local_fs $network\n# Required-Stop:     $local_fs\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: static route service\n# Description:       static route daemon\n### END INIT INFO\n\n```\n*** 消除执行时的警告 ***\n","slug":"deepin添加开机启动脚本","published":1,"updated":"2017-11-02T13:49:15.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s35000d64bfpmfh3wwq","content":"<p>公司服务器ip网段与电脑网段不同。于是要通过配置路由去访问。</p>\n<p>每次开机都要重新执行一遍添加路由的脚本，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo route add -net 192.168.103.0/24 gw 192.168.8.118</div></pre></td></tr></table></figure>\n<p>于是就把脚本放入开机启动自动执行</p>\n<p>只需要在 <code>/etc/init.d/</code>文件夹下新建一个文件 </p>\n<p><strong><em> 添加执行权限 </em></strong><br><strong><em> 在文件开头添加 </em></strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">### BEGIN INIT INFO</span></div><div class=\"line\"><span class=\"comment\"># Provides:          kiway.cn</span></div><div class=\"line\"><span class=\"comment\"># Required-Start:    $local_fs $network</span></div><div class=\"line\"><span class=\"comment\"># Required-Stop:     $local_fs</span></div><div class=\"line\"><span class=\"comment\"># Default-Start:     2 3 4 5</span></div><div class=\"line\"><span class=\"comment\"># Default-Stop:      0 1 6</span></div><div class=\"line\"><span class=\"comment\"># Short-Description: static route service</span></div><div class=\"line\"><span class=\"comment\"># Description:       static route daemon</span></div><div class=\"line\"><span class=\"comment\">### END INIT INFO</span></div></pre></td></tr></table></figure>\n<p><strong><em> 消除执行时的警告 </em></strong></p>\n","excerpt":"","more":"<p>公司服务器ip网段与电脑网段不同。于是要通过配置路由去访问。</p>\n<p>每次开机都要重新执行一遍添加路由的脚本，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo route add -net 192.168.103.0/24 gw 192.168.8.118</div></pre></td></tr></table></figure>\n<p>于是就把脚本放入开机启动自动执行</p>\n<p>只需要在 <code>/etc/init.d/</code>文件夹下新建一个文件 </p>\n<p><strong><em> 添加执行权限 </em></strong><br><strong><em> 在文件开头添加 </em></strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</div><div class=\"line\"></span></div><div class=\"line\"><span class=\"comment\">### BEGIN INIT INFO</span></div><div class=\"line\"><span class=\"comment\"># Provides:          kiway.cn</span></div><div class=\"line\"><span class=\"comment\"># Required-Start:    $local_fs $network</span></div><div class=\"line\"><span class=\"comment\"># Required-Stop:     $local_fs</span></div><div class=\"line\"><span class=\"comment\"># Default-Start:     2 3 4 5</span></div><div class=\"line\"><span class=\"comment\"># Default-Stop:      0 1 6</span></div><div class=\"line\"><span class=\"comment\"># Short-Description: static route service</span></div><div class=\"line\"><span class=\"comment\"># Description:       static route daemon</span></div><div class=\"line\"><span class=\"comment\">### END INIT INFO</span></div></pre></td></tr></table></figure>\n<p><strong><em> 消除执行时的警告 </em></strong></p>\n"},{"title":"Spring动态新增删除Bean","date":"2018-03-16T01:22:34.000Z","keywords":null,"_content":"","source":"_posts/Spring动态新增删除Bean.md","raw":"---\ntitle: Spring动态新增删除Bean\ndate: 2018-03-16 09:22:34\ntags:\ncategories:\nkeywords:\n---\n","slug":"Spring动态新增删除Bean","published":1,"updated":"2018-04-03T11:57:06.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s37000f64bfwdckf0hj","content":"","excerpt":"","more":""},{"title":"effective-java-七","date":"2017-11-10T13:55:26.000Z","keywords":"effective java","_content":"\n方法\n\n## 第38条： 检查参数的有效性\n\n## 第39条： 必要时进行保护性拷贝\n\n## 第40条： 谨慎设计方法签名\n    1. 谨慎地选择方法的名称。方法的名称应该始终遵循标准的命名习惯\n    2. 不要过于追求提供便利的方法。每个方法应该尽其所能。只有当一项操作被经常用到的时候，才考虑为它提供快捷方式。如果不能确定，还是不提供快捷为好\n    3. 避免过长的参数列表。 目标是4个或更少\n        缩短过长参数的方法\n        1. 把方法分解成多个方法，每个方法只需要这些参数的一个子集。\n        2. 创建辅助类，用来保存参数的分组。这些辅助类一般为静态成员类。\n        3. 从对象构建到方法调用都采用Builder模式，设置完参数再调用执行(execute)方法\n    4. 对于参数类型，要优先使用接口而不是类\n\n## 第41条：慎用重载\n    对于重载方法(overloaded method)的选择是静态的，而对于被覆盖的方法(overridden method)的选择则是动态的\n\n## 第42条： 慎用可变参数\n\n## 第43条：返回零长度的数组或者集合，而不是null\n\n## 第44条： 为所有导出的API元素编写文档注释","source":"_posts/effective-java-七.md","raw":"---\ntitle: effective-java-七\ndate: 2017-11-10 21:55:26\ntags: [effective java]\ncategories: java\nkeywords: effective java\n---\n\n方法\n\n## 第38条： 检查参数的有效性\n\n## 第39条： 必要时进行保护性拷贝\n\n## 第40条： 谨慎设计方法签名\n    1. 谨慎地选择方法的名称。方法的名称应该始终遵循标准的命名习惯\n    2. 不要过于追求提供便利的方法。每个方法应该尽其所能。只有当一项操作被经常用到的时候，才考虑为它提供快捷方式。如果不能确定，还是不提供快捷为好\n    3. 避免过长的参数列表。 目标是4个或更少\n        缩短过长参数的方法\n        1. 把方法分解成多个方法，每个方法只需要这些参数的一个子集。\n        2. 创建辅助类，用来保存参数的分组。这些辅助类一般为静态成员类。\n        3. 从对象构建到方法调用都采用Builder模式，设置完参数再调用执行(execute)方法\n    4. 对于参数类型，要优先使用接口而不是类\n\n## 第41条：慎用重载\n    对于重载方法(overloaded method)的选择是静态的，而对于被覆盖的方法(overridden method)的选择则是动态的\n\n## 第42条： 慎用可变参数\n\n## 第43条：返回零长度的数组或者集合，而不是null\n\n## 第44条： 为所有导出的API元素编写文档注释","slug":"effective-java-七","published":1,"updated":"2017-11-10T14:44:14.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s39000i64bf12vmdsko","content":"<p>方法</p>\n<h2 id=\"第38条：-检查参数的有效性\"><a href=\"#第38条：-检查参数的有效性\" class=\"headerlink\" title=\"第38条： 检查参数的有效性\"></a>第38条： 检查参数的有效性</h2><h2 id=\"第39条：-必要时进行保护性拷贝\"><a href=\"#第39条：-必要时进行保护性拷贝\" class=\"headerlink\" title=\"第39条： 必要时进行保护性拷贝\"></a>第39条： 必要时进行保护性拷贝</h2><h2 id=\"第40条：-谨慎设计方法签名\"><a href=\"#第40条：-谨慎设计方法签名\" class=\"headerlink\" title=\"第40条： 谨慎设计方法签名\"></a>第40条： 谨慎设计方法签名</h2><pre><code>1. 谨慎地选择方法的名称。方法的名称应该始终遵循标准的命名习惯\n2. 不要过于追求提供便利的方法。每个方法应该尽其所能。只有当一项操作被经常用到的时候，才考虑为它提供快捷方式。如果不能确定，还是不提供快捷为好\n3. 避免过长的参数列表。 目标是4个或更少\n    缩短过长参数的方法\n    1. 把方法分解成多个方法，每个方法只需要这些参数的一个子集。\n    2. 创建辅助类，用来保存参数的分组。这些辅助类一般为静态成员类。\n    3. 从对象构建到方法调用都采用Builder模式，设置完参数再调用执行(execute)方法\n4. 对于参数类型，要优先使用接口而不是类\n</code></pre><h2 id=\"第41条：慎用重载\"><a href=\"#第41条：慎用重载\" class=\"headerlink\" title=\"第41条：慎用重载\"></a>第41条：慎用重载</h2><pre><code>对于重载方法(overloaded method)的选择是静态的，而对于被覆盖的方法(overridden method)的选择则是动态的\n</code></pre><h2 id=\"第42条：-慎用可变参数\"><a href=\"#第42条：-慎用可变参数\" class=\"headerlink\" title=\"第42条： 慎用可变参数\"></a>第42条： 慎用可变参数</h2><h2 id=\"第43条：返回零长度的数组或者集合，而不是null\"><a href=\"#第43条：返回零长度的数组或者集合，而不是null\" class=\"headerlink\" title=\"第43条：返回零长度的数组或者集合，而不是null\"></a>第43条：返回零长度的数组或者集合，而不是null</h2><h2 id=\"第44条：-为所有导出的API元素编写文档注释\"><a href=\"#第44条：-为所有导出的API元素编写文档注释\" class=\"headerlink\" title=\"第44条： 为所有导出的API元素编写文档注释\"></a>第44条： 为所有导出的API元素编写文档注释</h2>","excerpt":"","more":"<p>方法</p>\n<h2 id=\"第38条：-检查参数的有效性\"><a href=\"#第38条：-检查参数的有效性\" class=\"headerlink\" title=\"第38条： 检查参数的有效性\"></a>第38条： 检查参数的有效性</h2><h2 id=\"第39条：-必要时进行保护性拷贝\"><a href=\"#第39条：-必要时进行保护性拷贝\" class=\"headerlink\" title=\"第39条： 必要时进行保护性拷贝\"></a>第39条： 必要时进行保护性拷贝</h2><h2 id=\"第40条：-谨慎设计方法签名\"><a href=\"#第40条：-谨慎设计方法签名\" class=\"headerlink\" title=\"第40条： 谨慎设计方法签名\"></a>第40条： 谨慎设计方法签名</h2><pre><code>1. 谨慎地选择方法的名称。方法的名称应该始终遵循标准的命名习惯\n2. 不要过于追求提供便利的方法。每个方法应该尽其所能。只有当一项操作被经常用到的时候，才考虑为它提供快捷方式。如果不能确定，还是不提供快捷为好\n3. 避免过长的参数列表。 目标是4个或更少\n    缩短过长参数的方法\n    1. 把方法分解成多个方法，每个方法只需要这些参数的一个子集。\n    2. 创建辅助类，用来保存参数的分组。这些辅助类一般为静态成员类。\n    3. 从对象构建到方法调用都采用Builder模式，设置完参数再调用执行(execute)方法\n4. 对于参数类型，要优先使用接口而不是类\n</code></pre><h2 id=\"第41条：慎用重载\"><a href=\"#第41条：慎用重载\" class=\"headerlink\" title=\"第41条：慎用重载\"></a>第41条：慎用重载</h2><pre><code>对于重载方法(overloaded method)的选择是静态的，而对于被覆盖的方法(overridden method)的选择则是动态的\n</code></pre><h2 id=\"第42条：-慎用可变参数\"><a href=\"#第42条：-慎用可变参数\" class=\"headerlink\" title=\"第42条： 慎用可变参数\"></a>第42条： 慎用可变参数</h2><h2 id=\"第43条：返回零长度的数组或者集合，而不是null\"><a href=\"#第43条：返回零长度的数组或者集合，而不是null\" class=\"headerlink\" title=\"第43条：返回零长度的数组或者集合，而不是null\"></a>第43条：返回零长度的数组或者集合，而不是null</h2><h2 id=\"第44条：-为所有导出的API元素编写文档注释\"><a href=\"#第44条：-为所有导出的API元素编写文档注释\" class=\"headerlink\" title=\"第44条： 为所有导出的API元素编写文档注释\"></a>第44条： 为所有导出的API元素编写文档注释</h2>"},{"title":"effective-java-三","date":"2017-11-06T13:03:57.000Z","keywords":"effective java","_content":"\n## 第八条：覆盖equals时请遵守通用约定\n1. 类的每个实例本质上都是唯一的\n2. 不关心类是否提供了“逻辑相等”的测试功能\n3. 超类已经覆盖了equals， 从超类继承过来的行为对于子类也是合适的\n4. 类是私有的或者包级别私有的，可以确定它的equals方法永远不会被调用\n\nequals方法实现了等价关系\n1. 自反性： 对于任何非`null`的引用值`x`, `x.equals(x)` 必须返回`true`;\n2. 对称性： 对于任何非`null`的引用值`x`和`y`， 当且仅当`x.equals(y)`返回`true`时， `y.equals(x)`必须返回`true`;\n3. 传递性： 对于任何非`null`的引用值`x`,'y'和`z`，如果`x.equals(y)`返回`true`，并且`y.equals(z)`也返回`true`，那么`x.equals(z)`也必须返回`true`;\n4. 一致性： 对于任何非`null`的引用值`x`和`y`，只要`equals`中的比较信息没有被改变，多次调用`x.equals(y)`就会一直返回`true`或者`false`;\n5. 对于任何非`null`的引用值`x`，`x.equals(null)`必须返回`false`;\n\n## 第九条： 覆盖equals时总要覆盖hashCode\n\n## 第十条： 始终要覆盖toString\n\n## 第十一条： 谨慎覆盖clone\n\n## 第十二条： 考虑实现Comparable接口\n    compareTo 方法返回值为负值，0，正值， 表示 小于， 等于， 大于","source":"_posts/effective-java-三.md","raw":"---\ntitle: effective-java-三\ndate: 2017-11-06 21:03:57\ntags: effective java\ncategories: java\nkeywords: effective java\n---\n\n## 第八条：覆盖equals时请遵守通用约定\n1. 类的每个实例本质上都是唯一的\n2. 不关心类是否提供了“逻辑相等”的测试功能\n3. 超类已经覆盖了equals， 从超类继承过来的行为对于子类也是合适的\n4. 类是私有的或者包级别私有的，可以确定它的equals方法永远不会被调用\n\nequals方法实现了等价关系\n1. 自反性： 对于任何非`null`的引用值`x`, `x.equals(x)` 必须返回`true`;\n2. 对称性： 对于任何非`null`的引用值`x`和`y`， 当且仅当`x.equals(y)`返回`true`时， `y.equals(x)`必须返回`true`;\n3. 传递性： 对于任何非`null`的引用值`x`,'y'和`z`，如果`x.equals(y)`返回`true`，并且`y.equals(z)`也返回`true`，那么`x.equals(z)`也必须返回`true`;\n4. 一致性： 对于任何非`null`的引用值`x`和`y`，只要`equals`中的比较信息没有被改变，多次调用`x.equals(y)`就会一直返回`true`或者`false`;\n5. 对于任何非`null`的引用值`x`，`x.equals(null)`必须返回`false`;\n\n## 第九条： 覆盖equals时总要覆盖hashCode\n\n## 第十条： 始终要覆盖toString\n\n## 第十一条： 谨慎覆盖clone\n\n## 第十二条： 考虑实现Comparable接口\n    compareTo 方法返回值为负值，0，正值， 表示 小于， 等于， 大于","slug":"effective-java-三","published":1,"updated":"2017-11-08T13:02:17.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s3a000k64bfkauy5512","content":"<h2 id=\"第八条：覆盖equals时请遵守通用约定\"><a href=\"#第八条：覆盖equals时请遵守通用约定\" class=\"headerlink\" title=\"第八条：覆盖equals时请遵守通用约定\"></a>第八条：覆盖equals时请遵守通用约定</h2><ol>\n<li>类的每个实例本质上都是唯一的</li>\n<li>不关心类是否提供了“逻辑相等”的测试功能</li>\n<li>超类已经覆盖了equals， 从超类继承过来的行为对于子类也是合适的</li>\n<li>类是私有的或者包级别私有的，可以确定它的equals方法永远不会被调用</li>\n</ol>\n<p>equals方法实现了等价关系</p>\n<ol>\n<li>自反性： 对于任何非<code>null</code>的引用值<code>x</code>, <code>x.equals(x)</code> 必须返回<code>true</code>;</li>\n<li>对称性： 对于任何非<code>null</code>的引用值<code>x</code>和<code>y</code>， 当且仅当<code>x.equals(y)</code>返回<code>true</code>时， <code>y.equals(x)</code>必须返回<code>true</code>;</li>\n<li>传递性： 对于任何非<code>null</code>的引用值<code>x</code>,’y’和<code>z</code>，如果<code>x.equals(y)</code>返回<code>true</code>，并且<code>y.equals(z)</code>也返回<code>true</code>，那么<code>x.equals(z)</code>也必须返回<code>true</code>;</li>\n<li>一致性： 对于任何非<code>null</code>的引用值<code>x</code>和<code>y</code>，只要<code>equals</code>中的比较信息没有被改变，多次调用<code>x.equals(y)</code>就会一直返回<code>true</code>或者<code>false</code>;</li>\n<li>对于任何非<code>null</code>的引用值<code>x</code>，<code>x.equals(null)</code>必须返回<code>false</code>;</li>\n</ol>\n<h2 id=\"第九条：-覆盖equals时总要覆盖hashCode\"><a href=\"#第九条：-覆盖equals时总要覆盖hashCode\" class=\"headerlink\" title=\"第九条： 覆盖equals时总要覆盖hashCode\"></a>第九条： 覆盖equals时总要覆盖hashCode</h2><h2 id=\"第十条：-始终要覆盖toString\"><a href=\"#第十条：-始终要覆盖toString\" class=\"headerlink\" title=\"第十条： 始终要覆盖toString\"></a>第十条： 始终要覆盖toString</h2><h2 id=\"第十一条：-谨慎覆盖clone\"><a href=\"#第十一条：-谨慎覆盖clone\" class=\"headerlink\" title=\"第十一条： 谨慎覆盖clone\"></a>第十一条： 谨慎覆盖clone</h2><h2 id=\"第十二条：-考虑实现Comparable接口\"><a href=\"#第十二条：-考虑实现Comparable接口\" class=\"headerlink\" title=\"第十二条： 考虑实现Comparable接口\"></a>第十二条： 考虑实现Comparable接口</h2><pre><code>compareTo 方法返回值为负值，0，正值， 表示 小于， 等于， 大于\n</code></pre>","excerpt":"","more":"<h2 id=\"第八条：覆盖equals时请遵守通用约定\"><a href=\"#第八条：覆盖equals时请遵守通用约定\" class=\"headerlink\" title=\"第八条：覆盖equals时请遵守通用约定\"></a>第八条：覆盖equals时请遵守通用约定</h2><ol>\n<li>类的每个实例本质上都是唯一的</li>\n<li>不关心类是否提供了“逻辑相等”的测试功能</li>\n<li>超类已经覆盖了equals， 从超类继承过来的行为对于子类也是合适的</li>\n<li>类是私有的或者包级别私有的，可以确定它的equals方法永远不会被调用</li>\n</ol>\n<p>equals方法实现了等价关系</p>\n<ol>\n<li>自反性： 对于任何非<code>null</code>的引用值<code>x</code>, <code>x.equals(x)</code> 必须返回<code>true</code>;</li>\n<li>对称性： 对于任何非<code>null</code>的引用值<code>x</code>和<code>y</code>， 当且仅当<code>x.equals(y)</code>返回<code>true</code>时， <code>y.equals(x)</code>必须返回<code>true</code>;</li>\n<li>传递性： 对于任何非<code>null</code>的引用值<code>x</code>,’y’和<code>z</code>，如果<code>x.equals(y)</code>返回<code>true</code>，并且<code>y.equals(z)</code>也返回<code>true</code>，那么<code>x.equals(z)</code>也必须返回<code>true</code>;</li>\n<li>一致性： 对于任何非<code>null</code>的引用值<code>x</code>和<code>y</code>，只要<code>equals</code>中的比较信息没有被改变，多次调用<code>x.equals(y)</code>就会一直返回<code>true</code>或者<code>false</code>;</li>\n<li>对于任何非<code>null</code>的引用值<code>x</code>，<code>x.equals(null)</code>必须返回<code>false</code>;</li>\n</ol>\n<h2 id=\"第九条：-覆盖equals时总要覆盖hashCode\"><a href=\"#第九条：-覆盖equals时总要覆盖hashCode\" class=\"headerlink\" title=\"第九条： 覆盖equals时总要覆盖hashCode\"></a>第九条： 覆盖equals时总要覆盖hashCode</h2><h2 id=\"第十条：-始终要覆盖toString\"><a href=\"#第十条：-始终要覆盖toString\" class=\"headerlink\" title=\"第十条： 始终要覆盖toString\"></a>第十条： 始终要覆盖toString</h2><h2 id=\"第十一条：-谨慎覆盖clone\"><a href=\"#第十一条：-谨慎覆盖clone\" class=\"headerlink\" title=\"第十一条： 谨慎覆盖clone\"></a>第十一条： 谨慎覆盖clone</h2><h2 id=\"第十二条：-考虑实现Comparable接口\"><a href=\"#第十二条：-考虑实现Comparable接口\" class=\"headerlink\" title=\"第十二条： 考虑实现Comparable接口\"></a>第十二条： 考虑实现Comparable接口</h2><pre><code>compareTo 方法返回值为负值，0，正值， 表示 小于， 等于， 大于\n</code></pre>"},{"title":"effective-java-五","date":"2017-11-10T12:03:59.000Z","keywords":"effective java","_content":"\n泛型\n\n## 第23条：不要在新代码中使用原生态类型\n\n## 第24条：消除非受检警告\n\n```java\n@SuppressWarnings(\"unchecked\")\n```\n    `@SuppressWarnings`注解可以用在任何粒度的级别中，应该尽可能使用在小的范围中 \n    每当使用`@SuppressWarnings`注解时，都要添加一条注释，说明为什么这么做是安全的\n\n## 第25条：列表优先于数组\n\n    数组于泛型相比，有两个重要的不同点\n    1. 数组是协变的(covariant) \n        如果`Sub`是`Super`的子类型，那么数组类型`Sub[]`就是`Super[]`的子类型\n       泛型是不可变的(invariant)\n    2. 数组是具体化的(reified) 数组会在运行时才知道并检测她们的元素类型\n       泛型则是通过擦除(erasure)来实现的。因此泛型只是在编译时强化他们的类型信息，\n       并在运行时丢弃(或者擦除)它们的元素类型信息\n\n## 第26条：优先考虑泛型\n\n## 第27条：优先考虑泛型方法\n\n## 第28条： 利用有限制通配符来提升API的灵活性\n    Collection<? extends E> : E 的子类型的集合\n    Collection<? super E> : E的超类的集合\n\n## 第29条：优先考虑类型安全的异构容器\n\n","source":"_posts/effective-java-五.md","raw":"---\ntitle: effective-java-五\ndate: 2017-11-10 20:03:59\ntags: [effective java]\ncategories: java\nkeywords: effective java\n---\n\n泛型\n\n## 第23条：不要在新代码中使用原生态类型\n\n## 第24条：消除非受检警告\n\n```java\n@SuppressWarnings(\"unchecked\")\n```\n    `@SuppressWarnings`注解可以用在任何粒度的级别中，应该尽可能使用在小的范围中 \n    每当使用`@SuppressWarnings`注解时，都要添加一条注释，说明为什么这么做是安全的\n\n## 第25条：列表优先于数组\n\n    数组于泛型相比，有两个重要的不同点\n    1. 数组是协变的(covariant) \n        如果`Sub`是`Super`的子类型，那么数组类型`Sub[]`就是`Super[]`的子类型\n       泛型是不可变的(invariant)\n    2. 数组是具体化的(reified) 数组会在运行时才知道并检测她们的元素类型\n       泛型则是通过擦除(erasure)来实现的。因此泛型只是在编译时强化他们的类型信息，\n       并在运行时丢弃(或者擦除)它们的元素类型信息\n\n## 第26条：优先考虑泛型\n\n## 第27条：优先考虑泛型方法\n\n## 第28条： 利用有限制通配符来提升API的灵活性\n    Collection<? extends E> : E 的子类型的集合\n    Collection<? super E> : E的超类的集合\n\n## 第29条：优先考虑类型安全的异构容器\n\n","slug":"effective-java-五","published":1,"updated":"2017-11-10T13:08:04.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s3d000n64bfl7fxpruz","content":"<p>泛型</p>\n<h2 id=\"第23条：不要在新代码中使用原生态类型\"><a href=\"#第23条：不要在新代码中使用原生态类型\" class=\"headerlink\" title=\"第23条：不要在新代码中使用原生态类型\"></a>第23条：不要在新代码中使用原生态类型</h2><h2 id=\"第24条：消除非受检警告\"><a href=\"#第24条：消除非受检警告\" class=\"headerlink\" title=\"第24条：消除非受检警告\"></a>第24条：消除非受检警告</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div></pre></td></tr></table></figure>\n<pre><code>`@SuppressWarnings`注解可以用在任何粒度的级别中，应该尽可能使用在小的范围中 \n每当使用`@SuppressWarnings`注解时，都要添加一条注释，说明为什么这么做是安全的\n</code></pre><h2 id=\"第25条：列表优先于数组\"><a href=\"#第25条：列表优先于数组\" class=\"headerlink\" title=\"第25条：列表优先于数组\"></a>第25条：列表优先于数组</h2><pre><code>数组于泛型相比，有两个重要的不同点\n1. 数组是协变的(covariant) \n    如果`Sub`是`Super`的子类型，那么数组类型`Sub[]`就是`Super[]`的子类型\n   泛型是不可变的(invariant)\n2. 数组是具体化的(reified) 数组会在运行时才知道并检测她们的元素类型\n   泛型则是通过擦除(erasure)来实现的。因此泛型只是在编译时强化他们的类型信息，\n   并在运行时丢弃(或者擦除)它们的元素类型信息\n</code></pre><h2 id=\"第26条：优先考虑泛型\"><a href=\"#第26条：优先考虑泛型\" class=\"headerlink\" title=\"第26条：优先考虑泛型\"></a>第26条：优先考虑泛型</h2><h2 id=\"第27条：优先考虑泛型方法\"><a href=\"#第27条：优先考虑泛型方法\" class=\"headerlink\" title=\"第27条：优先考虑泛型方法\"></a>第27条：优先考虑泛型方法</h2><h2 id=\"第28条：-利用有限制通配符来提升API的灵活性\"><a href=\"#第28条：-利用有限制通配符来提升API的灵活性\" class=\"headerlink\" title=\"第28条： 利用有限制通配符来提升API的灵活性\"></a>第28条： 利用有限制通配符来提升API的灵活性</h2><pre><code>Collection&lt;? extends E&gt; : E 的子类型的集合\nCollection&lt;? super E&gt; : E的超类的集合\n</code></pre><h2 id=\"第29条：优先考虑类型安全的异构容器\"><a href=\"#第29条：优先考虑类型安全的异构容器\" class=\"headerlink\" title=\"第29条：优先考虑类型安全的异构容器\"></a>第29条：优先考虑类型安全的异构容器</h2>","excerpt":"","more":"<p>泛型</p>\n<h2 id=\"第23条：不要在新代码中使用原生态类型\"><a href=\"#第23条：不要在新代码中使用原生态类型\" class=\"headerlink\" title=\"第23条：不要在新代码中使用原生态类型\"></a>第23条：不要在新代码中使用原生态类型</h2><h2 id=\"第24条：消除非受检警告\"><a href=\"#第24条：消除非受检警告\" class=\"headerlink\" title=\"第24条：消除非受检警告\"></a>第24条：消除非受检警告</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div></pre></td></tr></table></figure>\n<pre><code>`@SuppressWarnings`注解可以用在任何粒度的级别中，应该尽可能使用在小的范围中 \n每当使用`@SuppressWarnings`注解时，都要添加一条注释，说明为什么这么做是安全的\n</code></pre><h2 id=\"第25条：列表优先于数组\"><a href=\"#第25条：列表优先于数组\" class=\"headerlink\" title=\"第25条：列表优先于数组\"></a>第25条：列表优先于数组</h2><pre><code>数组于泛型相比，有两个重要的不同点\n1. 数组是协变的(covariant) \n    如果`Sub`是`Super`的子类型，那么数组类型`Sub[]`就是`Super[]`的子类型\n   泛型是不可变的(invariant)\n2. 数组是具体化的(reified) 数组会在运行时才知道并检测她们的元素类型\n   泛型则是通过擦除(erasure)来实现的。因此泛型只是在编译时强化他们的类型信息，\n   并在运行时丢弃(或者擦除)它们的元素类型信息\n</code></pre><h2 id=\"第26条：优先考虑泛型\"><a href=\"#第26条：优先考虑泛型\" class=\"headerlink\" title=\"第26条：优先考虑泛型\"></a>第26条：优先考虑泛型</h2><h2 id=\"第27条：优先考虑泛型方法\"><a href=\"#第27条：优先考虑泛型方法\" class=\"headerlink\" title=\"第27条：优先考虑泛型方法\"></a>第27条：优先考虑泛型方法</h2><h2 id=\"第28条：-利用有限制通配符来提升API的灵活性\"><a href=\"#第28条：-利用有限制通配符来提升API的灵活性\" class=\"headerlink\" title=\"第28条： 利用有限制通配符来提升API的灵活性\"></a>第28条： 利用有限制通配符来提升API的灵活性</h2><pre><code>Collection&lt;? extends E&gt; : E 的子类型的集合\nCollection&lt;? super E&gt; : E的超类的集合\n</code></pre><h2 id=\"第29条：优先考虑类型安全的异构容器\"><a href=\"#第29条：优先考虑类型安全的异构容器\" class=\"headerlink\" title=\"第29条：优先考虑类型安全的异构容器\"></a>第29条：优先考虑类型安全的异构容器</h2>"},{"title":"effective-java-九","date":"2017-11-12T03:12:50.000Z","keywords":"effective java","_content":"\n异常\n\n## 第57条：只针对异常的情况才使用异常\n\n## 第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常\n    java 三种可抛出结构(throwable): 受检异常，运行时异常，错误\n\n## 第59条：避免不必要的使用受检的异常\n\n## 第60条：优先使用标准的异常\n\n|异常|使用场合|\n|---|---|\n|IllegalArgumentException | 非null的参数值不正确|\n|IllegalStateException | 对于方法调用而言，对象状态不合适|\n|NullPointerException | 在禁止使用null的情况下参数值为null|\n|IndexOutOfBoundsException | 下标参数值越界|\n|ConcurrentModificationException | 在禁止并发修改的情况下，检测到对象的并发修改|\n|UnsupportOperationException | 对象不支持用户请求的方法|\n\n## 第61条：抛出与抽象相对应的异常\n    高层的实现应该捕获底层的异常，同时抛出可以按照高层抽象进行解释的异常。这种做法被称为'异常转译'。\n    一种特殊的异常转译形式称为异常链，如果底层的异常对与调试高层异常的问题有帮助，使用异常链就合适。底层的异常被传到高层的异常，高层异常提供访问方法(`Throwable.getCause`)来获得底层异常\n","source":"_posts/effective-java-九.md","raw":"---\ntitle: effective-java-九\ndate: 2017-11-12 11:12:50\ntags: [effective java]\ncategories: java\nkeywords: effective java\n---\n\n异常\n\n## 第57条：只针对异常的情况才使用异常\n\n## 第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常\n    java 三种可抛出结构(throwable): 受检异常，运行时异常，错误\n\n## 第59条：避免不必要的使用受检的异常\n\n## 第60条：优先使用标准的异常\n\n|异常|使用场合|\n|---|---|\n|IllegalArgumentException | 非null的参数值不正确|\n|IllegalStateException | 对于方法调用而言，对象状态不合适|\n|NullPointerException | 在禁止使用null的情况下参数值为null|\n|IndexOutOfBoundsException | 下标参数值越界|\n|ConcurrentModificationException | 在禁止并发修改的情况下，检测到对象的并发修改|\n|UnsupportOperationException | 对象不支持用户请求的方法|\n\n## 第61条：抛出与抽象相对应的异常\n    高层的实现应该捕获底层的异常，同时抛出可以按照高层抽象进行解释的异常。这种做法被称为'异常转译'。\n    一种特殊的异常转译形式称为异常链，如果底层的异常对与调试高层异常的问题有帮助，使用异常链就合适。底层的异常被传到高层的异常，高层异常提供访问方法(`Throwable.getCause`)来获得底层异常\n","slug":"effective-java-九","published":1,"updated":"2017-11-29T13:31:27.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s3f000q64bfpkf2tdn1","content":"<p>异常</p>\n<h2 id=\"第57条：只针对异常的情况才使用异常\"><a href=\"#第57条：只针对异常的情况才使用异常\" class=\"headerlink\" title=\"第57条：只针对异常的情况才使用异常\"></a>第57条：只针对异常的情况才使用异常</h2><h2 id=\"第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常\"><a href=\"#第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常\" class=\"headerlink\" title=\"第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常\"></a>第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常</h2><pre><code>java 三种可抛出结构(throwable): 受检异常，运行时异常，错误\n</code></pre><h2 id=\"第59条：避免不必要的使用受检的异常\"><a href=\"#第59条：避免不必要的使用受检的异常\" class=\"headerlink\" title=\"第59条：避免不必要的使用受检的异常\"></a>第59条：避免不必要的使用受检的异常</h2><h2 id=\"第60条：优先使用标准的异常\"><a href=\"#第60条：优先使用标准的异常\" class=\"headerlink\" title=\"第60条：优先使用标准的异常\"></a>第60条：优先使用标准的异常</h2><table>\n<thead>\n<tr>\n<th>异常</th>\n<th>使用场合</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IllegalArgumentException</td>\n<td>非null的参数值不正确</td>\n</tr>\n<tr>\n<td>IllegalStateException</td>\n<td>对于方法调用而言，对象状态不合适</td>\n</tr>\n<tr>\n<td>NullPointerException</td>\n<td>在禁止使用null的情况下参数值为null</td>\n</tr>\n<tr>\n<td>IndexOutOfBoundsException</td>\n<td>下标参数值越界</td>\n</tr>\n<tr>\n<td>ConcurrentModificationException</td>\n<td>在禁止并发修改的情况下，检测到对象的并发修改</td>\n</tr>\n<tr>\n<td>UnsupportOperationException</td>\n<td>对象不支持用户请求的方法</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"第61条：抛出与抽象相对应的异常\"><a href=\"#第61条：抛出与抽象相对应的异常\" class=\"headerlink\" title=\"第61条：抛出与抽象相对应的异常\"></a>第61条：抛出与抽象相对应的异常</h2><pre><code>高层的实现应该捕获底层的异常，同时抛出可以按照高层抽象进行解释的异常。这种做法被称为&apos;异常转译&apos;。\n一种特殊的异常转译形式称为异常链，如果底层的异常对与调试高层异常的问题有帮助，使用异常链就合适。底层的异常被传到高层的异常，高层异常提供访问方法(`Throwable.getCause`)来获得底层异常\n</code></pre>","excerpt":"","more":"<p>异常</p>\n<h2 id=\"第57条：只针对异常的情况才使用异常\"><a href=\"#第57条：只针对异常的情况才使用异常\" class=\"headerlink\" title=\"第57条：只针对异常的情况才使用异常\"></a>第57条：只针对异常的情况才使用异常</h2><h2 id=\"第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常\"><a href=\"#第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常\" class=\"headerlink\" title=\"第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常\"></a>第58条：对可恢复的情况使用受检异常，对编程错误使用运行时的异常</h2><pre><code>java 三种可抛出结构(throwable): 受检异常，运行时异常，错误\n</code></pre><h2 id=\"第59条：避免不必要的使用受检的异常\"><a href=\"#第59条：避免不必要的使用受检的异常\" class=\"headerlink\" title=\"第59条：避免不必要的使用受检的异常\"></a>第59条：避免不必要的使用受检的异常</h2><h2 id=\"第60条：优先使用标准的异常\"><a href=\"#第60条：优先使用标准的异常\" class=\"headerlink\" title=\"第60条：优先使用标准的异常\"></a>第60条：优先使用标准的异常</h2><table>\n<thead>\n<tr>\n<th>异常</th>\n<th>使用场合</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IllegalArgumentException</td>\n<td>非null的参数值不正确</td>\n</tr>\n<tr>\n<td>IllegalStateException</td>\n<td>对于方法调用而言，对象状态不合适</td>\n</tr>\n<tr>\n<td>NullPointerException</td>\n<td>在禁止使用null的情况下参数值为null</td>\n</tr>\n<tr>\n<td>IndexOutOfBoundsException</td>\n<td>下标参数值越界</td>\n</tr>\n<tr>\n<td>ConcurrentModificationException</td>\n<td>在禁止并发修改的情况下，检测到对象的并发修改</td>\n</tr>\n<tr>\n<td>UnsupportOperationException</td>\n<td>对象不支持用户请求的方法</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"第61条：抛出与抽象相对应的异常\"><a href=\"#第61条：抛出与抽象相对应的异常\" class=\"headerlink\" title=\"第61条：抛出与抽象相对应的异常\"></a>第61条：抛出与抽象相对应的异常</h2><pre><code>高层的实现应该捕获底层的异常，同时抛出可以按照高层抽象进行解释的异常。这种做法被称为&apos;异常转译&apos;。\n一种特殊的异常转译形式称为异常链，如果底层的异常对与调试高层异常的问题有帮助，使用异常链就合适。底层的异常被传到高层的异常，高层异常提供访问方法(`Throwable.getCause`)来获得底层异常\n</code></pre>"},{"title":"effective-java-二","date":"2017-11-02T14:02:36.000Z","keywords":"effective java","_content":"\n## 第三条：用私有构造器或者枚举类型强化Singleton\n\n***从1.5开始使用单元素的枚举类是实现单例的的最佳方法***\n\n## 第四条：通过私有构造器强化不可实例化的能力\n\n主要对于工具类\n\n## 第五条： 避免创建不必要的对象\n\n***要优先使用基本类型而不是装箱类型，要当心无意识的自动装箱***\n\n## 第六条： 消除过期的对象引用\n\n常见的内存泄漏问题\n1. 程序自己管理内\n2. 缓存\n3. 监听器和其他回调\n\n## 第七条： 避免使用终结方法(finalize)\n\n缺点在于不能保证会被及时的执行\n","source":"_posts/effective-java-二.md","raw":"---\ntitle: effective-java-二\ndate: 2017-11-02 22:02:36\ntags: effective java\ncategories: java\nkeywords: effective java\n---\n\n## 第三条：用私有构造器或者枚举类型强化Singleton\n\n***从1.5开始使用单元素的枚举类是实现单例的的最佳方法***\n\n## 第四条：通过私有构造器强化不可实例化的能力\n\n主要对于工具类\n\n## 第五条： 避免创建不必要的对象\n\n***要优先使用基本类型而不是装箱类型，要当心无意识的自动装箱***\n\n## 第六条： 消除过期的对象引用\n\n常见的内存泄漏问题\n1. 程序自己管理内\n2. 缓存\n3. 监听器和其他回调\n\n## 第七条： 避免使用终结方法(finalize)\n\n缺点在于不能保证会被及时的执行\n","slug":"effective-java-二","published":1,"updated":"2017-11-06T13:01:30.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s3i000v64bfuhnd3x0r","content":"<h2 id=\"第三条：用私有构造器或者枚举类型强化Singleton\"><a href=\"#第三条：用私有构造器或者枚举类型强化Singleton\" class=\"headerlink\" title=\"第三条：用私有构造器或者枚举类型强化Singleton\"></a>第三条：用私有构造器或者枚举类型强化Singleton</h2><p><strong><em>从1.5开始使用单元素的枚举类是实现单例的的最佳方法</em></strong></p>\n<h2 id=\"第四条：通过私有构造器强化不可实例化的能力\"><a href=\"#第四条：通过私有构造器强化不可实例化的能力\" class=\"headerlink\" title=\"第四条：通过私有构造器强化不可实例化的能力\"></a>第四条：通过私有构造器强化不可实例化的能力</h2><p>主要对于工具类</p>\n<h2 id=\"第五条：-避免创建不必要的对象\"><a href=\"#第五条：-避免创建不必要的对象\" class=\"headerlink\" title=\"第五条： 避免创建不必要的对象\"></a>第五条： 避免创建不必要的对象</h2><p><strong><em>要优先使用基本类型而不是装箱类型，要当心无意识的自动装箱</em></strong></p>\n<h2 id=\"第六条：-消除过期的对象引用\"><a href=\"#第六条：-消除过期的对象引用\" class=\"headerlink\" title=\"第六条： 消除过期的对象引用\"></a>第六条： 消除过期的对象引用</h2><p>常见的内存泄漏问题</p>\n<ol>\n<li>程序自己管理内</li>\n<li>缓存</li>\n<li>监听器和其他回调</li>\n</ol>\n<h2 id=\"第七条：-避免使用终结方法-finalize\"><a href=\"#第七条：-避免使用终结方法-finalize\" class=\"headerlink\" title=\"第七条： 避免使用终结方法(finalize)\"></a>第七条： 避免使用终结方法(finalize)</h2><p>缺点在于不能保证会被及时的执行</p>\n","excerpt":"","more":"<h2 id=\"第三条：用私有构造器或者枚举类型强化Singleton\"><a href=\"#第三条：用私有构造器或者枚举类型强化Singleton\" class=\"headerlink\" title=\"第三条：用私有构造器或者枚举类型强化Singleton\"></a>第三条：用私有构造器或者枚举类型强化Singleton</h2><p><strong><em>从1.5开始使用单元素的枚举类是实现单例的的最佳方法</em></strong></p>\n<h2 id=\"第四条：通过私有构造器强化不可实例化的能力\"><a href=\"#第四条：通过私有构造器强化不可实例化的能力\" class=\"headerlink\" title=\"第四条：通过私有构造器强化不可实例化的能力\"></a>第四条：通过私有构造器强化不可实例化的能力</h2><p>主要对于工具类</p>\n<h2 id=\"第五条：-避免创建不必要的对象\"><a href=\"#第五条：-避免创建不必要的对象\" class=\"headerlink\" title=\"第五条： 避免创建不必要的对象\"></a>第五条： 避免创建不必要的对象</h2><p><strong><em>要优先使用基本类型而不是装箱类型，要当心无意识的自动装箱</em></strong></p>\n<h2 id=\"第六条：-消除过期的对象引用\"><a href=\"#第六条：-消除过期的对象引用\" class=\"headerlink\" title=\"第六条： 消除过期的对象引用\"></a>第六条： 消除过期的对象引用</h2><p>常见的内存泄漏问题</p>\n<ol>\n<li>程序自己管理内</li>\n<li>缓存</li>\n<li>监听器和其他回调</li>\n</ol>\n<h2 id=\"第七条：-避免使用终结方法-finalize\"><a href=\"#第七条：-避免使用终结方法-finalize\" class=\"headerlink\" title=\"第七条： 避免使用终结方法(finalize)\"></a>第七条： 避免使用终结方法(finalize)</h2><p>缺点在于不能保证会被及时的执行</p>\n"},{"title":"effective-java-六","date":"2017-11-10T13:06:44.000Z","keywords":"effective java","_content":"枚举和注解\n\n## 第30条： 用enum代替int常量\n\n## 第31条：用实例域代替序数\n    不要依赖枚举的`ordinal`而是自己定义实例域\n\n## 第32条：用EnumSet代替位域\n\n## 第33条：用EnumMap代替序数索引\n\n## 第34条：用接口模拟可伸缩的枚举\n    虽然无法编写可扩展的枚举类型，却可以通过编写接口以及实现该接口的基础枚举类型，对它进行模拟\n\n## 第35条：注解优先于命名模式\n\n## 第36条：坚持使用Override注解\n\n## 第37条：用标记接口定义类型\n    标记接口(marker interface) 是没有包含方法声明的接口，而是指明一个类实现了具有某种属性接口","source":"_posts/effective-java-六.md","raw":"---\ntitle: effective-java-六\ndate: 2017-11-10 21:06:44\ntags: [effective java]\ncategories: java\nkeywords: effective java\n---\n枚举和注解\n\n## 第30条： 用enum代替int常量\n\n## 第31条：用实例域代替序数\n    不要依赖枚举的`ordinal`而是自己定义实例域\n\n## 第32条：用EnumSet代替位域\n\n## 第33条：用EnumMap代替序数索引\n\n## 第34条：用接口模拟可伸缩的枚举\n    虽然无法编写可扩展的枚举类型，却可以通过编写接口以及实现该接口的基础枚举类型，对它进行模拟\n\n## 第35条：注解优先于命名模式\n\n## 第36条：坚持使用Override注解\n\n## 第37条：用标记接口定义类型\n    标记接口(marker interface) 是没有包含方法声明的接口，而是指明一个类实现了具有某种属性接口","slug":"effective-java-六","published":1,"updated":"2017-11-10T13:55:41.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s3j000x64bfb2vg73f1","content":"<p>枚举和注解</p>\n<h2 id=\"第30条：-用enum代替int常量\"><a href=\"#第30条：-用enum代替int常量\" class=\"headerlink\" title=\"第30条： 用enum代替int常量\"></a>第30条： 用enum代替int常量</h2><h2 id=\"第31条：用实例域代替序数\"><a href=\"#第31条：用实例域代替序数\" class=\"headerlink\" title=\"第31条：用实例域代替序数\"></a>第31条：用实例域代替序数</h2><pre><code>不要依赖枚举的`ordinal`而是自己定义实例域\n</code></pre><h2 id=\"第32条：用EnumSet代替位域\"><a href=\"#第32条：用EnumSet代替位域\" class=\"headerlink\" title=\"第32条：用EnumSet代替位域\"></a>第32条：用EnumSet代替位域</h2><h2 id=\"第33条：用EnumMap代替序数索引\"><a href=\"#第33条：用EnumMap代替序数索引\" class=\"headerlink\" title=\"第33条：用EnumMap代替序数索引\"></a>第33条：用EnumMap代替序数索引</h2><h2 id=\"第34条：用接口模拟可伸缩的枚举\"><a href=\"#第34条：用接口模拟可伸缩的枚举\" class=\"headerlink\" title=\"第34条：用接口模拟可伸缩的枚举\"></a>第34条：用接口模拟可伸缩的枚举</h2><pre><code>虽然无法编写可扩展的枚举类型，却可以通过编写接口以及实现该接口的基础枚举类型，对它进行模拟\n</code></pre><h2 id=\"第35条：注解优先于命名模式\"><a href=\"#第35条：注解优先于命名模式\" class=\"headerlink\" title=\"第35条：注解优先于命名模式\"></a>第35条：注解优先于命名模式</h2><h2 id=\"第36条：坚持使用Override注解\"><a href=\"#第36条：坚持使用Override注解\" class=\"headerlink\" title=\"第36条：坚持使用Override注解\"></a>第36条：坚持使用Override注解</h2><h2 id=\"第37条：用标记接口定义类型\"><a href=\"#第37条：用标记接口定义类型\" class=\"headerlink\" title=\"第37条：用标记接口定义类型\"></a>第37条：用标记接口定义类型</h2><pre><code>标记接口(marker interface) 是没有包含方法声明的接口，而是指明一个类实现了具有某种属性接口\n</code></pre>","excerpt":"","more":"<p>枚举和注解</p>\n<h2 id=\"第30条：-用enum代替int常量\"><a href=\"#第30条：-用enum代替int常量\" class=\"headerlink\" title=\"第30条： 用enum代替int常量\"></a>第30条： 用enum代替int常量</h2><h2 id=\"第31条：用实例域代替序数\"><a href=\"#第31条：用实例域代替序数\" class=\"headerlink\" title=\"第31条：用实例域代替序数\"></a>第31条：用实例域代替序数</h2><pre><code>不要依赖枚举的`ordinal`而是自己定义实例域\n</code></pre><h2 id=\"第32条：用EnumSet代替位域\"><a href=\"#第32条：用EnumSet代替位域\" class=\"headerlink\" title=\"第32条：用EnumSet代替位域\"></a>第32条：用EnumSet代替位域</h2><h2 id=\"第33条：用EnumMap代替序数索引\"><a href=\"#第33条：用EnumMap代替序数索引\" class=\"headerlink\" title=\"第33条：用EnumMap代替序数索引\"></a>第33条：用EnumMap代替序数索引</h2><h2 id=\"第34条：用接口模拟可伸缩的枚举\"><a href=\"#第34条：用接口模拟可伸缩的枚举\" class=\"headerlink\" title=\"第34条：用接口模拟可伸缩的枚举\"></a>第34条：用接口模拟可伸缩的枚举</h2><pre><code>虽然无法编写可扩展的枚举类型，却可以通过编写接口以及实现该接口的基础枚举类型，对它进行模拟\n</code></pre><h2 id=\"第35条：注解优先于命名模式\"><a href=\"#第35条：注解优先于命名模式\" class=\"headerlink\" title=\"第35条：注解优先于命名模式\"></a>第35条：注解优先于命名模式</h2><h2 id=\"第36条：坚持使用Override注解\"><a href=\"#第36条：坚持使用Override注解\" class=\"headerlink\" title=\"第36条：坚持使用Override注解\"></a>第36条：坚持使用Override注解</h2><h2 id=\"第37条：用标记接口定义类型\"><a href=\"#第37条：用标记接口定义类型\" class=\"headerlink\" title=\"第37条：用标记接口定义类型\"></a>第37条：用标记接口定义类型</h2><pre><code>标记接口(marker interface) 是没有包含方法声明的接口，而是指明一个类实现了具有某种属性接口\n</code></pre>"},{"title":"effective-java-八","date":"2017-11-12T02:36:17.000Z","keywords":"effective java","_content":"\n通用程序设计\n\n## 第45条：将局部变量的作用域最小化\n    1. 最有力的方法就是在第一次使用它的地方声明\n    2. 几乎每个局部变量的声明都应该包含一个初始化表达式\n    3. 在循环终止后不再需要循环变量的内容时, `for`循环优先于`while`循环\n\n## 第46条：for-each循环优先于传统的for循环\n    不能使用`for-each`循环的情况\n    1. 过滤， 需要使用显示的迭代器,或者java8的stream\n    2. 转换，\n    3. 平行迭代，\n\n## 第47条：了解和使用类库\n\n## 第48条：如果需要精确的答案，请避免使用float和double\n    使用`BigDecimal`\n\n## 第49条：基本类型优先于装箱基本类型\n    区别\n    1. 基本类型只有值， 而装箱基本类型则具有与他们的值不同的同一性(两个装箱基本类型可以具有相同的值和不同的同一性)\n    2. 基本类型只有功能完备的值， 装箱类型除了对应基本类型的所有功能值外，还有个非功能值`null`\n    3. 基本类型比装箱基本类型更节省时间和空间\n\n## 第50条：如果其他类型更适合，则尽量避免使用字符串\n\n## 第51条：当心字符串连接的性能\n    使用`StirngBuilder`代替`String`\n\n## 第52条：通过接口引用对象\n\n## 第53条：接口优先于反射机制\n\n## 第54条：谨慎地使用本地方法\n    使用本地方法提高性能的做法不值得提倡，因为JVM实现变得越来越快\n\n## 第55条：谨慎地进行优化\n\n## 第56条：遵守普遍接受的命名习惯\n    1. 类，接口，枚举，注解类型的名称，都应该包括一个或多个单词，每个单词的首字母大写\n    2. 方法和域的名称与上面的习惯一样，只不过首字母应该小写\n    3. 常量域名称应该用一个或多个大写的单词，每个单词用下划线`_`隔开，常量域是唯一推荐使用下划线的情形","source":"_posts/effective-java-八.md","raw":"---\ntitle: effective-java-八\ndate: 2017-11-12 10:36:17\ntags: effective java\ncategories: java\nkeywords: effective java\n---\n\n通用程序设计\n\n## 第45条：将局部变量的作用域最小化\n    1. 最有力的方法就是在第一次使用它的地方声明\n    2. 几乎每个局部变量的声明都应该包含一个初始化表达式\n    3. 在循环终止后不再需要循环变量的内容时, `for`循环优先于`while`循环\n\n## 第46条：for-each循环优先于传统的for循环\n    不能使用`for-each`循环的情况\n    1. 过滤， 需要使用显示的迭代器,或者java8的stream\n    2. 转换，\n    3. 平行迭代，\n\n## 第47条：了解和使用类库\n\n## 第48条：如果需要精确的答案，请避免使用float和double\n    使用`BigDecimal`\n\n## 第49条：基本类型优先于装箱基本类型\n    区别\n    1. 基本类型只有值， 而装箱基本类型则具有与他们的值不同的同一性(两个装箱基本类型可以具有相同的值和不同的同一性)\n    2. 基本类型只有功能完备的值， 装箱类型除了对应基本类型的所有功能值外，还有个非功能值`null`\n    3. 基本类型比装箱基本类型更节省时间和空间\n\n## 第50条：如果其他类型更适合，则尽量避免使用字符串\n\n## 第51条：当心字符串连接的性能\n    使用`StirngBuilder`代替`String`\n\n## 第52条：通过接口引用对象\n\n## 第53条：接口优先于反射机制\n\n## 第54条：谨慎地使用本地方法\n    使用本地方法提高性能的做法不值得提倡，因为JVM实现变得越来越快\n\n## 第55条：谨慎地进行优化\n\n## 第56条：遵守普遍接受的命名习惯\n    1. 类，接口，枚举，注解类型的名称，都应该包括一个或多个单词，每个单词的首字母大写\n    2. 方法和域的名称与上面的习惯一样，只不过首字母应该小写\n    3. 常量域名称应该用一个或多个大写的单词，每个单词用下划线`_`隔开，常量域是唯一推荐使用下划线的情形","slug":"effective-java-八","published":1,"updated":"2017-11-12T03:11:51.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s3l001064bfucyv4res","content":"<p>通用程序设计</p>\n<h2 id=\"第45条：将局部变量的作用域最小化\"><a href=\"#第45条：将局部变量的作用域最小化\" class=\"headerlink\" title=\"第45条：将局部变量的作用域最小化\"></a>第45条：将局部变量的作用域最小化</h2><pre><code>1. 最有力的方法就是在第一次使用它的地方声明\n2. 几乎每个局部变量的声明都应该包含一个初始化表达式\n3. 在循环终止后不再需要循环变量的内容时, `for`循环优先于`while`循环\n</code></pre><h2 id=\"第46条：for-each循环优先于传统的for循环\"><a href=\"#第46条：for-each循环优先于传统的for循环\" class=\"headerlink\" title=\"第46条：for-each循环优先于传统的for循环\"></a>第46条：for-each循环优先于传统的for循环</h2><pre><code>不能使用`for-each`循环的情况\n1. 过滤， 需要使用显示的迭代器,或者java8的stream\n2. 转换，\n3. 平行迭代，\n</code></pre><h2 id=\"第47条：了解和使用类库\"><a href=\"#第47条：了解和使用类库\" class=\"headerlink\" title=\"第47条：了解和使用类库\"></a>第47条：了解和使用类库</h2><h2 id=\"第48条：如果需要精确的答案，请避免使用float和double\"><a href=\"#第48条：如果需要精确的答案，请避免使用float和double\" class=\"headerlink\" title=\"第48条：如果需要精确的答案，请避免使用float和double\"></a>第48条：如果需要精确的答案，请避免使用float和double</h2><pre><code>使用`BigDecimal`\n</code></pre><h2 id=\"第49条：基本类型优先于装箱基本类型\"><a href=\"#第49条：基本类型优先于装箱基本类型\" class=\"headerlink\" title=\"第49条：基本类型优先于装箱基本类型\"></a>第49条：基本类型优先于装箱基本类型</h2><pre><code>区别\n1. 基本类型只有值， 而装箱基本类型则具有与他们的值不同的同一性(两个装箱基本类型可以具有相同的值和不同的同一性)\n2. 基本类型只有功能完备的值， 装箱类型除了对应基本类型的所有功能值外，还有个非功能值`null`\n3. 基本类型比装箱基本类型更节省时间和空间\n</code></pre><h2 id=\"第50条：如果其他类型更适合，则尽量避免使用字符串\"><a href=\"#第50条：如果其他类型更适合，则尽量避免使用字符串\" class=\"headerlink\" title=\"第50条：如果其他类型更适合，则尽量避免使用字符串\"></a>第50条：如果其他类型更适合，则尽量避免使用字符串</h2><h2 id=\"第51条：当心字符串连接的性能\"><a href=\"#第51条：当心字符串连接的性能\" class=\"headerlink\" title=\"第51条：当心字符串连接的性能\"></a>第51条：当心字符串连接的性能</h2><pre><code>使用`StirngBuilder`代替`String`\n</code></pre><h2 id=\"第52条：通过接口引用对象\"><a href=\"#第52条：通过接口引用对象\" class=\"headerlink\" title=\"第52条：通过接口引用对象\"></a>第52条：通过接口引用对象</h2><h2 id=\"第53条：接口优先于反射机制\"><a href=\"#第53条：接口优先于反射机制\" class=\"headerlink\" title=\"第53条：接口优先于反射机制\"></a>第53条：接口优先于反射机制</h2><h2 id=\"第54条：谨慎地使用本地方法\"><a href=\"#第54条：谨慎地使用本地方法\" class=\"headerlink\" title=\"第54条：谨慎地使用本地方法\"></a>第54条：谨慎地使用本地方法</h2><pre><code>使用本地方法提高性能的做法不值得提倡，因为JVM实现变得越来越快\n</code></pre><h2 id=\"第55条：谨慎地进行优化\"><a href=\"#第55条：谨慎地进行优化\" class=\"headerlink\" title=\"第55条：谨慎地进行优化\"></a>第55条：谨慎地进行优化</h2><h2 id=\"第56条：遵守普遍接受的命名习惯\"><a href=\"#第56条：遵守普遍接受的命名习惯\" class=\"headerlink\" title=\"第56条：遵守普遍接受的命名习惯\"></a>第56条：遵守普遍接受的命名习惯</h2><pre><code>1. 类，接口，枚举，注解类型的名称，都应该包括一个或多个单词，每个单词的首字母大写\n2. 方法和域的名称与上面的习惯一样，只不过首字母应该小写\n3. 常量域名称应该用一个或多个大写的单词，每个单词用下划线`_`隔开，常量域是唯一推荐使用下划线的情形\n</code></pre>","excerpt":"","more":"<p>通用程序设计</p>\n<h2 id=\"第45条：将局部变量的作用域最小化\"><a href=\"#第45条：将局部变量的作用域最小化\" class=\"headerlink\" title=\"第45条：将局部变量的作用域最小化\"></a>第45条：将局部变量的作用域最小化</h2><pre><code>1. 最有力的方法就是在第一次使用它的地方声明\n2. 几乎每个局部变量的声明都应该包含一个初始化表达式\n3. 在循环终止后不再需要循环变量的内容时, `for`循环优先于`while`循环\n</code></pre><h2 id=\"第46条：for-each循环优先于传统的for循环\"><a href=\"#第46条：for-each循环优先于传统的for循环\" class=\"headerlink\" title=\"第46条：for-each循环优先于传统的for循环\"></a>第46条：for-each循环优先于传统的for循环</h2><pre><code>不能使用`for-each`循环的情况\n1. 过滤， 需要使用显示的迭代器,或者java8的stream\n2. 转换，\n3. 平行迭代，\n</code></pre><h2 id=\"第47条：了解和使用类库\"><a href=\"#第47条：了解和使用类库\" class=\"headerlink\" title=\"第47条：了解和使用类库\"></a>第47条：了解和使用类库</h2><h2 id=\"第48条：如果需要精确的答案，请避免使用float和double\"><a href=\"#第48条：如果需要精确的答案，请避免使用float和double\" class=\"headerlink\" title=\"第48条：如果需要精确的答案，请避免使用float和double\"></a>第48条：如果需要精确的答案，请避免使用float和double</h2><pre><code>使用`BigDecimal`\n</code></pre><h2 id=\"第49条：基本类型优先于装箱基本类型\"><a href=\"#第49条：基本类型优先于装箱基本类型\" class=\"headerlink\" title=\"第49条：基本类型优先于装箱基本类型\"></a>第49条：基本类型优先于装箱基本类型</h2><pre><code>区别\n1. 基本类型只有值， 而装箱基本类型则具有与他们的值不同的同一性(两个装箱基本类型可以具有相同的值和不同的同一性)\n2. 基本类型只有功能完备的值， 装箱类型除了对应基本类型的所有功能值外，还有个非功能值`null`\n3. 基本类型比装箱基本类型更节省时间和空间\n</code></pre><h2 id=\"第50条：如果其他类型更适合，则尽量避免使用字符串\"><a href=\"#第50条：如果其他类型更适合，则尽量避免使用字符串\" class=\"headerlink\" title=\"第50条：如果其他类型更适合，则尽量避免使用字符串\"></a>第50条：如果其他类型更适合，则尽量避免使用字符串</h2><h2 id=\"第51条：当心字符串连接的性能\"><a href=\"#第51条：当心字符串连接的性能\" class=\"headerlink\" title=\"第51条：当心字符串连接的性能\"></a>第51条：当心字符串连接的性能</h2><pre><code>使用`StirngBuilder`代替`String`\n</code></pre><h2 id=\"第52条：通过接口引用对象\"><a href=\"#第52条：通过接口引用对象\" class=\"headerlink\" title=\"第52条：通过接口引用对象\"></a>第52条：通过接口引用对象</h2><h2 id=\"第53条：接口优先于反射机制\"><a href=\"#第53条：接口优先于反射机制\" class=\"headerlink\" title=\"第53条：接口优先于反射机制\"></a>第53条：接口优先于反射机制</h2><h2 id=\"第54条：谨慎地使用本地方法\"><a href=\"#第54条：谨慎地使用本地方法\" class=\"headerlink\" title=\"第54条：谨慎地使用本地方法\"></a>第54条：谨慎地使用本地方法</h2><pre><code>使用本地方法提高性能的做法不值得提倡，因为JVM实现变得越来越快\n</code></pre><h2 id=\"第55条：谨慎地进行优化\"><a href=\"#第55条：谨慎地进行优化\" class=\"headerlink\" title=\"第55条：谨慎地进行优化\"></a>第55条：谨慎地进行优化</h2><h2 id=\"第56条：遵守普遍接受的命名习惯\"><a href=\"#第56条：遵守普遍接受的命名习惯\" class=\"headerlink\" title=\"第56条：遵守普遍接受的命名习惯\"></a>第56条：遵守普遍接受的命名习惯</h2><pre><code>1. 类，接口，枚举，注解类型的名称，都应该包括一个或多个单词，每个单词的首字母大写\n2. 方法和域的名称与上面的习惯一样，只不过首字母应该小写\n3. 常量域名称应该用一个或多个大写的单词，每个单词用下划线`_`隔开，常量域是唯一推荐使用下划线的情形\n</code></pre>"},{"title":"effective-java-四","date":"2017-11-08T13:12:46.000Z","keywords":null,"_content":"\n## 第13条: 使类和成员的可访问性最小\n\n## 第14条：在共有类中使用方法而不是公有域\n\n## 第15条：使可变性最小\n    使类成为不可变，要遵循下面五条规则\n    1. 不要提供任何会修改对象状态的方法\n    2. 保证类不会被扩展\n    3. 所有的域都是final的\n    4. 所有的域都是私有的\n    5. 确保对任何可变组件的互斥访问\n\n## 第16条：复合优先于继承\n\n## 第17条：要么为继承而设计，并提供文档说明，要么就禁止继承 \n    构造器绝不能调用可被覆盖的方法\n\n## 第18条：接口优先于抽象类\n    1. 现有的类可以很容易被更新\n    2. 接口是定义mixin(混合类型)的理想选择\n    3. 接口允许构造非层次结构的类型框架\n\n## 第19条：接口只用于定义类型\n    常量接口是不好的使用方法\n    要导出常量应该使用不可实例化的工具类\n\n## 第20条：类层次优先于标签类\n\n## 第21条：用函数对象表示策略\n\n## 第22条：优先考虑静态成员类\n### 嵌套类\n    被定义在另一个类的内部类，嵌套类存在的目的应该只是为外部类提供服务。如果嵌套类可能会用于其他环境中，它就应该是顶层类\n\n嵌套类有四种\n1. 静态成员类\n2. 非静态成员类\n3. 匿名类\n4. 局部类\n除了第一种之外，其他三种都被称为内部类\n    \n","source":"_posts/effective-java-四.md","raw":"---\ntitle: effective-java-四\ndate: 2017-11-08 21:12:46\ntags: [effective java]\ncategories: java\nkeywords:\n---\n\n## 第13条: 使类和成员的可访问性最小\n\n## 第14条：在共有类中使用方法而不是公有域\n\n## 第15条：使可变性最小\n    使类成为不可变，要遵循下面五条规则\n    1. 不要提供任何会修改对象状态的方法\n    2. 保证类不会被扩展\n    3. 所有的域都是final的\n    4. 所有的域都是私有的\n    5. 确保对任何可变组件的互斥访问\n\n## 第16条：复合优先于继承\n\n## 第17条：要么为继承而设计，并提供文档说明，要么就禁止继承 \n    构造器绝不能调用可被覆盖的方法\n\n## 第18条：接口优先于抽象类\n    1. 现有的类可以很容易被更新\n    2. 接口是定义mixin(混合类型)的理想选择\n    3. 接口允许构造非层次结构的类型框架\n\n## 第19条：接口只用于定义类型\n    常量接口是不好的使用方法\n    要导出常量应该使用不可实例化的工具类\n\n## 第20条：类层次优先于标签类\n\n## 第21条：用函数对象表示策略\n\n## 第22条：优先考虑静态成员类\n### 嵌套类\n    被定义在另一个类的内部类，嵌套类存在的目的应该只是为外部类提供服务。如果嵌套类可能会用于其他环境中，它就应该是顶层类\n\n嵌套类有四种\n1. 静态成员类\n2. 非静态成员类\n3. 匿名类\n4. 局部类\n除了第一种之外，其他三种都被称为内部类\n    \n","slug":"effective-java-四","published":1,"updated":"2017-11-08T14:49:10.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s3m001264bfx48s9o3i","content":"<h2 id=\"第13条-使类和成员的可访问性最小\"><a href=\"#第13条-使类和成员的可访问性最小\" class=\"headerlink\" title=\"第13条: 使类和成员的可访问性最小\"></a>第13条: 使类和成员的可访问性最小</h2><h2 id=\"第14条：在共有类中使用方法而不是公有域\"><a href=\"#第14条：在共有类中使用方法而不是公有域\" class=\"headerlink\" title=\"第14条：在共有类中使用方法而不是公有域\"></a>第14条：在共有类中使用方法而不是公有域</h2><h2 id=\"第15条：使可变性最小\"><a href=\"#第15条：使可变性最小\" class=\"headerlink\" title=\"第15条：使可变性最小\"></a>第15条：使可变性最小</h2><pre><code>使类成为不可变，要遵循下面五条规则\n1. 不要提供任何会修改对象状态的方法\n2. 保证类不会被扩展\n3. 所有的域都是final的\n4. 所有的域都是私有的\n5. 确保对任何可变组件的互斥访问\n</code></pre><h2 id=\"第16条：复合优先于继承\"><a href=\"#第16条：复合优先于继承\" class=\"headerlink\" title=\"第16条：复合优先于继承\"></a>第16条：复合优先于继承</h2><h2 id=\"第17条：要么为继承而设计，并提供文档说明，要么就禁止继承\"><a href=\"#第17条：要么为继承而设计，并提供文档说明，要么就禁止继承\" class=\"headerlink\" title=\"第17条：要么为继承而设计，并提供文档说明，要么就禁止继承\"></a>第17条：要么为继承而设计，并提供文档说明，要么就禁止继承</h2><pre><code>构造器绝不能调用可被覆盖的方法\n</code></pre><h2 id=\"第18条：接口优先于抽象类\"><a href=\"#第18条：接口优先于抽象类\" class=\"headerlink\" title=\"第18条：接口优先于抽象类\"></a>第18条：接口优先于抽象类</h2><pre><code>1. 现有的类可以很容易被更新\n2. 接口是定义mixin(混合类型)的理想选择\n3. 接口允许构造非层次结构的类型框架\n</code></pre><h2 id=\"第19条：接口只用于定义类型\"><a href=\"#第19条：接口只用于定义类型\" class=\"headerlink\" title=\"第19条：接口只用于定义类型\"></a>第19条：接口只用于定义类型</h2><pre><code>常量接口是不好的使用方法\n要导出常量应该使用不可实例化的工具类\n</code></pre><h2 id=\"第20条：类层次优先于标签类\"><a href=\"#第20条：类层次优先于标签类\" class=\"headerlink\" title=\"第20条：类层次优先于标签类\"></a>第20条：类层次优先于标签类</h2><h2 id=\"第21条：用函数对象表示策略\"><a href=\"#第21条：用函数对象表示策略\" class=\"headerlink\" title=\"第21条：用函数对象表示策略\"></a>第21条：用函数对象表示策略</h2><h2 id=\"第22条：优先考虑静态成员类\"><a href=\"#第22条：优先考虑静态成员类\" class=\"headerlink\" title=\"第22条：优先考虑静态成员类\"></a>第22条：优先考虑静态成员类</h2><h3 id=\"嵌套类\"><a href=\"#嵌套类\" class=\"headerlink\" title=\"嵌套类\"></a>嵌套类</h3><pre><code>被定义在另一个类的内部类，嵌套类存在的目的应该只是为外部类提供服务。如果嵌套类可能会用于其他环境中，它就应该是顶层类\n</code></pre><p>嵌套类有四种</p>\n<ol>\n<li>静态成员类</li>\n<li>非静态成员类</li>\n<li>匿名类</li>\n<li>局部类<br>除了第一种之外，其他三种都被称为内部类</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"第13条-使类和成员的可访问性最小\"><a href=\"#第13条-使类和成员的可访问性最小\" class=\"headerlink\" title=\"第13条: 使类和成员的可访问性最小\"></a>第13条: 使类和成员的可访问性最小</h2><h2 id=\"第14条：在共有类中使用方法而不是公有域\"><a href=\"#第14条：在共有类中使用方法而不是公有域\" class=\"headerlink\" title=\"第14条：在共有类中使用方法而不是公有域\"></a>第14条：在共有类中使用方法而不是公有域</h2><h2 id=\"第15条：使可变性最小\"><a href=\"#第15条：使可变性最小\" class=\"headerlink\" title=\"第15条：使可变性最小\"></a>第15条：使可变性最小</h2><pre><code>使类成为不可变，要遵循下面五条规则\n1. 不要提供任何会修改对象状态的方法\n2. 保证类不会被扩展\n3. 所有的域都是final的\n4. 所有的域都是私有的\n5. 确保对任何可变组件的互斥访问\n</code></pre><h2 id=\"第16条：复合优先于继承\"><a href=\"#第16条：复合优先于继承\" class=\"headerlink\" title=\"第16条：复合优先于继承\"></a>第16条：复合优先于继承</h2><h2 id=\"第17条：要么为继承而设计，并提供文档说明，要么就禁止继承\"><a href=\"#第17条：要么为继承而设计，并提供文档说明，要么就禁止继承\" class=\"headerlink\" title=\"第17条：要么为继承而设计，并提供文档说明，要么就禁止继承\"></a>第17条：要么为继承而设计，并提供文档说明，要么就禁止继承</h2><pre><code>构造器绝不能调用可被覆盖的方法\n</code></pre><h2 id=\"第18条：接口优先于抽象类\"><a href=\"#第18条：接口优先于抽象类\" class=\"headerlink\" title=\"第18条：接口优先于抽象类\"></a>第18条：接口优先于抽象类</h2><pre><code>1. 现有的类可以很容易被更新\n2. 接口是定义mixin(混合类型)的理想选择\n3. 接口允许构造非层次结构的类型框架\n</code></pre><h2 id=\"第19条：接口只用于定义类型\"><a href=\"#第19条：接口只用于定义类型\" class=\"headerlink\" title=\"第19条：接口只用于定义类型\"></a>第19条：接口只用于定义类型</h2><pre><code>常量接口是不好的使用方法\n要导出常量应该使用不可实例化的工具类\n</code></pre><h2 id=\"第20条：类层次优先于标签类\"><a href=\"#第20条：类层次优先于标签类\" class=\"headerlink\" title=\"第20条：类层次优先于标签类\"></a>第20条：类层次优先于标签类</h2><h2 id=\"第21条：用函数对象表示策略\"><a href=\"#第21条：用函数对象表示策略\" class=\"headerlink\" title=\"第21条：用函数对象表示策略\"></a>第21条：用函数对象表示策略</h2><h2 id=\"第22条：优先考虑静态成员类\"><a href=\"#第22条：优先考虑静态成员类\" class=\"headerlink\" title=\"第22条：优先考虑静态成员类\"></a>第22条：优先考虑静态成员类</h2><h3 id=\"嵌套类\"><a href=\"#嵌套类\" class=\"headerlink\" title=\"嵌套类\"></a>嵌套类</h3><pre><code>被定义在另一个类的内部类，嵌套类存在的目的应该只是为外部类提供服务。如果嵌套类可能会用于其他环境中，它就应该是顶层类\n</code></pre><p>嵌套类有四种</p>\n<ol>\n<li>静态成员类</li>\n<li>非静态成员类</li>\n<li>匿名类</li>\n<li>局部类<br>除了第一种之外，其他三种都被称为内部类</li>\n</ol>\n"},{"title":"Hello World","date":"2016-03-13T13:52:18.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-03-13 21:52:18\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2017-03-06T15:04:27.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s3n001464bfwy7y8y0v","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"git操作记录","date":"2016-11-30T01:20:44.000Z","_content":"\n## 开始\n设置git\n```shell\n$ git config --global user.name \"xyz327\"   //给自己起个用户名\n$ git config --globla user.email  \"xyz327@outlook.com\"   //填写自己的邮箱\n```\n## 解决冲突\n1. 放弃本地修改，直接更新远端内容  \n```shell\ngit fetch --all\ngit reset --hard origin/master\n# git fetch 只是下载远程的库的内容，\n# 不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本\n```\n2.\n","source":"_posts/git.md","raw":"---\ntitle: git操作记录\ndate: 2016-11-30 09:20:44\ntags: git\ncategories: git\n---\n\n## 开始\n设置git\n```shell\n$ git config --global user.name \"xyz327\"   //给自己起个用户名\n$ git config --globla user.email  \"xyz327@outlook.com\"   //填写自己的邮箱\n```\n## 解决冲突\n1. 放弃本地修改，直接更新远端内容  \n```shell\ngit fetch --all\ngit reset --hard origin/master\n# git fetch 只是下载远程的库的内容，\n# 不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本\n```\n2.\n","slug":"git","published":1,"updated":"2017-03-06T15:04:27.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s3o001864bfnwqr7qgc","content":"<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>设置git<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;xyz327&quot;   //给自己起个用户名</div><div class=\"line\">$ git config --globla user.email  &quot;xyz327@outlook.com&quot;   //填写自己的邮箱</div></pre></td></tr></table></figure></p>\n<h2 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h2><ol>\n<li>放弃本地修改，直接更新远端内容  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch --all</div><div class=\"line\">git reset --hard origin/master</div><div class=\"line\"># git fetch 只是下载远程的库的内容，</div><div class=\"line\"># 不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.</p>\n","excerpt":"","more":"<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>设置git<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;xyz327&quot;   //给自己起个用户名</div><div class=\"line\">$ git config --globla user.email  &quot;xyz327@outlook.com&quot;   //填写自己的邮箱</div></pre></td></tr></table></figure></p>\n<h2 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h2><ol>\n<li>放弃本地修改，直接更新远端内容  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch --all</div><div class=\"line\">git reset --hard origin/master</div><div class=\"line\"># git fetch 只是下载远程的库的内容，</div><div class=\"line\"># 不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.</p>\n"},{"title":"用karma+jasmine构建自动化测试环境","date":"2017-02-17T03:28:26.000Z","keywords":["测试 karma jasmine"],"_content":"使用karma+jasmine 构建前端自动化测试环境\n\n在项目下先安装karma 和 jasmine\n```shell\nnpm install karma karma-jasmine karma-chrome-launcher --save-dev\n```\n安装karma的命令行\n```shell\nnpm install karma-cli -g\n```\n\n在项目跟路径下初始化karma\n```shell\nkarma init\n```\n需要选择初始化的选项，根据自己的需要设置初始化的设置(会生成一个karma.conf.js)\n\n安装karma-coverage 生成代码覆盖率报告\n```shell\nnpm install karma-coverage --save-dev\n```\n安装karma-coverage后需要在karma.conf.js 添加相应的配置信息\n\n安装完成后，编写源文件以及相对应的测试文件\n\n开始执行测试(会打开chrome 修改了源文件或测试文件后会自动重新执行测试)\n```shell\nkarma start karma.conf.js\n```\n\nkarma.conf.js 具体内容\n<!--more-->\n```javascript\nmodule.exports = function(config) {\n  config.set({\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['jasmine'],\n\n    // list of files / patterns to load in the browser\n    // 要测试的源文件与测试文件的路径\n    files: [\n      'client/sdk/dist/*.js',\n      'spec/**/*[sS]pec.js'\n    ],\n    // list of files to exclude\n    exclude: [\n    ],\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    // 使用karma-coverage 生成对对应的源文件的 覆盖率报告\n    preprocessors: {\n      'client/sdk/dist/admin.js':'coverage'\n    },\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: ['progress','coverage'],\n    // karma-coverage 生成报告的设置\n    coverageReporter: {\n      type : 'html',\n      dir : 'spec/reporter/coverage/'\n    },\n    // web server port\n    port: 9876,\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: ['Chrome'],\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: false,\n    // Concurrency level\n    // how many browser should be started simultaneous\n    concurrency: Infinity\n  })\n}\n```\n","source":"_posts/karma-jasmine-build-an-automated-test-environment.md","raw":"---\ntitle: 用karma+jasmine构建自动化测试环境\ndate: 2017-02-17 11:28:26\ntags: [test karma jamine]\ncategories: [test]\nkeywords: [测试 karma jasmine]\n---\n使用karma+jasmine 构建前端自动化测试环境\n\n在项目下先安装karma 和 jasmine\n```shell\nnpm install karma karma-jasmine karma-chrome-launcher --save-dev\n```\n安装karma的命令行\n```shell\nnpm install karma-cli -g\n```\n\n在项目跟路径下初始化karma\n```shell\nkarma init\n```\n需要选择初始化的选项，根据自己的需要设置初始化的设置(会生成一个karma.conf.js)\n\n安装karma-coverage 生成代码覆盖率报告\n```shell\nnpm install karma-coverage --save-dev\n```\n安装karma-coverage后需要在karma.conf.js 添加相应的配置信息\n\n安装完成后，编写源文件以及相对应的测试文件\n\n开始执行测试(会打开chrome 修改了源文件或测试文件后会自动重新执行测试)\n```shell\nkarma start karma.conf.js\n```\n\nkarma.conf.js 具体内容\n<!--more-->\n```javascript\nmodule.exports = function(config) {\n  config.set({\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['jasmine'],\n\n    // list of files / patterns to load in the browser\n    // 要测试的源文件与测试文件的路径\n    files: [\n      'client/sdk/dist/*.js',\n      'spec/**/*[sS]pec.js'\n    ],\n    // list of files to exclude\n    exclude: [\n    ],\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    // 使用karma-coverage 生成对对应的源文件的 覆盖率报告\n    preprocessors: {\n      'client/sdk/dist/admin.js':'coverage'\n    },\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: ['progress','coverage'],\n    // karma-coverage 生成报告的设置\n    coverageReporter: {\n      type : 'html',\n      dir : 'spec/reporter/coverage/'\n    },\n    // web server port\n    port: 9876,\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: ['Chrome'],\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: false,\n    // Concurrency level\n    // how many browser should be started simultaneous\n    concurrency: Infinity\n  })\n}\n```\n","slug":"karma-jasmine-build-an-automated-test-environment","published":1,"updated":"2017-03-06T15:04:27.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s3p001b64bfnz8487pg","content":"<p>使用karma+jasmine 构建前端自动化测试环境</p>\n<p>在项目下先安装karma 和 jasmine<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma karma-jasmine karma-chrome-launcher --save-dev</div></pre></td></tr></table></figure></p>\n<p>安装karma的命令行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma-cli -g</div></pre></td></tr></table></figure></p>\n<p>在项目跟路径下初始化karma<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">karma init</div></pre></td></tr></table></figure></p>\n<p>需要选择初始化的选项，根据自己的需要设置初始化的设置(会生成一个karma.conf.js)</p>\n<p>安装karma-coverage 生成代码覆盖率报告<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma-coverage --save-dev</div></pre></td></tr></table></figure></p>\n<p>安装karma-coverage后需要在karma.conf.js 添加相应的配置信息</p>\n<p>安装完成后，编写源文件以及相对应的测试文件</p>\n<p>开始执行测试(会打开chrome 修改了源文件或测试文件后会自动重新执行测试)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">karma start karma.conf.js</div></pre></td></tr></table></figure></p>\n<p>karma.conf.js 具体内容<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">  config.set(&#123;</div><div class=\"line\">    <span class=\"comment\">// base path that will be used to resolve all patterns (eg. files, exclude)</span></div><div class=\"line\">    basePath: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"comment\">// frameworks to use</span></div><div class=\"line\">    <span class=\"comment\">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span></div><div class=\"line\">    frameworks: [<span class=\"string\">'jasmine'</span>],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// list of files / patterns to load in the browser</span></div><div class=\"line\">    <span class=\"comment\">// 要测试的源文件与测试文件的路径</span></div><div class=\"line\">    files: [</div><div class=\"line\">      <span class=\"string\">'client/sdk/dist/*.js'</span>,</div><div class=\"line\">      <span class=\"string\">'spec/**/*[sS]pec.js'</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"comment\">// list of files to exclude</span></div><div class=\"line\">    exclude: [</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"comment\">// preprocess matching files before serving them to the browser</span></div><div class=\"line\">    <span class=\"comment\">// available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span></div><div class=\"line\">    <span class=\"comment\">// 使用karma-coverage 生成对对应的源文件的 覆盖率报告</span></div><div class=\"line\">    preprocessors: &#123;</div><div class=\"line\">      <span class=\"string\">'client/sdk/dist/admin.js'</span>:<span class=\"string\">'coverage'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// test results reporter to use</span></div><div class=\"line\">    <span class=\"comment\">// possible values: 'dots', 'progress'</span></div><div class=\"line\">    <span class=\"comment\">// available reporters: https://npmjs.org/browse/keyword/karma-reporter</span></div><div class=\"line\">    reporters: [<span class=\"string\">'progress'</span>,<span class=\"string\">'coverage'</span>],</div><div class=\"line\">    <span class=\"comment\">// karma-coverage 生成报告的设置</span></div><div class=\"line\">    coverageReporter: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span> : <span class=\"string\">'html'</span>,</div><div class=\"line\">      <span class=\"attr\">dir</span> : <span class=\"string\">'spec/reporter/coverage/'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// web server port</span></div><div class=\"line\">    port: <span class=\"number\">9876</span>,</div><div class=\"line\">    <span class=\"comment\">// enable / disable colors in the output (reporters and logs)</span></div><div class=\"line\">    colors: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"comment\">// level of logging</span></div><div class=\"line\">    <span class=\"comment\">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span></div><div class=\"line\">    logLevel: config.LOG_INFO,</div><div class=\"line\">    <span class=\"comment\">// enable / disable watching file and executing tests whenever any file changes</span></div><div class=\"line\">    autoWatch: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"comment\">// start these browsers</span></div><div class=\"line\">    <span class=\"comment\">// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span></div><div class=\"line\">    browsers: [<span class=\"string\">'Chrome'</span>],</div><div class=\"line\">    <span class=\"comment\">// Continuous Integration mode</span></div><div class=\"line\">    <span class=\"comment\">// if true, Karma captures browsers, runs the tests and exits</span></div><div class=\"line\">    singleRun: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"comment\">// Concurrency level</span></div><div class=\"line\">    <span class=\"comment\">// how many browser should be started simultaneous</span></div><div class=\"line\">    concurrency: <span class=\"literal\">Infinity</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>使用karma+jasmine 构建前端自动化测试环境</p>\n<p>在项目下先安装karma 和 jasmine<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma karma-jasmine karma-chrome-launcher --save-dev</div></pre></td></tr></table></figure></p>\n<p>安装karma的命令行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma-cli -g</div></pre></td></tr></table></figure></p>\n<p>在项目跟路径下初始化karma<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">karma init</div></pre></td></tr></table></figure></p>\n<p>需要选择初始化的选项，根据自己的需要设置初始化的设置(会生成一个karma.conf.js)</p>\n<p>安装karma-coverage 生成代码覆盖率报告<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma-coverage --save-dev</div></pre></td></tr></table></figure></p>\n<p>安装karma-coverage后需要在karma.conf.js 添加相应的配置信息</p>\n<p>安装完成后，编写源文件以及相对应的测试文件</p>\n<p>开始执行测试(会打开chrome 修改了源文件或测试文件后会自动重新执行测试)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">karma start karma.conf.js</div></pre></td></tr></table></figure></p>\n<p>karma.conf.js 具体内容<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">  config.set(&#123;</div><div class=\"line\">    <span class=\"comment\">// base path that will be used to resolve all patterns (eg. files, exclude)</span></div><div class=\"line\">    basePath: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"comment\">// frameworks to use</span></div><div class=\"line\">    <span class=\"comment\">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span></div><div class=\"line\">    frameworks: [<span class=\"string\">'jasmine'</span>],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// list of files / patterns to load in the browser</span></div><div class=\"line\">    <span class=\"comment\">// 要测试的源文件与测试文件的路径</span></div><div class=\"line\">    files: [</div><div class=\"line\">      <span class=\"string\">'client/sdk/dist/*.js'</span>,</div><div class=\"line\">      <span class=\"string\">'spec/**/*[sS]pec.js'</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"comment\">// list of files to exclude</span></div><div class=\"line\">    exclude: [</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"comment\">// preprocess matching files before serving them to the browser</span></div><div class=\"line\">    <span class=\"comment\">// available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span></div><div class=\"line\">    <span class=\"comment\">// 使用karma-coverage 生成对对应的源文件的 覆盖率报告</span></div><div class=\"line\">    preprocessors: &#123;</div><div class=\"line\">      <span class=\"string\">'client/sdk/dist/admin.js'</span>:<span class=\"string\">'coverage'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// test results reporter to use</span></div><div class=\"line\">    <span class=\"comment\">// possible values: 'dots', 'progress'</span></div><div class=\"line\">    <span class=\"comment\">// available reporters: https://npmjs.org/browse/keyword/karma-reporter</span></div><div class=\"line\">    reporters: [<span class=\"string\">'progress'</span>,<span class=\"string\">'coverage'</span>],</div><div class=\"line\">    <span class=\"comment\">// karma-coverage 生成报告的设置</span></div><div class=\"line\">    coverageReporter: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span> : <span class=\"string\">'html'</span>,</div><div class=\"line\">      <span class=\"attr\">dir</span> : <span class=\"string\">'spec/reporter/coverage/'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// web server port</span></div><div class=\"line\">    port: <span class=\"number\">9876</span>,</div><div class=\"line\">    <span class=\"comment\">// enable / disable colors in the output (reporters and logs)</span></div><div class=\"line\">    colors: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"comment\">// level of logging</span></div><div class=\"line\">    <span class=\"comment\">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span></div><div class=\"line\">    logLevel: config.LOG_INFO,</div><div class=\"line\">    <span class=\"comment\">// enable / disable watching file and executing tests whenever any file changes</span></div><div class=\"line\">    autoWatch: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"comment\">// start these browsers</span></div><div class=\"line\">    <span class=\"comment\">// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span></div><div class=\"line\">    browsers: [<span class=\"string\">'Chrome'</span>],</div><div class=\"line\">    <span class=\"comment\">// Continuous Integration mode</span></div><div class=\"line\">    <span class=\"comment\">// if true, Karma captures browsers, runs the tests and exits</span></div><div class=\"line\">    singleRun: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"comment\">// Concurrency level</span></div><div class=\"line\">    <span class=\"comment\">// how many browser should be started simultaneous</span></div><div class=\"line\">    concurrency: <span class=\"literal\">Infinity</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"loopback two","date":"2016-12-06T03:44:37.000Z","keywords":"loopback","_content":"\nloopback PersistedModel 的方法与rest api对应表\n\nmodel的方法名|HTTP Method|restApi url|说明\n-----------|-----------|-----------|---\n`create`|POST|/Model\n`upsert`|PATCH|/Model\n`upsert`|PUT|/Model\n`exists`  |GET|/Model/:id/exists\n`findById`|GET|/Model/:id|查找对应id的Model\n`prototype.updateAttributes`|PATCH|/Model/:id\n`prototype.updateAttributes`|PUT|/Model/:id\n`destroyById`/`deleteById`|DELETE|/Model/:id\n`exists`|HEAD|/Model/:id\n`find`    |GET|/Model\n`findOne` |GET|/Model/findOne\n`count`    |GET|/Model/count\n`createChangeStream`| GET|/Model/chage-stream\n`createChangeStream`| POST|/Model/chage-stream\n`replaceById`|POST|/Model/:id/replace\n`replaceOrCreate`|POST|/Model/replaceOrCreate\n`updateAll`|POST|/Model/update\n`upsertWithWhere`|POST|/Model/upsertWithWhere\n\n关系模型的部分方法与rest api 对应表 更多说明参考 [官方文档](http://loopback.io/doc/en/lb2/Accessing-related-models.html)\n\nmodel的关联对象的方法名|HTTP Method|restApi url|说明\n-------------------|-----------|-----------|--------\n`__get__attr`|GET|/Model/:id/attr|查找对应id的Model下的attr数据\n`__create__attr`|POST|/Model/:id/attr|创建一条对应id的Model下的attr数据\n`__delete__attr`|DELETE|/Model/:id/attr|删除对应id的Model下的所有attr数据\n`__count__attr`|GET|/Model/:id/attr/count|查找对应id的Model下的attr数据数量\n`__findById__attr`|GET|/Model/:id/attr/:attrId|查找对应id的Model下的id为attrId的数据\n`__destroyById__attr`|DELETE|/Model/:id/attr/:attrId|删除对应id的Model下的id为attrId的数据\n`__updateById__attr`|PUT|/Model/:id/attr/:attrId|更新对应id的Model下的id为attrId的数据\n`__exists__attr`|HEAD|/Model/:id/attr/rel/:attrId|检查对应id的Model下的id为attrId的数据(貌似没什么用)\n`__link__attr`|PUT|/Model/:id/attr/rel/:attrId|新增Model与attr的中间数据 (多对多关系)\n`__unlink__attr`|DELETE|/Model/:id/attr/rel/:attrId|删除Model与attr的中间数据 (多对多关系)\n","source":"_posts/loopback-two.md","raw":"---\ntitle: loopback two\ndate: 2016-12-06 11:44:37\ntags: loopback\ncategories: loopback\nkeywords: loopback\n---\n\nloopback PersistedModel 的方法与rest api对应表\n\nmodel的方法名|HTTP Method|restApi url|说明\n-----------|-----------|-----------|---\n`create`|POST|/Model\n`upsert`|PATCH|/Model\n`upsert`|PUT|/Model\n`exists`  |GET|/Model/:id/exists\n`findById`|GET|/Model/:id|查找对应id的Model\n`prototype.updateAttributes`|PATCH|/Model/:id\n`prototype.updateAttributes`|PUT|/Model/:id\n`destroyById`/`deleteById`|DELETE|/Model/:id\n`exists`|HEAD|/Model/:id\n`find`    |GET|/Model\n`findOne` |GET|/Model/findOne\n`count`    |GET|/Model/count\n`createChangeStream`| GET|/Model/chage-stream\n`createChangeStream`| POST|/Model/chage-stream\n`replaceById`|POST|/Model/:id/replace\n`replaceOrCreate`|POST|/Model/replaceOrCreate\n`updateAll`|POST|/Model/update\n`upsertWithWhere`|POST|/Model/upsertWithWhere\n\n关系模型的部分方法与rest api 对应表 更多说明参考 [官方文档](http://loopback.io/doc/en/lb2/Accessing-related-models.html)\n\nmodel的关联对象的方法名|HTTP Method|restApi url|说明\n-------------------|-----------|-----------|--------\n`__get__attr`|GET|/Model/:id/attr|查找对应id的Model下的attr数据\n`__create__attr`|POST|/Model/:id/attr|创建一条对应id的Model下的attr数据\n`__delete__attr`|DELETE|/Model/:id/attr|删除对应id的Model下的所有attr数据\n`__count__attr`|GET|/Model/:id/attr/count|查找对应id的Model下的attr数据数量\n`__findById__attr`|GET|/Model/:id/attr/:attrId|查找对应id的Model下的id为attrId的数据\n`__destroyById__attr`|DELETE|/Model/:id/attr/:attrId|删除对应id的Model下的id为attrId的数据\n`__updateById__attr`|PUT|/Model/:id/attr/:attrId|更新对应id的Model下的id为attrId的数据\n`__exists__attr`|HEAD|/Model/:id/attr/rel/:attrId|检查对应id的Model下的id为attrId的数据(貌似没什么用)\n`__link__attr`|PUT|/Model/:id/attr/rel/:attrId|新增Model与attr的中间数据 (多对多关系)\n`__unlink__attr`|DELETE|/Model/:id/attr/rel/:attrId|删除Model与attr的中间数据 (多对多关系)\n","slug":"loopback-two","published":1,"updated":"2017-03-06T15:04:27.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s3r001g64bf4fc32g8d","content":"<p>loopback PersistedModel 的方法与rest api对应表</p>\n<table>\n<thead>\n<tr>\n<th>model的方法名</th>\n<th>HTTP Method</th>\n<th>restApi url</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>create</code></td>\n<td>POST</td>\n<td>/Model</td>\n</tr>\n<tr>\n<td><code>upsert</code></td>\n<td>PATCH</td>\n<td>/Model</td>\n</tr>\n<tr>\n<td><code>upsert</code></td>\n<td>PUT</td>\n<td>/Model</td>\n</tr>\n<tr>\n<td><code>exists</code></td>\n<td>GET</td>\n<td>/Model/:id/exists</td>\n</tr>\n<tr>\n<td><code>findById</code></td>\n<td>GET</td>\n<td>/Model/:id</td>\n<td>查找对应id的Model</td>\n</tr>\n<tr>\n<td><code>prototype.updateAttributes</code></td>\n<td>PATCH</td>\n<td>/Model/:id</td>\n</tr>\n<tr>\n<td><code>prototype.updateAttributes</code></td>\n<td>PUT</td>\n<td>/Model/:id</td>\n</tr>\n<tr>\n<td><code>destroyById</code>/<code>deleteById</code></td>\n<td>DELETE</td>\n<td>/Model/:id</td>\n</tr>\n<tr>\n<td><code>exists</code></td>\n<td>HEAD</td>\n<td>/Model/:id</td>\n</tr>\n<tr>\n<td><code>find</code></td>\n<td>GET</td>\n<td>/Model</td>\n</tr>\n<tr>\n<td><code>findOne</code></td>\n<td>GET</td>\n<td>/Model/findOne</td>\n</tr>\n<tr>\n<td><code>count</code></td>\n<td>GET</td>\n<td>/Model/count</td>\n</tr>\n<tr>\n<td><code>createChangeStream</code></td>\n<td>GET</td>\n<td>/Model/chage-stream</td>\n</tr>\n<tr>\n<td><code>createChangeStream</code></td>\n<td>POST</td>\n<td>/Model/chage-stream</td>\n</tr>\n<tr>\n<td><code>replaceById</code></td>\n<td>POST</td>\n<td>/Model/:id/replace</td>\n</tr>\n<tr>\n<td><code>replaceOrCreate</code></td>\n<td>POST</td>\n<td>/Model/replaceOrCreate</td>\n</tr>\n<tr>\n<td><code>updateAll</code></td>\n<td>POST</td>\n<td>/Model/update</td>\n</tr>\n<tr>\n<td><code>upsertWithWhere</code></td>\n<td>POST</td>\n<td>/Model/upsertWithWhere</td>\n</tr>\n</tbody>\n</table>\n<p>关系模型的部分方法与rest api 对应表 更多说明参考 <a href=\"http://loopback.io/doc/en/lb2/Accessing-related-models.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<table>\n<thead>\n<tr>\n<th>model的关联对象的方法名</th>\n<th>HTTP Method</th>\n<th>restApi url</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>__get__attr</code></td>\n<td>GET</td>\n<td>/Model/:id/attr</td>\n<td>查找对应id的Model下的attr数据</td>\n</tr>\n<tr>\n<td><code>__create__attr</code></td>\n<td>POST</td>\n<td>/Model/:id/attr</td>\n<td>创建一条对应id的Model下的attr数据</td>\n</tr>\n<tr>\n<td><code>__delete__attr</code></td>\n<td>DELETE</td>\n<td>/Model/:id/attr</td>\n<td>删除对应id的Model下的所有attr数据</td>\n</tr>\n<tr>\n<td><code>__count__attr</code></td>\n<td>GET</td>\n<td>/Model/:id/attr/count</td>\n<td>查找对应id的Model下的attr数据数量</td>\n</tr>\n<tr>\n<td><code>__findById__attr</code></td>\n<td>GET</td>\n<td>/Model/:id/attr/:attrId</td>\n<td>查找对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__destroyById__attr</code></td>\n<td>DELETE</td>\n<td>/Model/:id/attr/:attrId</td>\n<td>删除对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__updateById__attr</code></td>\n<td>PUT</td>\n<td>/Model/:id/attr/:attrId</td>\n<td>更新对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__exists__attr</code></td>\n<td>HEAD</td>\n<td>/Model/:id/attr/rel/:attrId</td>\n<td>检查对应id的Model下的id为attrId的数据(貌似没什么用)</td>\n</tr>\n<tr>\n<td><code>__link__attr</code></td>\n<td>PUT</td>\n<td>/Model/:id/attr/rel/:attrId</td>\n<td>新增Model与attr的中间数据 (多对多关系)</td>\n</tr>\n<tr>\n<td><code>__unlink__attr</code></td>\n<td>DELETE</td>\n<td>/Model/:id/attr/rel/:attrId</td>\n<td>删除Model与attr的中间数据 (多对多关系)</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<p>loopback PersistedModel 的方法与rest api对应表</p>\n<table>\n<thead>\n<tr>\n<th>model的方法名</th>\n<th>HTTP Method</th>\n<th>restApi url</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>create</code></td>\n<td>POST</td>\n<td>/Model</td>\n</tr>\n<tr>\n<td><code>upsert</code></td>\n<td>PATCH</td>\n<td>/Model</td>\n</tr>\n<tr>\n<td><code>upsert</code></td>\n<td>PUT</td>\n<td>/Model</td>\n</tr>\n<tr>\n<td><code>exists</code></td>\n<td>GET</td>\n<td>/Model/:id/exists</td>\n</tr>\n<tr>\n<td><code>findById</code></td>\n<td>GET</td>\n<td>/Model/:id</td>\n<td>查找对应id的Model</td>\n</tr>\n<tr>\n<td><code>prototype.updateAttributes</code></td>\n<td>PATCH</td>\n<td>/Model/:id</td>\n</tr>\n<tr>\n<td><code>prototype.updateAttributes</code></td>\n<td>PUT</td>\n<td>/Model/:id</td>\n</tr>\n<tr>\n<td><code>destroyById</code>/<code>deleteById</code></td>\n<td>DELETE</td>\n<td>/Model/:id</td>\n</tr>\n<tr>\n<td><code>exists</code></td>\n<td>HEAD</td>\n<td>/Model/:id</td>\n</tr>\n<tr>\n<td><code>find</code></td>\n<td>GET</td>\n<td>/Model</td>\n</tr>\n<tr>\n<td><code>findOne</code></td>\n<td>GET</td>\n<td>/Model/findOne</td>\n</tr>\n<tr>\n<td><code>count</code></td>\n<td>GET</td>\n<td>/Model/count</td>\n</tr>\n<tr>\n<td><code>createChangeStream</code></td>\n<td>GET</td>\n<td>/Model/chage-stream</td>\n</tr>\n<tr>\n<td><code>createChangeStream</code></td>\n<td>POST</td>\n<td>/Model/chage-stream</td>\n</tr>\n<tr>\n<td><code>replaceById</code></td>\n<td>POST</td>\n<td>/Model/:id/replace</td>\n</tr>\n<tr>\n<td><code>replaceOrCreate</code></td>\n<td>POST</td>\n<td>/Model/replaceOrCreate</td>\n</tr>\n<tr>\n<td><code>updateAll</code></td>\n<td>POST</td>\n<td>/Model/update</td>\n</tr>\n<tr>\n<td><code>upsertWithWhere</code></td>\n<td>POST</td>\n<td>/Model/upsertWithWhere</td>\n</tr>\n</tbody>\n</table>\n<p>关系模型的部分方法与rest api 对应表 更多说明参考 <a href=\"http://loopback.io/doc/en/lb2/Accessing-related-models.html\">官方文档</a></p>\n<table>\n<thead>\n<tr>\n<th>model的关联对象的方法名</th>\n<th>HTTP Method</th>\n<th>restApi url</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>__get__attr</code></td>\n<td>GET</td>\n<td>/Model/:id/attr</td>\n<td>查找对应id的Model下的attr数据</td>\n</tr>\n<tr>\n<td><code>__create__attr</code></td>\n<td>POST</td>\n<td>/Model/:id/attr</td>\n<td>创建一条对应id的Model下的attr数据</td>\n</tr>\n<tr>\n<td><code>__delete__attr</code></td>\n<td>DELETE</td>\n<td>/Model/:id/attr</td>\n<td>删除对应id的Model下的所有attr数据</td>\n</tr>\n<tr>\n<td><code>__count__attr</code></td>\n<td>GET</td>\n<td>/Model/:id/attr/count</td>\n<td>查找对应id的Model下的attr数据数量</td>\n</tr>\n<tr>\n<td><code>__findById__attr</code></td>\n<td>GET</td>\n<td>/Model/:id/attr/:attrId</td>\n<td>查找对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__destroyById__attr</code></td>\n<td>DELETE</td>\n<td>/Model/:id/attr/:attrId</td>\n<td>删除对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__updateById__attr</code></td>\n<td>PUT</td>\n<td>/Model/:id/attr/:attrId</td>\n<td>更新对应id的Model下的id为attrId的数据</td>\n</tr>\n<tr>\n<td><code>__exists__attr</code></td>\n<td>HEAD</td>\n<td>/Model/:id/attr/rel/:attrId</td>\n<td>检查对应id的Model下的id为attrId的数据(貌似没什么用)</td>\n</tr>\n<tr>\n<td><code>__link__attr</code></td>\n<td>PUT</td>\n<td>/Model/:id/attr/rel/:attrId</td>\n<td>新增Model与attr的中间数据 (多对多关系)</td>\n</tr>\n<tr>\n<td><code>__unlink__attr</code></td>\n<td>DELETE</td>\n<td>/Model/:id/attr/rel/:attrId</td>\n<td>删除Model与attr的中间数据 (多对多关系)</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"loopback one","date":"2016-12-01T06:35:20.000Z","keywords":"loopback","_content":"\nloopback是一个用来构建restfulAPI的轻量级的nodejs框架 基于express\n[官网](http://loopback.io/) [github](https://github.com/strongloop/loopback/)\n<!-- more -->\n## 开始\n~~~安装slc工具~~~ 官网现在使用loopback-cli代替了原来的slc\n\n关于基础的安装官网上都有介绍，直接开始\n### 新建项目\n  ```shell\n  lb\n  #输入项目名,选择版本，选择对应的模板，一个loopback项目就已经创建好了。\n  ```\n我选择的是`3.x`版和 `api-server`的模板\n\n  然后等待下载依赖包就ok了\n  **这里npm可能会比较慢，推荐安装[nrm](https://github.com/Pana/nrm)，可以切换npm的源**\n### 启动\n  ```shell\n  node .\n  ```\n  然后浏览器进入 [http://localhost:3000/explorer](http://localhost:3000/explorer) 查看相应的restfulAPI\n  会有一个默认的User\n\n一个loopback项目的目录结构如下\n```\n\nloopback-demo\n|\n|--client //存放静态文件\n|\n|--common\n|   |\n|   |--mixins //mixins的相关Model\n|   |--models //公共的model\n|\n|--server\n|   |\n|   |--boot //项目启动时会加载这个目录下的文件\n|   |--models //服务器的model\n|   |--component-config.js // \n|   |--config.js //loopback配置文件\n|   |--datasources.js //数据源设置\n|   |--middleware.js //中间件设置\n|   |--model-config.js //model定义\n|   |--server.js //启动文件\n|\n```\n创建一个用户管理的restfulApi程序\n\n### 新建BaseUser模型\n```shell\nlb model \n#根据提示创建一个名为BaseUser的模型 继承自User\n```\n`User`模型为loopback内置的用户模型，包含了login/logout/accesstoken等方法属性，我们自己的用户模型自己继承与它就行\n\n### 新建File模型\n\n`PersistedModel`模型为内置的包含CRUD的存储模型","source":"_posts/loopback-one.md","raw":"---\ntitle: loopback one\ndate: 2016-12-01 14:35:20\ntags: [loopback]\ncategories: [loopback]\nkeywords: loopback\n---\n\nloopback是一个用来构建restfulAPI的轻量级的nodejs框架 基于express\n[官网](http://loopback.io/) [github](https://github.com/strongloop/loopback/)\n<!-- more -->\n## 开始\n~~~安装slc工具~~~ 官网现在使用loopback-cli代替了原来的slc\n\n关于基础的安装官网上都有介绍，直接开始\n### 新建项目\n  ```shell\n  lb\n  #输入项目名,选择版本，选择对应的模板，一个loopback项目就已经创建好了。\n  ```\n我选择的是`3.x`版和 `api-server`的模板\n\n  然后等待下载依赖包就ok了\n  **这里npm可能会比较慢，推荐安装[nrm](https://github.com/Pana/nrm)，可以切换npm的源**\n### 启动\n  ```shell\n  node .\n  ```\n  然后浏览器进入 [http://localhost:3000/explorer](http://localhost:3000/explorer) 查看相应的restfulAPI\n  会有一个默认的User\n\n一个loopback项目的目录结构如下\n```\n\nloopback-demo\n|\n|--client //存放静态文件\n|\n|--common\n|   |\n|   |--mixins //mixins的相关Model\n|   |--models //公共的model\n|\n|--server\n|   |\n|   |--boot //项目启动时会加载这个目录下的文件\n|   |--models //服务器的model\n|   |--component-config.js // \n|   |--config.js //loopback配置文件\n|   |--datasources.js //数据源设置\n|   |--middleware.js //中间件设置\n|   |--model-config.js //model定义\n|   |--server.js //启动文件\n|\n```\n创建一个用户管理的restfulApi程序\n\n### 新建BaseUser模型\n```shell\nlb model \n#根据提示创建一个名为BaseUser的模型 继承自User\n```\n`User`模型为loopback内置的用户模型，包含了login/logout/accesstoken等方法属性，我们自己的用户模型自己继承与它就行\n\n### 新建File模型\n\n`PersistedModel`模型为内置的包含CRUD的存储模型","slug":"loopback-one","published":1,"updated":"2017-04-24T14:25:01.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s3s001j64bf7egltv4i","content":"<p>loopback是一个用来构建restfulAPI的轻量级的nodejs框架 基于express<br><a href=\"http://loopback.io/\" target=\"_blank\" rel=\"external\">官网</a> <a href=\"https://github.com/strongloop/loopback/\" target=\"_blank\" rel=\"external\">github</a><br><a id=\"more\"></a></p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p><del>~安装slc工具</del>~ 官网现在使用loopback-cli代替了原来的slc</p>\n<p>关于基础的安装官网上都有介绍，直接开始</p>\n<h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">lb</div><div class=\"line\">#输入项目名,选择版本，选择对应的模板，一个loopback项目就已经创建好了。</div></pre></td></tr></table></figure>\n<p>我选择的是<code>3.x</code>版和 <code>api-server</code>的模板</p>\n<p>  然后等待下载依赖包就ok了<br>  <strong>这里npm可能会比较慢，推荐安装<a href=\"https://github.com/Pana/nrm\" target=\"_blank\" rel=\"external\">nrm</a>，可以切换npm的源</strong></p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node .</div></pre></td></tr></table></figure>\n<p>  然后浏览器进入 <a href=\"http://localhost:3000/explorer\" target=\"_blank\" rel=\"external\">http://localhost:3000/explorer</a> 查看相应的restfulAPI<br>  会有一个默认的User</p>\n<p>一个loopback项目的目录结构如下<br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">loopback-demo</div><div class=\"line\">|<span class=\"string\"></span></div><div class=\"line\">|<span class=\"string\">--client //存放静态文件</span></div><div class=\"line\">|</div><div class=\"line\">|<span class=\"string\">--common</span></div><div class=\"line\">|<span class=\"string\">   </span>|</div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--mixins //mixins的相关Model</span></div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--models //公共的model</span></div><div class=\"line\">|</div><div class=\"line\">|<span class=\"string\">--server</span></div><div class=\"line\">|<span class=\"string\">   </span>|</div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--boot //项目启动时会加载这个目录下的文件</span></div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--models //服务器的model</span></div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--component-config.js // </span></div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--config.js //loopback配置文件</span></div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--datasources.js //数据源设置</span></div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--middleware.js //中间件设置</span></div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--model-config.js //model定义</span></div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--server.js //启动文件</span></div><div class=\"line\">|</div></pre></td></tr></table></figure></p>\n<p>创建一个用户管理的restfulApi程序</p>\n<h3 id=\"新建BaseUser模型\"><a href=\"#新建BaseUser模型\" class=\"headerlink\" title=\"新建BaseUser模型\"></a>新建BaseUser模型</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">lb model </div><div class=\"line\">#根据提示创建一个名为BaseUser的模型 继承自User</div></pre></td></tr></table></figure>\n<p><code>User</code>模型为loopback内置的用户模型，包含了login/logout/accesstoken等方法属性，我们自己的用户模型自己继承与它就行</p>\n<h3 id=\"新建File模型\"><a href=\"#新建File模型\" class=\"headerlink\" title=\"新建File模型\"></a>新建File模型</h3><p><code>PersistedModel</code>模型为内置的包含CRUD的存储模型</p>\n","excerpt":"<p>loopback是一个用来构建restfulAPI的轻量级的nodejs框架 基于express<br><a href=\"http://loopback.io/\">官网</a> <a href=\"https://github.com/strongloop/loopback/\">github</a><br>","more":"</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p><del>~安装slc工具</del>~ 官网现在使用loopback-cli代替了原来的slc</p>\n<p>关于基础的安装官网上都有介绍，直接开始</p>\n<h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">lb</div><div class=\"line\">#输入项目名,选择版本，选择对应的模板，一个loopback项目就已经创建好了。</div></pre></td></tr></table></figure>\n<p>我选择的是<code>3.x</code>版和 <code>api-server</code>的模板</p>\n<p>  然后等待下载依赖包就ok了<br>  <strong>这里npm可能会比较慢，推荐安装<a href=\"https://github.com/Pana/nrm\">nrm</a>，可以切换npm的源</strong></p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node .</div></pre></td></tr></table></figure>\n<p>  然后浏览器进入 <a href=\"http://localhost:3000/explorer\">http://localhost:3000/explorer</a> 查看相应的restfulAPI<br>  会有一个默认的User</p>\n<p>一个loopback项目的目录结构如下<br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">loopback-demo</div><div class=\"line\">|<span class=\"string\"></div><div class=\"line\"></span>|<span class=\"string\">--client //存放静态文件</div><div class=\"line\"></span>|</div><div class=\"line\">|<span class=\"string\">--common</div><div class=\"line\"></span>|<span class=\"string\">   </span>|</div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--mixins //mixins的相关Model</div><div class=\"line\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--models //公共的model</div><div class=\"line\"></span>|</div><div class=\"line\">|<span class=\"string\">--server</div><div class=\"line\"></span>|<span class=\"string\">   </span>|</div><div class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">--boot //项目启动时会加载这个目录下的文件</div><div class=\"line\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--models //服务器的model</div><div class=\"line\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--component-config.js // </div><div class=\"line\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--config.js //loopback配置文件</div><div class=\"line\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--datasources.js //数据源设置</div><div class=\"line\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--middleware.js //中间件设置</div><div class=\"line\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--model-config.js //model定义</div><div class=\"line\"></span>|<span class=\"string\">   </span>|<span class=\"string\">--server.js //启动文件</div><div class=\"line\"></span>|</div></pre></td></tr></table></figure></p>\n<p>创建一个用户管理的restfulApi程序</p>\n<h3 id=\"新建BaseUser模型\"><a href=\"#新建BaseUser模型\" class=\"headerlink\" title=\"新建BaseUser模型\"></a>新建BaseUser模型</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">lb model </div><div class=\"line\">#根据提示创建一个名为BaseUser的模型 继承自User</div></pre></td></tr></table></figure>\n<p><code>User</code>模型为loopback内置的用户模型，包含了login/logout/accesstoken等方法属性，我们自己的用户模型自己继承与它就行</p>\n<h3 id=\"新建File模型\"><a href=\"#新建File模型\" class=\"headerlink\" title=\"新建File模型\"></a>新建File模型</h3><p><code>PersistedModel</code>模型为内置的包含CRUD的存储模型</p>"},{"title":"maven-release版本管理插件","date":"2017-11-02T10:22:49.000Z","keywords":"maven","_content":"使用maven管理项目时，完成开发后需要把项目发布到maven私服上去。\n\n手动`SNAPSHOT`版本开发时执行`mvn clean deploy`就可以部署到私服上。\n\n在开发是还会需要SNAPSHOT版本和RELEASE版本可以用`mvn versions:set -DnewVersion=0.1.1-SNAPSHOT`进行更改版本号\n\n当然maven还有更好的管理插件进行RELEASE管理`maven-release-plugin`\n\n<!--more-->\n\n在pom.xml添加插件\n```xml\n<build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-release-plugin</artifactId>\n        <version>2.5.3</version>\n      </plugin>\n    </plugins>\n  </build>\n```\n在pom.xml添加scm信息(SCM：Software Configuration Management)\n```xml\n  <scm>\n    <!--项目url-->\n    <url>http://192.168.8.65/xx/cli</url>\n    <!--代码版本仓库地址-->\n    <connection>scm:git:http://192.168.8.65/xx/cli.git</connection>\n    <developerConnection>scm:git:http://192.168.8.65/xx/cli.git</developerConnection>\n    <tag>HEAD</tag>\n  </scm>\n```\n配置好后可以使用mvn的scm命令管理\n\n添加scm插件\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-scm-plugin</artifactId>\n    <version>1.9.5</version>\n</plugin>\n\n```\n```bash\n #提交\nmvn -Dmessage=\"<commit_log_here>\" scm:checkin\n\n# 获取最新版本：\nmvn scm:update\n```\n\nSCM支持两种连接类型：connection 及 developerConnection\n\n```xml\n <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-scm-plugin</artifactId>\n        <version>1.8.1</version>\n        <configuration>\n            <!--<connectionType>developerConnection</connectionType>-->\n            <connectionType>connection</connectionType>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n```\n项目是SNAPSHOT版本开发好之后就可以发布RELEASE版了，直接使用\n\n```bash\n#把版本号改为RELEASE，向代码仓库推送新的版本\nmvn release:prepare\n\n#向maven私服中推送RELEASE版本\nmvn release:perform\n\n#prepare之后可以回退\nmvn release:rollback\n```\n\n使用`mvn release`命令时 如需要添加跳过测试之类的参数 需要使用`-Darguments`进行指定\n\n```bash\n mvn release:perform -Darguments=\"-Dmaven.test.skip=true -Dmaven.javadoc.skip=true\" \n```\n\n\n\n","source":"_posts/maven-release版本管理插件.md","raw":"---\ntitle: maven-release版本管理插件\ndate: 2017-11-02 18:22:49\ntags: maven\ncategories: maven\nkeywords: maven\n---\n使用maven管理项目时，完成开发后需要把项目发布到maven私服上去。\n\n手动`SNAPSHOT`版本开发时执行`mvn clean deploy`就可以部署到私服上。\n\n在开发是还会需要SNAPSHOT版本和RELEASE版本可以用`mvn versions:set -DnewVersion=0.1.1-SNAPSHOT`进行更改版本号\n\n当然maven还有更好的管理插件进行RELEASE管理`maven-release-plugin`\n\n<!--more-->\n\n在pom.xml添加插件\n```xml\n<build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-release-plugin</artifactId>\n        <version>2.5.3</version>\n      </plugin>\n    </plugins>\n  </build>\n```\n在pom.xml添加scm信息(SCM：Software Configuration Management)\n```xml\n  <scm>\n    <!--项目url-->\n    <url>http://192.168.8.65/xx/cli</url>\n    <!--代码版本仓库地址-->\n    <connection>scm:git:http://192.168.8.65/xx/cli.git</connection>\n    <developerConnection>scm:git:http://192.168.8.65/xx/cli.git</developerConnection>\n    <tag>HEAD</tag>\n  </scm>\n```\n配置好后可以使用mvn的scm命令管理\n\n添加scm插件\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-scm-plugin</artifactId>\n    <version>1.9.5</version>\n</plugin>\n\n```\n```bash\n #提交\nmvn -Dmessage=\"<commit_log_here>\" scm:checkin\n\n# 获取最新版本：\nmvn scm:update\n```\n\nSCM支持两种连接类型：connection 及 developerConnection\n\n```xml\n <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-scm-plugin</artifactId>\n        <version>1.8.1</version>\n        <configuration>\n            <!--<connectionType>developerConnection</connectionType>-->\n            <connectionType>connection</connectionType>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n```\n项目是SNAPSHOT版本开发好之后就可以发布RELEASE版了，直接使用\n\n```bash\n#把版本号改为RELEASE，向代码仓库推送新的版本\nmvn release:prepare\n\n#向maven私服中推送RELEASE版本\nmvn release:perform\n\n#prepare之后可以回退\nmvn release:rollback\n```\n\n使用`mvn release`命令时 如需要添加跳过测试之类的参数 需要使用`-Darguments`进行指定\n\n```bash\n mvn release:perform -Darguments=\"-Dmaven.test.skip=true -Dmaven.javadoc.skip=true\" \n```\n\n\n\n","slug":"maven-release版本管理插件","published":1,"updated":"2018-04-03T11:57:06.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s3u001m64bfugzrfyk1","content":"<p>使用maven管理项目时，完成开发后需要把项目发布到maven私服上去。</p>\n<p>手动<code>SNAPSHOT</code>版本开发时执行<code>mvn clean deploy</code>就可以部署到私服上。</p>\n<p>在开发是还会需要SNAPSHOT版本和RELEASE版本可以用<code>mvn versions:set -DnewVersion=0.1.1-SNAPSHOT</code>进行更改版本号</p>\n<p>当然maven还有更好的管理插件进行RELEASE管理<code>maven-release-plugin</code></p>\n<a id=\"more\"></a>\n<p>在pom.xml添加插件<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-release-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在pom.xml添加scm信息(SCM：Software Configuration Management)<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scm</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--项目url--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://192.168.8.65/xx/cli<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--代码版本仓库地址--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">connection</span>&gt;</span>scm:git:http://192.168.8.65/xx/cli.git<span class=\"tag\">&lt;/<span class=\"name\">connection</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">developerConnection</span>&gt;</span>scm:git:http://192.168.8.65/xx/cli.git<span class=\"tag\">&lt;/<span class=\"name\">developerConnection</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tag</span>&gt;</span>HEAD<span class=\"tag\">&lt;/<span class=\"name\">tag</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">scm</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>配置好后可以使用mvn的scm命令管理</p>\n<p>添加scm插件<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-scm-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">#提交</span></div><div class=\"line\">mvn -Dmessage=<span class=\"string\">\"&lt;commit_log_here&gt;\"</span> scm:checkin</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取最新版本：</span></div><div class=\"line\">mvn scm:update</div></pre></td></tr></table></figure>\n<p>SCM支持两种连接类型：connection 及 developerConnection</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-scm-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">           <span class=\"comment\">&lt;!--&lt;connectionType&gt;developerConnection&lt;/connectionType&gt;--&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">connectionType</span>&gt;</span>connection<span class=\"tag\">&lt;/<span class=\"name\">connectionType</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>项目是SNAPSHOT版本开发好之后就可以发布RELEASE版了，直接使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#把版本号改为RELEASE，向代码仓库推送新的版本</span></div><div class=\"line\">mvn release:prepare</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#向maven私服中推送RELEASE版本</span></div><div class=\"line\">mvn release:perform</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#prepare之后可以回退</span></div><div class=\"line\">mvn release:rollback</div></pre></td></tr></table></figure>\n<p>使用<code>mvn release</code>命令时 如需要添加跳过测试之类的参数 需要使用<code>-Darguments</code>进行指定</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn release:perform -Darguments=<span class=\"string\">\"-Dmaven.test.skip=true -Dmaven.javadoc.skip=true\"</span></div></pre></td></tr></table></figure>\n","excerpt":"<p>使用maven管理项目时，完成开发后需要把项目发布到maven私服上去。</p>\n<p>手动<code>SNAPSHOT</code>版本开发时执行<code>mvn clean deploy</code>就可以部署到私服上。</p>\n<p>在开发是还会需要SNAPSHOT版本和RELEASE版本可以用<code>mvn versions:set -DnewVersion=0.1.1-SNAPSHOT</code>进行更改版本号</p>\n<p>当然maven还有更好的管理插件进行RELEASE管理<code>maven-release-plugin</code></p>","more":"<p>在pom.xml添加插件<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-release-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在pom.xml添加scm信息(SCM：Software Configuration Management)<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scm</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--项目url--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://192.168.8.65/xx/cli<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--代码版本仓库地址--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">connection</span>&gt;</span>scm:git:http://192.168.8.65/xx/cli.git<span class=\"tag\">&lt;/<span class=\"name\">connection</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">developerConnection</span>&gt;</span>scm:git:http://192.168.8.65/xx/cli.git<span class=\"tag\">&lt;/<span class=\"name\">developerConnection</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tag</span>&gt;</span>HEAD<span class=\"tag\">&lt;/<span class=\"name\">tag</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">scm</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>配置好后可以使用mvn的scm命令管理</p>\n<p>添加scm插件<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-scm-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">#提交</span></div><div class=\"line\">mvn -Dmessage=<span class=\"string\">\"&lt;commit_log_here&gt;\"</span> scm:checkin</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取最新版本：</span></div><div class=\"line\">mvn scm:update</div></pre></td></tr></table></figure>\n<p>SCM支持两种连接类型：connection 及 developerConnection</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-scm-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">           <span class=\"comment\">&lt;!--&lt;connectionType&gt;developerConnection&lt;/connectionType&gt;--&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">connectionType</span>&gt;</span>connection<span class=\"tag\">&lt;/<span class=\"name\">connectionType</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>项目是SNAPSHOT版本开发好之后就可以发布RELEASE版了，直接使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#把版本号改为RELEASE，向代码仓库推送新的版本</span></div><div class=\"line\">mvn release:prepare</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#向maven私服中推送RELEASE版本</span></div><div class=\"line\">mvn release:perform</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#prepare之后可以回退</span></div><div class=\"line\">mvn release:rollback</div></pre></td></tr></table></figure>\n<p>使用<code>mvn release</code>命令时 如需要添加跳过测试之类的参数 需要使用<code>-Darguments</code>进行指定</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn release:perform -Darguments=<span class=\"string\">\"-Dmaven.test.skip=true -Dmaven.javadoc.skip=true\"</span></div></pre></td></tr></table></figure>"},{"title":"springboot文件上传Filter获取不到文件","date":"2017-04-19T02:51:49.000Z","keywords":["springboot filter multipart/form-data"],"_content":"\n项目需要实现类似nginx反向代理的功能，于是就采用Filter+HttpClient去实现请求转发。\n\n为了开发方便就采用的springboot做测试项目。\n```java\n@SpringBootApplication\n//@ServletComponentScan\n@Controller\npublic class AppTestApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AppTestApplication.class, args);\n    }\n\n    @Bean\n    public FilterRegistrationBean indexFilterRegistration() {\n        FilterRegistrationBean registration = new FilterRegistrationBean(new TestFilter());\n        registration.addUrlPatterns(\"/*\");\n        return registration;\n    }\n}\n```\nFilter里面做匹配Uri后获取`request.getInputStream()`用httpClient转发请求\n\n但是在转发`Content-Type=multipart/form-data`文件上传时，转发后目标服务器总是获取不到正常的payload的请求体\n\n在Filter里面debug发现压根就获取不到文件...\n\n**经过各种google/baidu以及debug后，发现需要在`application.properties`里面添加文件上传的临时路径..**\n**或者不使用springboot而使用tomcat部署项目...**\n```\nspring.http.multipart.location= /tmp # 上传文件的临时目录\n```\n","source":"_posts/springboot-fileupdat- in-Filter-can't-get.md","raw":"---\ntitle: springboot文件上传Filter获取不到文件\ndate: 2017-04-19 10:51:49\ntags: [springboot]\ncategories: [springboot]\nkeywords: [springboot filter multipart/form-data]\n---\n\n项目需要实现类似nginx反向代理的功能，于是就采用Filter+HttpClient去实现请求转发。\n\n为了开发方便就采用的springboot做测试项目。\n```java\n@SpringBootApplication\n//@ServletComponentScan\n@Controller\npublic class AppTestApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AppTestApplication.class, args);\n    }\n\n    @Bean\n    public FilterRegistrationBean indexFilterRegistration() {\n        FilterRegistrationBean registration = new FilterRegistrationBean(new TestFilter());\n        registration.addUrlPatterns(\"/*\");\n        return registration;\n    }\n}\n```\nFilter里面做匹配Uri后获取`request.getInputStream()`用httpClient转发请求\n\n但是在转发`Content-Type=multipart/form-data`文件上传时，转发后目标服务器总是获取不到正常的payload的请求体\n\n在Filter里面debug发现压根就获取不到文件...\n\n**经过各种google/baidu以及debug后，发现需要在`application.properties`里面添加文件上传的临时路径..**\n**或者不使用springboot而使用tomcat部署项目...**\n```\nspring.http.multipart.location= /tmp # 上传文件的临时目录\n```\n","slug":"springboot-fileupdat- in-Filter-can't-get","published":1,"updated":"2017-04-22T08:20:21.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s3v001p64bfa7rkltg8","content":"<p>项目需要实现类似nginx反向代理的功能，于是就采用Filter+HttpClient去实现请求转发。</p>\n<p>为了开发方便就采用的springboot做测试项目。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"comment\">//@ServletComponentScan</span></div><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppTestApplication</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        SpringApplication.run(AppTestApplication.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">indexFilterRegistration</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        FilterRegistrationBean registration = <span class=\"keyword\">new</span> FilterRegistrationBean(<span class=\"keyword\">new</span> TestFilter());</div><div class=\"line\">        registration.addUrlPatterns(<span class=\"string\">\"/*\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> registration;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Filter里面做匹配Uri后获取<code>request.getInputStream()</code>用httpClient转发请求</p>\n<p>但是在转发<code>Content-Type=multipart/form-data</code>文件上传时，转发后目标服务器总是获取不到正常的payload的请求体</p>\n<p>在Filter里面debug发现压根就获取不到文件…</p>\n<p><strong>经过各种google/baidu以及debug后，发现需要在<code>application.properties</code>里面添加文件上传的临时路径..</strong><br><strong>或者不使用springboot而使用tomcat部署项目…</strong><br><figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">spring.http.multipart.<span class=\"keyword\">location</span>= /tmp <span class=\"meta\"># 上传文件的临时目录</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>项目需要实现类似nginx反向代理的功能，于是就采用Filter+HttpClient去实现请求转发。</p>\n<p>为了开发方便就采用的springboot做测试项目。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"comment\">//@ServletComponentScan</span></div><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppTestApplication</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        SpringApplication.run(AppTestApplication.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">indexFilterRegistration</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        FilterRegistrationBean registration = <span class=\"keyword\">new</span> FilterRegistrationBean(<span class=\"keyword\">new</span> TestFilter());</div><div class=\"line\">        registration.addUrlPatterns(<span class=\"string\">\"/*\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> registration;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Filter里面做匹配Uri后获取<code>request.getInputStream()</code>用httpClient转发请求</p>\n<p>但是在转发<code>Content-Type=multipart/form-data</code>文件上传时，转发后目标服务器总是获取不到正常的payload的请求体</p>\n<p>在Filter里面debug发现压根就获取不到文件…</p>\n<p><strong>经过各种google/baidu以及debug后，发现需要在<code>application.properties</code>里面添加文件上传的临时路径..</strong><br><strong>或者不使用springboot而使用tomcat部署项目…</strong><br><figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">spring.http.multipart.<span class=\"keyword\">location</span>= /tmp <span class=\"meta\"># 上传文件的临时目录</span></div></pre></td></tr></table></figure></p>\n"},{"title":"mysql 记录","date":"2016-12-06T08:36:39.000Z","keywords":"mysql xyz327","_content":"## 全角字符\n存入全角的字母，然后用模糊查询 查询不出来..暂时先把全角改为半角...\n\n## 事物隔离级别\n今天把程序发布到线上环境时，插入数据时mysql直接报错\n>Cannot execute statement: binlogging impossible since BINLOG_FORMAT = STATEMENT and at least one table uses a storage engine limited to row-logging. InnoDB is limited to row-logging when transaction isolation level is READ COMMITTED or READ UNCOMMITTED.\n\n百度一番，说问题是因为我程序插入数据时开启了事物\n mysql默认的binlog_format是STATEMENT，而在READ COMMITTED或READ UNCOMMITTED隔离级别下，innodb只能使用的binlog_format是ROW。\n 我程序事物使用的隔离级别默认为READ_COMMINTED \n\n 解决办法有两个\n  1. 修改程序的事物隔离级别,不使用READ COMMITTED或READ UNCOMMITTED 这两种隔离级别。mysql默认的事物隔离级别是REPEATABLE_READ\n  2. 修改mysql的配置 my.ini 设置 binlog_format=ROW","source":"_posts/mysql-record.md","raw":"---\ntitle: mysql 记录\ndate: 2016-12-06 16:36:39\ntags: mysql\ncategories: mysql\nkeywords: mysql xyz327\n---\n## 全角字符\n存入全角的字母，然后用模糊查询 查询不出来..暂时先把全角改为半角...\n\n## 事物隔离级别\n今天把程序发布到线上环境时，插入数据时mysql直接报错\n>Cannot execute statement: binlogging impossible since BINLOG_FORMAT = STATEMENT and at least one table uses a storage engine limited to row-logging. InnoDB is limited to row-logging when transaction isolation level is READ COMMITTED or READ UNCOMMITTED.\n\n百度一番，说问题是因为我程序插入数据时开启了事物\n mysql默认的binlog_format是STATEMENT，而在READ COMMITTED或READ UNCOMMITTED隔离级别下，innodb只能使用的binlog_format是ROW。\n 我程序事物使用的隔离级别默认为READ_COMMINTED \n\n 解决办法有两个\n  1. 修改程序的事物隔离级别,不使用READ COMMITTED或READ UNCOMMITTED 这两种隔离级别。mysql默认的事物隔离级别是REPEATABLE_READ\n  2. 修改mysql的配置 my.ini 设置 binlog_format=ROW","slug":"mysql-record","published":1,"updated":"2017-04-22T08:20:21.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s3x001s64bfv8i631fj","content":"<h2 id=\"全角字符\"><a href=\"#全角字符\" class=\"headerlink\" title=\"全角字符\"></a>全角字符</h2><p>存入全角的字母，然后用模糊查询 查询不出来..暂时先把全角改为半角…</p>\n<h2 id=\"事物隔离级别\"><a href=\"#事物隔离级别\" class=\"headerlink\" title=\"事物隔离级别\"></a>事物隔离级别</h2><p>今天把程序发布到线上环境时，插入数据时mysql直接报错</p>\n<blockquote>\n<p>Cannot execute statement: binlogging impossible since BINLOG_FORMAT = STATEMENT and at least one table uses a storage engine limited to row-logging. InnoDB is limited to row-logging when transaction isolation level is READ COMMITTED or READ UNCOMMITTED.</p>\n</blockquote>\n<p>百度一番，说问题是因为我程序插入数据时开启了事物<br> mysql默认的binlog_format是STATEMENT，而在READ COMMITTED或READ UNCOMMITTED隔离级别下，innodb只能使用的binlog_format是ROW。<br> 我程序事物使用的隔离级别默认为READ_COMMINTED </p>\n<p> 解决办法有两个</p>\n<ol>\n<li>修改程序的事物隔离级别,不使用READ COMMITTED或READ UNCOMMITTED 这两种隔离级别。mysql默认的事物隔离级别是REPEATABLE_READ</li>\n<li>修改mysql的配置 my.ini 设置 binlog_format=ROW</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"全角字符\"><a href=\"#全角字符\" class=\"headerlink\" title=\"全角字符\"></a>全角字符</h2><p>存入全角的字母，然后用模糊查询 查询不出来..暂时先把全角改为半角…</p>\n<h2 id=\"事物隔离级别\"><a href=\"#事物隔离级别\" class=\"headerlink\" title=\"事物隔离级别\"></a>事物隔离级别</h2><p>今天把程序发布到线上环境时，插入数据时mysql直接报错</p>\n<blockquote>\n<p>Cannot execute statement: binlogging impossible since BINLOG_FORMAT = STATEMENT and at least one table uses a storage engine limited to row-logging. InnoDB is limited to row-logging when transaction isolation level is READ COMMITTED or READ UNCOMMITTED.</p>\n</blockquote>\n<p>百度一番，说问题是因为我程序插入数据时开启了事物<br> mysql默认的binlog_format是STATEMENT，而在READ COMMITTED或READ UNCOMMITTED隔离级别下，innodb只能使用的binlog_format是ROW。<br> 我程序事物使用的隔离级别默认为READ_COMMINTED </p>\n<p> 解决办法有两个</p>\n<ol>\n<li>修改程序的事物隔离级别,不使用READ COMMITTED或READ UNCOMMITTED 这两种隔离级别。mysql默认的事物隔离级别是REPEATABLE_READ</li>\n<li>修改mysql的配置 my.ini 设置 binlog_format=ROW</li>\n</ol>\n"},{"title":"扩展spring-boot自带的logback输出设置","date":"2016-12-29T11:42:04.000Z","keywords":["spring spring-boot slf4j"],"_content":"`spring-boot-starter-web`依赖了`spring-boot-starter-logging`默认是使用logback的实现。\n在`spring-boot`默认的日志输出设置\n在`resources`目录下添加`logback.xml`内容如下\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <include resource=\"org/springframework/boot/logging/logback/base.xml\" />\n    <logger name=\"cn.xyz327\" level=\"debug\"/>\n</configuration>\n```\n设置后就可以在代码中使用`org.slf4j.Logger`了,日志的输出格式采用`spring-boot`默认的格式\n","source":"_posts/spring-boot-slf4j.md","raw":"---\ntitle: 扩展spring-boot自带的logback输出设置\ndate: 2016-12-29 19:42:04\ntags: [spring-boot]\ncategories:\nkeywords: [spring spring-boot slf4j]\n---\n`spring-boot-starter-web`依赖了`spring-boot-starter-logging`默认是使用logback的实现。\n在`spring-boot`默认的日志输出设置\n在`resources`目录下添加`logback.xml`内容如下\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <include resource=\"org/springframework/boot/logging/logback/base.xml\" />\n    <logger name=\"cn.xyz327\" level=\"debug\"/>\n</configuration>\n```\n设置后就可以在代码中使用`org.slf4j.Logger`了,日志的输出格式采用`spring-boot`默认的格式\n","slug":"spring-boot-slf4j","published":1,"updated":"2017-03-06T15:04:27.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s40001v64bfjo398c3g","content":"<p><code>spring-boot-starter-web</code>依赖了<code>spring-boot-starter-logging</code>默认是使用logback的实现。<br>在<code>spring-boot</code>默认的日志输出设置<br>在<code>resources</code>目录下添加<code>logback.xml</code>内容如下<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"org/springframework/boot/logging/logback/base.xml\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cn.xyz327\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"debug\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>设置后就可以在代码中使用<code>org.slf4j.Logger</code>了,日志的输出格式采用<code>spring-boot</code>默认的格式</p>\n","excerpt":"","more":"<p><code>spring-boot-starter-web</code>依赖了<code>spring-boot-starter-logging</code>默认是使用logback的实现。<br>在<code>spring-boot</code>默认的日志输出设置<br>在<code>resources</code>目录下添加<code>logback.xml</code>内容如下<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"org/springframework/boot/logging/logback/base.xml\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cn.xyz327\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"debug\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>设置后就可以在代码中使用<code>org.slf4j.Logger</code>了,日志的输出格式采用<code>spring-boot</code>默认的格式</p>\n"},{"title":"springmvc初始化MultipartResolver","date":"2018-04-07T01:47:24.000Z","keywords":"springmvc spring","_content":"\n`MultipartResolver`是用于处理HTTP上传文件的请求处理器\nspringmvc在处理文件上传时,使用`MultipartResolver`把`HttpServletRequest`解析包装成`MultipartHttpServletRequest`对象\n`MultipartHttpServletRequest`提供了获取`MultipartFile`的方法\n\n`MultipartHttpServletRequest`接口继承了`HttpServletRequest`\n`MultipartFile`提供了获取上传的文件相关属性以及文件流的方法\n在Controller中使用`MultipartHttpServletRequest`更方便的处理上传文件\n\n## MultipartResolver\n\n```java\npublic interface MultipartResolver {\n    /**\n     * 判断给定的请求是否包含 multipart 内容\n     * 通常是检查request的Content-Type是否是 \"multipart/form-data\" \n     * 实际还是依赖解析器自己的实现\n     */\n    boolean isMultipart(HttpServletRequest request);\n\n    /**\n     * 解析HTTP request 包含的文件和参数并把它们包装到 \n     * {@link org.springframework.web.multipart.MultipartHttpServletRequest}对象中\n     * 这个接口实现了{@link javax.servlet.http.HttpServletRequest}\n     */\n    MultipartHttpServletRequest resolveMultipart(HttpServletRequest request) throws MultipartException;\n\n    /**\n     * 清理资源，例如存储的上传文件\n     */\n    void cleanupMultipart(MultipartHttpServletRequest request);\n}\n```\nspringmvc为`MultipartResolver`提供了两种实现\n 1. `StandardServletMultipartResolver`\n    使用HTTPServletRequest自带的解析文件\n 2. `CommonsMultipartResolver`\n    使用apache commons-io 处理上传的文件\n![MultipartResolver实现类](http://7xrv3c.com1.z0.glb.clouddn.com/images/post/springmvc/multipartResolver.png)\n\n## MultipartHttpServletRequest\n\n```java\npublic interface MultipartHttpServletRequest extends HttpServletRequest, MultipartRequest {\n\tHttpMethod getRequestMethod();\n\n\tHttpHeaders getRequestHeaders();\n\n\tHttpHeaders getMultipartHeaders(String paramOrFileName);\n}\n```\n```java\npublic interface MultipartRequest {\n\tIterator<String> getFileNames();\n\n\tMultipartFile getFile(String name);\n\n\tList<MultipartFile> getFiles(String name);\n\n\tMap<String, MultipartFile> getFileMap();\n\n\tMultiValueMap<String, MultipartFile> getMultiFileMap();\n\n\tString getMultipartContentType(String paramOrFileName);\n}\n```\n`MultipartHttpServletRequest`提供了对于上传文件的快捷访问的方法\n\nspringmvc对于`MultipartHttpServletRequest`同样提供了两种实现\n 1. `StandardMultipartHttpServletRequest`\n 2. `DefaultMultipartHttpServletRequest`\n![MultipartHttpServletRequest实现类](http://7xrv3c.com1.z0.glb.clouddn.com/images/post/springmvc/multiparHttpServletRequest.png)\n\n## MultipartFile\n\n```java\npublic interface MultipartFile extends InputStreamSource {\n\n\t/**\n\t * Return the name of the parameter in the multipart form.\n\t * @return the name of the parameter (never {@code null} or empty)\n\t */\n\tString getName();\n\n\t/**\n\t * Return the original filename in the client's filesystem.\n\t * <p>This may contain path information depending on the browser used,\n\t * but it typically will not with any other than Opera.\n\t * @return the original filename, or the empty String if no file has been chosen\n\t * in the multipart form, or {@code null} if not defined or not available\n\t * @see org.apache.commons.fileupload.FileItem#getName()\n\t * @see org.springframework.web.multipart.commons.CommonsMultipartFile#setPreserveFilename\n\t */\n\tString getOriginalFilename();\n\n\t/**\n\t * Return the content type of the file.\n\t * @return the content type, or {@code null} if not defined\n\t * (or no file has been chosen in the multipart form)\n\t */\n\tString getContentType();\n\n\t/**\n\t * Return whether the uploaded file is empty, that is, either no file has\n\t * been chosen in the multipart form or the chosen file has no content.\n\t */\n\tboolean isEmpty();\n\n\t/**\n\t * Return the size of the file in bytes.\n\t * @return the size of the file, or 0 if empty\n\t */\n\tlong getSize();\n\n\t/**\n\t * Return the contents of the file as an array of bytes.\n\t * @return the contents of the file as bytes, or an empty byte array if empty\n\t * @throws IOException in case of access errors (if the temporary store fails)\n\t */\n\tbyte[] getBytes() throws IOException;\n\n\t/**\n\t * Return an InputStream to read the contents of the file from.\n\t * <p>The user is responsible for closing the returned stream.\n\t * @return the contents of the file as stream, or an empty stream if empty\n\t * @throws IOException in case of access errors (if the temporary store fails)\n\t */\n\t@Override\n\tInputStream getInputStream() throws IOException;\n\n\t/**\n\t * Transfer the received file to the given destination file.\n\t * <p>This may either move the file in the filesystem, copy the file in the\n\t * filesystem, or save memory-held contents to the destination file. If the\n\t * destination file already exists, it will be deleted first.\n\t * <p>If the target file has been moved in the filesystem, this operation\n\t * cannot be invoked again afterwards. Therefore, call this method just once\n\t * in order to work with any storage mechanism.\n\t * <p><b>NOTE:</b> Depending on the underlying provider, temporary storage\n\t * may be container-dependent, including the base directory for relative\n\t * destinations specified here (e.g. with Servlet 3.0 multipart handling).\n\t * For absolute destinations, the target file may get renamed/moved from its\n\t * temporary location or newly copied, even if a temporary copy already exists.\n\t * @param dest the destination file (typically absolute)\n\t * @throws IOException in case of reading or writing errors\n\t * @throws IllegalStateException if the file has already been moved\n\t * in the filesystem and is not available anymore for another transfer\n\t * @see org.apache.commons.fileupload.FileItem#write(File)\n\t * @see javax.servlet.http.Part#write(String)\n\t */\n\tvoid transferTo(File dest) throws IOException, IllegalStateException;\n\n```\n\nspringmvc同样提供了两种实现\n 1. `StandardMultipartFile`\n 2. `CommonsMultipartFile`\n\n ![MultipartFile实现类](http://7xrv3c.com1.z0.glb.clouddn.com/images/post/springmvc/multipartFile.png)\n","source":"_posts/springmvc初始化MultipartResolver.md","raw":"---\ntitle: springmvc初始化MultipartResolver\ndate: 2018-04-07 09:47:24\ntags: springmvc\ncategories: [springmvc]\nkeywords: springmvc spring\n---\n\n`MultipartResolver`是用于处理HTTP上传文件的请求处理器\nspringmvc在处理文件上传时,使用`MultipartResolver`把`HttpServletRequest`解析包装成`MultipartHttpServletRequest`对象\n`MultipartHttpServletRequest`提供了获取`MultipartFile`的方法\n\n`MultipartHttpServletRequest`接口继承了`HttpServletRequest`\n`MultipartFile`提供了获取上传的文件相关属性以及文件流的方法\n在Controller中使用`MultipartHttpServletRequest`更方便的处理上传文件\n\n## MultipartResolver\n\n```java\npublic interface MultipartResolver {\n    /**\n     * 判断给定的请求是否包含 multipart 内容\n     * 通常是检查request的Content-Type是否是 \"multipart/form-data\" \n     * 实际还是依赖解析器自己的实现\n     */\n    boolean isMultipart(HttpServletRequest request);\n\n    /**\n     * 解析HTTP request 包含的文件和参数并把它们包装到 \n     * {@link org.springframework.web.multipart.MultipartHttpServletRequest}对象中\n     * 这个接口实现了{@link javax.servlet.http.HttpServletRequest}\n     */\n    MultipartHttpServletRequest resolveMultipart(HttpServletRequest request) throws MultipartException;\n\n    /**\n     * 清理资源，例如存储的上传文件\n     */\n    void cleanupMultipart(MultipartHttpServletRequest request);\n}\n```\nspringmvc为`MultipartResolver`提供了两种实现\n 1. `StandardServletMultipartResolver`\n    使用HTTPServletRequest自带的解析文件\n 2. `CommonsMultipartResolver`\n    使用apache commons-io 处理上传的文件\n![MultipartResolver实现类](http://7xrv3c.com1.z0.glb.clouddn.com/images/post/springmvc/multipartResolver.png)\n\n## MultipartHttpServletRequest\n\n```java\npublic interface MultipartHttpServletRequest extends HttpServletRequest, MultipartRequest {\n\tHttpMethod getRequestMethod();\n\n\tHttpHeaders getRequestHeaders();\n\n\tHttpHeaders getMultipartHeaders(String paramOrFileName);\n}\n```\n```java\npublic interface MultipartRequest {\n\tIterator<String> getFileNames();\n\n\tMultipartFile getFile(String name);\n\n\tList<MultipartFile> getFiles(String name);\n\n\tMap<String, MultipartFile> getFileMap();\n\n\tMultiValueMap<String, MultipartFile> getMultiFileMap();\n\n\tString getMultipartContentType(String paramOrFileName);\n}\n```\n`MultipartHttpServletRequest`提供了对于上传文件的快捷访问的方法\n\nspringmvc对于`MultipartHttpServletRequest`同样提供了两种实现\n 1. `StandardMultipartHttpServletRequest`\n 2. `DefaultMultipartHttpServletRequest`\n![MultipartHttpServletRequest实现类](http://7xrv3c.com1.z0.glb.clouddn.com/images/post/springmvc/multiparHttpServletRequest.png)\n\n## MultipartFile\n\n```java\npublic interface MultipartFile extends InputStreamSource {\n\n\t/**\n\t * Return the name of the parameter in the multipart form.\n\t * @return the name of the parameter (never {@code null} or empty)\n\t */\n\tString getName();\n\n\t/**\n\t * Return the original filename in the client's filesystem.\n\t * <p>This may contain path information depending on the browser used,\n\t * but it typically will not with any other than Opera.\n\t * @return the original filename, or the empty String if no file has been chosen\n\t * in the multipart form, or {@code null} if not defined or not available\n\t * @see org.apache.commons.fileupload.FileItem#getName()\n\t * @see org.springframework.web.multipart.commons.CommonsMultipartFile#setPreserveFilename\n\t */\n\tString getOriginalFilename();\n\n\t/**\n\t * Return the content type of the file.\n\t * @return the content type, or {@code null} if not defined\n\t * (or no file has been chosen in the multipart form)\n\t */\n\tString getContentType();\n\n\t/**\n\t * Return whether the uploaded file is empty, that is, either no file has\n\t * been chosen in the multipart form or the chosen file has no content.\n\t */\n\tboolean isEmpty();\n\n\t/**\n\t * Return the size of the file in bytes.\n\t * @return the size of the file, or 0 if empty\n\t */\n\tlong getSize();\n\n\t/**\n\t * Return the contents of the file as an array of bytes.\n\t * @return the contents of the file as bytes, or an empty byte array if empty\n\t * @throws IOException in case of access errors (if the temporary store fails)\n\t */\n\tbyte[] getBytes() throws IOException;\n\n\t/**\n\t * Return an InputStream to read the contents of the file from.\n\t * <p>The user is responsible for closing the returned stream.\n\t * @return the contents of the file as stream, or an empty stream if empty\n\t * @throws IOException in case of access errors (if the temporary store fails)\n\t */\n\t@Override\n\tInputStream getInputStream() throws IOException;\n\n\t/**\n\t * Transfer the received file to the given destination file.\n\t * <p>This may either move the file in the filesystem, copy the file in the\n\t * filesystem, or save memory-held contents to the destination file. If the\n\t * destination file already exists, it will be deleted first.\n\t * <p>If the target file has been moved in the filesystem, this operation\n\t * cannot be invoked again afterwards. Therefore, call this method just once\n\t * in order to work with any storage mechanism.\n\t * <p><b>NOTE:</b> Depending on the underlying provider, temporary storage\n\t * may be container-dependent, including the base directory for relative\n\t * destinations specified here (e.g. with Servlet 3.0 multipart handling).\n\t * For absolute destinations, the target file may get renamed/moved from its\n\t * temporary location or newly copied, even if a temporary copy already exists.\n\t * @param dest the destination file (typically absolute)\n\t * @throws IOException in case of reading or writing errors\n\t * @throws IllegalStateException if the file has already been moved\n\t * in the filesystem and is not available anymore for another transfer\n\t * @see org.apache.commons.fileupload.FileItem#write(File)\n\t * @see javax.servlet.http.Part#write(String)\n\t */\n\tvoid transferTo(File dest) throws IOException, IllegalStateException;\n\n```\n\nspringmvc同样提供了两种实现\n 1. `StandardMultipartFile`\n 2. `CommonsMultipartFile`\n\n ![MultipartFile实现类](http://7xrv3c.com1.z0.glb.clouddn.com/images/post/springmvc/multipartFile.png)\n","slug":"springmvc初始化MultipartResolver","published":1,"updated":"2018-04-07T03:12:57.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s42001x64bfeiqpseag","content":"<p><code>MultipartResolver</code>是用于处理HTTP上传文件的请求处理器<br>springmvc在处理文件上传时,使用<code>MultipartResolver</code>把<code>HttpServletRequest</code>解析包装成<code>MultipartHttpServletRequest</code>对象<br><code>MultipartHttpServletRequest</code>提供了获取<code>MultipartFile</code>的方法</p>\n<p><code>MultipartHttpServletRequest</code>接口继承了<code>HttpServletRequest</code><br><code>MultipartFile</code>提供了获取上传的文件相关属性以及文件流的方法<br>在Controller中使用<code>MultipartHttpServletRequest</code>更方便的处理上传文件</p>\n<h2 id=\"MultipartResolver\"><a href=\"#MultipartResolver\" class=\"headerlink\" title=\"MultipartResolver\"></a>MultipartResolver</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MultipartResolver</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 判断给定的请求是否包含 multipart 内容</div><div class=\"line\">     * 通常是检查request的Content-Type是否是 \"multipart/form-data\" </div><div class=\"line\">     * 实际还是依赖解析器自己的实现</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isMultipart</span><span class=\"params\">(HttpServletRequest request)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 解析HTTP request 包含的文件和参数并把它们包装到 </div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> org.springframework.web.multipart.MultipartHttpServletRequest&#125;对象中</div><div class=\"line\">     * 这个接口实现了&#123;<span class=\"doctag\">@link</span> javax.servlet.http.HttpServletRequest&#125;</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\">MultipartHttpServletRequest <span class=\"title\">resolveMultipart</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> MultipartException</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 清理资源，例如存储的上传文件</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cleanupMultipart</span><span class=\"params\">(MultipartHttpServletRequest request)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>springmvc为<code>MultipartResolver</code>提供了两种实现</p>\n<ol>\n<li><code>StandardServletMultipartResolver</code><br>使用HTTPServletRequest自带的解析文件</li>\n<li><code>CommonsMultipartResolver</code><br>使用apache commons-io 处理上传的文件<br><img src=\"http://7xrv3c.com1.z0.glb.clouddn.com/images/post/springmvc/multipartResolver.png\" alt=\"MultipartResolver实现类\"></li>\n</ol>\n<h2 id=\"MultipartHttpServletRequest\"><a href=\"#MultipartHttpServletRequest\" class=\"headerlink\" title=\"MultipartHttpServletRequest\"></a>MultipartHttpServletRequest</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MultipartHttpServletRequest</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServletRequest</span>, <span class=\"title\">MultipartRequest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\">HttpMethod <span class=\"title\">getRequestMethod</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">HttpHeaders <span class=\"title\">getRequestHeaders</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">HttpHeaders <span class=\"title\">getMultipartHeaders</span><span class=\"params\">(String paramOrFileName)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MultipartRequest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\">Iterator&lt;String&gt; <span class=\"title\">getFileNames</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">MultipartFile <span class=\"title\">getFile</span><span class=\"params\">(String name)</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">List&lt;MultipartFile&gt; <span class=\"title\">getFiles</span><span class=\"params\">(String name)</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">Map&lt;String, MultipartFile&gt; <span class=\"title\">getFileMap</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">MultiValueMap&lt;String, MultipartFile&gt; <span class=\"title\">getMultiFileMap</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">String <span class=\"title\">getMultipartContentType</span><span class=\"params\">(String paramOrFileName)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>MultipartHttpServletRequest</code>提供了对于上传文件的快捷访问的方法</p>\n<p>springmvc对于<code>MultipartHttpServletRequest</code>同样提供了两种实现</p>\n<ol>\n<li><code>StandardMultipartHttpServletRequest</code></li>\n<li><code>DefaultMultipartHttpServletRequest</code><br><img src=\"http://7xrv3c.com1.z0.glb.clouddn.com/images/post/springmvc/multiparHttpServletRequest.png\" alt=\"MultipartHttpServletRequest实现类\"></li>\n</ol>\n<h2 id=\"MultipartFile\"><a href=\"#MultipartFile\" class=\"headerlink\" title=\"MultipartFile\"></a>MultipartFile</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MultipartFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">InputStreamSource</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * Return the name of the parameter in the multipart form.</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> the name of the parameter (never &#123;<span class=\"doctag\">@code</span> null&#125; or empty)</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\">String <span class=\"title\">getName</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * Return the original filename in the client's filesystem.</div><div class=\"line\">\t * &lt;p&gt;This may contain path information depending on the browser used,</div><div class=\"line\">\t * but it typically will not with any other than Opera.</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> the original filename, or the empty String if no file has been chosen</div><div class=\"line\">\t * in the multipart form, or &#123;<span class=\"doctag\">@code</span> null&#125; if not defined or not available</div><div class=\"line\">\t * <span class=\"doctag\">@see</span> org.apache.commons.fileupload.FileItem#getName()</div><div class=\"line\">\t * <span class=\"doctag\">@see</span> org.springframework.web.multipart.commons.CommonsMultipartFile#setPreserveFilename</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\">String <span class=\"title\">getOriginalFilename</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * Return the content type of the file.</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> the content type, or &#123;<span class=\"doctag\">@code</span> null&#125; if not defined</div><div class=\"line\">\t * (or no file has been chosen in the multipart form)</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\">String <span class=\"title\">getContentType</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * Return whether the uploaded file is empty, that is, either no file has</div><div class=\"line\">\t * been chosen in the multipart form or the chosen file has no content.</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * Return the size of the file in bytes.</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> the size of the file, or 0 if empty</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">getSize</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * Return the contents of the file as an array of bytes.</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> the contents of the file as bytes, or an empty byte array if empty</div><div class=\"line\">\t * <span class=\"doctag\">@throws</span> IOException in case of access errors (if the temporary store fails)</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">byte</span>[] getBytes() <span class=\"keyword\">throws</span> IOException;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * Return an InputStream to read the contents of the file from.</div><div class=\"line\">\t * &lt;p&gt;The user is responsible for closing the returned stream.</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> the contents of the file as stream, or an empty stream if empty</div><div class=\"line\">\t * <span class=\"doctag\">@throws</span> IOException in case of access errors (if the temporary store fails)</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\">InputStream <span class=\"title\">getInputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * Transfer the received file to the given destination file.</div><div class=\"line\">\t * &lt;p&gt;This may either move the file in the filesystem, copy the file in the</div><div class=\"line\">\t * filesystem, or save memory-held contents to the destination file. If the</div><div class=\"line\">\t * destination file already exists, it will be deleted first.</div><div class=\"line\">\t * &lt;p&gt;If the target file has been moved in the filesystem, this operation</div><div class=\"line\">\t * cannot be invoked again afterwards. Therefore, call this method just once</div><div class=\"line\">\t * in order to work with any storage mechanism.</div><div class=\"line\">\t * &lt;p&gt;&lt;b&gt;<span class=\"doctag\">NOTE:</span>&lt;/b&gt; Depending on the underlying provider, temporary storage</div><div class=\"line\">\t * may be container-dependent, including the base directory for relative</div><div class=\"line\">\t * destinations specified here (e.g. with Servlet 3.0 multipart handling).</div><div class=\"line\">\t * For absolute destinations, the target file may get renamed/moved from its</div><div class=\"line\">\t * temporary location or newly copied, even if a temporary copy already exists.</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> dest the destination file (typically absolute)</div><div class=\"line\">\t * <span class=\"doctag\">@throws</span> IOException in case of reading or writing errors</div><div class=\"line\">\t * <span class=\"doctag\">@throws</span> IllegalStateException if the file has already been moved</div><div class=\"line\">\t * in the filesystem and is not available anymore for another transfer</div><div class=\"line\">\t * <span class=\"doctag\">@see</span> org.apache.commons.fileupload.FileItem#write(File)</div><div class=\"line\">\t * <span class=\"doctag\">@see</span> javax.servlet.http.Part#write(String)</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">transferTo</span><span class=\"params\">(File dest)</span> <span class=\"keyword\">throws</span> IOException, IllegalStateException</span>;</div></pre></td></tr></table></figure>\n<p>springmvc同样提供了两种实现</p>\n<ol>\n<li><code>StandardMultipartFile</code></li>\n<li><p><code>CommonsMultipartFile</code></p>\n<p><img src=\"http://7xrv3c.com1.z0.glb.clouddn.com/images/post/springmvc/multipartFile.png\" alt=\"MultipartFile实现类\"></p>\n</li>\n</ol>\n","excerpt":"","more":"<p><code>MultipartResolver</code>是用于处理HTTP上传文件的请求处理器<br>springmvc在处理文件上传时,使用<code>MultipartResolver</code>把<code>HttpServletRequest</code>解析包装成<code>MultipartHttpServletRequest</code>对象<br><code>MultipartHttpServletRequest</code>提供了获取<code>MultipartFile</code>的方法</p>\n<p><code>MultipartHttpServletRequest</code>接口继承了<code>HttpServletRequest</code><br><code>MultipartFile</code>提供了获取上传的文件相关属性以及文件流的方法<br>在Controller中使用<code>MultipartHttpServletRequest</code>更方便的处理上传文件</p>\n<h2 id=\"MultipartResolver\"><a href=\"#MultipartResolver\" class=\"headerlink\" title=\"MultipartResolver\"></a>MultipartResolver</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MultipartResolver</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 判断给定的请求是否包含 multipart 内容</div><div class=\"line\">     * 通常是检查request的Content-Type是否是 \"multipart/form-data\" </div><div class=\"line\">     * 实际还是依赖解析器自己的实现</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isMultipart</span><span class=\"params\">(HttpServletRequest request)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 解析HTTP request 包含的文件和参数并把它们包装到 </div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> org.springframework.web.multipart.MultipartHttpServletRequest&#125;对象中</div><div class=\"line\">     * 这个接口实现了&#123;<span class=\"doctag\">@link</span> javax.servlet.http.HttpServletRequest&#125;</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\">MultipartHttpServletRequest <span class=\"title\">resolveMultipart</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> MultipartException</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 清理资源，例如存储的上传文件</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cleanupMultipart</span><span class=\"params\">(MultipartHttpServletRequest request)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>springmvc为<code>MultipartResolver</code>提供了两种实现</p>\n<ol>\n<li><code>StandardServletMultipartResolver</code><br>使用HTTPServletRequest自带的解析文件</li>\n<li><code>CommonsMultipartResolver</code><br>使用apache commons-io 处理上传的文件<br><img src=\"http://7xrv3c.com1.z0.glb.clouddn.com/images/post/springmvc/multipartResolver.png\" alt=\"MultipartResolver实现类\"></li>\n</ol>\n<h2 id=\"MultipartHttpServletRequest\"><a href=\"#MultipartHttpServletRequest\" class=\"headerlink\" title=\"MultipartHttpServletRequest\"></a>MultipartHttpServletRequest</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MultipartHttpServletRequest</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServletRequest</span>, <span class=\"title\">MultipartRequest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\">HttpMethod <span class=\"title\">getRequestMethod</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">HttpHeaders <span class=\"title\">getRequestHeaders</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">HttpHeaders <span class=\"title\">getMultipartHeaders</span><span class=\"params\">(String paramOrFileName)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MultipartRequest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\">Iterator&lt;String&gt; <span class=\"title\">getFileNames</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">MultipartFile <span class=\"title\">getFile</span><span class=\"params\">(String name)</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">List&lt;MultipartFile&gt; <span class=\"title\">getFiles</span><span class=\"params\">(String name)</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">Map&lt;String, MultipartFile&gt; <span class=\"title\">getFileMap</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">MultiValueMap&lt;String, MultipartFile&gt; <span class=\"title\">getMultiFileMap</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">String <span class=\"title\">getMultipartContentType</span><span class=\"params\">(String paramOrFileName)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>MultipartHttpServletRequest</code>提供了对于上传文件的快捷访问的方法</p>\n<p>springmvc对于<code>MultipartHttpServletRequest</code>同样提供了两种实现</p>\n<ol>\n<li><code>StandardMultipartHttpServletRequest</code></li>\n<li><code>DefaultMultipartHttpServletRequest</code><br><img src=\"http://7xrv3c.com1.z0.glb.clouddn.com/images/post/springmvc/multiparHttpServletRequest.png\" alt=\"MultipartHttpServletRequest实现类\"></li>\n</ol>\n<h2 id=\"MultipartFile\"><a href=\"#MultipartFile\" class=\"headerlink\" title=\"MultipartFile\"></a>MultipartFile</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MultipartFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">InputStreamSource</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * Return the name of the parameter in the multipart form.</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> the name of the parameter (never &#123;<span class=\"doctag\">@code</span> null&#125; or empty)</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\">String <span class=\"title\">getName</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * Return the original filename in the client's filesystem.</div><div class=\"line\">\t * &lt;p&gt;This may contain path information depending on the browser used,</div><div class=\"line\">\t * but it typically will not with any other than Opera.</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> the original filename, or the empty String if no file has been chosen</div><div class=\"line\">\t * in the multipart form, or &#123;<span class=\"doctag\">@code</span> null&#125; if not defined or not available</div><div class=\"line\">\t * <span class=\"doctag\">@see</span> org.apache.commons.fileupload.FileItem#getName()</div><div class=\"line\">\t * <span class=\"doctag\">@see</span> org.springframework.web.multipart.commons.CommonsMultipartFile#setPreserveFilename</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\">String <span class=\"title\">getOriginalFilename</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * Return the content type of the file.</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> the content type, or &#123;<span class=\"doctag\">@code</span> null&#125; if not defined</div><div class=\"line\">\t * (or no file has been chosen in the multipart form)</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\">String <span class=\"title\">getContentType</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * Return whether the uploaded file is empty, that is, either no file has</div><div class=\"line\">\t * been chosen in the multipart form or the chosen file has no content.</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * Return the size of the file in bytes.</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> the size of the file, or 0 if empty</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">getSize</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * Return the contents of the file as an array of bytes.</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> the contents of the file as bytes, or an empty byte array if empty</div><div class=\"line\">\t * <span class=\"doctag\">@throws</span> IOException in case of access errors (if the temporary store fails)</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"keyword\">byte</span>[] getBytes() <span class=\"keyword\">throws</span> IOException;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * Return an InputStream to read the contents of the file from.</div><div class=\"line\">\t * &lt;p&gt;The user is responsible for closing the returned stream.</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> the contents of the file as stream, or an empty stream if empty</div><div class=\"line\">\t * <span class=\"doctag\">@throws</span> IOException in case of access errors (if the temporary store fails)</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\">InputStream <span class=\"title\">getInputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * Transfer the received file to the given destination file.</div><div class=\"line\">\t * &lt;p&gt;This may either move the file in the filesystem, copy the file in the</div><div class=\"line\">\t * filesystem, or save memory-held contents to the destination file. If the</div><div class=\"line\">\t * destination file already exists, it will be deleted first.</div><div class=\"line\">\t * &lt;p&gt;If the target file has been moved in the filesystem, this operation</div><div class=\"line\">\t * cannot be invoked again afterwards. Therefore, call this method just once</div><div class=\"line\">\t * in order to work with any storage mechanism.</div><div class=\"line\">\t * &lt;p&gt;&lt;b&gt;<span class=\"doctag\">NOTE:</span>&lt;/b&gt; Depending on the underlying provider, temporary storage</div><div class=\"line\">\t * may be container-dependent, including the base directory for relative</div><div class=\"line\">\t * destinations specified here (e.g. with Servlet 3.0 multipart handling).</div><div class=\"line\">\t * For absolute destinations, the target file may get renamed/moved from its</div><div class=\"line\">\t * temporary location or newly copied, even if a temporary copy already exists.</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> dest the destination file (typically absolute)</div><div class=\"line\">\t * <span class=\"doctag\">@throws</span> IOException in case of reading or writing errors</div><div class=\"line\">\t * <span class=\"doctag\">@throws</span> IllegalStateException if the file has already been moved</div><div class=\"line\">\t * in the filesystem and is not available anymore for another transfer</div><div class=\"line\">\t * <span class=\"doctag\">@see</span> org.apache.commons.fileupload.FileItem#write(File)</div><div class=\"line\">\t * <span class=\"doctag\">@see</span> javax.servlet.http.Part#write(String)</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">transferTo</span><span class=\"params\">(File dest)</span> <span class=\"keyword\">throws</span> IOException, IllegalStateException</span>;</div></pre></td></tr></table></figure>\n<p>springmvc同样提供了两种实现</p>\n<ol>\n<li><code>StandardMultipartFile</code></li>\n<li><p><code>CommonsMultipartFile</code></p>\n<p><img src=\"http://7xrv3c.com1.z0.glb.clouddn.com/images/post/springmvc/multipartFile.png\" alt=\"MultipartFile实现类\"></p>\n</li>\n</ol>\n"},{"title":"springmvc学习","date":"2018-03-20T04:18:39.000Z","keywords":"spring springmvc","_content":"# SpringMvc初始化\n\nSpringmvc的入口是`DispatcherServlet`，先从这里看起\n`DispatcherServlet`的继承关系图\n ![dispatcherServlet继承图](http://7xrv3c.com1.z0.glb.clouddn.com/images/post/spring/dispatcher-servlet.png)\n<!--more-->\n\n## 初始化\n\n### `DispatchServlet`中的`static`块\n\n在`static`块中加载了一个与`DispatcherServlet`同包下的名为`DispatcherServlet.properties`的配置文件，使用配置文件中的配置作为`DispatcherServlet`运行时的默认策略组件\n\n### init方法\n\n`DispatcherServlet`继承了`HttpServlet`,在web容器初始化后会调用`Servlet#init(ServletConfig)`方法进行初始化\n\n#### 初始化调用流程\n\n1. `javax.servlet.GenericServlet#init(javax.servlet.ServletConfig)`\n    将ServletConfig赋值给自身的config属性，使子类可以通过`javax.servlet.GenericServlet#getServletConfig()`获取\n2. `org.springframework.web.servlet.HttpServletBean#init()`\n    将配置信息设置到`DispatcherServlet`中\n    ```java\n    //获得web.xml中的contextConfigLocation配置属性，就是spring MVC的配置文件\n    PropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);\n    BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);\n    //获取服务器的各种信息\n    ResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());\n    bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment()));\n    //模板方法，可以在子类中调用(DispatcherServlet没有)，做一些初始化工作，bw代表DispatcherServelt\n    initBeanWrapper(bw);\n    //将配置的初始化值设置到DispatcherServlet中\n    bw.setPropertyValues(pvs, true);\n    ```\n3. `org.springframework.web.servlet.FrameworkServlet#initServletBean()`\n    初始化SpringMvc的Ioc容器\n4. `org.springframework.web.servlet.DispatcherServlet#onRefresh()`\n    初始化`DispatcherServlet`的各个组件\n    ```java\n    protected void initStrategies(ApplicationContext context) {\n        // 文件上传请求的解析器\n        initMultipartResolver(context);\n        // 本地化解析器\n        initLocaleResolver(context);\n        // 主题解析器\n        initThemeResolver(context);\n        // 通过HandlerMapping，将请求映射到处理器\n        initHandlerMappings(context);\n        // 通过HandlerAdapter支持多种类型的处理器\n        initHandlerAdapters(context);\n        // 如果执行过程中遇到异常，将交给HandlerExceptionResolver来解析\n        initHandlerExceptionResolvers(context);\n        // 直接解析请求到视图名\n        initRequestToViewNameTranslator(context);\n        // 通过viewResolver解析逻辑视图到具体视图实现\n        initViewResolvers(context);\n        // FlashMapManager请求重定向数据管理器\n        initFlashMapManager(context);\n    }\n    ```","source":"_posts/springmvc学习.md","raw":"---\ntitle: springmvc学习\ndate: 2018-03-20 12:18:39\ntags: springmvc\ncategories: [springmvc]\nkeywords: spring springmvc\n---\n# SpringMvc初始化\n\nSpringmvc的入口是`DispatcherServlet`，先从这里看起\n`DispatcherServlet`的继承关系图\n ![dispatcherServlet继承图](http://7xrv3c.com1.z0.glb.clouddn.com/images/post/spring/dispatcher-servlet.png)\n<!--more-->\n\n## 初始化\n\n### `DispatchServlet`中的`static`块\n\n在`static`块中加载了一个与`DispatcherServlet`同包下的名为`DispatcherServlet.properties`的配置文件，使用配置文件中的配置作为`DispatcherServlet`运行时的默认策略组件\n\n### init方法\n\n`DispatcherServlet`继承了`HttpServlet`,在web容器初始化后会调用`Servlet#init(ServletConfig)`方法进行初始化\n\n#### 初始化调用流程\n\n1. `javax.servlet.GenericServlet#init(javax.servlet.ServletConfig)`\n    将ServletConfig赋值给自身的config属性，使子类可以通过`javax.servlet.GenericServlet#getServletConfig()`获取\n2. `org.springframework.web.servlet.HttpServletBean#init()`\n    将配置信息设置到`DispatcherServlet`中\n    ```java\n    //获得web.xml中的contextConfigLocation配置属性，就是spring MVC的配置文件\n    PropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);\n    BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);\n    //获取服务器的各种信息\n    ResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());\n    bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment()));\n    //模板方法，可以在子类中调用(DispatcherServlet没有)，做一些初始化工作，bw代表DispatcherServelt\n    initBeanWrapper(bw);\n    //将配置的初始化值设置到DispatcherServlet中\n    bw.setPropertyValues(pvs, true);\n    ```\n3. `org.springframework.web.servlet.FrameworkServlet#initServletBean()`\n    初始化SpringMvc的Ioc容器\n4. `org.springframework.web.servlet.DispatcherServlet#onRefresh()`\n    初始化`DispatcherServlet`的各个组件\n    ```java\n    protected void initStrategies(ApplicationContext context) {\n        // 文件上传请求的解析器\n        initMultipartResolver(context);\n        // 本地化解析器\n        initLocaleResolver(context);\n        // 主题解析器\n        initThemeResolver(context);\n        // 通过HandlerMapping，将请求映射到处理器\n        initHandlerMappings(context);\n        // 通过HandlerAdapter支持多种类型的处理器\n        initHandlerAdapters(context);\n        // 如果执行过程中遇到异常，将交给HandlerExceptionResolver来解析\n        initHandlerExceptionResolvers(context);\n        // 直接解析请求到视图名\n        initRequestToViewNameTranslator(context);\n        // 通过viewResolver解析逻辑视图到具体视图实现\n        initViewResolvers(context);\n        // FlashMapManager请求重定向数据管理器\n        initFlashMapManager(context);\n    }\n    ```","slug":"springmvc学习","published":1,"updated":"2018-04-07T01:47:54.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s43002164bf80bb44nh","content":"<h1 id=\"SpringMvc初始化\"><a href=\"#SpringMvc初始化\" class=\"headerlink\" title=\"SpringMvc初始化\"></a>SpringMvc初始化</h1><p>Springmvc的入口是<code>DispatcherServlet</code>，先从这里看起<br><code>DispatcherServlet</code>的继承关系图<br> <img src=\"http://7xrv3c.com1.z0.glb.clouddn.com/images/post/spring/dispatcher-servlet.png\" alt=\"dispatcherServlet继承图\"><br><a id=\"more\"></a></p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><h3 id=\"DispatchServlet中的static块\"><a href=\"#DispatchServlet中的static块\" class=\"headerlink\" title=\"DispatchServlet中的static块\"></a><code>DispatchServlet</code>中的<code>static</code>块</h3><p>在<code>static</code>块中加载了一个与<code>DispatcherServlet</code>同包下的名为<code>DispatcherServlet.properties</code>的配置文件，使用配置文件中的配置作为<code>DispatcherServlet</code>运行时的默认策略组件</p>\n<h3 id=\"init方法\"><a href=\"#init方法\" class=\"headerlink\" title=\"init方法\"></a>init方法</h3><p><code>DispatcherServlet</code>继承了<code>HttpServlet</code>,在web容器初始化后会调用<code>Servlet#init(ServletConfig)</code>方法进行初始化</p>\n<h4 id=\"初始化调用流程\"><a href=\"#初始化调用流程\" class=\"headerlink\" title=\"初始化调用流程\"></a>初始化调用流程</h4><ol>\n<li><code>javax.servlet.GenericServlet#init(javax.servlet.ServletConfig)</code><br> 将ServletConfig赋值给自身的config属性，使子类可以通过<code>javax.servlet.GenericServlet#getServletConfig()</code>获取</li>\n<li><p><code>org.springframework.web.servlet.HttpServletBean#init()</code><br> 将配置信息设置到<code>DispatcherServlet</code>中</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获得web.xml中的contextConfigLocation配置属性，就是spring MVC的配置文件</span></div><div class=\"line\">PropertyValues pvs = <span class=\"keyword\">new</span> ServletConfigPropertyValues(getServletConfig(), <span class=\"keyword\">this</span>.requiredProperties);</div><div class=\"line\">BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(<span class=\"keyword\">this</span>);</div><div class=\"line\"><span class=\"comment\">//获取服务器的各种信息</span></div><div class=\"line\">ResourceLoader resourceLoader = <span class=\"keyword\">new</span> ServletContextResourceLoader(getServletContext());</div><div class=\"line\">bw.registerCustomEditor(Resource.class, <span class=\"keyword\">new</span> ResourceEditor(resourceLoader, getEnvironment()));</div><div class=\"line\"><span class=\"comment\">//模板方法，可以在子类中调用(DispatcherServlet没有)，做一些初始化工作，bw代表DispatcherServelt</span></div><div class=\"line\">initBeanWrapper(bw);</div><div class=\"line\"><span class=\"comment\">//将配置的初始化值设置到DispatcherServlet中</span></div><div class=\"line\">bw.setPropertyValues(pvs, <span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>org.springframework.web.servlet.FrameworkServlet#initServletBean()</code><br> 初始化SpringMvc的Ioc容器</p>\n</li>\n<li><code>org.springframework.web.servlet.DispatcherServlet#onRefresh()</code><br> 初始化<code>DispatcherServlet</code>的各个组件 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initStrategies</span><span class=\"params\">(ApplicationContext context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 文件上传请求的解析器</span></div><div class=\"line\">    initMultipartResolver(context);</div><div class=\"line\">    <span class=\"comment\">// 本地化解析器</span></div><div class=\"line\">    initLocaleResolver(context);</div><div class=\"line\">    <span class=\"comment\">// 主题解析器</span></div><div class=\"line\">    initThemeResolver(context);</div><div class=\"line\">    <span class=\"comment\">// 通过HandlerMapping，将请求映射到处理器</span></div><div class=\"line\">    initHandlerMappings(context);</div><div class=\"line\">    <span class=\"comment\">// 通过HandlerAdapter支持多种类型的处理器</span></div><div class=\"line\">    initHandlerAdapters(context);</div><div class=\"line\">    <span class=\"comment\">// 如果执行过程中遇到异常，将交给HandlerExceptionResolver来解析</span></div><div class=\"line\">    initHandlerExceptionResolvers(context);</div><div class=\"line\">    <span class=\"comment\">// 直接解析请求到视图名</span></div><div class=\"line\">    initRequestToViewNameTranslator(context);</div><div class=\"line\">    <span class=\"comment\">// 通过viewResolver解析逻辑视图到具体视图实现</span></div><div class=\"line\">    initViewResolvers(context);</div><div class=\"line\">    <span class=\"comment\">// FlashMapManager请求重定向数据管理器</span></div><div class=\"line\">    initFlashMapManager(context);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"<h1 id=\"SpringMvc初始化\"><a href=\"#SpringMvc初始化\" class=\"headerlink\" title=\"SpringMvc初始化\"></a>SpringMvc初始化</h1><p>Springmvc的入口是<code>DispatcherServlet</code>，先从这里看起<br><code>DispatcherServlet</code>的继承关系图<br> <img src=\"http://7xrv3c.com1.z0.glb.clouddn.com/images/post/spring/dispatcher-servlet.png\" alt=\"dispatcherServlet继承图\"><br>","more":"</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><h3 id=\"DispatchServlet中的static块\"><a href=\"#DispatchServlet中的static块\" class=\"headerlink\" title=\"DispatchServlet中的static块\"></a><code>DispatchServlet</code>中的<code>static</code>块</h3><p>在<code>static</code>块中加载了一个与<code>DispatcherServlet</code>同包下的名为<code>DispatcherServlet.properties</code>的配置文件，使用配置文件中的配置作为<code>DispatcherServlet</code>运行时的默认策略组件</p>\n<h3 id=\"init方法\"><a href=\"#init方法\" class=\"headerlink\" title=\"init方法\"></a>init方法</h3><p><code>DispatcherServlet</code>继承了<code>HttpServlet</code>,在web容器初始化后会调用<code>Servlet#init(ServletConfig)</code>方法进行初始化</p>\n<h4 id=\"初始化调用流程\"><a href=\"#初始化调用流程\" class=\"headerlink\" title=\"初始化调用流程\"></a>初始化调用流程</h4><ol>\n<li><code>javax.servlet.GenericServlet#init(javax.servlet.ServletConfig)</code><br> 将ServletConfig赋值给自身的config属性，使子类可以通过<code>javax.servlet.GenericServlet#getServletConfig()</code>获取</li>\n<li><p><code>org.springframework.web.servlet.HttpServletBean#init()</code><br> 将配置信息设置到<code>DispatcherServlet</code>中</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获得web.xml中的contextConfigLocation配置属性，就是spring MVC的配置文件</span></div><div class=\"line\">PropertyValues pvs = <span class=\"keyword\">new</span> ServletConfigPropertyValues(getServletConfig(), <span class=\"keyword\">this</span>.requiredProperties);</div><div class=\"line\">BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(<span class=\"keyword\">this</span>);</div><div class=\"line\"><span class=\"comment\">//获取服务器的各种信息</span></div><div class=\"line\">ResourceLoader resourceLoader = <span class=\"keyword\">new</span> ServletContextResourceLoader(getServletContext());</div><div class=\"line\">bw.registerCustomEditor(Resource.class, <span class=\"keyword\">new</span> ResourceEditor(resourceLoader, getEnvironment()));</div><div class=\"line\"><span class=\"comment\">//模板方法，可以在子类中调用(DispatcherServlet没有)，做一些初始化工作，bw代表DispatcherServelt</span></div><div class=\"line\">initBeanWrapper(bw);</div><div class=\"line\"><span class=\"comment\">//将配置的初始化值设置到DispatcherServlet中</span></div><div class=\"line\">bw.setPropertyValues(pvs, <span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>org.springframework.web.servlet.FrameworkServlet#initServletBean()</code><br> 初始化SpringMvc的Ioc容器</p>\n</li>\n<li><code>org.springframework.web.servlet.DispatcherServlet#onRefresh()</code><br> 初始化<code>DispatcherServlet</code>的各个组件 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initStrategies</span><span class=\"params\">(ApplicationContext context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 文件上传请求的解析器</span></div><div class=\"line\">    initMultipartResolver(context);</div><div class=\"line\">    <span class=\"comment\">// 本地化解析器</span></div><div class=\"line\">    initLocaleResolver(context);</div><div class=\"line\">    <span class=\"comment\">// 主题解析器</span></div><div class=\"line\">    initThemeResolver(context);</div><div class=\"line\">    <span class=\"comment\">// 通过HandlerMapping，将请求映射到处理器</span></div><div class=\"line\">    initHandlerMappings(context);</div><div class=\"line\">    <span class=\"comment\">// 通过HandlerAdapter支持多种类型的处理器</span></div><div class=\"line\">    initHandlerAdapters(context);</div><div class=\"line\">    <span class=\"comment\">// 如果执行过程中遇到异常，将交给HandlerExceptionResolver来解析</span></div><div class=\"line\">    initHandlerExceptionResolvers(context);</div><div class=\"line\">    <span class=\"comment\">// 直接解析请求到视图名</span></div><div class=\"line\">    initRequestToViewNameTranslator(context);</div><div class=\"line\">    <span class=\"comment\">// 通过viewResolver解析逻辑视图到具体视图实现</span></div><div class=\"line\">    initViewResolvers(context);</div><div class=\"line\">    <span class=\"comment\">// FlashMapManager请求重定向数据管理器</span></div><div class=\"line\">    initFlashMapManager(context);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ol>"},{"title":"spring一些用法小结","date":"2017-09-14T03:46:29.000Z","keywords":"spring","_content":"\n\n## 在spring容器初始化后执行操作\n\n```java\n@Component\npublic class AfterContextStarted implements ApplicationListener<ContextRefreshedEvent> {\n\n    @Override\n    public void onApplicationEvent(ContextRefreshedEvent event) {\n        //存在springMVC时 可能会被调用两次(一次spring容器，一次springMVC容器)\n        if(applicationContext.getParent() == null){//root application context 没有parent，他就是老大.\n            //TODO something\n        }\n    }\n}\n```\n\n## spring动态注册Bean\n\n```java\n //通过ConfigurableListableBeanFactory可以注册一个bean\nConfigurableApplicationContext configurableApplicationContext =\n                (ConfigurableApplicationContext) applicationContext;\nConfigurableListableBeanFactory beanFactory = \n                configurableApplicationContext.getBeanFactory();\nbeanFactory.registerSingleton(beanName, bean);\n```\n\n## 在Bean初始化时对Bean做一些操作\n\n```java\n//实现BeanPostProcessor接口\n@Component\npublic class BeanProcessor implements BeanPostProcessor {\n\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName)\n                throws BeansException {\n        return bean;\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName)\n             throws BeansException {\n        return bean;\n    }\n}\n```\n\n## Spring静态工具类\n\n```java\n@Component\npublic class SpringContextHolder implements ApplicationContextAware {\n\n    public static ApplicationContext getApplicationContext() {\n        return applicationContext;\n    }\n\n    private static ApplicationContext applicationContext;\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext)\n             throws BeansException {\n        SpringContextHolder.applicationContext = applicationContext;\n    }\n}\n```","source":"_posts/spring一些用法小结.md","raw":"---\ntitle: spring一些用法小结\ndate: 2017-09-14 11:46:29\ntags:\ncategories: [spring ]\nkeywords: spring\n---\n\n\n## 在spring容器初始化后执行操作\n\n```java\n@Component\npublic class AfterContextStarted implements ApplicationListener<ContextRefreshedEvent> {\n\n    @Override\n    public void onApplicationEvent(ContextRefreshedEvent event) {\n        //存在springMVC时 可能会被调用两次(一次spring容器，一次springMVC容器)\n        if(applicationContext.getParent() == null){//root application context 没有parent，他就是老大.\n            //TODO something\n        }\n    }\n}\n```\n\n## spring动态注册Bean\n\n```java\n //通过ConfigurableListableBeanFactory可以注册一个bean\nConfigurableApplicationContext configurableApplicationContext =\n                (ConfigurableApplicationContext) applicationContext;\nConfigurableListableBeanFactory beanFactory = \n                configurableApplicationContext.getBeanFactory();\nbeanFactory.registerSingleton(beanName, bean);\n```\n\n## 在Bean初始化时对Bean做一些操作\n\n```java\n//实现BeanPostProcessor接口\n@Component\npublic class BeanProcessor implements BeanPostProcessor {\n\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName)\n                throws BeansException {\n        return bean;\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName)\n             throws BeansException {\n        return bean;\n    }\n}\n```\n\n## Spring静态工具类\n\n```java\n@Component\npublic class SpringContextHolder implements ApplicationContextAware {\n\n    public static ApplicationContext getApplicationContext() {\n        return applicationContext;\n    }\n\n    private static ApplicationContext applicationContext;\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext)\n             throws BeansException {\n        SpringContextHolder.applicationContext = applicationContext;\n    }\n}\n```","slug":"spring一些用法小结","published":1,"updated":"2017-11-02T13:49:15.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s45002364bf6now22n0","content":"<h2 id=\"在spring容器初始化后执行操作\"><a href=\"#在spring容器初始化后执行操作\" class=\"headerlink\" title=\"在spring容器初始化后执行操作\"></a>在spring容器初始化后执行操作</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AfterContextStarted</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationListener</span>&lt;<span class=\"title\">ContextRefreshedEvent</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(ContextRefreshedEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//存在springMVC时 可能会被调用两次(一次spring容器，一次springMVC容器)</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(applicationContext.getParent() == <span class=\"keyword\">null</span>)&#123;<span class=\"comment\">//root application context 没有parent，他就是老大.</span></div><div class=\"line\">            <span class=\"comment\">//TODO something</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"spring动态注册Bean\"><a href=\"#spring动态注册Bean\" class=\"headerlink\" title=\"spring动态注册Bean\"></a>spring动态注册Bean</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">//通过ConfigurableListableBeanFactory可以注册一个bean</span></div><div class=\"line\">ConfigurableApplicationContext configurableApplicationContext =</div><div class=\"line\">                (ConfigurableApplicationContext) applicationContext;</div><div class=\"line\">ConfigurableListableBeanFactory beanFactory = </div><div class=\"line\">                configurableApplicationContext.getBeanFactory();</div><div class=\"line\">beanFactory.registerSingleton(beanName, bean);</div></pre></td></tr></table></figure>\n<h2 id=\"在Bean初始化时对Bean做一些操作\"><a href=\"#在Bean初始化时对Bean做一些操作\" class=\"headerlink\" title=\"在Bean初始化时对Bean做一些操作\"></a>在Bean初始化时对Bean做一些操作</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//实现BeanPostProcessor接口</span></div><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanPostProcessor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span></span></div><div class=\"line\">                <span class=\"keyword\">throws</span> BeansException &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> bean;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span></span></div><div class=\"line\">             <span class=\"keyword\">throws</span> BeansException &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> bean;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Spring静态工具类\"><a href=\"#Spring静态工具类\" class=\"headerlink\" title=\"Spring静态工具类\"></a>Spring静态工具类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringContextHolder</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ApplicationContext <span class=\"title\">getApplicationContext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> applicationContext;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span></span></div><div class=\"line\">             <span class=\"keyword\">throws</span> BeansException &#123;</div><div class=\"line\">        SpringContextHolder.applicationContext = applicationContext;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"在spring容器初始化后执行操作\"><a href=\"#在spring容器初始化后执行操作\" class=\"headerlink\" title=\"在spring容器初始化后执行操作\"></a>在spring容器初始化后执行操作</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AfterContextStarted</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationListener</span>&lt;<span class=\"title\">ContextRefreshedEvent</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(ContextRefreshedEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//存在springMVC时 可能会被调用两次(一次spring容器，一次springMVC容器)</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(applicationContext.getParent() == <span class=\"keyword\">null</span>)&#123;<span class=\"comment\">//root application context 没有parent，他就是老大.</span></div><div class=\"line\">            <span class=\"comment\">//TODO something</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"spring动态注册Bean\"><a href=\"#spring动态注册Bean\" class=\"headerlink\" title=\"spring动态注册Bean\"></a>spring动态注册Bean</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">//通过ConfigurableListableBeanFactory可以注册一个bean</span></div><div class=\"line\">ConfigurableApplicationContext configurableApplicationContext =</div><div class=\"line\">                (ConfigurableApplicationContext) applicationContext;</div><div class=\"line\">ConfigurableListableBeanFactory beanFactory = </div><div class=\"line\">                configurableApplicationContext.getBeanFactory();</div><div class=\"line\">beanFactory.registerSingleton(beanName, bean);</div></pre></td></tr></table></figure>\n<h2 id=\"在Bean初始化时对Bean做一些操作\"><a href=\"#在Bean初始化时对Bean做一些操作\" class=\"headerlink\" title=\"在Bean初始化时对Bean做一些操作\"></a>在Bean初始化时对Bean做一些操作</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//实现BeanPostProcessor接口</span></div><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanPostProcessor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span></div><div class=\"line\">                <span class=\"keyword\">throws</span> BeansException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> bean;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span></div><div class=\"line\">             <span class=\"keyword\">throws</span> BeansException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> bean;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Spring静态工具类\"><a href=\"#Spring静态工具类\" class=\"headerlink\" title=\"Spring静态工具类\"></a>Spring静态工具类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringContextHolder</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ApplicationContext <span class=\"title\">getApplicationContext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> applicationContext;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span></div><div class=\"line\">             <span class=\"keyword\">throws</span> BeansException </span>&#123;</div><div class=\"line\">        SpringContextHolder.applicationContext = applicationContext;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"zuul入门","date":"2017-11-03T02:24:22.000Z","keywords":"zuul, spring cloud","_content":"\nzuul是spring cloud的网关组件，用户在微服务中提供一个统一的对外接口，官方对zuul的说明是 \n\n`Zuul is an edge service that provides dynamic routing, monitoring, resiliency, security, and more. `\n<!--more-->\n## ZuulFilter\nzuul是的核心就是`com.netflix.zuul.ZuulFilter`,对于zuul网关的相关功能都是通过扩展这个ZuulFilter来实现的\n\nZuulFilter只需要实现几个方法就行\n```java\npublic abstract class ZuulFilter implements IZuulFilter, Comparable<ZuulFilter> {\n    /**\n     * 指明过滤器的类型 zuul定义类四种类型 pre, route, post, error\n     * 可以在 com.netflix.zuul.FilterProcessor 中看到\n     */\n    abstract public String filterType();\n    /**\n     * filter的排序序号 在同类型中 filterOrder 越小约先执行\n     */\n    abstract public int filterOrder();\n    /**\n     * 是否应该执行Filter\n     */\n    abstract public boolean shouldFilter();\n\n    /**\n     * 如果 shouldFilter() 为 true, 才会调用这个方法.\n     * 这个方法是一个ZuulFilter的核心方法\n     * @return 随意返回，反正zuul会忽略这个返回值\n     */\n    abstract public Object run();\n}\n\n```\n### 编写ZuulFilter\n\n例如实现一个判断请求是否带有accessToken的Filter \n\n```java\npublic class AuthenticationFilter extends ZuulPreFilter {\n    public String filterType(){\n        return \"pre\";\n    }\n    public int filterOrder(){\n        return 0;\n    }\n    public boolean shouldFilter(){\n        return true;\n    }\n    public Object run(){\n        RequestContext ctx = RequestContext.getCurrentContext();\n        HttpServletRequest request = ctx.getRequest();\n        String accessToken = request.getParameter(\"access_token\");\n        if(accessToken == null || \"\".equals(accessToken)){\n            ctx.setSendZuulResponse(false);\n            ctx.setResponseStatusCode(403);\n            return null;\n        }\n        return null;\n    }\n\n}\n```\n\n### 注册ZuulFilter\n实现的`ZuulFilter`都通过`com.netflix.zuul.filters.FilterRegistry#put(String, ZuulFilter)`进行注册\n\n`FilterRegistry`是个单例\n\n直接通过`com.netflix.zuul.filters.FilterRegistry#instance`就可以获取实例\n\nZuul里面单例用的比较多\n\n## 配置Zuul\n\n要使用Zuul 需要配置一个`com.netflix.zuul.context.ContextLifecycleFilter`和一个 \n\n`com.netflix.zuul.filters.ZuulServletFilter` \n\n或者 `com.netflix.zuul.http.ZuulServlet`\n\n`ZuulServlertFilter`和`ZuulServlet`二选一就行 这两个就是请求的入口\n\n`ContextLifecycleFilter`主要是对`com.netflix.zuul.context.RequestContext`的生命周期做管理\n\n`com.netflix.zuul.context.RequestContext`是一个上下问对象，在`ZuulFilter`中可以使用`RequestContext#getInstacne()`获取到当前的请求上下文，\n`RequestContext`内部使用`ThreadLocal`来实现\n\n配置了`ZuulServlertFilter`或者`ZuulServlet`之后 \n\n### ZuulServlet\n以`ZuulServlet`来说，`service`方法就是核心\n\n在`service`方法中主要就是初始化`RequestContext`以及调用各个类型的`ZuulFilter` \n\n```java\ntry {\n    init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);\n\n    // Marks this request as having passed through the \"Zuul engine\", as opposed to servlets\n    // explicitly bound in web.xml, for which requests will not have the same data attached\n    RequestContext context = RequestContext.getCurrentContext();\n    context.setZuulEngineRan();\n\n    try {\n        preRoute();\n    } catch (ZuulException e) {\n        error(e);\n        postRoute();\n        return;\n    }\n    try {\n        route();\n    } catch (ZuulException e) {\n        error(e);\n        postRoute();\n        return;\n    }\n    try {\n        postRoute();\n    } catch (ZuulException e) {\n        error(e);\n        return;\n    }\n} catch (Throwable e) {\n    error(new ZuulException(e, 500, \"UNHANDLED_EXCEPTION_\" + e.getClass().getName()));\n} finally {\n    RequestContext.getCurrentContext().unset();\n}\n```\n在`ZuulServlet`内部持有个`com.netflix.zuul.ZuulRunner`对象\n\n各个`xxRoute()`方法都是委托给`ZuulRunner`的方法去调用\n\n`ZuulRunner`在委托给`FilterProcessor`去调用， `FilterProcessor`是一个单例\n\n`FilterProcessor`使用`FilterLoad`最后调用到`FilterRegistry`获取注册的Filter进行调用\n\n\n","source":"_posts/zuul入门.md","raw":"---\ntitle: zuul入门\ndate: 2017-11-03 10:24:22\ntags: [spring cloud, zuul]\ncategories: spring cloud\nkeywords: zuul, spring cloud\n---\n\nzuul是spring cloud的网关组件，用户在微服务中提供一个统一的对外接口，官方对zuul的说明是 \n\n`Zuul is an edge service that provides dynamic routing, monitoring, resiliency, security, and more. `\n<!--more-->\n## ZuulFilter\nzuul是的核心就是`com.netflix.zuul.ZuulFilter`,对于zuul网关的相关功能都是通过扩展这个ZuulFilter来实现的\n\nZuulFilter只需要实现几个方法就行\n```java\npublic abstract class ZuulFilter implements IZuulFilter, Comparable<ZuulFilter> {\n    /**\n     * 指明过滤器的类型 zuul定义类四种类型 pre, route, post, error\n     * 可以在 com.netflix.zuul.FilterProcessor 中看到\n     */\n    abstract public String filterType();\n    /**\n     * filter的排序序号 在同类型中 filterOrder 越小约先执行\n     */\n    abstract public int filterOrder();\n    /**\n     * 是否应该执行Filter\n     */\n    abstract public boolean shouldFilter();\n\n    /**\n     * 如果 shouldFilter() 为 true, 才会调用这个方法.\n     * 这个方法是一个ZuulFilter的核心方法\n     * @return 随意返回，反正zuul会忽略这个返回值\n     */\n    abstract public Object run();\n}\n\n```\n### 编写ZuulFilter\n\n例如实现一个判断请求是否带有accessToken的Filter \n\n```java\npublic class AuthenticationFilter extends ZuulPreFilter {\n    public String filterType(){\n        return \"pre\";\n    }\n    public int filterOrder(){\n        return 0;\n    }\n    public boolean shouldFilter(){\n        return true;\n    }\n    public Object run(){\n        RequestContext ctx = RequestContext.getCurrentContext();\n        HttpServletRequest request = ctx.getRequest();\n        String accessToken = request.getParameter(\"access_token\");\n        if(accessToken == null || \"\".equals(accessToken)){\n            ctx.setSendZuulResponse(false);\n            ctx.setResponseStatusCode(403);\n            return null;\n        }\n        return null;\n    }\n\n}\n```\n\n### 注册ZuulFilter\n实现的`ZuulFilter`都通过`com.netflix.zuul.filters.FilterRegistry#put(String, ZuulFilter)`进行注册\n\n`FilterRegistry`是个单例\n\n直接通过`com.netflix.zuul.filters.FilterRegistry#instance`就可以获取实例\n\nZuul里面单例用的比较多\n\n## 配置Zuul\n\n要使用Zuul 需要配置一个`com.netflix.zuul.context.ContextLifecycleFilter`和一个 \n\n`com.netflix.zuul.filters.ZuulServletFilter` \n\n或者 `com.netflix.zuul.http.ZuulServlet`\n\n`ZuulServlertFilter`和`ZuulServlet`二选一就行 这两个就是请求的入口\n\n`ContextLifecycleFilter`主要是对`com.netflix.zuul.context.RequestContext`的生命周期做管理\n\n`com.netflix.zuul.context.RequestContext`是一个上下问对象，在`ZuulFilter`中可以使用`RequestContext#getInstacne()`获取到当前的请求上下文，\n`RequestContext`内部使用`ThreadLocal`来实现\n\n配置了`ZuulServlertFilter`或者`ZuulServlet`之后 \n\n### ZuulServlet\n以`ZuulServlet`来说，`service`方法就是核心\n\n在`service`方法中主要就是初始化`RequestContext`以及调用各个类型的`ZuulFilter` \n\n```java\ntry {\n    init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);\n\n    // Marks this request as having passed through the \"Zuul engine\", as opposed to servlets\n    // explicitly bound in web.xml, for which requests will not have the same data attached\n    RequestContext context = RequestContext.getCurrentContext();\n    context.setZuulEngineRan();\n\n    try {\n        preRoute();\n    } catch (ZuulException e) {\n        error(e);\n        postRoute();\n        return;\n    }\n    try {\n        route();\n    } catch (ZuulException e) {\n        error(e);\n        postRoute();\n        return;\n    }\n    try {\n        postRoute();\n    } catch (ZuulException e) {\n        error(e);\n        return;\n    }\n} catch (Throwable e) {\n    error(new ZuulException(e, 500, \"UNHANDLED_EXCEPTION_\" + e.getClass().getName()));\n} finally {\n    RequestContext.getCurrentContext().unset();\n}\n```\n在`ZuulServlet`内部持有个`com.netflix.zuul.ZuulRunner`对象\n\n各个`xxRoute()`方法都是委托给`ZuulRunner`的方法去调用\n\n`ZuulRunner`在委托给`FilterProcessor`去调用， `FilterProcessor`是一个单例\n\n`FilterProcessor`使用`FilterLoad`最后调用到`FilterRegistry`获取注册的Filter进行调用\n\n\n","slug":"zuul入门","published":1,"updated":"2017-11-04T04:01:53.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s46002764bfebnxwoib","content":"<p>zuul是spring cloud的网关组件，用户在微服务中提供一个统一的对外接口，官方对zuul的说明是 </p>\n<p><code>Zuul is an edge service that provides dynamic routing, monitoring, resiliency, security, and more.</code><br><a id=\"more\"></a></p>\n<h2 id=\"ZuulFilter\"><a href=\"#ZuulFilter\" class=\"headerlink\" title=\"ZuulFilter\"></a>ZuulFilter</h2><p>zuul是的核心就是<code>com.netflix.zuul.ZuulFilter</code>,对于zuul网关的相关功能都是通过扩展这个ZuulFilter来实现的</p>\n<p>ZuulFilter只需要实现几个方法就行<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZuulFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">IZuulFilter</span>, <span class=\"title\">Comparable</span>&lt;<span class=\"title\">ZuulFilter</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 指明过滤器的类型 zuul定义类四种类型 pre, route, post, error</div><div class=\"line\">     * 可以在 com.netflix.zuul.FilterProcessor 中看到</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> String <span class=\"title\">filterType</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * filter的排序序号 在同类型中 filterOrder 越小约先执行</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">filterOrder</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 是否应该执行Filter</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldFilter</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 如果 shouldFilter() 为 true, 才会调用这个方法.</div><div class=\"line\">     * 这个方法是一个ZuulFilter的核心方法</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 随意返回，反正zuul会忽略这个返回值</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> Object <span class=\"title\">run</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"编写ZuulFilter\"><a href=\"#编写ZuulFilter\" class=\"headerlink\" title=\"编写ZuulFilter\"></a>编写ZuulFilter</h3><p>例如实现一个判断请求是否带有accessToken的Filter </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthenticationFilter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ZuulPreFilter</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">filterType</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"pre\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">filterOrder</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldFilter</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        RequestContext ctx = RequestContext.getCurrentContext();</div><div class=\"line\">        HttpServletRequest request = ctx.getRequest();</div><div class=\"line\">        String accessToken = request.getParameter(<span class=\"string\">\"access_token\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(accessToken == <span class=\"keyword\">null</span> || <span class=\"string\">\"\"</span>.equals(accessToken))&#123;</div><div class=\"line\">            ctx.setSendZuulResponse(<span class=\"keyword\">false</span>);</div><div class=\"line\">            ctx.setResponseStatusCode(<span class=\"number\">403</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"注册ZuulFilter\"><a href=\"#注册ZuulFilter\" class=\"headerlink\" title=\"注册ZuulFilter\"></a>注册ZuulFilter</h3><p>实现的<code>ZuulFilter</code>都通过<code>com.netflix.zuul.filters.FilterRegistry#put(String, ZuulFilter)</code>进行注册</p>\n<p><code>FilterRegistry</code>是个单例</p>\n<p>直接通过<code>com.netflix.zuul.filters.FilterRegistry#instance</code>就可以获取实例</p>\n<p>Zuul里面单例用的比较多</p>\n<h2 id=\"配置Zuul\"><a href=\"#配置Zuul\" class=\"headerlink\" title=\"配置Zuul\"></a>配置Zuul</h2><p>要使用Zuul 需要配置一个<code>com.netflix.zuul.context.ContextLifecycleFilter</code>和一个 </p>\n<p><code>com.netflix.zuul.filters.ZuulServletFilter</code> </p>\n<p>或者 <code>com.netflix.zuul.http.ZuulServlet</code></p>\n<p><code>ZuulServlertFilter</code>和<code>ZuulServlet</code>二选一就行 这两个就是请求的入口</p>\n<p><code>ContextLifecycleFilter</code>主要是对<code>com.netflix.zuul.context.RequestContext</code>的生命周期做管理</p>\n<p><code>com.netflix.zuul.context.RequestContext</code>是一个上下问对象，在<code>ZuulFilter</code>中可以使用<code>RequestContext#getInstacne()</code>获取到当前的请求上下文，<br><code>RequestContext</code>内部使用<code>ThreadLocal</code>来实现</p>\n<p>配置了<code>ZuulServlertFilter</code>或者<code>ZuulServlet</code>之后 </p>\n<h3 id=\"ZuulServlet\"><a href=\"#ZuulServlet\" class=\"headerlink\" title=\"ZuulServlet\"></a>ZuulServlet</h3><p>以<code>ZuulServlet</code>来说，<code>service</code>方法就是核心</p>\n<p>在<code>service</code>方法中主要就是初始化<code>RequestContext</code>以及调用各个类型的<code>ZuulFilter</code> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Marks this request as having passed through the \"Zuul engine\", as opposed to servlets</span></div><div class=\"line\">    <span class=\"comment\">// explicitly bound in web.xml, for which requests will not have the same data attached</span></div><div class=\"line\">    RequestContext context = RequestContext.getCurrentContext();</div><div class=\"line\">    context.setZuulEngineRan();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        preRoute();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ZuulException e) &#123;</div><div class=\"line\">        error(e);</div><div class=\"line\">        postRoute();</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        route();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ZuulException e) &#123;</div><div class=\"line\">        error(e);</div><div class=\"line\">        postRoute();</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        postRoute();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ZuulException e) &#123;</div><div class=\"line\">        error(e);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">    error(<span class=\"keyword\">new</span> ZuulException(e, <span class=\"number\">500</span>, <span class=\"string\">\"UNHANDLED_EXCEPTION_\"</span> + e.getClass().getName()));</div><div class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    RequestContext.getCurrentContext().unset();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在<code>ZuulServlet</code>内部持有个<code>com.netflix.zuul.ZuulRunner</code>对象</p>\n<p>各个<code>xxRoute()</code>方法都是委托给<code>ZuulRunner</code>的方法去调用</p>\n<p><code>ZuulRunner</code>在委托给<code>FilterProcessor</code>去调用， <code>FilterProcessor</code>是一个单例</p>\n<p><code>FilterProcessor</code>使用<code>FilterLoad</code>最后调用到<code>FilterRegistry</code>获取注册的Filter进行调用</p>\n","excerpt":"<p>zuul是spring cloud的网关组件，用户在微服务中提供一个统一的对外接口，官方对zuul的说明是 </p>\n<p><code>Zuul is an edge service that provides dynamic routing, monitoring, resiliency, security, and more.</code><br>","more":"</p>\n<h2 id=\"ZuulFilter\"><a href=\"#ZuulFilter\" class=\"headerlink\" title=\"ZuulFilter\"></a>ZuulFilter</h2><p>zuul是的核心就是<code>com.netflix.zuul.ZuulFilter</code>,对于zuul网关的相关功能都是通过扩展这个ZuulFilter来实现的</p>\n<p>ZuulFilter只需要实现几个方法就行<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZuulFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">IZuulFilter</span>, <span class=\"title\">Comparable</span>&lt;<span class=\"title\">ZuulFilter</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 指明过滤器的类型 zuul定义类四种类型 pre, route, post, error</div><div class=\"line\">     * 可以在 com.netflix.zuul.FilterProcessor 中看到</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> String <span class=\"title\">filterType</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * filter的排序序号 在同类型中 filterOrder 越小约先执行</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">filterOrder</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 是否应该执行Filter</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldFilter</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 如果 shouldFilter() 为 true, 才会调用这个方法.</div><div class=\"line\">     * 这个方法是一个ZuulFilter的核心方法</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 随意返回，反正zuul会忽略这个返回值</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> Object <span class=\"title\">run</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"编写ZuulFilter\"><a href=\"#编写ZuulFilter\" class=\"headerlink\" title=\"编写ZuulFilter\"></a>编写ZuulFilter</h3><p>例如实现一个判断请求是否带有accessToken的Filter </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthenticationFilter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ZuulPreFilter</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">filterType</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"pre\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">filterOrder</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldFilter</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        RequestContext ctx = RequestContext.getCurrentContext();</div><div class=\"line\">        HttpServletRequest request = ctx.getRequest();</div><div class=\"line\">        String accessToken = request.getParameter(<span class=\"string\">\"access_token\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(accessToken == <span class=\"keyword\">null</span> || <span class=\"string\">\"\"</span>.equals(accessToken))&#123;</div><div class=\"line\">            ctx.setSendZuulResponse(<span class=\"keyword\">false</span>);</div><div class=\"line\">            ctx.setResponseStatusCode(<span class=\"number\">403</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"注册ZuulFilter\"><a href=\"#注册ZuulFilter\" class=\"headerlink\" title=\"注册ZuulFilter\"></a>注册ZuulFilter</h3><p>实现的<code>ZuulFilter</code>都通过<code>com.netflix.zuul.filters.FilterRegistry#put(String, ZuulFilter)</code>进行注册</p>\n<p><code>FilterRegistry</code>是个单例</p>\n<p>直接通过<code>com.netflix.zuul.filters.FilterRegistry#instance</code>就可以获取实例</p>\n<p>Zuul里面单例用的比较多</p>\n<h2 id=\"配置Zuul\"><a href=\"#配置Zuul\" class=\"headerlink\" title=\"配置Zuul\"></a>配置Zuul</h2><p>要使用Zuul 需要配置一个<code>com.netflix.zuul.context.ContextLifecycleFilter</code>和一个 </p>\n<p><code>com.netflix.zuul.filters.ZuulServletFilter</code> </p>\n<p>或者 <code>com.netflix.zuul.http.ZuulServlet</code></p>\n<p><code>ZuulServlertFilter</code>和<code>ZuulServlet</code>二选一就行 这两个就是请求的入口</p>\n<p><code>ContextLifecycleFilter</code>主要是对<code>com.netflix.zuul.context.RequestContext</code>的生命周期做管理</p>\n<p><code>com.netflix.zuul.context.RequestContext</code>是一个上下问对象，在<code>ZuulFilter</code>中可以使用<code>RequestContext#getInstacne()</code>获取到当前的请求上下文，<br><code>RequestContext</code>内部使用<code>ThreadLocal</code>来实现</p>\n<p>配置了<code>ZuulServlertFilter</code>或者<code>ZuulServlet</code>之后 </p>\n<h3 id=\"ZuulServlet\"><a href=\"#ZuulServlet\" class=\"headerlink\" title=\"ZuulServlet\"></a>ZuulServlet</h3><p>以<code>ZuulServlet</code>来说，<code>service</code>方法就是核心</p>\n<p>在<code>service</code>方法中主要就是初始化<code>RequestContext</code>以及调用各个类型的<code>ZuulFilter</code> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Marks this request as having passed through the \"Zuul engine\", as opposed to servlets</span></div><div class=\"line\">    <span class=\"comment\">// explicitly bound in web.xml, for which requests will not have the same data attached</span></div><div class=\"line\">    RequestContext context = RequestContext.getCurrentContext();</div><div class=\"line\">    context.setZuulEngineRan();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        preRoute();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ZuulException e) &#123;</div><div class=\"line\">        error(e);</div><div class=\"line\">        postRoute();</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        route();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ZuulException e) &#123;</div><div class=\"line\">        error(e);</div><div class=\"line\">        postRoute();</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        postRoute();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ZuulException e) &#123;</div><div class=\"line\">        error(e);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">    error(<span class=\"keyword\">new</span> ZuulException(e, <span class=\"number\">500</span>, <span class=\"string\">\"UNHANDLED_EXCEPTION_\"</span> + e.getClass().getName()));</div><div class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    RequestContext.getCurrentContext().unset();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在<code>ZuulServlet</code>内部持有个<code>com.netflix.zuul.ZuulRunner</code>对象</p>\n<p>各个<code>xxRoute()</code>方法都是委托给<code>ZuulRunner</code>的方法去调用</p>\n<p><code>ZuulRunner</code>在委托给<code>FilterProcessor</code>去调用， <code>FilterProcessor</code>是一个单例</p>\n<p><code>FilterProcessor</code>使用<code>FilterLoad</code>最后调用到<code>FilterRegistry</code>获取注册的Filter进行调用</p>"},{"title":"windows使用oh-my-zsh","date":"2017-04-22T12:49:51.000Z","keywords":["windows terminal zsh oh-my-zsh"],"_content":"\n开发有时候需要使用terminal,无奈家里电脑还是只能用Windows,但是感觉CMD真的很难用,就是是powershell也不太习惯\n\n公司电脑用deepin oh-my-zsh不能更舒服，就想到能不能在windows上也能装上oh-my-zsh\n\n于是开始一番baidu+google \n\n## 安装cywin\n\n先装上[cywin](http://cywin.com) 网络太慢的话可以从迅雷下 [32位](http://www.cygwin.com/setup-x86.exe) [64位](http://www.cygwin.com/setup-x86_64.exe)\n\n开始安装，选择从网络安装，太慢的话可以使用国内的源 `http://mirrors.ustc.edu.cn/cygwin/`\n\n***记得安装zsh***\n\n## 安装`oh-my-zsh` \n\n不知道为什么直接使用`oh-my-zsh`提供的从网络安装总是git clone失败. 于是先手动把`oh-my-zsh`clone到 `$HOME` 目录下 `$HOME`在 `cywin的安装目录/home/用户名`\n\n`git clone https://github.com/robbyrussell/oh-my-zsh.git .oh-my-zsh` \n\n直接用`oh-my-zsh`提供的安装的文件是不能装上的,自己手动复制里面的命令一个个的在`cywin`的终端里执行\n\n```bash\n # 先设置oh-my-zsh 的目录\n export ZSH=~/.oh-my-zsh\n # 生成zsh的配置文件\n cp $ZSH/templates/zshrc.zsh-template ~/.zshrc\n\n```\n此时zsh会报找不到env grep 之类的命令\n修改`zsh`的配置文件 `.zshrc` 把第一行修改为下面的\n```bash\n# If you come from bash you might have to change your $PATH.\n export PATH=/bin:$HOME/bin:/usr/local/bin:$PATH\n``` \nok 打开cmd或者 cywin的终端 输入 `zsh` \n\n会有挺多bug的，比如有些字符不能显示，\n\n我使用的`gnzh`主题 这是光标会有点bug 比正常的光标后大概3个字符\n\n修改CMD字体  [http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html](http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html)\n\n我使用的是 [dejavu](https://dejavu-fonts.github.io/)\n\n在CMD输入 chcp 437 然后就多出几个可选择的字体了\n\n## 修改HOME目录\n此时zsh的用户根目录是在 `cywin安装目录/home/用户名`下的，修改到Windows的用户目录下去\n\n在windows的环境变量设置里面新建一条记录\n```\nHOME=windows的用户目录\n```\n并把原来用户目录下的文件都copy到新的用户目录下\n\n现在在cmd或者cywin的终端里面输入zsh. \n\n以后就win+R 输入zsh吧~\n\n## 安装 `apt-cyg` \n\ncywin里面类似于`apt-get`的软件包安装工具。立马装上\n\n```bash\nwget https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg -O apt-cyg\ninstall apt-cyg /bin\n```\n\n现在可以用`apt-cyg install vim`来在cywin上安装`vim`了~\n","source":"_posts/windows-use-oh-my-zsh.md","raw":"---\ntitle: windows使用oh-my-zsh\ndate: 2017-04-22 20:49:51\ntags: \ncategories: [other]\nkeywords: [windows terminal zsh oh-my-zsh ]\n---\n\n开发有时候需要使用terminal,无奈家里电脑还是只能用Windows,但是感觉CMD真的很难用,就是是powershell也不太习惯\n\n公司电脑用deepin oh-my-zsh不能更舒服，就想到能不能在windows上也能装上oh-my-zsh\n\n于是开始一番baidu+google \n\n## 安装cywin\n\n先装上[cywin](http://cywin.com) 网络太慢的话可以从迅雷下 [32位](http://www.cygwin.com/setup-x86.exe) [64位](http://www.cygwin.com/setup-x86_64.exe)\n\n开始安装，选择从网络安装，太慢的话可以使用国内的源 `http://mirrors.ustc.edu.cn/cygwin/`\n\n***记得安装zsh***\n\n## 安装`oh-my-zsh` \n\n不知道为什么直接使用`oh-my-zsh`提供的从网络安装总是git clone失败. 于是先手动把`oh-my-zsh`clone到 `$HOME` 目录下 `$HOME`在 `cywin的安装目录/home/用户名`\n\n`git clone https://github.com/robbyrussell/oh-my-zsh.git .oh-my-zsh` \n\n直接用`oh-my-zsh`提供的安装的文件是不能装上的,自己手动复制里面的命令一个个的在`cywin`的终端里执行\n\n```bash\n # 先设置oh-my-zsh 的目录\n export ZSH=~/.oh-my-zsh\n # 生成zsh的配置文件\n cp $ZSH/templates/zshrc.zsh-template ~/.zshrc\n\n```\n此时zsh会报找不到env grep 之类的命令\n修改`zsh`的配置文件 `.zshrc` 把第一行修改为下面的\n```bash\n# If you come from bash you might have to change your $PATH.\n export PATH=/bin:$HOME/bin:/usr/local/bin:$PATH\n``` \nok 打开cmd或者 cywin的终端 输入 `zsh` \n\n会有挺多bug的，比如有些字符不能显示，\n\n我使用的`gnzh`主题 这是光标会有点bug 比正常的光标后大概3个字符\n\n修改CMD字体  [http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html](http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html)\n\n我使用的是 [dejavu](https://dejavu-fonts.github.io/)\n\n在CMD输入 chcp 437 然后就多出几个可选择的字体了\n\n## 修改HOME目录\n此时zsh的用户根目录是在 `cywin安装目录/home/用户名`下的，修改到Windows的用户目录下去\n\n在windows的环境变量设置里面新建一条记录\n```\nHOME=windows的用户目录\n```\n并把原来用户目录下的文件都copy到新的用户目录下\n\n现在在cmd或者cywin的终端里面输入zsh. \n\n以后就win+R 输入zsh吧~\n\n## 安装 `apt-cyg` \n\ncywin里面类似于`apt-get`的软件包安装工具。立马装上\n\n```bash\nwget https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg -O apt-cyg\ninstall apt-cyg /bin\n```\n\n现在可以用`apt-cyg install vim`来在cywin上安装`vim`了~\n","slug":"windows-use-oh-my-zsh","published":1,"updated":"2017-04-23T02:30:02.875Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s48002964bf5fobusv6","content":"<p>开发有时候需要使用terminal,无奈家里电脑还是只能用Windows,但是感觉CMD真的很难用,就是是powershell也不太习惯</p>\n<p>公司电脑用deepin oh-my-zsh不能更舒服，就想到能不能在windows上也能装上oh-my-zsh</p>\n<p>于是开始一番baidu+google </p>\n<h2 id=\"安装cywin\"><a href=\"#安装cywin\" class=\"headerlink\" title=\"安装cywin\"></a>安装cywin</h2><p>先装上<a href=\"http://cywin.com\" target=\"_blank\" rel=\"external\">cywin</a> 网络太慢的话可以从迅雷下 <a href=\"http://www.cygwin.com/setup-x86.exe\" target=\"_blank\" rel=\"external\">32位</a> <a href=\"http://www.cygwin.com/setup-x86_64.exe\" target=\"_blank\" rel=\"external\">64位</a></p>\n<p>开始安装，选择从网络安装，太慢的话可以使用国内的源 <code>http://mirrors.ustc.edu.cn/cygwin/</code></p>\n<p><strong><em>记得安装zsh</em></strong></p>\n<h2 id=\"安装oh-my-zsh\"><a href=\"#安装oh-my-zsh\" class=\"headerlink\" title=\"安装oh-my-zsh\"></a>安装<code>oh-my-zsh</code></h2><p>不知道为什么直接使用<code>oh-my-zsh</code>提供的从网络安装总是git clone失败. 于是先手动把<code>oh-my-zsh</code>clone到 <code>$HOME</code> 目录下 <code>$HOME</code>在 <code>cywin的安装目录/home/用户名</code></p>\n<p><code>git clone https://github.com/robbyrussell/oh-my-zsh.git .oh-my-zsh</code> </p>\n<p>直接用<code>oh-my-zsh</code>提供的安装的文件是不能装上的,自己手动复制里面的命令一个个的在<code>cywin</code>的终端里执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 先设置oh-my-zsh 的目录</span></div><div class=\"line\"><span class=\"built_in\">export</span> ZSH=~/.oh-my-zsh</div><div class=\"line\"><span class=\"comment\"># 生成zsh的配置文件</span></div><div class=\"line\">cp <span class=\"variable\">$ZSH</span>/templates/zshrc.zsh-template ~/.zshrc</div></pre></td></tr></table></figure>\n<p>此时zsh会报找不到env grep 之类的命令<br>修改<code>zsh</code>的配置文件 <code>.zshrc</code> 把第一行修改为下面的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># If you come from bash you might have to change your $PATH.</span></div><div class=\"line\"> <span class=\"built_in\">export</span> PATH=/bin:<span class=\"variable\">$HOME</span>/bin:/usr/<span class=\"built_in\">local</span>/bin:<span class=\"variable\">$PATH</span></div><div class=\"line\">``` </div><div class=\"line\">ok 打开cmd或者 cywin的终端 输入 `zsh` </div><div class=\"line\"></div><div class=\"line\">会有挺多bug的，比如有些字符不能显示，</div><div class=\"line\"></div><div class=\"line\">我使用的`gnzh`主题 这是光标会有点bug 比正常的光标后大概3个字符</div><div class=\"line\"></div><div class=\"line\">修改CMD字体  [http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html](http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html)</div><div class=\"line\"></div><div class=\"line\">我使用的是 [dejavu](https://dejavu-fonts.github.io/)</div><div class=\"line\"></div><div class=\"line\">在CMD输入 chcp 437 然后就多出几个可选择的字体了</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 修改HOME目录</span></div><div class=\"line\">此时zsh的用户根目录是在 `cywin安装目录/home/用户名`下的，修改到Windows的用户目录下去</div><div class=\"line\"></div><div class=\"line\">在windows的环境变量设置里面新建一条记录</div></pre></td></tr></table></figure></p>\n<p>HOME=windows的用户目录<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">并把原来用户目录下的文件都copy到新的用户目录下</div><div class=\"line\"></div><div class=\"line\">现在在cmd或者cywin的终端里面输入zsh. </div><div class=\"line\"></div><div class=\"line\">以后就win+R 输入zsh吧~</div><div class=\"line\"></div><div class=\"line\">## 安装 `apt-cyg` </div><div class=\"line\"></div><div class=\"line\">cywin里面类似于`apt-get`的软件包安装工具。立马装上</div><div class=\"line\"></div><div class=\"line\">```bash</div><div class=\"line\">wget https:<span class=\"comment\">//raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg -O apt-cyg</span></div><div class=\"line\">install apt-cyg /bin</div></pre></td></tr></table></figure></p>\n<p>现在可以用<code>apt-cyg install vim</code>来在cywin上安装<code>vim</code>了~</p>\n","excerpt":"","more":"<p>开发有时候需要使用terminal,无奈家里电脑还是只能用Windows,但是感觉CMD真的很难用,就是是powershell也不太习惯</p>\n<p>公司电脑用deepin oh-my-zsh不能更舒服，就想到能不能在windows上也能装上oh-my-zsh</p>\n<p>于是开始一番baidu+google </p>\n<h2 id=\"安装cywin\"><a href=\"#安装cywin\" class=\"headerlink\" title=\"安装cywin\"></a>安装cywin</h2><p>先装上<a href=\"http://cywin.com\">cywin</a> 网络太慢的话可以从迅雷下 <a href=\"http://www.cygwin.com/setup-x86.exe\">32位</a> <a href=\"http://www.cygwin.com/setup-x86_64.exe\">64位</a></p>\n<p>开始安装，选择从网络安装，太慢的话可以使用国内的源 <code>http://mirrors.ustc.edu.cn/cygwin/</code></p>\n<p><strong><em>记得安装zsh</em></strong></p>\n<h2 id=\"安装oh-my-zsh\"><a href=\"#安装oh-my-zsh\" class=\"headerlink\" title=\"安装oh-my-zsh\"></a>安装<code>oh-my-zsh</code></h2><p>不知道为什么直接使用<code>oh-my-zsh</code>提供的从网络安装总是git clone失败. 于是先手动把<code>oh-my-zsh</code>clone到 <code>$HOME</code> 目录下 <code>$HOME</code>在 <code>cywin的安装目录/home/用户名</code></p>\n<p><code>git clone https://github.com/robbyrussell/oh-my-zsh.git .oh-my-zsh</code> </p>\n<p>直接用<code>oh-my-zsh</code>提供的安装的文件是不能装上的,自己手动复制里面的命令一个个的在<code>cywin</code>的终端里执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 先设置oh-my-zsh 的目录</span></div><div class=\"line\"><span class=\"built_in\">export</span> ZSH=~/.oh-my-zsh</div><div class=\"line\"><span class=\"comment\"># 生成zsh的配置文件</span></div><div class=\"line\">cp <span class=\"variable\">$ZSH</span>/templates/zshrc.zsh-template ~/.zshrc</div></pre></td></tr></table></figure>\n<p>此时zsh会报找不到env grep 之类的命令<br>修改<code>zsh</code>的配置文件 <code>.zshrc</code> 把第一行修改为下面的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># If you come from bash you might have to change your $PATH.</span></div><div class=\"line\"> <span class=\"built_in\">export</span> PATH=/bin:<span class=\"variable\">$HOME</span>/bin:/usr/<span class=\"built_in\">local</span>/bin:<span class=\"variable\">$PATH</span></div><div class=\"line\">``` </div><div class=\"line\">ok 打开cmd或者 cywin的终端 输入 `zsh` </div><div class=\"line\"></div><div class=\"line\">会有挺多bug的，比如有些字符不能显示，</div><div class=\"line\"></div><div class=\"line\">我使用的`gnzh`主题 这是光标会有点bug 比正常的光标后大概3个字符</div><div class=\"line\"></div><div class=\"line\">修改CMD字体  [http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html](http://jingyan.baidu.com/article/3a2f7c2e61ec5d26afd611c8.html)</div><div class=\"line\"></div><div class=\"line\">我使用的是 [dejavu](https://dejavu-fonts.github.io/)</div><div class=\"line\"></div><div class=\"line\">在CMD输入 chcp 437 然后就多出几个可选择的字体了</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 修改HOME目录</span></div><div class=\"line\">此时zsh的用户根目录是在 `cywin安装目录/home/用户名`下的，修改到Windows的用户目录下去</div><div class=\"line\"></div><div class=\"line\">在windows的环境变量设置里面新建一条记录</div></pre></td></tr></table></figure></p>\n<p>HOME=windows的用户目录<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">并把原来用户目录下的文件都copy到新的用户目录下</div><div class=\"line\"></div><div class=\"line\">现在在cmd或者cywin的终端里面输入zsh. </div><div class=\"line\"></div><div class=\"line\">以后就win+R 输入zsh吧~</div><div class=\"line\"></div><div class=\"line\">## 安装 `apt-cyg` </div><div class=\"line\"></div><div class=\"line\">cywin里面类似于`apt-get`的软件包安装工具。立马装上</div><div class=\"line\"></div><div class=\"line\">```bash</div><div class=\"line\">wget https:<span class=\"comment\">//raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg -O apt-cyg</span></div><div class=\"line\">install apt-cyg /bin</div></pre></td></tr></table></figure></p>\n<p>现在可以用<code>apt-cyg install vim</code>来在cywin上安装<code>vim</code>了~</p>\n"},{"title":"基于spring的类扫描器","date":"2017-05-18T11:28:29.000Z","keywords":"spring","_content":"有时候想要扫描某一个包下的类，spring提供一个一扫描的类，\n`org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider`\n\n这个类的`findCandidateComponents`就是扫描的方法。通过自己继承这个类，再提供类的过滤条件。就可以了\n\n还可以继承它的子类`org.springframework.context.annotation.ClassPathBeanDefinitionScanner`\n\n需要两个过滤设置。因为扫描的时候会过滤两次\n第一次是`addIncludeFilter` 添加的条件\n第二次是调用`isCandidateComponent(AnnotatedBeanDefinition)`方法\n\n```java\n/**\n * Entity的扫描类，提供entity的包\n * 扫描包下 {@link Entity}或{@link Table} 标注的类\n * Created by xyz327 on 17-5-15.\n */\npublic class ClassPathCacheEntityScanner extends ClassPathScanningCandidateComponentProvider {\n    private Logger logger = LoggerFactory.getLogger(getClass());\n\n    ClassPathCacheEntityScanner(BeanDefinitionRegistry registry) {\n        super(false);//不使用默认的过滤器\n        //添加自己的过滤器\n         addIncludeFilter(new AnnotationTypeFilter(Entity.class));\n         addIncludeFilter(new AnnotationTypeFilter(Table.class));\n    }\n\n    public Set<Class> doScan(String... basePackages) throws ClassNotFoundException {\n        Assert.notEmpty(basePackages, \"At least one base package must be specified\");\n        Set<Class> entitySet = new HashSet<>();\n\n        for (String basePackage : basePackages) {\n            Set<BeanDefinition> candidates = findCandidateComponents(basePackage);\n\n            for (BeanDefinition candidate : candidates) {\n                Class entityClass = ClassUtils.forName(candidate.getBeanClassName(), null);\n                entitySet.add(entityClass);\n            }\n        }\n        return entitySet;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected boolean isCandidateComponent(AnnotatedBeanDefinition beanDefinition) {\n        return beanDefinition.getMetadata().isConcrete() //是否为具体的类 (非抽象和接口)\n            && (beanDefinition.getMetadata().hasAnnotation(Entity.class.getName()) //需要标记 @Entity\n            || beanDefinition.getMetadata().hasAnnotation(Table.class.getName())); // 或者标记 @Table\n    }\n\n}\n```\n","source":"_posts/基于spring的类扫描器.md","raw":"---\ntitle: 基于spring的类扫描器\ndate: 2017-05-18 19:28:29\ntags:\ncategories: [spring ]\nkeywords: spring\n---\n有时候想要扫描某一个包下的类，spring提供一个一扫描的类，\n`org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider`\n\n这个类的`findCandidateComponents`就是扫描的方法。通过自己继承这个类，再提供类的过滤条件。就可以了\n\n还可以继承它的子类`org.springframework.context.annotation.ClassPathBeanDefinitionScanner`\n\n需要两个过滤设置。因为扫描的时候会过滤两次\n第一次是`addIncludeFilter` 添加的条件\n第二次是调用`isCandidateComponent(AnnotatedBeanDefinition)`方法\n\n```java\n/**\n * Entity的扫描类，提供entity的包\n * 扫描包下 {@link Entity}或{@link Table} 标注的类\n * Created by xyz327 on 17-5-15.\n */\npublic class ClassPathCacheEntityScanner extends ClassPathScanningCandidateComponentProvider {\n    private Logger logger = LoggerFactory.getLogger(getClass());\n\n    ClassPathCacheEntityScanner(BeanDefinitionRegistry registry) {\n        super(false);//不使用默认的过滤器\n        //添加自己的过滤器\n         addIncludeFilter(new AnnotationTypeFilter(Entity.class));\n         addIncludeFilter(new AnnotationTypeFilter(Table.class));\n    }\n\n    public Set<Class> doScan(String... basePackages) throws ClassNotFoundException {\n        Assert.notEmpty(basePackages, \"At least one base package must be specified\");\n        Set<Class> entitySet = new HashSet<>();\n\n        for (String basePackage : basePackages) {\n            Set<BeanDefinition> candidates = findCandidateComponents(basePackage);\n\n            for (BeanDefinition candidate : candidates) {\n                Class entityClass = ClassUtils.forName(candidate.getBeanClassName(), null);\n                entitySet.add(entityClass);\n            }\n        }\n        return entitySet;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected boolean isCandidateComponent(AnnotatedBeanDefinition beanDefinition) {\n        return beanDefinition.getMetadata().isConcrete() //是否为具体的类 (非抽象和接口)\n            && (beanDefinition.getMetadata().hasAnnotation(Entity.class.getName()) //需要标记 @Entity\n            || beanDefinition.getMetadata().hasAnnotation(Table.class.getName())); // 或者标记 @Table\n    }\n\n}\n```\n","slug":"基于spring的类扫描器","published":1,"updated":"2017-11-02T13:49:15.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s49002d64bf43kcv24c","content":"<p>有时候想要扫描某一个包下的类，spring提供一个一扫描的类，<br><code>org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider</code></p>\n<p>这个类的<code>findCandidateComponents</code>就是扫描的方法。通过自己继承这个类，再提供类的过滤条件。就可以了</p>\n<p>还可以继承它的子类<code>org.springframework.context.annotation.ClassPathBeanDefinitionScanner</code></p>\n<p>需要两个过滤设置。因为扫描的时候会过滤两次<br>第一次是<code>addIncludeFilter</code> 添加的条件<br>第二次是调用<code>isCandidateComponent(AnnotatedBeanDefinition)</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Entity的扫描类，提供entity的包</div><div class=\"line\"> * 扫描包下 &#123;<span class=\"doctag\">@link</span> Entity&#125;或&#123;<span class=\"doctag\">@link</span> Table&#125; 标注的类</div><div class=\"line\"> * Created by xyz327 on 17-5-15.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassPathCacheEntityScanner</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassPathScanningCandidateComponentProvider</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(getClass());</div><div class=\"line\"></div><div class=\"line\">    ClassPathCacheEntityScanner(BeanDefinitionRegistry registry) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"keyword\">false</span>);<span class=\"comment\">//不使用默认的过滤器</span></div><div class=\"line\">        <span class=\"comment\">//添加自己的过滤器</span></div><div class=\"line\">         addIncludeFilter(<span class=\"keyword\">new</span> AnnotationTypeFilter(Entity.class));</div><div class=\"line\">         addIncludeFilter(<span class=\"keyword\">new</span> AnnotationTypeFilter(Table.class));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;Class&gt; <span class=\"title\">doScan</span><span class=\"params\">(String... basePackages)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</div><div class=\"line\">        Assert.notEmpty(basePackages, <span class=\"string\">\"At least one base package must be specified\"</span>);</div><div class=\"line\">        Set&lt;Class&gt; entitySet = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (String basePackage : basePackages) &#123;</div><div class=\"line\">            Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (BeanDefinition candidate : candidates) &#123;</div><div class=\"line\">                Class entityClass = ClassUtils.forName(candidate.getBeanClassName(), <span class=\"keyword\">null</span>);</div><div class=\"line\">                entitySet.add(entityClass);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> entitySet;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isCandidateComponent</span><span class=\"params\">(AnnotatedBeanDefinition beanDefinition)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> beanDefinition.getMetadata().isConcrete() <span class=\"comment\">//是否为具体的类 (非抽象和接口)</span></div><div class=\"line\">            &amp;&amp; (beanDefinition.getMetadata().hasAnnotation(Entity.class.getName()) <span class=\"comment\">//需要标记 @Entity</span></div><div class=\"line\">            || beanDefinition.getMetadata().hasAnnotation(Table.class.getName())); <span class=\"comment\">// 或者标记 @Table</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>有时候想要扫描某一个包下的类，spring提供一个一扫描的类，<br><code>org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider</code></p>\n<p>这个类的<code>findCandidateComponents</code>就是扫描的方法。通过自己继承这个类，再提供类的过滤条件。就可以了</p>\n<p>还可以继承它的子类<code>org.springframework.context.annotation.ClassPathBeanDefinitionScanner</code></p>\n<p>需要两个过滤设置。因为扫描的时候会过滤两次<br>第一次是<code>addIncludeFilter</code> 添加的条件<br>第二次是调用<code>isCandidateComponent(AnnotatedBeanDefinition)</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Entity的扫描类，提供entity的包</div><div class=\"line\"> * 扫描包下 &#123;<span class=\"doctag\">@link</span> Entity&#125;或&#123;<span class=\"doctag\">@link</span> Table&#125; 标注的类</div><div class=\"line\"> * Created by xyz327 on 17-5-15.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassPathCacheEntityScanner</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassPathScanningCandidateComponentProvider</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(getClass());</div><div class=\"line\"></div><div class=\"line\">    ClassPathCacheEntityScanner(BeanDefinitionRegistry registry) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"keyword\">false</span>);<span class=\"comment\">//不使用默认的过滤器</span></div><div class=\"line\">        <span class=\"comment\">//添加自己的过滤器</span></div><div class=\"line\">         addIncludeFilter(<span class=\"keyword\">new</span> AnnotationTypeFilter(Entity.class));</div><div class=\"line\">         addIncludeFilter(<span class=\"keyword\">new</span> AnnotationTypeFilter(Table.class));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;Class&gt; <span class=\"title\">doScan</span><span class=\"params\">(String... basePackages)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</div><div class=\"line\">        Assert.notEmpty(basePackages, <span class=\"string\">\"At least one base package must be specified\"</span>);</div><div class=\"line\">        Set&lt;Class&gt; entitySet = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (String basePackage : basePackages) &#123;</div><div class=\"line\">            Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (BeanDefinition candidate : candidates) &#123;</div><div class=\"line\">                Class entityClass = ClassUtils.forName(candidate.getBeanClassName(), <span class=\"keyword\">null</span>);</div><div class=\"line\">                entitySet.add(entityClass);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> entitySet;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isCandidateComponent</span><span class=\"params\">(AnnotatedBeanDefinition beanDefinition)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> beanDefinition.getMetadata().isConcrete() <span class=\"comment\">//是否为具体的类 (非抽象和接口)</span></div><div class=\"line\">            &amp;&amp; (beanDefinition.getMetadata().hasAnnotation(Entity.class.getName()) <span class=\"comment\">//需要标记 @Entity</span></div><div class=\"line\">            || beanDefinition.getMetadata().hasAnnotation(Table.class.getName())); <span class=\"comment\">// 或者标记 @Table</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"自定义lopback的Appender时设置枚举属性","date":"2017-05-22T13:46:34.000Z","keywords":["logback"],"_content":"\n在自定义`Appender`时，设置属性可以直接通过`logback.xml`进行设置,但是枚举对象，默认的处理方法不能处理,\n这事可以自己定义一个新的解析规则\n\n\n```java\npublic class DIYAppender extends OutputStreamAppender {\n    /**\n    * 使用 {@link ch.qos.logback.core.joran.action.NestedBasicPropertyIA} 解析\n    */\n    private String attr;\n    /**\n    * 使用 {@link ch.qos.logback.core.joran.action.NestedComplexPropertyIA} 解析\n    */\n    private User objAttr;\n    /**\n    * 使用 {@link enumObjAction} 解析\n    */\n    private enumObj enumAttr;\n    //省略 getter/setter方法\n}\npublic class User {\n\n}\npublic enum enumObj {\n    Instance;\n    private String name;\n    //省略 getter/setter\n}\npublic class enumObjAction extends ch.qos.logback.core.joran.action.Action {\n    @Override\n    public void begin(InterpretationContext ic, String name, Attributes attributes) throws ActionException {\n        ic.pushObject(enumObj.Instance);\n    }\n\n    @Override\n    public void end(InterpretationContext ic, String name) throws ActionException {\n\n    }\n}\n```\n可以在`logback.xml`的appender节点中直接进行设置,如果属性是对象可以提供`class`属性进行设置\n```xml\n    <newRule pattern=\"configuration/appender/enumAttr\" class=\"enumObjAction\"/>\n    <appender class=\"DIYAppender\">\n        <attr>value</attr><!--设置attr的值为value  --> \n        <objAttr class=\"package.User\">\n            <!--还可以给User进行设置属性值-->\n        </objAttr>\n        <enumAttr>\n            <name>nameValue</name>\n        </enumAttr>\n    </appender>\n```\n\n\n","source":"_posts/自定义lopback的Appender时设置枚举属性.md","raw":"---\ntitle: 自定义lopback的Appender时设置枚举属性\ndate: 2017-05-22 21:46:34\ntags: \ncategories: logback\nkeywords: [logback]\n---\n\n在自定义`Appender`时，设置属性可以直接通过`logback.xml`进行设置,但是枚举对象，默认的处理方法不能处理,\n这事可以自己定义一个新的解析规则\n\n\n```java\npublic class DIYAppender extends OutputStreamAppender {\n    /**\n    * 使用 {@link ch.qos.logback.core.joran.action.NestedBasicPropertyIA} 解析\n    */\n    private String attr;\n    /**\n    * 使用 {@link ch.qos.logback.core.joran.action.NestedComplexPropertyIA} 解析\n    */\n    private User objAttr;\n    /**\n    * 使用 {@link enumObjAction} 解析\n    */\n    private enumObj enumAttr;\n    //省略 getter/setter方法\n}\npublic class User {\n\n}\npublic enum enumObj {\n    Instance;\n    private String name;\n    //省略 getter/setter\n}\npublic class enumObjAction extends ch.qos.logback.core.joran.action.Action {\n    @Override\n    public void begin(InterpretationContext ic, String name, Attributes attributes) throws ActionException {\n        ic.pushObject(enumObj.Instance);\n    }\n\n    @Override\n    public void end(InterpretationContext ic, String name) throws ActionException {\n\n    }\n}\n```\n可以在`logback.xml`的appender节点中直接进行设置,如果属性是对象可以提供`class`属性进行设置\n```xml\n    <newRule pattern=\"configuration/appender/enumAttr\" class=\"enumObjAction\"/>\n    <appender class=\"DIYAppender\">\n        <attr>value</attr><!--设置attr的值为value  --> \n        <objAttr class=\"package.User\">\n            <!--还可以给User进行设置属性值-->\n        </objAttr>\n        <enumAttr>\n            <name>nameValue</name>\n        </enumAttr>\n    </appender>\n```\n\n\n","slug":"自定义lopback的Appender时设置枚举属性","published":1,"updated":"2017-05-22T14:58:42.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfot0s4a002f64bf26z2po3c","content":"<p>在自定义<code>Appender</code>时，设置属性可以直接通过<code>logback.xml</code>进行设置,但是枚举对象，默认的处理方法不能处理,<br>这事可以自己定义一个新的解析规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DIYAppender</span> <span class=\"keyword\">extends</span> <span class=\"title\">OutputStreamAppender</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">    * 使用 &#123;<span class=\"doctag\">@link</span> ch.qos.logback.core.joran.action.NestedBasicPropertyIA&#125; 解析</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"keyword\">private</span> String attr;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">    * 使用 &#123;<span class=\"doctag\">@link</span> ch.qos.logback.core.joran.action.NestedComplexPropertyIA&#125; 解析</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"keyword\">private</span> User objAttr;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">    * 使用 &#123;<span class=\"doctag\">@link</span> enumObjAction&#125; 解析</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"keyword\">private</span> enumObj enumAttr;</div><div class=\"line\">    <span class=\"comment\">//省略 getter/setter方法</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> enumObj &#123;</div><div class=\"line\">    Instance;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"comment\">//省略 getter/setter</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">enumObjAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ch</span>.<span class=\"title\">qos</span>.<span class=\"title\">logback</span>.<span class=\"title\">core</span>.<span class=\"title\">joran</span>.<span class=\"title\">action</span>.<span class=\"title\">Action</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">(InterpretationContext ic, String name, Attributes attributes)</span> <span class=\"keyword\">throws</span> ActionException </span>&#123;</div><div class=\"line\">        ic.pushObject(enumObj.Instance);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">end</span><span class=\"params\">(InterpretationContext ic, String name)</span> <span class=\"keyword\">throws</span> ActionException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以在<code>logback.xml</code>的appender节点中直接进行设置,如果属性是对象可以提供<code>class</code>属性进行设置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">newRule</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"configuration/appender/enumAttr\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"enumObjAction\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">\"DIYAppender\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span>&gt;</span>value<span class=\"tag\">&lt;/<span class=\"name\">attr</span>&gt;</span><span class=\"comment\">&lt;!--设置attr的值为value  --&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objAttr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"package.User\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--还可以给User进行设置属性值--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">objAttr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">enumAttr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>nameValue<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">enumAttr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>在自定义<code>Appender</code>时，设置属性可以直接通过<code>logback.xml</code>进行设置,但是枚举对象，默认的处理方法不能处理,<br>这事可以自己定义一个新的解析规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DIYAppender</span> <span class=\"keyword\">extends</span> <span class=\"title\">OutputStreamAppender</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">    * 使用 &#123;<span class=\"doctag\">@link</span> ch.qos.logback.core.joran.action.NestedBasicPropertyIA&#125; 解析</div><div class=\"line\">    */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String attr;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">    * 使用 &#123;<span class=\"doctag\">@link</span> ch.qos.logback.core.joran.action.NestedComplexPropertyIA&#125; 解析</div><div class=\"line\">    */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> User objAttr;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">    * 使用 &#123;<span class=\"doctag\">@link</span> enumObjAction&#125; 解析</div><div class=\"line\">    */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> enumObj enumAttr;</div><div class=\"line\">    <span class=\"comment\">//省略 getter/setter方法</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> enumObj &#123;</div><div class=\"line\">    Instance;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"comment\">//省略 getter/setter</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">enumObjAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ch</span>.<span class=\"title\">qos</span>.<span class=\"title\">logback</span>.<span class=\"title\">core</span>.<span class=\"title\">joran</span>.<span class=\"title\">action</span>.<span class=\"title\">Action</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">(InterpretationContext ic, String name, Attributes attributes)</span> <span class=\"keyword\">throws</span> ActionException </span>&#123;</div><div class=\"line\">        ic.pushObject(enumObj.Instance);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">end</span><span class=\"params\">(InterpretationContext ic, String name)</span> <span class=\"keyword\">throws</span> ActionException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以在<code>logback.xml</code>的appender节点中直接进行设置,如果属性是对象可以提供<code>class</code>属性进行设置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">newRule</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"configuration/appender/enumAttr\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"enumObjAction\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">class</span>=<span class=\"string\">\"DIYAppender\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span>&gt;</span>value<span class=\"tag\">&lt;/<span class=\"name\">attr</span>&gt;</span><span class=\"comment\">&lt;!--设置attr的值为value  --&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objAttr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"package.User\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--还可以给User进行设置属性值--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">objAttr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">enumAttr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>nameValue<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">enumAttr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjfot0s2u000564bfdvjxnk2p","category_id":"cjfot0s31000864bf6ycnrpg1","_id":"cjfot0s3a000j64bfmgdpusl2"},{"post_id":"cjfot0s39000i64bf12vmdsko","category_id":"cjfot0s31000864bf6ycnrpg1","_id":"cjfot0s3f000p64bfgu8ybs27"},{"post_id":"cjfot0s2y000764bftp4b63iy","category_id":"cjfot0s37000g64bfvkal5abz","_id":"cjfot0s3i000u64bf8mum730u"},{"post_id":"cjfot0s3a000k64bfkauy5512","category_id":"cjfot0s31000864bf6ycnrpg1","_id":"cjfot0s3j000w64bfd4jls5ae"},{"post_id":"cjfot0s3d000n64bfl7fxpruz","category_id":"cjfot0s31000864bf6ycnrpg1","_id":"cjfot0s3k000y64bfhed8p6d4"},{"post_id":"cjfot0s34000b64bflhb8zltg","category_id":"cjfot0s31000864bf6ycnrpg1","_id":"cjfot0s3l001164bfpf949zfb"},{"post_id":"cjfot0s3f000q64bfpkf2tdn1","category_id":"cjfot0s31000864bf6ycnrpg1","_id":"cjfot0s3m001364bfarfs62vu"},{"post_id":"cjfot0s3i000v64bfuhnd3x0r","category_id":"cjfot0s31000864bf6ycnrpg1","_id":"cjfot0s3o001664bftma5zubn"},{"post_id":"cjfot0s35000d64bfpmfh3wwq","category_id":"cjfot0s3h000s64bfpakm0hgq","_id":"cjfot0s3p001964bfixuhdn1g"},{"post_id":"cjfot0s3j000x64bfb2vg73f1","category_id":"cjfot0s31000864bf6ycnrpg1","_id":"cjfot0s3r001e64bfvjb5569l"},{"post_id":"cjfot0s3l001064bfucyv4res","category_id":"cjfot0s31000864bf6ycnrpg1","_id":"cjfot0s3s001h64bf221kjp8x"},{"post_id":"cjfot0s3m001264bfx48s9o3i","category_id":"cjfot0s31000864bf6ycnrpg1","_id":"cjfot0s3u001l64bf13v6t1eg"},{"post_id":"cjfot0s3o001864bfnwqr7qgc","category_id":"cjfot0s3q001d64bfs5cpuq8p","_id":"cjfot0s3x001r64bfz5sawpxo"},{"post_id":"cjfot0s3p001b64bfnz8487pg","category_id":"cjfot0s3v001n64bfo9n2gzpz","_id":"cjfot0s43001y64bfmwldy3fz"},{"post_id":"cjfot0s3r001g64bf4fc32g8d","category_id":"cjfot0s40001u64bf2r4w1g31","_id":"cjfot0s46002564bfnh4dd1ir"},{"post_id":"cjfot0s3s001j64bf7egltv4i","category_id":"cjfot0s40001u64bf2r4w1g31","_id":"cjfot0s48002b64bf278v5cp2"},{"post_id":"cjfot0s3u001m64bfugzrfyk1","category_id":"cjfot0s46002664bf7y1cb29k","_id":"cjfot0s4b002h64bfv9ksd38t"},{"post_id":"cjfot0s3v001p64bfa7rkltg8","category_id":"cjfot0s49002c64bffu54jjj9","_id":"cjfot0s4d002l64bfyxlofaxg"},{"post_id":"cjfot0s3x001s64bfv8i631fj","category_id":"cjfot0s4c002i64bf2iewzsor","_id":"cjfot0s4e002p64bf5hzmryxr"},{"post_id":"cjfot0s42001x64bfeiqpseag","category_id":"cjfot0s4d002m64bf53vimrmw","_id":"cjfot0s4g002t64bfeey5akqv"},{"post_id":"cjfot0s43002164bf80bb44nh","category_id":"cjfot0s4d002m64bf53vimrmw","_id":"cjfot0s4h002x64bfvw320ubx"},{"post_id":"cjfot0s45002364bf6now22n0","category_id":"cjfot0s4g002u64bf5mth1gya","_id":"cjfot0s4i003164bf4ymer9vg"},{"post_id":"cjfot0s46002764bfebnxwoib","category_id":"cjfot0s4h002y64bf2c6g1bn0","_id":"cjfot0s4j003564bf648npnch"},{"post_id":"cjfot0s48002964bf5fobusv6","category_id":"cjfot0s4i003264bfnfjfn9lb","_id":"cjfot0s4l003964bf021b5jyx"},{"post_id":"cjfot0s49002d64bf43kcv24c","category_id":"cjfot0s4g002u64bf5mth1gya","_id":"cjfot0s4m003d64bfn9xj4bdo"},{"post_id":"cjfot0s4a002f64bf26z2po3c","category_id":"cjfot0s4l003a64bfe30dto3k","_id":"cjfot0s4n003g64bf11ufdqm4"}],"PostTag":[{"post_id":"cjfot0s2u000564bfdvjxnk2p","tag_id":"cjfot0s33000964bf44637obb","_id":"cjfot0s3f000o64bf7i7euemn"},{"post_id":"cjfot0s2u000564bfdvjxnk2p","tag_id":"cjfot0s38000h64bfs3r8tmdh","_id":"cjfot0s3g000r64bfs8rdsrij"},{"post_id":"cjfot0s2y000764bftp4b63iy","tag_id":"cjfot0s3c000m64bf6xwdnxkz","_id":"cjfot0s3o001764bf4df1zlt7"},{"post_id":"cjfot0s2y000764bftp4b63iy","tag_id":"cjfot0s3h000t64bfbqz79g8y","_id":"cjfot0s3p001a64bfdqi74b58"},{"post_id":"cjfot0s2y000764bftp4b63iy","tag_id":"cjfot0s3k000z64bfwjub3frz","_id":"cjfot0s3r001f64bfwxmbwvd1"},{"post_id":"cjfot0s34000b64bflhb8zltg","tag_id":"cjfot0s3n001564bfff8bi56v","_id":"cjfot0s3s001i64bf69hn1x34"},{"post_id":"cjfot0s39000i64bf12vmdsko","tag_id":"cjfot0s3n001564bfff8bi56v","_id":"cjfot0s3v001o64bfsaaer8qo"},{"post_id":"cjfot0s3a000k64bfkauy5512","tag_id":"cjfot0s3n001564bfff8bi56v","_id":"cjfot0s3z001t64bfvdmea8qk"},{"post_id":"cjfot0s3d000n64bfl7fxpruz","tag_id":"cjfot0s3n001564bfff8bi56v","_id":"cjfot0s43001z64bftdaa1f8j"},{"post_id":"cjfot0s3f000q64bfpkf2tdn1","tag_id":"cjfot0s3n001564bfff8bi56v","_id":"cjfot0s45002464bfzvvueqi5"},{"post_id":"cjfot0s3i000v64bfuhnd3x0r","tag_id":"cjfot0s3n001564bfff8bi56v","_id":"cjfot0s48002a64bfme6o2zap"},{"post_id":"cjfot0s3j000x64bfb2vg73f1","tag_id":"cjfot0s3n001564bfff8bi56v","_id":"cjfot0s4b002g64bf0k8bk915"},{"post_id":"cjfot0s3l001064bfucyv4res","tag_id":"cjfot0s3n001564bfff8bi56v","_id":"cjfot0s4d002k64bf0wehmkqa"},{"post_id":"cjfot0s3m001264bfx48s9o3i","tag_id":"cjfot0s3n001564bfff8bi56v","_id":"cjfot0s4e002o64bftahvzgfp"},{"post_id":"cjfot0s3o001864bfnwqr7qgc","tag_id":"cjfot0s4e002n64bftgfowgp7","_id":"cjfot0s4f002s64bfd6oc5o05"},{"post_id":"cjfot0s3p001b64bfnz8487pg","tag_id":"cjfot0s4f002r64bf78t61xud","_id":"cjfot0s4g002w64bfc6dzz2c0"},{"post_id":"cjfot0s3r001g64bf4fc32g8d","tag_id":"cjfot0s4g002v64bf86z5daho","_id":"cjfot0s4i003064bfjkvs8wz1"},{"post_id":"cjfot0s3s001j64bf7egltv4i","tag_id":"cjfot0s4g002v64bf86z5daho","_id":"cjfot0s4j003464bfsopl4sbh"},{"post_id":"cjfot0s3u001m64bfugzrfyk1","tag_id":"cjfot0s4j003364bfz8fgz441","_id":"cjfot0s4k003864bfeb65wkg1"},{"post_id":"cjfot0s3v001p64bfa7rkltg8","tag_id":"cjfot0s4k003764bfqaoxhn51","_id":"cjfot0s4m003c64bf2g0z28j0"},{"post_id":"cjfot0s3x001s64bfv8i631fj","tag_id":"cjfot0s4l003b64bfl7px4r6s","_id":"cjfot0s4m003f64bf0ofnl6xc"},{"post_id":"cjfot0s40001v64bfjo398c3g","tag_id":"cjfot0s4m003e64bfyj2h820a","_id":"cjfot0s4n003i64bf22f040af"},{"post_id":"cjfot0s42001x64bfeiqpseag","tag_id":"cjfot0s4n003h64bf9crwvjh1","_id":"cjfot0s4o003k64bfnb0651ub"},{"post_id":"cjfot0s43002164bf80bb44nh","tag_id":"cjfot0s4n003h64bf9crwvjh1","_id":"cjfot0s4p003m64bf31psn2oo"},{"post_id":"cjfot0s46002764bfebnxwoib","tag_id":"cjfot0s4o003l64bfqs2uuaim","_id":"cjfot0s4p003o64bflas4kl0r"},{"post_id":"cjfot0s46002764bfebnxwoib","tag_id":"cjfot0s4p003n64bfe54rf8a7","_id":"cjfot0s4p003p64bfjrj46xlo"}],"Tag":[{"name":"jdk","_id":"cjfot0s33000964bf44637obb"},{"name":"java","_id":"cjfot0s38000h64bfs3r8tmdh"},{"name":"hexo","_id":"cjfot0s3c000m64bf6xwdnxkz"},{"name":"theme","_id":"cjfot0s3h000t64bfbqz79g8y"},{"name":"NexT","_id":"cjfot0s3k000z64bfwjub3frz"},{"name":"effective java","_id":"cjfot0s3n001564bfff8bi56v"},{"name":"git","_id":"cjfot0s4e002n64bftgfowgp7"},{"name":"test karma jamine","_id":"cjfot0s4f002r64bf78t61xud"},{"name":"loopback","_id":"cjfot0s4g002v64bf86z5daho"},{"name":"maven","_id":"cjfot0s4j003364bfz8fgz441"},{"name":"springboot","_id":"cjfot0s4k003764bfqaoxhn51"},{"name":"mysql","_id":"cjfot0s4l003b64bfl7px4r6s"},{"name":"spring-boot","_id":"cjfot0s4m003e64bfyj2h820a"},{"name":"springmvc","_id":"cjfot0s4n003h64bf9crwvjh1"},{"name":"spring cloud","_id":"cjfot0s4o003l64bfqs2uuaim"},{"name":"zuul","_id":"cjfot0s4p003n64bfe54rf8a7"}]}}